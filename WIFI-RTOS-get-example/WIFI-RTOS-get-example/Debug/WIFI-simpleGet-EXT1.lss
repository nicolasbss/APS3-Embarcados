
WIFI-simpleGet-EXT1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000dc54  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0040dc54  0040dc54  0001dc54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009d0  20400000  0040dc5c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          0000c1b4  204009d0  0040e62c  000209d0  2**2
                  ALLOC
  4 .stack        00002004  2040cb84  0041a7e0  000209d0  2**0
                  ALLOC
  5 .heap         00000200  2040eb88  0041c7e4  000209d0  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000209d0  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000209fe  2**0
                  CONTENTS, READONLY
  8 .debug_info   0003918f  00000000  00000000  00020a57  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00007263  00000000  00000000  00059be6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001688  00000000  00000000  00060e49  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00028eac  00000000  00000000  000624d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001def0  00000000  00000000  0008b37d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0009b637  00000000  00000000  000a926d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00013a41  00000000  00000000  001448a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000019d8  00000000  00000000  001582e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00004f30  00000000  00000000  00159cc0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	88 eb 40 20 f1 57 40 00 ef 57 40 00 ef 57 40 00     ..@ .W@..W@..W@.
  400010:	ef 57 40 00 ef 57 40 00 ef 57 40 00 00 00 00 00     .W@..W@..W@.....
	...
  40002c:	81 06 40 00 ef 57 40 00 00 00 00 00 21 07 40 00     ..@..W@.....!.@.
  40003c:	89 07 40 00 ef 57 40 00 ef 57 40 00 15 60 40 00     ..@..W@..W@..`@.
  40004c:	ef 57 40 00 ef 57 40 00 ef 57 40 00 ef 57 40 00     .W@..W@..W@..W@.
  40005c:	ef 57 40 00 ef 57 40 00 00 00 00 00 09 53 40 00     .W@..W@......S@.
  40006c:	1d 53 40 00 31 53 40 00 ef 57 40 00 ef 57 40 00     .S@.1S@..W@..W@.
  40007c:	ef 57 40 00 45 53 40 00 59 53 40 00 ef 57 40 00     .W@.ES@.YS@..W@.
  40008c:	ef 57 40 00 ef 57 40 00 ef 57 40 00 ef 57 40 00     .W@..W@..W@..W@.
  40009c:	ef 57 40 00 ef 57 40 00 ef 57 40 00 ef 57 40 00     .W@..W@..W@..W@.
  4000ac:	ef 57 40 00 ef 57 40 00 f9 03 40 00 ef 57 40 00     .W@..W@...@..W@.
  4000bc:	ef 57 40 00 ef 57 40 00 ef 57 40 00 ef 57 40 00     .W@..W@..W@..W@.
  4000cc:	ef 57 40 00 00 00 00 00 ef 57 40 00 00 00 00 00     .W@......W@.....
  4000dc:	ef 57 40 00 0d 04 40 00 ef 57 40 00 ef 57 40 00     .W@...@..W@..W@.
  4000ec:	ef 57 40 00 ef 57 40 00 ef 57 40 00 ef 57 40 00     .W@..W@..W@..W@.
  4000fc:	ef 57 40 00 ef 57 40 00 ef 57 40 00 ef 57 40 00     .W@..W@..W@..W@.
  40010c:	ef 57 40 00 ef 57 40 00 00 00 00 00 00 00 00 00     .W@..W@.........
  40011c:	00 00 00 00 ef 57 40 00 ef 57 40 00 ef 57 40 00     .....W@..W@..W@.
  40012c:	ef 57 40 00 ef 57 40 00 00 00 00 00 ef 57 40 00     .W@..W@......W@.
  40013c:	ef 57 40 00                                         .W@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	204009d0 	.word	0x204009d0
  40015c:	00000000 	.word	0x00000000
  400160:	0040dc5c 	.word	0x0040dc5c

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	0040dc5c 	.word	0x0040dc5c
  4001a0:	204009d4 	.word	0x204009d4
  4001a4:	0040dc5c 	.word	0x0040dc5c
  4001a8:	00000000 	.word	0x00000000

004001ac <afec_process_callback>:
 * \brief Call the callback function if the corresponding interrupt is asserted
 *
 * \param afec  Base address of the AFEC.
 */
static void afec_process_callback(Afec *const afec)
{
  4001ac:	b570      	push	{r4, r5, r6, lr}
  4001ae:	b082      	sub	sp, #8
 *
 * \return The interrupt status value.
 */
static inline uint32_t afec_get_interrupt_status(Afec *const afec)
{
	return afec->AFEC_ISR;
  4001b0:	6b02      	ldr	r2, [r0, #48]	; 0x30
 *
 * \return The interrupt mask value.
 */
static inline uint32_t afec_get_interrupt_mask(Afec *const afec)
{
	return afec->AFEC_IMR;
  4001b2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	volatile uint32_t status;
	uint32_t cnt, inst_num;

	status = afec_get_interrupt_status(afec) & afec_get_interrupt_mask(afec);
  4001b4:	4013      	ands	r3, r2
  4001b6:	9301      	str	r3, [sp, #4]
	inst_num = afec_find_inst_num(afec);

	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  4001b8:	2400      	movs	r4, #0
	if (afec_callback_pointer[inst_num][source]) {
  4001ba:	4e1c      	ldr	r6, [pc, #112]	; (40022c <afec_process_callback+0x80>)
  4001bc:	4d1c      	ldr	r5, [pc, #112]	; (400230 <afec_process_callback+0x84>)
  4001be:	42a8      	cmp	r0, r5
  4001c0:	bf14      	ite	ne
  4001c2:	2000      	movne	r0, #0
  4001c4:	2001      	moveq	r0, #1
  4001c6:	0105      	lsls	r5, r0, #4
  4001c8:	e00b      	b.n	4001e2 <afec_process_callback+0x36>
		#elif defined __SAM4E8E__  || defined __SAM4E16E__ || SAMV71 || SAMV70 || SAMS70 || SAME70
			if (status & (1 << cnt)) {
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		#endif
		} else if (cnt < AFEC_INTERRUPT_TEMP_CHANGE) {
  4001ca:	2c0e      	cmp	r4, #14
  4001cc:	d81e      	bhi.n	40020c <afec_process_callback+0x60>
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1))) {
  4001ce:	9a01      	ldr	r2, [sp, #4]
  4001d0:	f104 010c 	add.w	r1, r4, #12
  4001d4:	2301      	movs	r3, #1
  4001d6:	408b      	lsls	r3, r1
  4001d8:	4213      	tst	r3, r2
  4001da:	d110      	bne.n	4001fe <afec_process_callback+0x52>
	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  4001dc:	3401      	adds	r4, #1
  4001de:	2c10      	cmp	r4, #16
  4001e0:	d022      	beq.n	400228 <afec_process_callback+0x7c>
		if (cnt < AFEC_INTERRUPT_DATA_READY) {
  4001e2:	2c0b      	cmp	r4, #11
  4001e4:	d8f1      	bhi.n	4001ca <afec_process_callback+0x1e>
			if (status & (1 << cnt)) {
  4001e6:	9a01      	ldr	r2, [sp, #4]
  4001e8:	2301      	movs	r3, #1
  4001ea:	40a3      	lsls	r3, r4
  4001ec:	4213      	tst	r3, r2
  4001ee:	d0f5      	beq.n	4001dc <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  4001f0:	192b      	adds	r3, r5, r4
  4001f2:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  4001f6:	2b00      	cmp	r3, #0
  4001f8:	d0f0      	beq.n	4001dc <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  4001fa:	4798      	blx	r3
  4001fc:	e7ee      	b.n	4001dc <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  4001fe:	192b      	adds	r3, r5, r4
  400200:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  400204:	2b00      	cmp	r3, #0
  400206:	d0e9      	beq.n	4001dc <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  400208:	4798      	blx	r3
  40020a:	e7e7      	b.n	4001dc <afec_process_callback+0x30>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		} else {
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1 + AFEC_INTERRUPT_GAP2))) {
  40020c:	9a01      	ldr	r2, [sp, #4]
  40020e:	f104 010f 	add.w	r1, r4, #15
  400212:	2301      	movs	r3, #1
  400214:	408b      	lsls	r3, r1
  400216:	4213      	tst	r3, r2
  400218:	d0e0      	beq.n	4001dc <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  40021a:	192b      	adds	r3, r5, r4
  40021c:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  400220:	2b00      	cmp	r3, #0
  400222:	d0db      	beq.n	4001dc <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  400224:	4798      	blx	r3
  400226:	e7d9      	b.n	4001dc <afec_process_callback+0x30>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		}
	}
}
  400228:	b002      	add	sp, #8
  40022a:	bd70      	pop	{r4, r5, r6, pc}
  40022c:	2040c9a0 	.word	0x2040c9a0
  400230:	40064000 	.word	0x40064000

00400234 <afec_ch_set_config>:
{
  400234:	b430      	push	{r4, r5}
	reg = afec->AFEC_DIFFR;
  400236:	6e04      	ldr	r4, [r0, #96]	; 0x60
	reg &= ~(0x1u << channel);
  400238:	2301      	movs	r3, #1
  40023a:	408b      	lsls	r3, r1
  40023c:	ea24 0403 	bic.w	r4, r4, r3
	reg |= (config->diff) ? (0x1u << channel) : 0;
  400240:	7815      	ldrb	r5, [r2, #0]
  400242:	2d00      	cmp	r5, #0
  400244:	bf08      	it	eq
  400246:	2300      	moveq	r3, #0
  400248:	4323      	orrs	r3, r4
	afec->AFEC_DIFFR = reg;
  40024a:	6603      	str	r3, [r0, #96]	; 0x60
	reg = afec->AFEC_CGR;
  40024c:	6d44      	ldr	r4, [r0, #84]	; 0x54
	reg &= ~(0x03u << (2 * channel));
  40024e:	004b      	lsls	r3, r1, #1
  400250:	2103      	movs	r1, #3
  400252:	4099      	lsls	r1, r3
  400254:	ea24 0401 	bic.w	r4, r4, r1
	reg |= (config->gain) << (2 * channel);
  400258:	7851      	ldrb	r1, [r2, #1]
  40025a:	4099      	lsls	r1, r3
  40025c:	4321      	orrs	r1, r4
	afec->AFEC_CGR = reg;
  40025e:	6541      	str	r1, [r0, #84]	; 0x54
}
  400260:	bc30      	pop	{r4, r5}
  400262:	4770      	bx	lr

00400264 <afec_get_config_defaults>:
	cfg->resolution = AFEC_12_BITS;
  400264:	2200      	movs	r2, #0
  400266:	6002      	str	r2, [r0, #0]
	cfg->mck = sysclk_get_cpu_hz();
  400268:	4b08      	ldr	r3, [pc, #32]	; (40028c <afec_get_config_defaults+0x28>)
  40026a:	6043      	str	r3, [r0, #4]
		cfg->afec_clock = 6000000UL;
  40026c:	4b08      	ldr	r3, [pc, #32]	; (400290 <afec_get_config_defaults+0x2c>)
  40026e:	6083      	str	r3, [r0, #8]
		cfg->startup_time = AFEC_STARTUP_TIME_4;
  400270:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  400274:	60c3      	str	r3, [r0, #12]
		cfg->tracktim = 2;
  400276:	2302      	movs	r3, #2
  400278:	7403      	strb	r3, [r0, #16]
		cfg->transfer = 1;
  40027a:	2301      	movs	r3, #1
  40027c:	7443      	strb	r3, [r0, #17]
		cfg->anach = true;
  40027e:	7483      	strb	r3, [r0, #18]
		cfg->useq = false;
  400280:	74c2      	strb	r2, [r0, #19]
		cfg->tag = true;
  400282:	7503      	strb	r3, [r0, #20]
		cfg->stm = true;
  400284:	7543      	strb	r3, [r0, #21]
		cfg->ibctl = 1;
  400286:	7583      	strb	r3, [r0, #22]
  400288:	4770      	bx	lr
  40028a:	bf00      	nop
  40028c:	11e1a300 	.word	0x11e1a300
  400290:	005b8d80 	.word	0x005b8d80

00400294 <afec_ch_get_config_defaults>:
	cfg->diff = false;
  400294:	2300      	movs	r3, #0
  400296:	7003      	strb	r3, [r0, #0]
   	cfg->gain = AFEC_GAINVALUE_1;
  400298:	2301      	movs	r3, #1
  40029a:	7043      	strb	r3, [r0, #1]
  40029c:	4770      	bx	lr
	...

004002a0 <afec_init>:
	return afec->AFEC_ISR;
  4002a0:	6b02      	ldr	r2, [r0, #48]	; 0x30
	if ((afec_get_interrupt_status(afec) & AFEC_ISR_DRDY) == AFEC_ISR_DRDY) {
  4002a2:	f012 7280 	ands.w	r2, r2, #16777216	; 0x1000000
  4002a6:	d001      	beq.n	4002ac <afec_init+0xc>
		return STATUS_ERR_BUSY;
  4002a8:	2019      	movs	r0, #25
  4002aa:	4770      	bx	lr
{
  4002ac:	b410      	push	{r4}
	afec->AFEC_CR = AFEC_CR_SWRST;
  4002ae:	2301      	movs	r3, #1
  4002b0:	6003      	str	r3, [r0, #0]
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  4002b2:	7ccb      	ldrb	r3, [r1, #19]
  4002b4:	2b00      	cmp	r3, #0
  4002b6:	bf18      	it	ne
  4002b8:	f04f 4200 	movne.w	r2, #2147483648	; 0x80000000
			AFEC_MR_PRESCAL((config->mck / config->afec_clock )- 1) |
  4002bc:	684b      	ldr	r3, [r1, #4]
  4002be:	688c      	ldr	r4, [r1, #8]
  4002c0:	fbb3 f3f4 	udiv	r3, r3, r4
  4002c4:	3b01      	subs	r3, #1
  4002c6:	021b      	lsls	r3, r3, #8
  4002c8:	b29b      	uxth	r3, r3
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  4002ca:	68cc      	ldr	r4, [r1, #12]
  4002cc:	f444 0400 	orr.w	r4, r4, #8388608	; 0x800000
  4002d0:	4323      	orrs	r3, r4
			AFEC_MR_TRACKTIM(config->tracktim) |
  4002d2:	7c0c      	ldrb	r4, [r1, #16]
  4002d4:	0624      	lsls	r4, r4, #24
  4002d6:	f004 6470 	and.w	r4, r4, #251658240	; 0xf000000
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  4002da:	4323      	orrs	r3, r4
			AFEC_MR_TRANSFER(config->transfer) |
  4002dc:	7c4c      	ldrb	r4, [r1, #17]
  4002de:	0724      	lsls	r4, r4, #28
  4002e0:	f004 5440 	and.w	r4, r4, #805306368	; 0x30000000
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  4002e4:	4323      	orrs	r3, r4
  4002e6:	4313      	orrs	r3, r2
	afec->AFEC_MR = reg;
  4002e8:	6043      	str	r3, [r0, #4]
	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  4002ea:	7d0b      	ldrb	r3, [r1, #20]
  4002ec:	2b00      	cmp	r3, #0
  4002ee:	bf14      	ite	ne
  4002f0:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
  4002f4:	2300      	moveq	r3, #0
  4002f6:	680a      	ldr	r2, [r1, #0]
  4002f8:	4313      	orrs	r3, r2
			(config->stm ? AFEC_EMR_STM : 0);
  4002fa:	7d4a      	ldrb	r2, [r1, #21]
  4002fc:	2a00      	cmp	r2, #0
  4002fe:	bf14      	ite	ne
  400300:	f04f 7200 	movne.w	r2, #33554432	; 0x2000000
  400304:	2200      	moveq	r2, #0
			(config->resolution) |
  400306:	4313      	orrs	r3, r2
	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  400308:	6083      	str	r3, [r0, #8]
	afec->AFEC_ACR = AFEC_ACR_IBCTL(config->ibctl) | AFEC_ACR_PGA0EN | AFEC_ACR_PGA1EN;
  40030a:	7d8b      	ldrb	r3, [r1, #22]
  40030c:	021b      	lsls	r3, r3, #8
  40030e:	f403 7340 	and.w	r3, r3, #768	; 0x300
  400312:	f043 030c 	orr.w	r3, r3, #12
  400316:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
	if(afec == AFEC0) {
  40031a:	4b0f      	ldr	r3, [pc, #60]	; (400358 <afec_init+0xb8>)
  40031c:	4298      	cmp	r0, r3
  40031e:	d006      	beq.n	40032e <afec_init+0x8e>
	if(afec == AFEC1) {
  400320:	4b0e      	ldr	r3, [pc, #56]	; (40035c <afec_init+0xbc>)
  400322:	4298      	cmp	r0, r3
  400324:	d00d      	beq.n	400342 <afec_init+0xa2>
	return STATUS_OK;
  400326:	2000      	movs	r0, #0
}
  400328:	f85d 4b04 	ldr.w	r4, [sp], #4
  40032c:	4770      	bx	lr
  40032e:	4b0c      	ldr	r3, [pc, #48]	; (400360 <afec_init+0xc0>)
  400330:	f103 0140 	add.w	r1, r3, #64	; 0x40
			afec_callback_pointer[0][i] = 0;
  400334:	2200      	movs	r2, #0
  400336:	f843 2f04 	str.w	r2, [r3, #4]!
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  40033a:	428b      	cmp	r3, r1
  40033c:	d1fb      	bne.n	400336 <afec_init+0x96>
	return STATUS_OK;
  40033e:	2000      	movs	r0, #0
  400340:	e7f2      	b.n	400328 <afec_init+0x88>
  400342:	4b08      	ldr	r3, [pc, #32]	; (400364 <afec_init+0xc4>)
  400344:	f103 0140 	add.w	r1, r3, #64	; 0x40
			afec_callback_pointer[1][i] = 0;
  400348:	2200      	movs	r2, #0
  40034a:	f843 2b04 	str.w	r2, [r3], #4
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  40034e:	428b      	cmp	r3, r1
  400350:	d1fb      	bne.n	40034a <afec_init+0xaa>
	return STATUS_OK;
  400352:	2000      	movs	r0, #0
  400354:	e7e8      	b.n	400328 <afec_init+0x88>
  400356:	bf00      	nop
  400358:	4003c000 	.word	0x4003c000
  40035c:	40064000 	.word	0x40064000
  400360:	2040c99c 	.word	0x2040c99c
  400364:	2040c9e0 	.word	0x2040c9e0

00400368 <afec_enable_interrupt>:
	if (interrupt_source == AFEC_INTERRUPT_ALL) {
  400368:	4b0c      	ldr	r3, [pc, #48]	; (40039c <afec_enable_interrupt+0x34>)
  40036a:	4299      	cmp	r1, r3
  40036c:	d007      	beq.n	40037e <afec_enable_interrupt+0x16>
	if (interrupt_source < AFEC_INTERRUPT_DATA_READY) {
  40036e:	290b      	cmp	r1, #11
  400370:	d80b      	bhi.n	40038a <afec_enable_interrupt+0x22>
		if (interrupt_source == AFEC_INTERRUPT_EOC_11) {
  400372:	d006      	beq.n	400382 <afec_enable_interrupt+0x1a>
			afec->AFEC_IER = 1 << interrupt_source;
  400374:	2301      	movs	r3, #1
  400376:	fa03 f101 	lsl.w	r1, r3, r1
  40037a:	6241      	str	r1, [r0, #36]	; 0x24
  40037c:	4770      	bx	lr
		afec->AFEC_IER = AFEC_INTERRUPT_ALL;
  40037e:	6243      	str	r3, [r0, #36]	; 0x24
		return;
  400380:	4770      	bx	lr
			afec->AFEC_IER = 1 << AFEC_TEMP_INT_SOURCE_NUM;
  400382:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400386:	6243      	str	r3, [r0, #36]	; 0x24
  400388:	4770      	bx	lr
	} else if (interrupt_source < AFEC_INTERRUPT_TEMP_CHANGE) {
  40038a:	290e      	cmp	r1, #14
		afec->AFEC_IER = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1);
  40038c:	bf94      	ite	ls
  40038e:	310c      	addls	r1, #12
				+ AFEC_INTERRUPT_GAP2);
  400390:	310f      	addhi	r1, #15
		afec->AFEC_IER = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1
  400392:	2301      	movs	r3, #1
  400394:	fa03 f101 	lsl.w	r1, r3, r1
  400398:	6241      	str	r1, [r0, #36]	; 0x24
  40039a:	4770      	bx	lr
  40039c:	47000fff 	.word	0x47000fff

004003a0 <afec_set_callback>:
{
  4003a0:	b538      	push	{r3, r4, r5, lr}
	if (afec == AFEC1) {
  4003a2:	4c11      	ldr	r4, [pc, #68]	; (4003e8 <afec_set_callback+0x48>)
  4003a4:	42a0      	cmp	r0, r4
	afec_callback_pointer[i][source] = callback;
  4003a6:	bf0c      	ite	eq
  4003a8:	2410      	moveq	r4, #16
  4003aa:	2400      	movne	r4, #0
  4003ac:	440c      	add	r4, r1
  4003ae:	4d0f      	ldr	r5, [pc, #60]	; (4003ec <afec_set_callback+0x4c>)
  4003b0:	f845 2024 	str.w	r2, [r5, r4, lsl #2]
	if (!i) {
  4003b4:	d10a      	bne.n	4003cc <afec_set_callback+0x2c>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  4003b6:	4a0e      	ldr	r2, [pc, #56]	; (4003f0 <afec_set_callback+0x50>)
  4003b8:	f44f 7480 	mov.w	r4, #256	; 0x100
  4003bc:	f8c2 4184 	str.w	r4, [r2, #388]	; 0x184
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  4003c0:	015b      	lsls	r3, r3, #5
  4003c2:	b2db      	uxtb	r3, r3
  4003c4:	f882 3328 	strb.w	r3, [r2, #808]	; 0x328
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4003c8:	6054      	str	r4, [r2, #4]
  4003ca:	e009      	b.n	4003e0 <afec_set_callback+0x40>
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  4003cc:	4a08      	ldr	r2, [pc, #32]	; (4003f0 <afec_set_callback+0x50>)
  4003ce:	f04f 5400 	mov.w	r4, #536870912	; 0x20000000
  4003d2:	f8c2 4180 	str.w	r4, [r2, #384]	; 0x180
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  4003d6:	015b      	lsls	r3, r3, #5
  4003d8:	b2db      	uxtb	r3, r3
  4003da:	f882 331d 	strb.w	r3, [r2, #797]	; 0x31d
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4003de:	6014      	str	r4, [r2, #0]
	afec_enable_interrupt(afec, source);
  4003e0:	4b04      	ldr	r3, [pc, #16]	; (4003f4 <afec_set_callback+0x54>)
  4003e2:	4798      	blx	r3
  4003e4:	bd38      	pop	{r3, r4, r5, pc}
  4003e6:	bf00      	nop
  4003e8:	40064000 	.word	0x40064000
  4003ec:	2040c9a0 	.word	0x2040c9a0
  4003f0:	e000e100 	.word	0xe000e100
  4003f4:	00400369 	.word	0x00400369

004003f8 <AFEC0_Handler>:

/**
 * \brief Interrupt handler for AFEC0.
 */
void AFEC0_Handler(void)
{
  4003f8:	b508      	push	{r3, lr}
	afec_process_callback(AFEC0);
  4003fa:	4802      	ldr	r0, [pc, #8]	; (400404 <AFEC0_Handler+0xc>)
  4003fc:	4b02      	ldr	r3, [pc, #8]	; (400408 <AFEC0_Handler+0x10>)
  4003fe:	4798      	blx	r3
  400400:	bd08      	pop	{r3, pc}
  400402:	bf00      	nop
  400404:	4003c000 	.word	0x4003c000
  400408:	004001ad 	.word	0x004001ad

0040040c <AFEC1_Handler>:

/**
 * \brief Interrupt handler for AFEC1.
 */
void AFEC1_Handler(void)
{
  40040c:	b508      	push	{r3, lr}
	afec_process_callback(AFEC1);
  40040e:	4802      	ldr	r0, [pc, #8]	; (400418 <AFEC1_Handler+0xc>)
  400410:	4b02      	ldr	r3, [pc, #8]	; (40041c <AFEC1_Handler+0x10>)
  400412:	4798      	blx	r3
  400414:	bd08      	pop	{r3, pc}
  400416:	bf00      	nop
  400418:	40064000 	.word	0x40064000
  40041c:	004001ad 	.word	0x004001ad

00400420 <afec_enable>:
 * \brief Enable AFEC Module.
 *
 * \param afec  Base address of the AFEC
 */
void afec_enable(Afec *const afec)
{
  400420:	b500      	push	{lr}
  400422:	b083      	sub	sp, #12
	Assert(afec);
	uint32_t pid;

	pid = afec_find_pid(afec);
	/* Enable peripheral clock. */
	pmc_enable_periph_clk(pid);
  400424:	4b13      	ldr	r3, [pc, #76]	; (400474 <afec_enable+0x54>)
  400426:	4298      	cmp	r0, r3
  400428:	bf0c      	ite	eq
  40042a:	2028      	moveq	r0, #40	; 0x28
  40042c:	201d      	movne	r0, #29
  40042e:	4b12      	ldr	r3, [pc, #72]	; (400478 <afec_enable+0x58>)
  400430:	4798      	blx	r3
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
  400432:	4b12      	ldr	r3, [pc, #72]	; (40047c <afec_enable+0x5c>)
  400434:	789b      	ldrb	r3, [r3, #2]
  400436:	2bff      	cmp	r3, #255	; 0xff
  400438:	d01a      	beq.n	400470 <afec_enable+0x50>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  40043a:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  40043e:	fab3 f383 	clz	r3, r3
  400442:	095b      	lsrs	r3, r3, #5
  400444:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  400446:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  400448:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  40044c:	2200      	movs	r2, #0
  40044e:	4b0c      	ldr	r3, [pc, #48]	; (400480 <afec_enable+0x60>)
  400450:	701a      	strb	r2, [r3, #0]
	return flags;
  400452:	9901      	ldr	r1, [sp, #4]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
  400454:	4a09      	ldr	r2, [pc, #36]	; (40047c <afec_enable+0x5c>)
  400456:	7893      	ldrb	r3, [r2, #2]
  400458:	3301      	adds	r3, #1
  40045a:	7093      	strb	r3, [r2, #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  40045c:	b129      	cbz	r1, 40046a <afec_enable+0x4a>
		cpu_irq_enable();
  40045e:	2201      	movs	r2, #1
  400460:	4b07      	ldr	r3, [pc, #28]	; (400480 <afec_enable+0x60>)
  400462:	701a      	strb	r2, [r3, #0]
  400464:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400468:	b662      	cpsie	i
	sleepmgr_lock_mode(SLEEPMGR_SLEEP_WFI);
}
  40046a:	b003      	add	sp, #12
  40046c:	f85d fb04 	ldr.w	pc, [sp], #4
  400470:	e7fe      	b.n	400470 <afec_enable+0x50>
  400472:	bf00      	nop
  400474:	40064000 	.word	0x40064000
  400478:	00405511 	.word	0x00405511
  40047c:	2040c998 	.word	0x2040c998
  400480:	20400018 	.word	0x20400018

00400484 <rtc_get_time>:
 * \param pul_minute Current minute.
 * \param pul_second Current second.
 */
void rtc_get_time(Rtc *p_rtc, uint32_t *pul_hour, uint32_t *pul_minute,
		uint32_t *pul_second)
{
  400484:	b430      	push	{r4, r5}
	uint32_t ul_time;
	uint32_t ul_temp;

	/* Get the current RTC time (multiple reads are necessary to insure a stable value). */
	ul_time = p_rtc->RTC_TIMR;
  400486:	6885      	ldr	r5, [r0, #8]
	while (ul_time != p_rtc->RTC_TIMR) {
  400488:	6884      	ldr	r4, [r0, #8]
  40048a:	42a5      	cmp	r5, r4
  40048c:	d003      	beq.n	400496 <rtc_get_time+0x12>
		ul_time = p_rtc->RTC_TIMR;
  40048e:	6885      	ldr	r5, [r0, #8]
	while (ul_time != p_rtc->RTC_TIMR) {
  400490:	6884      	ldr	r4, [r0, #8]
  400492:	42ac      	cmp	r4, r5
  400494:	d1fb      	bne.n	40048e <rtc_get_time+0xa>
	}

	/* Hour */
	if (pul_hour) {
  400496:	b161      	cbz	r1, 4004b2 <rtc_get_time+0x2e>
		ul_temp = (ul_time & RTC_TIMR_HOUR_Msk) >> RTC_TIMR_HOUR_Pos;
		*pul_hour = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  400498:	f3c4 5001 	ubfx	r0, r4, #20, #2
  40049c:	eb00 0580 	add.w	r5, r0, r0, lsl #2
  4004a0:	f3c4 4003 	ubfx	r0, r4, #16, #4
  4004a4:	eb00 0045 	add.w	r0, r0, r5, lsl #1

		if ((ul_time & RTC_TIMR_AMPM) == RTC_TIMR_AMPM) {
  4004a8:	f414 0f80 	tst.w	r4, #4194304	; 0x400000
			*pul_hour += 12;
  4004ac:	bf18      	it	ne
  4004ae:	300c      	addne	r0, #12
  4004b0:	6008      	str	r0, [r1, #0]
		}
	}

	/* Minute */
	if (pul_minute) {
  4004b2:	b142      	cbz	r2, 4004c6 <rtc_get_time+0x42>
		ul_temp = (ul_time & RTC_TIMR_MIN_Msk) >> RTC_TIMR_MIN_Pos;
		*pul_minute = (ul_temp >> BCD_SHIFT) * BCD_FACTOR +  (ul_temp & BCD_MASK);
  4004b4:	f3c4 3102 	ubfx	r1, r4, #12, #3
  4004b8:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  4004bc:	f3c4 2003 	ubfx	r0, r4, #8, #4
  4004c0:	eb00 0141 	add.w	r1, r0, r1, lsl #1
  4004c4:	6011      	str	r1, [r2, #0]
	}

	/* Second */
	if (pul_second) {
  4004c6:	b143      	cbz	r3, 4004da <rtc_get_time+0x56>
		ul_temp = (ul_time & RTC_TIMR_SEC_Msk) >> RTC_TIMR_SEC_Pos;
		*pul_second = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  4004c8:	f3c4 1202 	ubfx	r2, r4, #4, #3
  4004cc:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  4004d0:	f004 040f 	and.w	r4, r4, #15
  4004d4:	eb04 0442 	add.w	r4, r4, r2, lsl #1
  4004d8:	601c      	str	r4, [r3, #0]
	}
}
  4004da:	bc30      	pop	{r4, r5}
  4004dc:	4770      	bx	lr

004004de <rtc_get_date>:
 * \param pul_day Current day.
 * \param pul_week Current day in current week.
 */
void rtc_get_date(Rtc *p_rtc, uint32_t *pul_year, uint32_t *pul_month,
		uint32_t *pul_day, uint32_t *pul_week)
{
  4004de:	b4f0      	push	{r4, r5, r6, r7}
  4004e0:	9e04      	ldr	r6, [sp, #16]
	uint32_t ul_date;
	uint32_t ul_cent;
	uint32_t ul_temp;

	/* Get the current date (multiple reads are necessary to insure a stable value). */
	ul_date = p_rtc->RTC_CALR;
  4004e2:	68c5      	ldr	r5, [r0, #12]
	while (ul_date != p_rtc->RTC_CALR) {
  4004e4:	68c4      	ldr	r4, [r0, #12]
  4004e6:	42a5      	cmp	r5, r4
  4004e8:	d003      	beq.n	4004f2 <rtc_get_date+0x14>
		ul_date = p_rtc->RTC_CALR;
  4004ea:	68c5      	ldr	r5, [r0, #12]
	while (ul_date != p_rtc->RTC_CALR) {
  4004ec:	68c4      	ldr	r4, [r0, #12]
  4004ee:	42ac      	cmp	r4, r5
  4004f0:	d1fb      	bne.n	4004ea <rtc_get_date+0xc>
	}

	/* Retrieve year */
	if (pul_year) {
  4004f2:	b199      	cbz	r1, 40051c <rtc_get_date+0x3e>
		ul_temp = (ul_date & RTC_CALR_CENT_Msk) >> RTC_CALR_CENT_Pos;
		ul_cent = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
		ul_temp = (ul_date & RTC_CALR_YEAR_Msk) >> RTC_CALR_YEAR_Pos;
		*pul_year = (ul_cent * BCD_FACTOR * BCD_FACTOR) +
				(ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  4004f4:	f3c4 3003 	ubfx	r0, r4, #12, #4
  4004f8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4004fc:	f3c4 2703 	ubfx	r7, r4, #8, #4
  400500:	eb07 0740 	add.w	r7, r7, r0, lsl #1
		ul_cent = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  400504:	f3c4 1002 	ubfx	r0, r4, #4, #3
  400508:	eb00 0580 	add.w	r5, r0, r0, lsl #2
  40050c:	f004 000f 	and.w	r0, r4, #15
  400510:	eb00 0045 	add.w	r0, r0, r5, lsl #1
				(ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  400514:	2564      	movs	r5, #100	; 0x64
  400516:	fb05 7000 	mla	r0, r5, r0, r7
		*pul_year = (ul_cent * BCD_FACTOR * BCD_FACTOR) +
  40051a:	6008      	str	r0, [r1, #0]
	}

	/* Retrieve month */
	if (pul_month) {
  40051c:	b142      	cbz	r2, 400530 <rtc_get_date+0x52>
		ul_temp = (ul_date & RTC_CALR_MONTH_Msk) >> RTC_CALR_MONTH_Pos;
		*pul_month = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  40051e:	f3c4 5000 	ubfx	r0, r4, #20, #1
  400522:	0081      	lsls	r1, r0, #2
  400524:	4408      	add	r0, r1
  400526:	f3c4 4103 	ubfx	r1, r4, #16, #4
  40052a:	eb01 0140 	add.w	r1, r1, r0, lsl #1
  40052e:	6011      	str	r1, [r2, #0]
	}

	/* Retrieve day */
	if (pul_day) {
  400530:	b143      	cbz	r3, 400544 <rtc_get_date+0x66>
		ul_temp = (ul_date & RTC_CALR_DATE_Msk) >> RTC_CALR_DATE_Pos;
		*pul_day = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  400532:	f3c4 7201 	ubfx	r2, r4, #28, #2
  400536:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  40053a:	f3c4 6103 	ubfx	r1, r4, #24, #4
  40053e:	eb01 0242 	add.w	r2, r1, r2, lsl #1
  400542:	601a      	str	r2, [r3, #0]
	}

	/* Retrieve week */
	if (pul_week) {
  400544:	b116      	cbz	r6, 40054c <rtc_get_date+0x6e>
		*pul_week = ((ul_date & RTC_CALR_DAY_Msk) >> RTC_CALR_DAY_Pos);
  400546:	f3c4 5442 	ubfx	r4, r4, #21, #3
  40054a:	6034      	str	r4, [r6, #0]
	}
}
  40054c:	bcf0      	pop	{r4, r5, r6, r7}
  40054e:	4770      	bx	lr

00400550 <rtc_get_status>:
 *
 * \return Status of the RTC.
 */
uint32_t rtc_get_status(Rtc *p_rtc)
{
	return (p_rtc->RTC_SR);
  400550:	6980      	ldr	r0, [r0, #24]
}
  400552:	4770      	bx	lr

00400554 <rtc_clear_status>:
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_clear Some flag bits which will be cleared.
 */
void rtc_clear_status(Rtc *p_rtc, uint32_t ul_clear)
{
	p_rtc->RTC_SCCR = ul_clear;
  400554:	61c1      	str	r1, [r0, #28]
  400556:	4770      	bx	lr

00400558 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400558:	f100 0308 	add.w	r3, r0, #8
  40055c:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
  40055e:	f04f 32ff 	mov.w	r2, #4294967295
  400562:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400564:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400566:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
  400568:	2300      	movs	r3, #0
  40056a:	6003      	str	r3, [r0, #0]
  40056c:	4770      	bx	lr

0040056e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
  40056e:	2300      	movs	r3, #0
  400570:	6103      	str	r3, [r0, #16]
  400572:	4770      	bx	lr

00400574 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
  400574:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
  400576:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
  400578:	689a      	ldr	r2, [r3, #8]
  40057a:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
  40057c:	689a      	ldr	r2, [r3, #8]
  40057e:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
  400580:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  400582:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  400584:	6803      	ldr	r3, [r0, #0]
  400586:	3301      	adds	r3, #1
  400588:	6003      	str	r3, [r0, #0]
  40058a:	4770      	bx	lr

0040058c <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
  40058c:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
  40058e:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
  400590:	f1b5 3fff 	cmp.w	r5, #4294967295
  400594:	d002      	beq.n	40059c <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400596:	f100 0208 	add.w	r2, r0, #8
  40059a:	e002      	b.n	4005a2 <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
  40059c:	6902      	ldr	r2, [r0, #16]
  40059e:	e004      	b.n	4005aa <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  4005a0:	461a      	mov	r2, r3
  4005a2:	6853      	ldr	r3, [r2, #4]
  4005a4:	681c      	ldr	r4, [r3, #0]
  4005a6:	42a5      	cmp	r5, r4
  4005a8:	d2fa      	bcs.n	4005a0 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
  4005aa:	6853      	ldr	r3, [r2, #4]
  4005ac:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
  4005ae:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
  4005b0:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
  4005b2:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  4005b4:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  4005b6:	6803      	ldr	r3, [r0, #0]
  4005b8:	3301      	adds	r3, #1
  4005ba:	6003      	str	r3, [r0, #0]
}
  4005bc:	bc30      	pop	{r4, r5}
  4005be:	4770      	bx	lr

004005c0 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
  4005c0:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  4005c2:	6842      	ldr	r2, [r0, #4]
  4005c4:	6881      	ldr	r1, [r0, #8]
  4005c6:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  4005c8:	6882      	ldr	r2, [r0, #8]
  4005ca:	6841      	ldr	r1, [r0, #4]
  4005cc:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
  4005ce:	685a      	ldr	r2, [r3, #4]
  4005d0:	4290      	cmp	r0, r2
  4005d2:	d005      	beq.n	4005e0 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
  4005d4:	2200      	movs	r2, #0
  4005d6:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
  4005d8:	6818      	ldr	r0, [r3, #0]
  4005da:	3801      	subs	r0, #1
  4005dc:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
  4005de:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
  4005e0:	6882      	ldr	r2, [r0, #8]
  4005e2:	605a      	str	r2, [r3, #4]
  4005e4:	e7f6      	b.n	4005d4 <uxListRemove+0x14>
	...

004005e8 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
  4005e8:	4b0d      	ldr	r3, [pc, #52]	; (400620 <prvTaskExitError+0x38>)
  4005ea:	681b      	ldr	r3, [r3, #0]
  4005ec:	f1b3 3fff 	cmp.w	r3, #4294967295
  4005f0:	d00a      	beq.n	400608 <prvTaskExitError+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  4005f2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4005f6:	b672      	cpsid	i
  4005f8:	f383 8811 	msr	BASEPRI, r3
  4005fc:	f3bf 8f6f 	isb	sy
  400600:	f3bf 8f4f 	dsb	sy
  400604:	b662      	cpsie	i
  400606:	e7fe      	b.n	400606 <prvTaskExitError+0x1e>
  400608:	f04f 0380 	mov.w	r3, #128	; 0x80
  40060c:	b672      	cpsid	i
  40060e:	f383 8811 	msr	BASEPRI, r3
  400612:	f3bf 8f6f 	isb	sy
  400616:	f3bf 8f4f 	dsb	sy
  40061a:	b662      	cpsie	i
  40061c:	e7fe      	b.n	40061c <prvTaskExitError+0x34>
  40061e:	bf00      	nop
  400620:	2040000c 	.word	0x2040000c

00400624 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
  400624:	4806      	ldr	r0, [pc, #24]	; (400640 <prvPortStartFirstTask+0x1c>)
  400626:	6800      	ldr	r0, [r0, #0]
  400628:	6800      	ldr	r0, [r0, #0]
  40062a:	f380 8808 	msr	MSP, r0
  40062e:	b662      	cpsie	i
  400630:	b661      	cpsie	f
  400632:	f3bf 8f4f 	dsb	sy
  400636:	f3bf 8f6f 	isb	sy
  40063a:	df00      	svc	0
  40063c:	bf00      	nop
  40063e:	0000      	.short	0x0000
  400640:	e000ed08 	.word	0xe000ed08

00400644 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
  400644:	f8df 000c 	ldr.w	r0, [pc, #12]	; 400654 <vPortEnableVFP+0x10>
  400648:	6801      	ldr	r1, [r0, #0]
  40064a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40064e:	6001      	str	r1, [r0, #0]
  400650:	4770      	bx	lr
  400652:	0000      	.short	0x0000
  400654:	e000ed88 	.word	0xe000ed88

00400658 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  400658:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  40065c:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
  400660:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
  400664:	4b05      	ldr	r3, [pc, #20]	; (40067c <pxPortInitialiseStack+0x24>)
  400666:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
  40066a:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
  40066e:	f06f 0302 	mvn.w	r3, #2
  400672:	f840 3c24 	str.w	r3, [r0, #-36]
}
  400676:	3844      	subs	r0, #68	; 0x44
  400678:	4770      	bx	lr
  40067a:	bf00      	nop
  40067c:	004005e9 	.word	0x004005e9

00400680 <SVC_Handler>:
	__asm volatile (
  400680:	4b06      	ldr	r3, [pc, #24]	; (40069c <pxCurrentTCBConst2>)
  400682:	6819      	ldr	r1, [r3, #0]
  400684:	6808      	ldr	r0, [r1, #0]
  400686:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40068a:	f380 8809 	msr	PSP, r0
  40068e:	f3bf 8f6f 	isb	sy
  400692:	f04f 0000 	mov.w	r0, #0
  400696:	f380 8811 	msr	BASEPRI, r0
  40069a:	4770      	bx	lr

0040069c <pxCurrentTCBConst2>:
  40069c:	2040c1fc 	.word	0x2040c1fc
  4006a0:	4770      	bx	lr
  4006a2:	bf00      	nop

004006a4 <vPortEnterCritical>:
  4006a4:	f04f 0380 	mov.w	r3, #128	; 0x80
  4006a8:	b672      	cpsid	i
  4006aa:	f383 8811 	msr	BASEPRI, r3
  4006ae:	f3bf 8f6f 	isb	sy
  4006b2:	f3bf 8f4f 	dsb	sy
  4006b6:	b662      	cpsie	i
	uxCriticalNesting++;
  4006b8:	4a0b      	ldr	r2, [pc, #44]	; (4006e8 <vPortEnterCritical+0x44>)
  4006ba:	6813      	ldr	r3, [r2, #0]
  4006bc:	3301      	adds	r3, #1
  4006be:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
  4006c0:	2b01      	cmp	r3, #1
  4006c2:	d10f      	bne.n	4006e4 <vPortEnterCritical+0x40>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
  4006c4:	4b09      	ldr	r3, [pc, #36]	; (4006ec <vPortEnterCritical+0x48>)
  4006c6:	681b      	ldr	r3, [r3, #0]
  4006c8:	f013 0fff 	tst.w	r3, #255	; 0xff
  4006cc:	d00a      	beq.n	4006e4 <vPortEnterCritical+0x40>
  4006ce:	f04f 0380 	mov.w	r3, #128	; 0x80
  4006d2:	b672      	cpsid	i
  4006d4:	f383 8811 	msr	BASEPRI, r3
  4006d8:	f3bf 8f6f 	isb	sy
  4006dc:	f3bf 8f4f 	dsb	sy
  4006e0:	b662      	cpsie	i
  4006e2:	e7fe      	b.n	4006e2 <vPortEnterCritical+0x3e>
  4006e4:	4770      	bx	lr
  4006e6:	bf00      	nop
  4006e8:	2040000c 	.word	0x2040000c
  4006ec:	e000ed04 	.word	0xe000ed04

004006f0 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
  4006f0:	4b0a      	ldr	r3, [pc, #40]	; (40071c <vPortExitCritical+0x2c>)
  4006f2:	681b      	ldr	r3, [r3, #0]
  4006f4:	b953      	cbnz	r3, 40070c <vPortExitCritical+0x1c>
  4006f6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4006fa:	b672      	cpsid	i
  4006fc:	f383 8811 	msr	BASEPRI, r3
  400700:	f3bf 8f6f 	isb	sy
  400704:	f3bf 8f4f 	dsb	sy
  400708:	b662      	cpsie	i
  40070a:	e7fe      	b.n	40070a <vPortExitCritical+0x1a>
	uxCriticalNesting--;
  40070c:	3b01      	subs	r3, #1
  40070e:	4a03      	ldr	r2, [pc, #12]	; (40071c <vPortExitCritical+0x2c>)
  400710:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
  400712:	b90b      	cbnz	r3, 400718 <vPortExitCritical+0x28>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
  400714:	f383 8811 	msr	BASEPRI, r3
  400718:	4770      	bx	lr
  40071a:	bf00      	nop
  40071c:	2040000c 	.word	0x2040000c

00400720 <PendSV_Handler>:
	__asm volatile
  400720:	f3ef 8009 	mrs	r0, PSP
  400724:	f3bf 8f6f 	isb	sy
  400728:	4b15      	ldr	r3, [pc, #84]	; (400780 <pxCurrentTCBConst>)
  40072a:	681a      	ldr	r2, [r3, #0]
  40072c:	f01e 0f10 	tst.w	lr, #16
  400730:	bf08      	it	eq
  400732:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
  400736:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40073a:	6010      	str	r0, [r2, #0]
  40073c:	f84d 3d04 	str.w	r3, [sp, #-4]!
  400740:	f04f 0080 	mov.w	r0, #128	; 0x80
  400744:	b672      	cpsid	i
  400746:	f380 8811 	msr	BASEPRI, r0
  40074a:	f3bf 8f4f 	dsb	sy
  40074e:	f3bf 8f6f 	isb	sy
  400752:	b662      	cpsie	i
  400754:	f001 f8aa 	bl	4018ac <vTaskSwitchContext>
  400758:	f04f 0000 	mov.w	r0, #0
  40075c:	f380 8811 	msr	BASEPRI, r0
  400760:	bc08      	pop	{r3}
  400762:	6819      	ldr	r1, [r3, #0]
  400764:	6808      	ldr	r0, [r1, #0]
  400766:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40076a:	f01e 0f10 	tst.w	lr, #16
  40076e:	bf08      	it	eq
  400770:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
  400774:	f380 8809 	msr	PSP, r0
  400778:	f3bf 8f6f 	isb	sy
  40077c:	4770      	bx	lr
  40077e:	bf00      	nop

00400780 <pxCurrentTCBConst>:
  400780:	2040c1fc 	.word	0x2040c1fc
  400784:	4770      	bx	lr
  400786:	bf00      	nop

00400788 <SysTick_Handler>:
{
  400788:	b508      	push	{r3, lr}
	__asm volatile
  40078a:	f3ef 8311 	mrs	r3, BASEPRI
  40078e:	f04f 0280 	mov.w	r2, #128	; 0x80
  400792:	b672      	cpsid	i
  400794:	f382 8811 	msr	BASEPRI, r2
  400798:	f3bf 8f6f 	isb	sy
  40079c:	f3bf 8f4f 	dsb	sy
  4007a0:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
  4007a2:	4b05      	ldr	r3, [pc, #20]	; (4007b8 <SysTick_Handler+0x30>)
  4007a4:	4798      	blx	r3
  4007a6:	b118      	cbz	r0, 4007b0 <SysTick_Handler+0x28>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  4007a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4007ac:	4b03      	ldr	r3, [pc, #12]	; (4007bc <SysTick_Handler+0x34>)
  4007ae:	601a      	str	r2, [r3, #0]
	__asm volatile
  4007b0:	2300      	movs	r3, #0
  4007b2:	f383 8811 	msr	BASEPRI, r3
  4007b6:	bd08      	pop	{r3, pc}
  4007b8:	00401519 	.word	0x00401519
  4007bc:	e000ed04 	.word	0xe000ed04

004007c0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
  4007c0:	4a03      	ldr	r2, [pc, #12]	; (4007d0 <vPortSetupTimerInterrupt+0x10>)
  4007c2:	4b04      	ldr	r3, [pc, #16]	; (4007d4 <vPortSetupTimerInterrupt+0x14>)
  4007c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
  4007c6:	2207      	movs	r2, #7
  4007c8:	3b04      	subs	r3, #4
  4007ca:	601a      	str	r2, [r3, #0]
  4007cc:	4770      	bx	lr
  4007ce:	bf00      	nop
  4007d0:	000927bf 	.word	0x000927bf
  4007d4:	e000e014 	.word	0xe000e014

004007d8 <xPortStartScheduler>:
{
  4007d8:	b500      	push	{lr}
  4007da:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
  4007dc:	4b25      	ldr	r3, [pc, #148]	; (400874 <xPortStartScheduler+0x9c>)
  4007de:	781a      	ldrb	r2, [r3, #0]
  4007e0:	b2d2      	uxtb	r2, r2
  4007e2:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
  4007e4:	22ff      	movs	r2, #255	; 0xff
  4007e6:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
  4007e8:	781b      	ldrb	r3, [r3, #0]
  4007ea:	b2db      	uxtb	r3, r3
  4007ec:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
  4007f0:	f89d 3003 	ldrb.w	r3, [sp, #3]
  4007f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
  4007f8:	4a1f      	ldr	r2, [pc, #124]	; (400878 <xPortStartScheduler+0xa0>)
  4007fa:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
  4007fc:	2207      	movs	r2, #7
  4007fe:	4b1f      	ldr	r3, [pc, #124]	; (40087c <xPortStartScheduler+0xa4>)
  400800:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  400802:	f89d 3003 	ldrb.w	r3, [sp, #3]
  400806:	f013 0f80 	tst.w	r3, #128	; 0x80
  40080a:	d010      	beq.n	40082e <xPortStartScheduler+0x56>
  40080c:	2206      	movs	r2, #6
  40080e:	e000      	b.n	400812 <xPortStartScheduler+0x3a>
  400810:	460a      	mov	r2, r1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
  400812:	f89d 3003 	ldrb.w	r3, [sp, #3]
  400816:	005b      	lsls	r3, r3, #1
  400818:	b2db      	uxtb	r3, r3
  40081a:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  40081e:	f89d 3003 	ldrb.w	r3, [sp, #3]
  400822:	1e51      	subs	r1, r2, #1
  400824:	f013 0f80 	tst.w	r3, #128	; 0x80
  400828:	d1f2      	bne.n	400810 <xPortStartScheduler+0x38>
  40082a:	4b14      	ldr	r3, [pc, #80]	; (40087c <xPortStartScheduler+0xa4>)
  40082c:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  40082e:	4a13      	ldr	r2, [pc, #76]	; (40087c <xPortStartScheduler+0xa4>)
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
  400830:	6813      	ldr	r3, [r2, #0]
  400832:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  400834:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  400838:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
  40083a:	9b01      	ldr	r3, [sp, #4]
  40083c:	b2db      	uxtb	r3, r3
  40083e:	4a0d      	ldr	r2, [pc, #52]	; (400874 <xPortStartScheduler+0x9c>)
  400840:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  400842:	4b0f      	ldr	r3, [pc, #60]	; (400880 <xPortStartScheduler+0xa8>)
  400844:	681a      	ldr	r2, [r3, #0]
  400846:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
  40084a:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
  40084c:	681a      	ldr	r2, [r3, #0]
  40084e:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
  400852:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
  400854:	4b0b      	ldr	r3, [pc, #44]	; (400884 <xPortStartScheduler+0xac>)
  400856:	4798      	blx	r3
	uxCriticalNesting = 0;
  400858:	2200      	movs	r2, #0
  40085a:	4b0b      	ldr	r3, [pc, #44]	; (400888 <xPortStartScheduler+0xb0>)
  40085c:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
  40085e:	4b0b      	ldr	r3, [pc, #44]	; (40088c <xPortStartScheduler+0xb4>)
  400860:	4798      	blx	r3
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
  400862:	4a0b      	ldr	r2, [pc, #44]	; (400890 <xPortStartScheduler+0xb8>)
  400864:	6813      	ldr	r3, [r2, #0]
  400866:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
  40086a:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
  40086c:	4b09      	ldr	r3, [pc, #36]	; (400894 <xPortStartScheduler+0xbc>)
  40086e:	4798      	blx	r3
	prvTaskExitError();
  400870:	4b09      	ldr	r3, [pc, #36]	; (400898 <xPortStartScheduler+0xc0>)
  400872:	4798      	blx	r3
  400874:	e000e400 	.word	0xe000e400
  400878:	204009ec 	.word	0x204009ec
  40087c:	204009f0 	.word	0x204009f0
  400880:	e000ed20 	.word	0xe000ed20
  400884:	004007c1 	.word	0x004007c1
  400888:	2040000c 	.word	0x2040000c
  40088c:	00400645 	.word	0x00400645
  400890:	e000ef34 	.word	0xe000ef34
  400894:	00400625 	.word	0x00400625
  400898:	004005e9 	.word	0x004005e9

0040089c <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
  40089c:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
  4008a0:	2b0f      	cmp	r3, #15
  4008a2:	d911      	bls.n	4008c8 <vPortValidateInterruptPriority+0x2c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
  4008a4:	4a12      	ldr	r2, [pc, #72]	; (4008f0 <vPortValidateInterruptPriority+0x54>)
  4008a6:	5c9b      	ldrb	r3, [r3, r2]
  4008a8:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
  4008aa:	4a12      	ldr	r2, [pc, #72]	; (4008f4 <vPortValidateInterruptPriority+0x58>)
  4008ac:	7812      	ldrb	r2, [r2, #0]
  4008ae:	429a      	cmp	r2, r3
  4008b0:	d90a      	bls.n	4008c8 <vPortValidateInterruptPriority+0x2c>
	__asm volatile
  4008b2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4008b6:	b672      	cpsid	i
  4008b8:	f383 8811 	msr	BASEPRI, r3
  4008bc:	f3bf 8f6f 	isb	sy
  4008c0:	f3bf 8f4f 	dsb	sy
  4008c4:	b662      	cpsie	i
  4008c6:	e7fe      	b.n	4008c6 <vPortValidateInterruptPriority+0x2a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
  4008c8:	4b0b      	ldr	r3, [pc, #44]	; (4008f8 <vPortValidateInterruptPriority+0x5c>)
  4008ca:	681b      	ldr	r3, [r3, #0]
  4008cc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  4008d0:	4a0a      	ldr	r2, [pc, #40]	; (4008fc <vPortValidateInterruptPriority+0x60>)
  4008d2:	6812      	ldr	r2, [r2, #0]
  4008d4:	4293      	cmp	r3, r2
  4008d6:	d90a      	bls.n	4008ee <vPortValidateInterruptPriority+0x52>
  4008d8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4008dc:	b672      	cpsid	i
  4008de:	f383 8811 	msr	BASEPRI, r3
  4008e2:	f3bf 8f6f 	isb	sy
  4008e6:	f3bf 8f4f 	dsb	sy
  4008ea:	b662      	cpsie	i
  4008ec:	e7fe      	b.n	4008ec <vPortValidateInterruptPriority+0x50>
  4008ee:	4770      	bx	lr
  4008f0:	e000e3f0 	.word	0xe000e3f0
  4008f4:	204009ec 	.word	0x204009ec
  4008f8:	e000ed0c 	.word	0xe000ed0c
  4008fc:	204009f0 	.word	0x204009f0

00400900 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  400900:	b538      	push	{r3, r4, r5, lr}
  400902:	4604      	mov	r4, r0
void *pvReturn = NULL;
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if portBYTE_ALIGNMENT != 1
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
  400904:	f010 0f07 	tst.w	r0, #7
  400908:	d002      	beq.n	400910 <pvPortMalloc+0x10>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
  40090a:	f020 0407 	bic.w	r4, r0, #7
  40090e:	3408      	adds	r4, #8
		}
	#endif

	vTaskSuspendAll();
  400910:	4b11      	ldr	r3, [pc, #68]	; (400958 <pvPortMalloc+0x58>)
  400912:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
  400914:	4b11      	ldr	r3, [pc, #68]	; (40095c <pvPortMalloc+0x5c>)
  400916:	681b      	ldr	r3, [r3, #0]
  400918:	b193      	cbz	r3, 400940 <pvPortMalloc+0x40>
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
  40091a:	4b11      	ldr	r3, [pc, #68]	; (400960 <pvPortMalloc+0x60>)
  40091c:	681b      	ldr	r3, [r3, #0]
  40091e:	441c      	add	r4, r3
  400920:	42a3      	cmp	r3, r4
  400922:	d213      	bcs.n	40094c <pvPortMalloc+0x4c>
  400924:	f24b 72f7 	movw	r2, #47095	; 0xb7f7
  400928:	4294      	cmp	r4, r2
  40092a:	d80f      	bhi.n	40094c <pvPortMalloc+0x4c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
  40092c:	4a0b      	ldr	r2, [pc, #44]	; (40095c <pvPortMalloc+0x5c>)
  40092e:	6815      	ldr	r5, [r2, #0]
  400930:	441d      	add	r5, r3
			xNextFreeByte += xWantedSize;
  400932:	4b0b      	ldr	r3, [pc, #44]	; (400960 <pvPortMalloc+0x60>)
  400934:	601c      	str	r4, [r3, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
  400936:	4b0b      	ldr	r3, [pc, #44]	; (400964 <pvPortMalloc+0x64>)
  400938:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
  40093a:	b14d      	cbz	r5, 400950 <pvPortMalloc+0x50>
		}
	}
	#endif

	return pvReturn;
}
  40093c:	4628      	mov	r0, r5
  40093e:	bd38      	pop	{r3, r4, r5, pc}
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
  400940:	4b09      	ldr	r3, [pc, #36]	; (400968 <pvPortMalloc+0x68>)
  400942:	f023 0307 	bic.w	r3, r3, #7
  400946:	4a05      	ldr	r2, [pc, #20]	; (40095c <pvPortMalloc+0x5c>)
  400948:	6013      	str	r3, [r2, #0]
  40094a:	e7e6      	b.n	40091a <pvPortMalloc+0x1a>
	( void ) xTaskResumeAll();
  40094c:	4b05      	ldr	r3, [pc, #20]	; (400964 <pvPortMalloc+0x64>)
  40094e:	4798      	blx	r3
			vApplicationMallocFailedHook();
  400950:	4b06      	ldr	r3, [pc, #24]	; (40096c <pvPortMalloc+0x6c>)
  400952:	4798      	blx	r3
  400954:	2500      	movs	r5, #0
	return pvReturn;
  400956:	e7f1      	b.n	40093c <pvPortMalloc+0x3c>
  400958:	004014fd 	.word	0x004014fd
  40095c:	204009f4 	.word	0x204009f4
  400960:	2040c1f8 	.word	0x2040c1f8
  400964:	00401665 	.word	0x00401665
  400968:	20400a00 	.word	0x20400a00
  40096c:	00406177 	.word	0x00406177

00400970 <vPortFree>:
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
  400970:	b150      	cbz	r0, 400988 <vPortFree+0x18>
  400972:	f04f 0380 	mov.w	r3, #128	; 0x80
  400976:	b672      	cpsid	i
  400978:	f383 8811 	msr	BASEPRI, r3
  40097c:	f3bf 8f6f 	isb	sy
  400980:	f3bf 8f4f 	dsb	sy
  400984:	b662      	cpsie	i
  400986:	e7fe      	b.n	400986 <vPortFree+0x16>
  400988:	4770      	bx	lr
	...

0040098c <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
  40098c:	b538      	push	{r3, r4, r5, lr}
  40098e:	4604      	mov	r4, r0
  400990:	4615      	mov	r5, r2
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
  400992:	6c02      	ldr	r2, [r0, #64]	; 0x40
  400994:	b95a      	cbnz	r2, 4009ae <prvCopyDataToQueue+0x22>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  400996:	6803      	ldr	r3, [r0, #0]
  400998:	2b00      	cmp	r3, #0
  40099a:	d12e      	bne.n	4009fa <prvCopyDataToQueue+0x6e>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
  40099c:	6840      	ldr	r0, [r0, #4]
  40099e:	4b1b      	ldr	r3, [pc, #108]	; (400a0c <prvCopyDataToQueue+0x80>)
  4009a0:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
  4009a2:	2300      	movs	r3, #0
  4009a4:	6063      	str	r3, [r4, #4]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
  4009a6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4009a8:	3301      	adds	r3, #1
  4009aa:	63a3      	str	r3, [r4, #56]	; 0x38

	return xReturn;
}
  4009ac:	bd38      	pop	{r3, r4, r5, pc}
	else if( xPosition == queueSEND_TO_BACK )
  4009ae:	b96d      	cbnz	r5, 4009cc <prvCopyDataToQueue+0x40>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
  4009b0:	6880      	ldr	r0, [r0, #8]
  4009b2:	4b17      	ldr	r3, [pc, #92]	; (400a10 <prvCopyDataToQueue+0x84>)
  4009b4:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  4009b6:	68a3      	ldr	r3, [r4, #8]
  4009b8:	6c22      	ldr	r2, [r4, #64]	; 0x40
  4009ba:	4413      	add	r3, r2
  4009bc:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  4009be:	6862      	ldr	r2, [r4, #4]
  4009c0:	4293      	cmp	r3, r2
  4009c2:	d31c      	bcc.n	4009fe <prvCopyDataToQueue+0x72>
			pxQueue->pcWriteTo = pxQueue->pcHead;
  4009c4:	6823      	ldr	r3, [r4, #0]
  4009c6:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
  4009c8:	2000      	movs	r0, #0
  4009ca:	e7ec      	b.n	4009a6 <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4009cc:	68c0      	ldr	r0, [r0, #12]
  4009ce:	4b10      	ldr	r3, [pc, #64]	; (400a10 <prvCopyDataToQueue+0x84>)
  4009d0:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
  4009d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
  4009d4:	425b      	negs	r3, r3
  4009d6:	68e2      	ldr	r2, [r4, #12]
  4009d8:	441a      	add	r2, r3
  4009da:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  4009dc:	6821      	ldr	r1, [r4, #0]
  4009de:	428a      	cmp	r2, r1
  4009e0:	d202      	bcs.n	4009e8 <prvCopyDataToQueue+0x5c>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
  4009e2:	6862      	ldr	r2, [r4, #4]
  4009e4:	4413      	add	r3, r2
  4009e6:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
  4009e8:	2d02      	cmp	r5, #2
  4009ea:	d10a      	bne.n	400a02 <prvCopyDataToQueue+0x76>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  4009ec:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4009ee:	b153      	cbz	r3, 400a06 <prvCopyDataToQueue+0x7a>
				--( pxQueue->uxMessagesWaiting );
  4009f0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4009f2:	3b01      	subs	r3, #1
  4009f4:	63a3      	str	r3, [r4, #56]	; 0x38
BaseType_t xReturn = pdFALSE;
  4009f6:	2000      	movs	r0, #0
  4009f8:	e7d5      	b.n	4009a6 <prvCopyDataToQueue+0x1a>
  4009fa:	2000      	movs	r0, #0
  4009fc:	e7d3      	b.n	4009a6 <prvCopyDataToQueue+0x1a>
  4009fe:	2000      	movs	r0, #0
  400a00:	e7d1      	b.n	4009a6 <prvCopyDataToQueue+0x1a>
  400a02:	2000      	movs	r0, #0
  400a04:	e7cf      	b.n	4009a6 <prvCopyDataToQueue+0x1a>
  400a06:	2000      	movs	r0, #0
  400a08:	e7cd      	b.n	4009a6 <prvCopyDataToQueue+0x1a>
  400a0a:	bf00      	nop
  400a0c:	00401cad 	.word	0x00401cad
  400a10:	0040653d 	.word	0x0040653d

00400a14 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
  400a14:	b530      	push	{r4, r5, lr}
  400a16:	b083      	sub	sp, #12
  400a18:	9001      	str	r0, [sp, #4]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
  400a1a:	6d44      	ldr	r4, [r0, #84]	; 0x54
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
  400a1c:	b174      	cbz	r4, 400a3c <prvNotifyQueueSetContainer+0x28>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
  400a1e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  400a20:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400a22:	429a      	cmp	r2, r3
  400a24:	d315      	bcc.n	400a52 <prvNotifyQueueSetContainer+0x3e>
  400a26:	f04f 0380 	mov.w	r3, #128	; 0x80
  400a2a:	b672      	cpsid	i
  400a2c:	f383 8811 	msr	BASEPRI, r3
  400a30:	f3bf 8f6f 	isb	sy
  400a34:	f3bf 8f4f 	dsb	sy
  400a38:	b662      	cpsie	i
  400a3a:	e7fe      	b.n	400a3a <prvNotifyQueueSetContainer+0x26>
  400a3c:	f04f 0380 	mov.w	r3, #128	; 0x80
  400a40:	b672      	cpsid	i
  400a42:	f383 8811 	msr	BASEPRI, r3
  400a46:	f3bf 8f6f 	isb	sy
  400a4a:	f3bf 8f4f 	dsb	sy
  400a4e:	b662      	cpsie	i
  400a50:	e7fe      	b.n	400a50 <prvNotifyQueueSetContainer+0x3c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
  400a52:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  400a54:	4293      	cmp	r3, r2
  400a56:	d803      	bhi.n	400a60 <prvNotifyQueueSetContainer+0x4c>
	BaseType_t xReturn = pdFALSE;
  400a58:	2500      	movs	r5, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  400a5a:	4628      	mov	r0, r5
  400a5c:	b003      	add	sp, #12
  400a5e:	bd30      	pop	{r4, r5, pc}
  400a60:	460a      	mov	r2, r1
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
  400a62:	a901      	add	r1, sp, #4
  400a64:	4620      	mov	r0, r4
  400a66:	4b0b      	ldr	r3, [pc, #44]	; (400a94 <prvNotifyQueueSetContainer+0x80>)
  400a68:	4798      	blx	r3
  400a6a:	4605      	mov	r5, r0
			if( pxQueueSetContainer->xTxLock == queueUNLOCKED )
  400a6c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400a6e:	f1b3 3fff 	cmp.w	r3, #4294967295
  400a72:	d10a      	bne.n	400a8a <prvNotifyQueueSetContainer+0x76>
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
  400a74:	6a63      	ldr	r3, [r4, #36]	; 0x24
  400a76:	2b00      	cmp	r3, #0
  400a78:	d0ef      	beq.n	400a5a <prvNotifyQueueSetContainer+0x46>
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
  400a7a:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400a7e:	4b06      	ldr	r3, [pc, #24]	; (400a98 <prvNotifyQueueSetContainer+0x84>)
  400a80:	4798      	blx	r3
  400a82:	2800      	cmp	r0, #0
						xReturn = pdTRUE;
  400a84:	bf18      	it	ne
  400a86:	2501      	movne	r5, #1
  400a88:	e7e7      	b.n	400a5a <prvNotifyQueueSetContainer+0x46>
				( pxQueueSetContainer->xTxLock )++;
  400a8a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400a8c:	3301      	adds	r3, #1
  400a8e:	64a3      	str	r3, [r4, #72]	; 0x48
  400a90:	e7e3      	b.n	400a5a <prvNotifyQueueSetContainer+0x46>
  400a92:	bf00      	nop
  400a94:	0040098d 	.word	0x0040098d
  400a98:	00401a81 	.word	0x00401a81

00400a9c <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
  400a9c:	6c02      	ldr	r2, [r0, #64]	; 0x40
  400a9e:	b172      	cbz	r2, 400abe <prvCopyDataFromQueue+0x22>
{
  400aa0:	b510      	push	{r4, lr}
  400aa2:	4603      	mov	r3, r0
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
  400aa4:	68c4      	ldr	r4, [r0, #12]
  400aa6:	4414      	add	r4, r2
  400aa8:	60c4      	str	r4, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
  400aaa:	6840      	ldr	r0, [r0, #4]
  400aac:	4284      	cmp	r4, r0
  400aae:	d301      	bcc.n	400ab4 <prvCopyDataFromQueue+0x18>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
  400ab0:	6818      	ldr	r0, [r3, #0]
  400ab2:	60d8      	str	r0, [r3, #12]
  400ab4:	4608      	mov	r0, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
  400ab6:	68d9      	ldr	r1, [r3, #12]
  400ab8:	4b01      	ldr	r3, [pc, #4]	; (400ac0 <prvCopyDataFromQueue+0x24>)
  400aba:	4798      	blx	r3
  400abc:	bd10      	pop	{r4, pc}
  400abe:	4770      	bx	lr
  400ac0:	0040653d 	.word	0x0040653d

00400ac4 <prvUnlockQueue>:
{
  400ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400ac6:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
  400ac8:	4b22      	ldr	r3, [pc, #136]	; (400b54 <prvUnlockQueue+0x90>)
  400aca:	4798      	blx	r3
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  400acc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400ace:	2b00      	cmp	r3, #0
  400ad0:	dd1b      	ble.n	400b0a <prvUnlockQueue+0x46>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  400ad2:	4d21      	ldr	r5, [pc, #132]	; (400b58 <prvUnlockQueue+0x94>)
						vTaskMissedYield();
  400ad4:	4f21      	ldr	r7, [pc, #132]	; (400b5c <prvUnlockQueue+0x98>)
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  400ad6:	4e22      	ldr	r6, [pc, #136]	; (400b60 <prvUnlockQueue+0x9c>)
  400ad8:	e00b      	b.n	400af2 <prvUnlockQueue+0x2e>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  400ada:	6a63      	ldr	r3, [r4, #36]	; 0x24
  400adc:	b1ab      	cbz	r3, 400b0a <prvUnlockQueue+0x46>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  400ade:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400ae2:	47b0      	blx	r6
  400ae4:	b978      	cbnz	r0, 400b06 <prvUnlockQueue+0x42>
			--( pxQueue->xTxLock );
  400ae6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400ae8:	3b01      	subs	r3, #1
  400aea:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  400aec:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400aee:	2b00      	cmp	r3, #0
  400af0:	dd0b      	ble.n	400b0a <prvUnlockQueue+0x46>
				if( pxQueue->pxQueueSetContainer != NULL )
  400af2:	6d63      	ldr	r3, [r4, #84]	; 0x54
  400af4:	2b00      	cmp	r3, #0
  400af6:	d0f0      	beq.n	400ada <prvUnlockQueue+0x16>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  400af8:	2100      	movs	r1, #0
  400afa:	4620      	mov	r0, r4
  400afc:	47a8      	blx	r5
  400afe:	2801      	cmp	r0, #1
  400b00:	d1f1      	bne.n	400ae6 <prvUnlockQueue+0x22>
						vTaskMissedYield();
  400b02:	47b8      	blx	r7
  400b04:	e7ef      	b.n	400ae6 <prvUnlockQueue+0x22>
							vTaskMissedYield();
  400b06:	47b8      	blx	r7
  400b08:	e7ed      	b.n	400ae6 <prvUnlockQueue+0x22>
		pxQueue->xTxLock = queueUNLOCKED;
  400b0a:	f04f 33ff 	mov.w	r3, #4294967295
  400b0e:	64a3      	str	r3, [r4, #72]	; 0x48
	taskEXIT_CRITICAL();
  400b10:	4b14      	ldr	r3, [pc, #80]	; (400b64 <prvUnlockQueue+0xa0>)
  400b12:	4798      	blx	r3
	taskENTER_CRITICAL();
  400b14:	4b0f      	ldr	r3, [pc, #60]	; (400b54 <prvUnlockQueue+0x90>)
  400b16:	4798      	blx	r3
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  400b18:	6c63      	ldr	r3, [r4, #68]	; 0x44
  400b1a:	2b00      	cmp	r3, #0
  400b1c:	dd14      	ble.n	400b48 <prvUnlockQueue+0x84>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  400b1e:	6923      	ldr	r3, [r4, #16]
  400b20:	b193      	cbz	r3, 400b48 <prvUnlockQueue+0x84>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  400b22:	f104 0610 	add.w	r6, r4, #16
  400b26:	4d0e      	ldr	r5, [pc, #56]	; (400b60 <prvUnlockQueue+0x9c>)
					vTaskMissedYield();
  400b28:	4f0c      	ldr	r7, [pc, #48]	; (400b5c <prvUnlockQueue+0x98>)
  400b2a:	e007      	b.n	400b3c <prvUnlockQueue+0x78>
				--( pxQueue->xRxLock );
  400b2c:	6c63      	ldr	r3, [r4, #68]	; 0x44
  400b2e:	3b01      	subs	r3, #1
  400b30:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  400b32:	6c63      	ldr	r3, [r4, #68]	; 0x44
  400b34:	2b00      	cmp	r3, #0
  400b36:	dd07      	ble.n	400b48 <prvUnlockQueue+0x84>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  400b38:	6923      	ldr	r3, [r4, #16]
  400b3a:	b12b      	cbz	r3, 400b48 <prvUnlockQueue+0x84>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  400b3c:	4630      	mov	r0, r6
  400b3e:	47a8      	blx	r5
  400b40:	2800      	cmp	r0, #0
  400b42:	d0f3      	beq.n	400b2c <prvUnlockQueue+0x68>
					vTaskMissedYield();
  400b44:	47b8      	blx	r7
  400b46:	e7f1      	b.n	400b2c <prvUnlockQueue+0x68>
		pxQueue->xRxLock = queueUNLOCKED;
  400b48:	f04f 33ff 	mov.w	r3, #4294967295
  400b4c:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
  400b4e:	4b05      	ldr	r3, [pc, #20]	; (400b64 <prvUnlockQueue+0xa0>)
  400b50:	4798      	blx	r3
  400b52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400b54:	004006a5 	.word	0x004006a5
  400b58:	00400a15 	.word	0x00400a15
  400b5c:	00401bdd 	.word	0x00401bdd
  400b60:	00401a81 	.word	0x00401a81
  400b64:	004006f1 	.word	0x004006f1

00400b68 <xQueueGenericReset>:
{
  400b68:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
  400b6a:	b308      	cbz	r0, 400bb0 <xQueueGenericReset+0x48>
  400b6c:	4604      	mov	r4, r0
  400b6e:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  400b70:	4b1d      	ldr	r3, [pc, #116]	; (400be8 <xQueueGenericReset+0x80>)
  400b72:	4798      	blx	r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  400b74:	6822      	ldr	r2, [r4, #0]
  400b76:	6c21      	ldr	r1, [r4, #64]	; 0x40
  400b78:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400b7a:	fb03 f301 	mul.w	r3, r3, r1
  400b7e:	18d0      	adds	r0, r2, r3
  400b80:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
  400b82:	2000      	movs	r0, #0
  400b84:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
  400b86:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
  400b88:	1a5b      	subs	r3, r3, r1
  400b8a:	4413      	add	r3, r2
  400b8c:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
  400b8e:	f04f 33ff 	mov.w	r3, #4294967295
  400b92:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
  400b94:	64a3      	str	r3, [r4, #72]	; 0x48
		if( xNewQueue == pdFALSE )
  400b96:	b9fd      	cbnz	r5, 400bd8 <xQueueGenericReset+0x70>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  400b98:	6923      	ldr	r3, [r4, #16]
  400b9a:	b12b      	cbz	r3, 400ba8 <xQueueGenericReset+0x40>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  400b9c:	f104 0010 	add.w	r0, r4, #16
  400ba0:	4b12      	ldr	r3, [pc, #72]	; (400bec <xQueueGenericReset+0x84>)
  400ba2:	4798      	blx	r3
  400ba4:	2801      	cmp	r0, #1
  400ba6:	d00e      	beq.n	400bc6 <xQueueGenericReset+0x5e>
	taskEXIT_CRITICAL();
  400ba8:	4b11      	ldr	r3, [pc, #68]	; (400bf0 <xQueueGenericReset+0x88>)
  400baa:	4798      	blx	r3
}
  400bac:	2001      	movs	r0, #1
  400bae:	bd38      	pop	{r3, r4, r5, pc}
  400bb0:	f04f 0380 	mov.w	r3, #128	; 0x80
  400bb4:	b672      	cpsid	i
  400bb6:	f383 8811 	msr	BASEPRI, r3
  400bba:	f3bf 8f6f 	isb	sy
  400bbe:	f3bf 8f4f 	dsb	sy
  400bc2:	b662      	cpsie	i
  400bc4:	e7fe      	b.n	400bc4 <xQueueGenericReset+0x5c>
					queueYIELD_IF_USING_PREEMPTION();
  400bc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400bca:	4b0a      	ldr	r3, [pc, #40]	; (400bf4 <xQueueGenericReset+0x8c>)
  400bcc:	601a      	str	r2, [r3, #0]
  400bce:	f3bf 8f4f 	dsb	sy
  400bd2:	f3bf 8f6f 	isb	sy
  400bd6:	e7e7      	b.n	400ba8 <xQueueGenericReset+0x40>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
  400bd8:	f104 0010 	add.w	r0, r4, #16
  400bdc:	4d06      	ldr	r5, [pc, #24]	; (400bf8 <xQueueGenericReset+0x90>)
  400bde:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
  400be0:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400be4:	47a8      	blx	r5
  400be6:	e7df      	b.n	400ba8 <xQueueGenericReset+0x40>
  400be8:	004006a5 	.word	0x004006a5
  400bec:	00401a81 	.word	0x00401a81
  400bf0:	004006f1 	.word	0x004006f1
  400bf4:	e000ed04 	.word	0xe000ed04
  400bf8:	00400559 	.word	0x00400559

00400bfc <xQueueGenericCreate>:
{
  400bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
  400bfe:	b950      	cbnz	r0, 400c16 <xQueueGenericCreate+0x1a>
  400c00:	f04f 0380 	mov.w	r3, #128	; 0x80
  400c04:	b672      	cpsid	i
  400c06:	f383 8811 	msr	BASEPRI, r3
  400c0a:	f3bf 8f6f 	isb	sy
  400c0e:	f3bf 8f4f 	dsb	sy
  400c12:	b662      	cpsie	i
  400c14:	e7fe      	b.n	400c14 <xQueueGenericCreate+0x18>
  400c16:	4606      	mov	r6, r0
  400c18:	4617      	mov	r7, r2
  400c1a:	460d      	mov	r5, r1
	if( uxItemSize == ( UBaseType_t ) 0 )
  400c1c:	b189      	cbz	r1, 400c42 <xQueueGenericCreate+0x46>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  400c1e:	fb01 f000 	mul.w	r0, r1, r0
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  400c22:	3059      	adds	r0, #89	; 0x59
  400c24:	4b12      	ldr	r3, [pc, #72]	; (400c70 <xQueueGenericCreate+0x74>)
  400c26:	4798      	blx	r3
	if( pxNewQueue != NULL )
  400c28:	4604      	mov	r4, r0
  400c2a:	b9e8      	cbnz	r0, 400c68 <xQueueGenericCreate+0x6c>
  400c2c:	f04f 0380 	mov.w	r3, #128	; 0x80
  400c30:	b672      	cpsid	i
  400c32:	f383 8811 	msr	BASEPRI, r3
  400c36:	f3bf 8f6f 	isb	sy
  400c3a:	f3bf 8f4f 	dsb	sy
  400c3e:	b662      	cpsie	i
  400c40:	e7fe      	b.n	400c40 <xQueueGenericCreate+0x44>
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  400c42:	2058      	movs	r0, #88	; 0x58
  400c44:	4b0a      	ldr	r3, [pc, #40]	; (400c70 <xQueueGenericCreate+0x74>)
  400c46:	4798      	blx	r3
	if( pxNewQueue != NULL )
  400c48:	4604      	mov	r4, r0
  400c4a:	2800      	cmp	r0, #0
  400c4c:	d0ee      	beq.n	400c2c <xQueueGenericCreate+0x30>
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
  400c4e:	6020      	str	r0, [r4, #0]
		pxNewQueue->uxLength = uxQueueLength;
  400c50:	63e6      	str	r6, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
  400c52:	6425      	str	r5, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
  400c54:	2101      	movs	r1, #1
  400c56:	4620      	mov	r0, r4
  400c58:	4b06      	ldr	r3, [pc, #24]	; (400c74 <xQueueGenericCreate+0x78>)
  400c5a:	4798      	blx	r3
			pxNewQueue->ucQueueType = ucQueueType;
  400c5c:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
			pxNewQueue->pxQueueSetContainer = NULL;
  400c60:	2300      	movs	r3, #0
  400c62:	6563      	str	r3, [r4, #84]	; 0x54
}
  400c64:	4620      	mov	r0, r4
  400c66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			pxNewQueue->pcHead = ( ( int8_t * ) pxNewQueue ) + sizeof( Queue_t );
  400c68:	f100 0358 	add.w	r3, r0, #88	; 0x58
  400c6c:	6003      	str	r3, [r0, #0]
  400c6e:	e7ef      	b.n	400c50 <xQueueGenericCreate+0x54>
  400c70:	00400901 	.word	0x00400901
  400c74:	00400b69 	.word	0x00400b69

00400c78 <xQueueGenericSend>:
{
  400c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400c7c:	b085      	sub	sp, #20
  400c7e:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
  400c80:	b1b8      	cbz	r0, 400cb2 <xQueueGenericSend+0x3a>
  400c82:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  400c84:	b301      	cbz	r1, 400cc8 <xQueueGenericSend+0x50>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  400c86:	2b02      	cmp	r3, #2
  400c88:	d02c      	beq.n	400ce4 <xQueueGenericSend+0x6c>
  400c8a:	461d      	mov	r5, r3
  400c8c:	4688      	mov	r8, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  400c8e:	4b66      	ldr	r3, [pc, #408]	; (400e28 <xQueueGenericSend+0x1b0>)
  400c90:	4798      	blx	r3
  400c92:	2800      	cmp	r0, #0
  400c94:	d134      	bne.n	400d00 <xQueueGenericSend+0x88>
  400c96:	9b01      	ldr	r3, [sp, #4]
  400c98:	2b00      	cmp	r3, #0
  400c9a:	d038      	beq.n	400d0e <xQueueGenericSend+0x96>
  400c9c:	f04f 0380 	mov.w	r3, #128	; 0x80
  400ca0:	b672      	cpsid	i
  400ca2:	f383 8811 	msr	BASEPRI, r3
  400ca6:	f3bf 8f6f 	isb	sy
  400caa:	f3bf 8f4f 	dsb	sy
  400cae:	b662      	cpsie	i
  400cb0:	e7fe      	b.n	400cb0 <xQueueGenericSend+0x38>
  400cb2:	f04f 0380 	mov.w	r3, #128	; 0x80
  400cb6:	b672      	cpsid	i
  400cb8:	f383 8811 	msr	BASEPRI, r3
  400cbc:	f3bf 8f6f 	isb	sy
  400cc0:	f3bf 8f4f 	dsb	sy
  400cc4:	b662      	cpsie	i
  400cc6:	e7fe      	b.n	400cc6 <xQueueGenericSend+0x4e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  400cc8:	6c02      	ldr	r2, [r0, #64]	; 0x40
  400cca:	2a00      	cmp	r2, #0
  400ccc:	d0db      	beq.n	400c86 <xQueueGenericSend+0xe>
  400cce:	f04f 0380 	mov.w	r3, #128	; 0x80
  400cd2:	b672      	cpsid	i
  400cd4:	f383 8811 	msr	BASEPRI, r3
  400cd8:	f3bf 8f6f 	isb	sy
  400cdc:	f3bf 8f4f 	dsb	sy
  400ce0:	b662      	cpsie	i
  400ce2:	e7fe      	b.n	400ce2 <xQueueGenericSend+0x6a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  400ce4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  400ce6:	2a01      	cmp	r2, #1
  400ce8:	d0cf      	beq.n	400c8a <xQueueGenericSend+0x12>
  400cea:	f04f 0380 	mov.w	r3, #128	; 0x80
  400cee:	b672      	cpsid	i
  400cf0:	f383 8811 	msr	BASEPRI, r3
  400cf4:	f3bf 8f6f 	isb	sy
  400cf8:	f3bf 8f4f 	dsb	sy
  400cfc:	b662      	cpsie	i
  400cfe:	e7fe      	b.n	400cfe <xQueueGenericSend+0x86>
  400d00:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
  400d02:	4e4a      	ldr	r6, [pc, #296]	; (400e2c <xQueueGenericSend+0x1b4>)
					vTaskSetTimeOutState( &xTimeOut );
  400d04:	f8df a150 	ldr.w	sl, [pc, #336]	; 400e58 <xQueueGenericSend+0x1e0>
					portYIELD_WITHIN_API();
  400d08:	f8df 912c 	ldr.w	r9, [pc, #300]	; 400e38 <xQueueGenericSend+0x1c0>
  400d0c:	e042      	b.n	400d94 <xQueueGenericSend+0x11c>
  400d0e:	2700      	movs	r7, #0
  400d10:	e7f7      	b.n	400d02 <xQueueGenericSend+0x8a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  400d12:	462a      	mov	r2, r5
  400d14:	4641      	mov	r1, r8
  400d16:	4620      	mov	r0, r4
  400d18:	4b45      	ldr	r3, [pc, #276]	; (400e30 <xQueueGenericSend+0x1b8>)
  400d1a:	4798      	blx	r3
					if( pxQueue->pxQueueSetContainer != NULL )
  400d1c:	6d63      	ldr	r3, [r4, #84]	; 0x54
  400d1e:	b19b      	cbz	r3, 400d48 <xQueueGenericSend+0xd0>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  400d20:	4629      	mov	r1, r5
  400d22:	4620      	mov	r0, r4
  400d24:	4b43      	ldr	r3, [pc, #268]	; (400e34 <xQueueGenericSend+0x1bc>)
  400d26:	4798      	blx	r3
  400d28:	2801      	cmp	r0, #1
  400d2a:	d107      	bne.n	400d3c <xQueueGenericSend+0xc4>
							queueYIELD_IF_USING_PREEMPTION();
  400d2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400d30:	4b41      	ldr	r3, [pc, #260]	; (400e38 <xQueueGenericSend+0x1c0>)
  400d32:	601a      	str	r2, [r3, #0]
  400d34:	f3bf 8f4f 	dsb	sy
  400d38:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  400d3c:	4b3f      	ldr	r3, [pc, #252]	; (400e3c <xQueueGenericSend+0x1c4>)
  400d3e:	4798      	blx	r3
				return pdPASS;
  400d40:	2001      	movs	r0, #1
}
  400d42:	b005      	add	sp, #20
  400d44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  400d48:	6a63      	ldr	r3, [r4, #36]	; 0x24
  400d4a:	b173      	cbz	r3, 400d6a <xQueueGenericSend+0xf2>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
  400d4c:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400d50:	4b3b      	ldr	r3, [pc, #236]	; (400e40 <xQueueGenericSend+0x1c8>)
  400d52:	4798      	blx	r3
  400d54:	2801      	cmp	r0, #1
  400d56:	d1f1      	bne.n	400d3c <xQueueGenericSend+0xc4>
								queueYIELD_IF_USING_PREEMPTION();
  400d58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400d5c:	4b36      	ldr	r3, [pc, #216]	; (400e38 <xQueueGenericSend+0x1c0>)
  400d5e:	601a      	str	r2, [r3, #0]
  400d60:	f3bf 8f4f 	dsb	sy
  400d64:	f3bf 8f6f 	isb	sy
  400d68:	e7e8      	b.n	400d3c <xQueueGenericSend+0xc4>
						else if( xYieldRequired != pdFALSE )
  400d6a:	2800      	cmp	r0, #0
  400d6c:	d0e6      	beq.n	400d3c <xQueueGenericSend+0xc4>
							queueYIELD_IF_USING_PREEMPTION();
  400d6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400d72:	4b31      	ldr	r3, [pc, #196]	; (400e38 <xQueueGenericSend+0x1c0>)
  400d74:	601a      	str	r2, [r3, #0]
  400d76:	f3bf 8f4f 	dsb	sy
  400d7a:	f3bf 8f6f 	isb	sy
  400d7e:	e7dd      	b.n	400d3c <xQueueGenericSend+0xc4>
					taskEXIT_CRITICAL();
  400d80:	4b2e      	ldr	r3, [pc, #184]	; (400e3c <xQueueGenericSend+0x1c4>)
  400d82:	4798      	blx	r3
					return errQUEUE_FULL;
  400d84:	2000      	movs	r0, #0
  400d86:	e7dc      	b.n	400d42 <xQueueGenericSend+0xca>
				prvUnlockQueue( pxQueue );
  400d88:	4620      	mov	r0, r4
  400d8a:	4b2e      	ldr	r3, [pc, #184]	; (400e44 <xQueueGenericSend+0x1cc>)
  400d8c:	4798      	blx	r3
				( void ) xTaskResumeAll();
  400d8e:	4b2e      	ldr	r3, [pc, #184]	; (400e48 <xQueueGenericSend+0x1d0>)
  400d90:	4798      	blx	r3
  400d92:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
  400d94:	47b0      	blx	r6
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  400d96:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  400d98:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400d9a:	429a      	cmp	r2, r3
  400d9c:	d3b9      	bcc.n	400d12 <xQueueGenericSend+0x9a>
  400d9e:	2d02      	cmp	r5, #2
  400da0:	d0b7      	beq.n	400d12 <xQueueGenericSend+0x9a>
				if( xTicksToWait == ( TickType_t ) 0 )
  400da2:	9b01      	ldr	r3, [sp, #4]
  400da4:	2b00      	cmp	r3, #0
  400da6:	d0eb      	beq.n	400d80 <xQueueGenericSend+0x108>
				else if( xEntryTimeSet == pdFALSE )
  400da8:	b90f      	cbnz	r7, 400dae <xQueueGenericSend+0x136>
					vTaskSetTimeOutState( &xTimeOut );
  400daa:	a802      	add	r0, sp, #8
  400dac:	47d0      	blx	sl
		taskEXIT_CRITICAL();
  400dae:	4b23      	ldr	r3, [pc, #140]	; (400e3c <xQueueGenericSend+0x1c4>)
  400db0:	4798      	blx	r3
		vTaskSuspendAll();
  400db2:	4b26      	ldr	r3, [pc, #152]	; (400e4c <xQueueGenericSend+0x1d4>)
  400db4:	4798      	blx	r3
		prvLockQueue( pxQueue );
  400db6:	47b0      	blx	r6
  400db8:	6c63      	ldr	r3, [r4, #68]	; 0x44
  400dba:	f1b3 3fff 	cmp.w	r3, #4294967295
  400dbe:	d101      	bne.n	400dc4 <xQueueGenericSend+0x14c>
  400dc0:	2300      	movs	r3, #0
  400dc2:	6463      	str	r3, [r4, #68]	; 0x44
  400dc4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400dc6:	f1b3 3fff 	cmp.w	r3, #4294967295
  400dca:	d101      	bne.n	400dd0 <xQueueGenericSend+0x158>
  400dcc:	2300      	movs	r3, #0
  400dce:	64a3      	str	r3, [r4, #72]	; 0x48
  400dd0:	4b1a      	ldr	r3, [pc, #104]	; (400e3c <xQueueGenericSend+0x1c4>)
  400dd2:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  400dd4:	a901      	add	r1, sp, #4
  400dd6:	a802      	add	r0, sp, #8
  400dd8:	4b1d      	ldr	r3, [pc, #116]	; (400e50 <xQueueGenericSend+0x1d8>)
  400dda:	4798      	blx	r3
  400ddc:	b9e0      	cbnz	r0, 400e18 <xQueueGenericSend+0x1a0>
	taskENTER_CRITICAL();
  400dde:	47b0      	blx	r6
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  400de0:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
  400de4:	6be7      	ldr	r7, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
  400de6:	4b15      	ldr	r3, [pc, #84]	; (400e3c <xQueueGenericSend+0x1c4>)
  400de8:	4798      	blx	r3
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
  400dea:	45bb      	cmp	fp, r7
  400dec:	d1cc      	bne.n	400d88 <xQueueGenericSend+0x110>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  400dee:	9901      	ldr	r1, [sp, #4]
  400df0:	f104 0010 	add.w	r0, r4, #16
  400df4:	4b17      	ldr	r3, [pc, #92]	; (400e54 <xQueueGenericSend+0x1dc>)
  400df6:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  400df8:	4620      	mov	r0, r4
  400dfa:	4b12      	ldr	r3, [pc, #72]	; (400e44 <xQueueGenericSend+0x1cc>)
  400dfc:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  400dfe:	4b12      	ldr	r3, [pc, #72]	; (400e48 <xQueueGenericSend+0x1d0>)
  400e00:	4798      	blx	r3
  400e02:	2800      	cmp	r0, #0
  400e04:	d1c5      	bne.n	400d92 <xQueueGenericSend+0x11a>
					portYIELD_WITHIN_API();
  400e06:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  400e0a:	f8c9 3000 	str.w	r3, [r9]
  400e0e:	f3bf 8f4f 	dsb	sy
  400e12:	f3bf 8f6f 	isb	sy
  400e16:	e7bc      	b.n	400d92 <xQueueGenericSend+0x11a>
			prvUnlockQueue( pxQueue );
  400e18:	4620      	mov	r0, r4
  400e1a:	4b0a      	ldr	r3, [pc, #40]	; (400e44 <xQueueGenericSend+0x1cc>)
  400e1c:	4798      	blx	r3
			( void ) xTaskResumeAll();
  400e1e:	4b0a      	ldr	r3, [pc, #40]	; (400e48 <xQueueGenericSend+0x1d0>)
  400e20:	4798      	blx	r3
			return errQUEUE_FULL;
  400e22:	2000      	movs	r0, #0
  400e24:	e78d      	b.n	400d42 <xQueueGenericSend+0xca>
  400e26:	bf00      	nop
  400e28:	00401be9 	.word	0x00401be9
  400e2c:	004006a5 	.word	0x004006a5
  400e30:	0040098d 	.word	0x0040098d
  400e34:	00400a15 	.word	0x00400a15
  400e38:	e000ed04 	.word	0xe000ed04
  400e3c:	004006f1 	.word	0x004006f1
  400e40:	00401a81 	.word	0x00401a81
  400e44:	00400ac5 	.word	0x00400ac5
  400e48:	00401665 	.word	0x00401665
  400e4c:	004014fd 	.word	0x004014fd
  400e50:	00401b49 	.word	0x00401b49
  400e54:	0040197d 	.word	0x0040197d
  400e58:	00401b19 	.word	0x00401b19

00400e5c <xQueueGenericSendFromISR>:
	configASSERT( pxQueue );
  400e5c:	2800      	cmp	r0, #0
  400e5e:	d036      	beq.n	400ece <xQueueGenericSendFromISR+0x72>
{
  400e60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400e64:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  400e66:	2900      	cmp	r1, #0
  400e68:	d03c      	beq.n	400ee4 <xQueueGenericSendFromISR+0x88>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  400e6a:	2b02      	cmp	r3, #2
  400e6c:	d048      	beq.n	400f00 <xQueueGenericSendFromISR+0xa4>
  400e6e:	461e      	mov	r6, r3
  400e70:	4615      	mov	r5, r2
  400e72:	4688      	mov	r8, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  400e74:	4b35      	ldr	r3, [pc, #212]	; (400f4c <xQueueGenericSendFromISR+0xf0>)
  400e76:	4798      	blx	r3
	__asm volatile
  400e78:	f3ef 8711 	mrs	r7, BASEPRI
  400e7c:	f04f 0380 	mov.w	r3, #128	; 0x80
  400e80:	b672      	cpsid	i
  400e82:	f383 8811 	msr	BASEPRI, r3
  400e86:	f3bf 8f6f 	isb	sy
  400e8a:	f3bf 8f4f 	dsb	sy
  400e8e:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  400e90:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  400e92:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400e94:	429a      	cmp	r2, r3
  400e96:	d301      	bcc.n	400e9c <xQueueGenericSendFromISR+0x40>
  400e98:	2e02      	cmp	r6, #2
  400e9a:	d14f      	bne.n	400f3c <xQueueGenericSendFromISR+0xe0>
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  400e9c:	4632      	mov	r2, r6
  400e9e:	4641      	mov	r1, r8
  400ea0:	4620      	mov	r0, r4
  400ea2:	4b2b      	ldr	r3, [pc, #172]	; (400f50 <xQueueGenericSendFromISR+0xf4>)
  400ea4:	4798      	blx	r3
			if( pxQueue->xTxLock == queueUNLOCKED )
  400ea6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400ea8:	f1b3 3fff 	cmp.w	r3, #4294967295
  400eac:	d141      	bne.n	400f32 <xQueueGenericSendFromISR+0xd6>
					if( pxQueue->pxQueueSetContainer != NULL )
  400eae:	6d63      	ldr	r3, [r4, #84]	; 0x54
  400eb0:	2b00      	cmp	r3, #0
  400eb2:	d033      	beq.n	400f1c <xQueueGenericSendFromISR+0xc0>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  400eb4:	4631      	mov	r1, r6
  400eb6:	4620      	mov	r0, r4
  400eb8:	4b26      	ldr	r3, [pc, #152]	; (400f54 <xQueueGenericSendFromISR+0xf8>)
  400eba:	4798      	blx	r3
							if( pxHigherPriorityTaskWoken != NULL )
  400ebc:	2d00      	cmp	r5, #0
  400ebe:	d03f      	beq.n	400f40 <xQueueGenericSendFromISR+0xe4>
  400ec0:	2801      	cmp	r0, #1
  400ec2:	d13d      	bne.n	400f40 <xQueueGenericSendFromISR+0xe4>
								*pxHigherPriorityTaskWoken = pdTRUE;
  400ec4:	6028      	str	r0, [r5, #0]
	__asm volatile
  400ec6:	f387 8811 	msr	BASEPRI, r7
}
  400eca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm volatile
  400ece:	f04f 0380 	mov.w	r3, #128	; 0x80
  400ed2:	b672      	cpsid	i
  400ed4:	f383 8811 	msr	BASEPRI, r3
  400ed8:	f3bf 8f6f 	isb	sy
  400edc:	f3bf 8f4f 	dsb	sy
  400ee0:	b662      	cpsie	i
  400ee2:	e7fe      	b.n	400ee2 <xQueueGenericSendFromISR+0x86>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  400ee4:	6c00      	ldr	r0, [r0, #64]	; 0x40
  400ee6:	2800      	cmp	r0, #0
  400ee8:	d0bf      	beq.n	400e6a <xQueueGenericSendFromISR+0xe>
  400eea:	f04f 0380 	mov.w	r3, #128	; 0x80
  400eee:	b672      	cpsid	i
  400ef0:	f383 8811 	msr	BASEPRI, r3
  400ef4:	f3bf 8f6f 	isb	sy
  400ef8:	f3bf 8f4f 	dsb	sy
  400efc:	b662      	cpsie	i
  400efe:	e7fe      	b.n	400efe <xQueueGenericSendFromISR+0xa2>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  400f00:	6be0      	ldr	r0, [r4, #60]	; 0x3c
  400f02:	2801      	cmp	r0, #1
  400f04:	d0b3      	beq.n	400e6e <xQueueGenericSendFromISR+0x12>
  400f06:	f04f 0380 	mov.w	r3, #128	; 0x80
  400f0a:	b672      	cpsid	i
  400f0c:	f383 8811 	msr	BASEPRI, r3
  400f10:	f3bf 8f6f 	isb	sy
  400f14:	f3bf 8f4f 	dsb	sy
  400f18:	b662      	cpsie	i
  400f1a:	e7fe      	b.n	400f1a <xQueueGenericSendFromISR+0xbe>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  400f1c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  400f1e:	b18b      	cbz	r3, 400f44 <xQueueGenericSendFromISR+0xe8>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  400f20:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400f24:	4b0c      	ldr	r3, [pc, #48]	; (400f58 <xQueueGenericSendFromISR+0xfc>)
  400f26:	4798      	blx	r3
								if( pxHigherPriorityTaskWoken != NULL )
  400f28:	b175      	cbz	r5, 400f48 <xQueueGenericSendFromISR+0xec>
  400f2a:	b168      	cbz	r0, 400f48 <xQueueGenericSendFromISR+0xec>
									*pxHigherPriorityTaskWoken = pdTRUE;
  400f2c:	2001      	movs	r0, #1
  400f2e:	6028      	str	r0, [r5, #0]
  400f30:	e7c9      	b.n	400ec6 <xQueueGenericSendFromISR+0x6a>
				++( pxQueue->xTxLock );
  400f32:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400f34:	3301      	adds	r3, #1
  400f36:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
  400f38:	2001      	movs	r0, #1
  400f3a:	e7c4      	b.n	400ec6 <xQueueGenericSendFromISR+0x6a>
			xReturn = errQUEUE_FULL;
  400f3c:	2000      	movs	r0, #0
  400f3e:	e7c2      	b.n	400ec6 <xQueueGenericSendFromISR+0x6a>
			xReturn = pdPASS;
  400f40:	2001      	movs	r0, #1
  400f42:	e7c0      	b.n	400ec6 <xQueueGenericSendFromISR+0x6a>
  400f44:	2001      	movs	r0, #1
  400f46:	e7be      	b.n	400ec6 <xQueueGenericSendFromISR+0x6a>
  400f48:	2001      	movs	r0, #1
  400f4a:	e7bc      	b.n	400ec6 <xQueueGenericSendFromISR+0x6a>
  400f4c:	0040089d 	.word	0x0040089d
  400f50:	0040098d 	.word	0x0040098d
  400f54:	00400a15 	.word	0x00400a15
  400f58:	00401a81 	.word	0x00401a81

00400f5c <xQueueGenericReceive>:
{
  400f5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  400f60:	b084      	sub	sp, #16
  400f62:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
  400f64:	b198      	cbz	r0, 400f8e <xQueueGenericReceive+0x32>
  400f66:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  400f68:	b1e1      	cbz	r1, 400fa4 <xQueueGenericReceive+0x48>
  400f6a:	4698      	mov	r8, r3
  400f6c:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  400f6e:	4b61      	ldr	r3, [pc, #388]	; (4010f4 <xQueueGenericReceive+0x198>)
  400f70:	4798      	blx	r3
  400f72:	bb28      	cbnz	r0, 400fc0 <xQueueGenericReceive+0x64>
  400f74:	9b01      	ldr	r3, [sp, #4]
  400f76:	b353      	cbz	r3, 400fce <xQueueGenericReceive+0x72>
  400f78:	f04f 0380 	mov.w	r3, #128	; 0x80
  400f7c:	b672      	cpsid	i
  400f7e:	f383 8811 	msr	BASEPRI, r3
  400f82:	f3bf 8f6f 	isb	sy
  400f86:	f3bf 8f4f 	dsb	sy
  400f8a:	b662      	cpsie	i
  400f8c:	e7fe      	b.n	400f8c <xQueueGenericReceive+0x30>
  400f8e:	f04f 0380 	mov.w	r3, #128	; 0x80
  400f92:	b672      	cpsid	i
  400f94:	f383 8811 	msr	BASEPRI, r3
  400f98:	f3bf 8f6f 	isb	sy
  400f9c:	f3bf 8f4f 	dsb	sy
  400fa0:	b662      	cpsie	i
  400fa2:	e7fe      	b.n	400fa2 <xQueueGenericReceive+0x46>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  400fa4:	6c02      	ldr	r2, [r0, #64]	; 0x40
  400fa6:	2a00      	cmp	r2, #0
  400fa8:	d0df      	beq.n	400f6a <xQueueGenericReceive+0xe>
  400faa:	f04f 0380 	mov.w	r3, #128	; 0x80
  400fae:	b672      	cpsid	i
  400fb0:	f383 8811 	msr	BASEPRI, r3
  400fb4:	f3bf 8f6f 	isb	sy
  400fb8:	f3bf 8f4f 	dsb	sy
  400fbc:	b662      	cpsie	i
  400fbe:	e7fe      	b.n	400fbe <xQueueGenericReceive+0x62>
  400fc0:	2600      	movs	r6, #0
		taskENTER_CRITICAL();
  400fc2:	4d4d      	ldr	r5, [pc, #308]	; (4010f8 <xQueueGenericReceive+0x19c>)
					vTaskSetTimeOutState( &xTimeOut );
  400fc4:	f8df a160 	ldr.w	sl, [pc, #352]	; 401128 <xQueueGenericReceive+0x1cc>
					portYIELD_WITHIN_API();
  400fc8:	f8df 913c 	ldr.w	r9, [pc, #316]	; 401108 <xQueueGenericReceive+0x1ac>
  400fcc:	e04b      	b.n	401066 <xQueueGenericReceive+0x10a>
  400fce:	2600      	movs	r6, #0
  400fd0:	e7f7      	b.n	400fc2 <xQueueGenericReceive+0x66>
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
  400fd2:	68e5      	ldr	r5, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
  400fd4:	4639      	mov	r1, r7
  400fd6:	4620      	mov	r0, r4
  400fd8:	4b48      	ldr	r3, [pc, #288]	; (4010fc <xQueueGenericReceive+0x1a0>)
  400fda:	4798      	blx	r3
				if( xJustPeeking == pdFALSE )
  400fdc:	f1b8 0f00 	cmp.w	r8, #0
  400fe0:	d11d      	bne.n	40101e <xQueueGenericReceive+0xc2>
					--( pxQueue->uxMessagesWaiting );
  400fe2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  400fe4:	3b01      	subs	r3, #1
  400fe6:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  400fe8:	6823      	ldr	r3, [r4, #0]
  400fea:	b913      	cbnz	r3, 400ff2 <xQueueGenericReceive+0x96>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
  400fec:	4b44      	ldr	r3, [pc, #272]	; (401100 <xQueueGenericReceive+0x1a4>)
  400fee:	4798      	blx	r3
  400ff0:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  400ff2:	6923      	ldr	r3, [r4, #16]
  400ff4:	b16b      	cbz	r3, 401012 <xQueueGenericReceive+0xb6>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  400ff6:	f104 0010 	add.w	r0, r4, #16
  400ffa:	4b42      	ldr	r3, [pc, #264]	; (401104 <xQueueGenericReceive+0x1a8>)
  400ffc:	4798      	blx	r3
  400ffe:	2801      	cmp	r0, #1
  401000:	d107      	bne.n	401012 <xQueueGenericReceive+0xb6>
							queueYIELD_IF_USING_PREEMPTION();
  401002:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401006:	4b40      	ldr	r3, [pc, #256]	; (401108 <xQueueGenericReceive+0x1ac>)
  401008:	601a      	str	r2, [r3, #0]
  40100a:	f3bf 8f4f 	dsb	sy
  40100e:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  401012:	4b3e      	ldr	r3, [pc, #248]	; (40110c <xQueueGenericReceive+0x1b0>)
  401014:	4798      	blx	r3
				return pdPASS;
  401016:	2001      	movs	r0, #1
}
  401018:	b004      	add	sp, #16
  40101a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
  40101e:	60e5      	str	r5, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401020:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401022:	2b00      	cmp	r3, #0
  401024:	d0f5      	beq.n	401012 <xQueueGenericReceive+0xb6>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401026:	f104 0024 	add.w	r0, r4, #36	; 0x24
  40102a:	4b36      	ldr	r3, [pc, #216]	; (401104 <xQueueGenericReceive+0x1a8>)
  40102c:	4798      	blx	r3
  40102e:	2800      	cmp	r0, #0
  401030:	d0ef      	beq.n	401012 <xQueueGenericReceive+0xb6>
							queueYIELD_IF_USING_PREEMPTION();
  401032:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401036:	4b34      	ldr	r3, [pc, #208]	; (401108 <xQueueGenericReceive+0x1ac>)
  401038:	601a      	str	r2, [r3, #0]
  40103a:	f3bf 8f4f 	dsb	sy
  40103e:	f3bf 8f6f 	isb	sy
  401042:	e7e6      	b.n	401012 <xQueueGenericReceive+0xb6>
					taskEXIT_CRITICAL();
  401044:	4b31      	ldr	r3, [pc, #196]	; (40110c <xQueueGenericReceive+0x1b0>)
  401046:	4798      	blx	r3
					return errQUEUE_EMPTY;
  401048:	2000      	movs	r0, #0
  40104a:	e7e5      	b.n	401018 <xQueueGenericReceive+0xbc>
						taskENTER_CRITICAL();
  40104c:	47a8      	blx	r5
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
  40104e:	6860      	ldr	r0, [r4, #4]
  401050:	4b2f      	ldr	r3, [pc, #188]	; (401110 <xQueueGenericReceive+0x1b4>)
  401052:	4798      	blx	r3
						taskEXIT_CRITICAL();
  401054:	4b2d      	ldr	r3, [pc, #180]	; (40110c <xQueueGenericReceive+0x1b0>)
  401056:	4798      	blx	r3
  401058:	e030      	b.n	4010bc <xQueueGenericReceive+0x160>
				prvUnlockQueue( pxQueue );
  40105a:	4620      	mov	r0, r4
  40105c:	4b2d      	ldr	r3, [pc, #180]	; (401114 <xQueueGenericReceive+0x1b8>)
  40105e:	4798      	blx	r3
				( void ) xTaskResumeAll();
  401060:	4b2d      	ldr	r3, [pc, #180]	; (401118 <xQueueGenericReceive+0x1bc>)
  401062:	4798      	blx	r3
  401064:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
  401066:	47a8      	blx	r5
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  401068:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  40106a:	2b00      	cmp	r3, #0
  40106c:	d1b1      	bne.n	400fd2 <xQueueGenericReceive+0x76>
				if( xTicksToWait == ( TickType_t ) 0 )
  40106e:	9b01      	ldr	r3, [sp, #4]
  401070:	2b00      	cmp	r3, #0
  401072:	d0e7      	beq.n	401044 <xQueueGenericReceive+0xe8>
				else if( xEntryTimeSet == pdFALSE )
  401074:	b90e      	cbnz	r6, 40107a <xQueueGenericReceive+0x11e>
					vTaskSetTimeOutState( &xTimeOut );
  401076:	a802      	add	r0, sp, #8
  401078:	47d0      	blx	sl
		taskEXIT_CRITICAL();
  40107a:	4b24      	ldr	r3, [pc, #144]	; (40110c <xQueueGenericReceive+0x1b0>)
  40107c:	4798      	blx	r3
		vTaskSuspendAll();
  40107e:	4b27      	ldr	r3, [pc, #156]	; (40111c <xQueueGenericReceive+0x1c0>)
  401080:	4798      	blx	r3
		prvLockQueue( pxQueue );
  401082:	47a8      	blx	r5
  401084:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401086:	f1b3 3fff 	cmp.w	r3, #4294967295
  40108a:	d101      	bne.n	401090 <xQueueGenericReceive+0x134>
  40108c:	2300      	movs	r3, #0
  40108e:	6463      	str	r3, [r4, #68]	; 0x44
  401090:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401092:	f1b3 3fff 	cmp.w	r3, #4294967295
  401096:	d101      	bne.n	40109c <xQueueGenericReceive+0x140>
  401098:	2300      	movs	r3, #0
  40109a:	64a3      	str	r3, [r4, #72]	; 0x48
  40109c:	4b1b      	ldr	r3, [pc, #108]	; (40110c <xQueueGenericReceive+0x1b0>)
  40109e:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  4010a0:	a901      	add	r1, sp, #4
  4010a2:	a802      	add	r0, sp, #8
  4010a4:	4b1e      	ldr	r3, [pc, #120]	; (401120 <xQueueGenericReceive+0x1c4>)
  4010a6:	4798      	blx	r3
  4010a8:	b9e8      	cbnz	r0, 4010e6 <xQueueGenericReceive+0x18a>
	taskENTER_CRITICAL();
  4010aa:	47a8      	blx	r5
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
  4010ac:	6ba6      	ldr	r6, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
  4010ae:	4b17      	ldr	r3, [pc, #92]	; (40110c <xQueueGenericReceive+0x1b0>)
  4010b0:	4798      	blx	r3
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  4010b2:	2e00      	cmp	r6, #0
  4010b4:	d1d1      	bne.n	40105a <xQueueGenericReceive+0xfe>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  4010b6:	6823      	ldr	r3, [r4, #0]
  4010b8:	2b00      	cmp	r3, #0
  4010ba:	d0c7      	beq.n	40104c <xQueueGenericReceive+0xf0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  4010bc:	9901      	ldr	r1, [sp, #4]
  4010be:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4010c2:	4b18      	ldr	r3, [pc, #96]	; (401124 <xQueueGenericReceive+0x1c8>)
  4010c4:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  4010c6:	4620      	mov	r0, r4
  4010c8:	4b12      	ldr	r3, [pc, #72]	; (401114 <xQueueGenericReceive+0x1b8>)
  4010ca:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  4010cc:	4b12      	ldr	r3, [pc, #72]	; (401118 <xQueueGenericReceive+0x1bc>)
  4010ce:	4798      	blx	r3
  4010d0:	2800      	cmp	r0, #0
  4010d2:	d1c7      	bne.n	401064 <xQueueGenericReceive+0x108>
					portYIELD_WITHIN_API();
  4010d4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  4010d8:	f8c9 3000 	str.w	r3, [r9]
  4010dc:	f3bf 8f4f 	dsb	sy
  4010e0:	f3bf 8f6f 	isb	sy
  4010e4:	e7be      	b.n	401064 <xQueueGenericReceive+0x108>
			prvUnlockQueue( pxQueue );
  4010e6:	4620      	mov	r0, r4
  4010e8:	4b0a      	ldr	r3, [pc, #40]	; (401114 <xQueueGenericReceive+0x1b8>)
  4010ea:	4798      	blx	r3
			( void ) xTaskResumeAll();
  4010ec:	4b0a      	ldr	r3, [pc, #40]	; (401118 <xQueueGenericReceive+0x1bc>)
  4010ee:	4798      	blx	r3
			return errQUEUE_EMPTY;
  4010f0:	2000      	movs	r0, #0
  4010f2:	e791      	b.n	401018 <xQueueGenericReceive+0xbc>
  4010f4:	00401be9 	.word	0x00401be9
  4010f8:	004006a5 	.word	0x004006a5
  4010fc:	00400a9d 	.word	0x00400a9d
  401100:	00401d69 	.word	0x00401d69
  401104:	00401a81 	.word	0x00401a81
  401108:	e000ed04 	.word	0xe000ed04
  40110c:	004006f1 	.word	0x004006f1
  401110:	00401c09 	.word	0x00401c09
  401114:	00400ac5 	.word	0x00400ac5
  401118:	00401665 	.word	0x00401665
  40111c:	004014fd 	.word	0x004014fd
  401120:	00401b49 	.word	0x00401b49
  401124:	0040197d 	.word	0x0040197d
  401128:	00401b19 	.word	0x00401b19

0040112c <vQueueAddToRegistry>:
	{
  40112c:	b410      	push	{r4}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
  40112e:	4b0b      	ldr	r3, [pc, #44]	; (40115c <vQueueAddToRegistry+0x30>)
  401130:	681b      	ldr	r3, [r3, #0]
  401132:	b153      	cbz	r3, 40114a <vQueueAddToRegistry+0x1e>
  401134:	2301      	movs	r3, #1
  401136:	4c09      	ldr	r4, [pc, #36]	; (40115c <vQueueAddToRegistry+0x30>)
  401138:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
  40113c:	b132      	cbz	r2, 40114c <vQueueAddToRegistry+0x20>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  40113e:	3301      	adds	r3, #1
  401140:	2b08      	cmp	r3, #8
  401142:	d1f9      	bne.n	401138 <vQueueAddToRegistry+0xc>
	}
  401144:	f85d 4b04 	ldr.w	r4, [sp], #4
  401148:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  40114a:	2300      	movs	r3, #0
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
  40114c:	4a03      	ldr	r2, [pc, #12]	; (40115c <vQueueAddToRegistry+0x30>)
  40114e:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
  401152:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  401156:	6058      	str	r0, [r3, #4]
				break;
  401158:	e7f4      	b.n	401144 <vQueueAddToRegistry+0x18>
  40115a:	bf00      	nop
  40115c:	2040ca20 	.word	0x2040ca20

00401160 <vQueueWaitForMessageRestricted>:
	{
  401160:	b570      	push	{r4, r5, r6, lr}
  401162:	4604      	mov	r4, r0
  401164:	460d      	mov	r5, r1
  401166:	4616      	mov	r6, r2
		prvLockQueue( pxQueue );
  401168:	4b0f      	ldr	r3, [pc, #60]	; (4011a8 <vQueueWaitForMessageRestricted+0x48>)
  40116a:	4798      	blx	r3
  40116c:	6c63      	ldr	r3, [r4, #68]	; 0x44
  40116e:	f1b3 3fff 	cmp.w	r3, #4294967295
  401172:	d00b      	beq.n	40118c <vQueueWaitForMessageRestricted+0x2c>
  401174:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401176:	f1b3 3fff 	cmp.w	r3, #4294967295
  40117a:	d00a      	beq.n	401192 <vQueueWaitForMessageRestricted+0x32>
  40117c:	4b0b      	ldr	r3, [pc, #44]	; (4011ac <vQueueWaitForMessageRestricted+0x4c>)
  40117e:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
  401180:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401182:	b14b      	cbz	r3, 401198 <vQueueWaitForMessageRestricted+0x38>
		prvUnlockQueue( pxQueue );
  401184:	4620      	mov	r0, r4
  401186:	4b0a      	ldr	r3, [pc, #40]	; (4011b0 <vQueueWaitForMessageRestricted+0x50>)
  401188:	4798      	blx	r3
  40118a:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
  40118c:	2300      	movs	r3, #0
  40118e:	6463      	str	r3, [r4, #68]	; 0x44
  401190:	e7f0      	b.n	401174 <vQueueWaitForMessageRestricted+0x14>
  401192:	2300      	movs	r3, #0
  401194:	64a3      	str	r3, [r4, #72]	; 0x48
  401196:	e7f1      	b.n	40117c <vQueueWaitForMessageRestricted+0x1c>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
  401198:	4632      	mov	r2, r6
  40119a:	4629      	mov	r1, r5
  40119c:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4011a0:	4b04      	ldr	r3, [pc, #16]	; (4011b4 <vQueueWaitForMessageRestricted+0x54>)
  4011a2:	4798      	blx	r3
  4011a4:	e7ee      	b.n	401184 <vQueueWaitForMessageRestricted+0x24>
  4011a6:	bf00      	nop
  4011a8:	004006a5 	.word	0x004006a5
  4011ac:	004006f1 	.word	0x004006f1
  4011b0:	00400ac5 	.word	0x00400ac5
  4011b4:	00401a01 	.word	0x00401a01

004011b8 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  4011b8:	4b08      	ldr	r3, [pc, #32]	; (4011dc <prvResetNextTaskUnblockTime+0x24>)
  4011ba:	681b      	ldr	r3, [r3, #0]
  4011bc:	681b      	ldr	r3, [r3, #0]
  4011be:	b13b      	cbz	r3, 4011d0 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  4011c0:	4b06      	ldr	r3, [pc, #24]	; (4011dc <prvResetNextTaskUnblockTime+0x24>)
  4011c2:	681b      	ldr	r3, [r3, #0]
  4011c4:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
  4011c6:	68db      	ldr	r3, [r3, #12]
  4011c8:	685a      	ldr	r2, [r3, #4]
  4011ca:	4b05      	ldr	r3, [pc, #20]	; (4011e0 <prvResetNextTaskUnblockTime+0x28>)
  4011cc:	601a      	str	r2, [r3, #0]
  4011ce:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
  4011d0:	f04f 32ff 	mov.w	r2, #4294967295
  4011d4:	4b02      	ldr	r3, [pc, #8]	; (4011e0 <prvResetNextTaskUnblockTime+0x28>)
  4011d6:	601a      	str	r2, [r3, #0]
  4011d8:	4770      	bx	lr
  4011da:	bf00      	nop
  4011dc:	2040c200 	.word	0x2040c200
  4011e0:	2040c2ac 	.word	0x2040c2ac

004011e4 <prvAddCurrentTaskToDelayedList>:
{
  4011e4:	b510      	push	{r4, lr}
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
  4011e6:	4b0f      	ldr	r3, [pc, #60]	; (401224 <prvAddCurrentTaskToDelayedList+0x40>)
  4011e8:	681b      	ldr	r3, [r3, #0]
  4011ea:	6058      	str	r0, [r3, #4]
	if( xTimeToWake < xTickCount )
  4011ec:	4b0e      	ldr	r3, [pc, #56]	; (401228 <prvAddCurrentTaskToDelayedList+0x44>)
  4011ee:	681b      	ldr	r3, [r3, #0]
  4011f0:	4298      	cmp	r0, r3
  4011f2:	d30e      	bcc.n	401212 <prvAddCurrentTaskToDelayedList+0x2e>
  4011f4:	4604      	mov	r4, r0
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  4011f6:	4b0d      	ldr	r3, [pc, #52]	; (40122c <prvAddCurrentTaskToDelayedList+0x48>)
  4011f8:	6818      	ldr	r0, [r3, #0]
  4011fa:	4b0a      	ldr	r3, [pc, #40]	; (401224 <prvAddCurrentTaskToDelayedList+0x40>)
  4011fc:	6819      	ldr	r1, [r3, #0]
  4011fe:	3104      	adds	r1, #4
  401200:	4b0b      	ldr	r3, [pc, #44]	; (401230 <prvAddCurrentTaskToDelayedList+0x4c>)
  401202:	4798      	blx	r3
		if( xTimeToWake < xNextTaskUnblockTime )
  401204:	4b0b      	ldr	r3, [pc, #44]	; (401234 <prvAddCurrentTaskToDelayedList+0x50>)
  401206:	681b      	ldr	r3, [r3, #0]
  401208:	429c      	cmp	r4, r3
  40120a:	d201      	bcs.n	401210 <prvAddCurrentTaskToDelayedList+0x2c>
			xNextTaskUnblockTime = xTimeToWake;
  40120c:	4b09      	ldr	r3, [pc, #36]	; (401234 <prvAddCurrentTaskToDelayedList+0x50>)
  40120e:	601c      	str	r4, [r3, #0]
  401210:	bd10      	pop	{r4, pc}
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  401212:	4b09      	ldr	r3, [pc, #36]	; (401238 <prvAddCurrentTaskToDelayedList+0x54>)
  401214:	6818      	ldr	r0, [r3, #0]
  401216:	4b03      	ldr	r3, [pc, #12]	; (401224 <prvAddCurrentTaskToDelayedList+0x40>)
  401218:	6819      	ldr	r1, [r3, #0]
  40121a:	3104      	adds	r1, #4
  40121c:	4b04      	ldr	r3, [pc, #16]	; (401230 <prvAddCurrentTaskToDelayedList+0x4c>)
  40121e:	4798      	blx	r3
  401220:	bd10      	pop	{r4, pc}
  401222:	bf00      	nop
  401224:	2040c1fc 	.word	0x2040c1fc
  401228:	2040c2f4 	.word	0x2040c2f4
  40122c:	2040c200 	.word	0x2040c200
  401230:	0040058d 	.word	0x0040058d
  401234:	2040c2ac 	.word	0x2040c2ac
  401238:	2040c204 	.word	0x2040c204

0040123c <xTaskGenericCreate>:
{
  40123c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401240:	b083      	sub	sp, #12
  401242:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  401244:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
  401248:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	configASSERT( pxTaskCode );
  40124a:	b160      	cbz	r0, 401266 <xTaskGenericCreate+0x2a>
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
  40124c:	2d04      	cmp	r5, #4
  40124e:	d915      	bls.n	40127c <xTaskGenericCreate+0x40>
  401250:	f04f 0380 	mov.w	r3, #128	; 0x80
  401254:	b672      	cpsid	i
  401256:	f383 8811 	msr	BASEPRI, r3
  40125a:	f3bf 8f6f 	isb	sy
  40125e:	f3bf 8f4f 	dsb	sy
  401262:	b662      	cpsie	i
  401264:	e7fe      	b.n	401264 <xTaskGenericCreate+0x28>
  401266:	f04f 0380 	mov.w	r3, #128	; 0x80
  40126a:	b672      	cpsid	i
  40126c:	f383 8811 	msr	BASEPRI, r3
  401270:	f3bf 8f6f 	isb	sy
  401274:	f3bf 8f4f 	dsb	sy
  401278:	b662      	cpsie	i
  40127a:	e7fe      	b.n	40127a <xTaskGenericCreate+0x3e>
  40127c:	9001      	str	r0, [sp, #4]
  40127e:	4698      	mov	r8, r3
  401280:	4691      	mov	r9, r2
  401282:	460f      	mov	r7, r1
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401284:	b936      	cbnz	r6, 401294 <xTaskGenericCreate+0x58>
  401286:	0090      	lsls	r0, r2, #2
  401288:	4b62      	ldr	r3, [pc, #392]	; (401414 <xTaskGenericCreate+0x1d8>)
  40128a:	4798      	blx	r3
		if( pxStack != NULL )
  40128c:	4606      	mov	r6, r0
  40128e:	2800      	cmp	r0, #0
  401290:	f000 809e 	beq.w	4013d0 <xTaskGenericCreate+0x194>
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
  401294:	2058      	movs	r0, #88	; 0x58
  401296:	4b5f      	ldr	r3, [pc, #380]	; (401414 <xTaskGenericCreate+0x1d8>)
  401298:	4798      	blx	r3
			if( pxNewTCB != NULL )
  40129a:	4604      	mov	r4, r0
  40129c:	2800      	cmp	r0, #0
  40129e:	f000 8094 	beq.w	4013ca <xTaskGenericCreate+0x18e>
				pxNewTCB->pxStack = pxStack;
  4012a2:	6306      	str	r6, [r0, #48]	; 0x30
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
  4012a4:	ea4f 0289 	mov.w	r2, r9, lsl #2
  4012a8:	21a5      	movs	r1, #165	; 0xa5
  4012aa:	4630      	mov	r0, r6
  4012ac:	4b5a      	ldr	r3, [pc, #360]	; (401418 <xTaskGenericCreate+0x1dc>)
  4012ae:	4798      	blx	r3
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
  4012b0:	f06f 4640 	mvn.w	r6, #3221225472	; 0xc0000000
  4012b4:	444e      	add	r6, r9
  4012b6:	6b23      	ldr	r3, [r4, #48]	; 0x30
  4012b8:	eb03 0386 	add.w	r3, r3, r6, lsl #2
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
  4012bc:	f023 0607 	bic.w	r6, r3, #7
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  4012c0:	783b      	ldrb	r3, [r7, #0]
  4012c2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
  4012c6:	783b      	ldrb	r3, [r7, #0]
  4012c8:	2b00      	cmp	r3, #0
  4012ca:	f040 8084 	bne.w	4013d6 <xTaskGenericCreate+0x19a>
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
  4012ce:	2700      	movs	r7, #0
  4012d0:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
	pxTCB->uxPriority = uxPriority;
  4012d4:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxTCB->uxBasePriority = uxPriority;
  4012d6:	64a5      	str	r5, [r4, #72]	; 0x48
		pxTCB->uxMutexesHeld = 0;
  4012d8:	64e7      	str	r7, [r4, #76]	; 0x4c
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
  4012da:	f104 0904 	add.w	r9, r4, #4
  4012de:	4648      	mov	r0, r9
  4012e0:	f8df b184 	ldr.w	fp, [pc, #388]	; 401468 <xTaskGenericCreate+0x22c>
  4012e4:	47d8      	blx	fp
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
  4012e6:	f104 0018 	add.w	r0, r4, #24
  4012ea:	47d8      	blx	fp
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
  4012ec:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4012ee:	f1c5 0305 	rsb	r3, r5, #5
  4012f2:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
  4012f4:	6264      	str	r4, [r4, #36]	; 0x24
		pxTCB->ulNotifiedValue = 0;
  4012f6:	6527      	str	r7, [r4, #80]	; 0x50
		pxTCB->eNotifyState = eNotWaitingNotification;
  4012f8:	f884 7054 	strb.w	r7, [r4, #84]	; 0x54
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  4012fc:	4642      	mov	r2, r8
  4012fe:	9901      	ldr	r1, [sp, #4]
  401300:	4630      	mov	r0, r6
  401302:	4b46      	ldr	r3, [pc, #280]	; (40141c <xTaskGenericCreate+0x1e0>)
  401304:	4798      	blx	r3
  401306:	6020      	str	r0, [r4, #0]
		if( ( void * ) pxCreatedTask != NULL )
  401308:	f1ba 0f00 	cmp.w	sl, #0
  40130c:	d001      	beq.n	401312 <xTaskGenericCreate+0xd6>
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
  40130e:	f8ca 4000 	str.w	r4, [sl]
		taskENTER_CRITICAL();
  401312:	4b43      	ldr	r3, [pc, #268]	; (401420 <xTaskGenericCreate+0x1e4>)
  401314:	4798      	blx	r3
			uxCurrentNumberOfTasks++;
  401316:	4a43      	ldr	r2, [pc, #268]	; (401424 <xTaskGenericCreate+0x1e8>)
  401318:	6813      	ldr	r3, [r2, #0]
  40131a:	3301      	adds	r3, #1
  40131c:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
  40131e:	4b42      	ldr	r3, [pc, #264]	; (401428 <xTaskGenericCreate+0x1ec>)
  401320:	681b      	ldr	r3, [r3, #0]
  401322:	2b00      	cmp	r3, #0
  401324:	d166      	bne.n	4013f4 <xTaskGenericCreate+0x1b8>
				pxCurrentTCB =  pxNewTCB;
  401326:	4b40      	ldr	r3, [pc, #256]	; (401428 <xTaskGenericCreate+0x1ec>)
  401328:	601c      	str	r4, [r3, #0]
				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
  40132a:	6813      	ldr	r3, [r2, #0]
  40132c:	2b01      	cmp	r3, #1
  40132e:	d121      	bne.n	401374 <xTaskGenericCreate+0x138>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
  401330:	4f3e      	ldr	r7, [pc, #248]	; (40142c <xTaskGenericCreate+0x1f0>)
  401332:	4638      	mov	r0, r7
  401334:	4e3e      	ldr	r6, [pc, #248]	; (401430 <xTaskGenericCreate+0x1f4>)
  401336:	47b0      	blx	r6
  401338:	f107 0014 	add.w	r0, r7, #20
  40133c:	47b0      	blx	r6
  40133e:	f107 0028 	add.w	r0, r7, #40	; 0x28
  401342:	47b0      	blx	r6
  401344:	f107 003c 	add.w	r0, r7, #60	; 0x3c
  401348:	47b0      	blx	r6
  40134a:	f107 0050 	add.w	r0, r7, #80	; 0x50
  40134e:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList1 );
  401350:	f8df 8118 	ldr.w	r8, [pc, #280]	; 40146c <xTaskGenericCreate+0x230>
  401354:	4640      	mov	r0, r8
  401356:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList2 );
  401358:	4f36      	ldr	r7, [pc, #216]	; (401434 <xTaskGenericCreate+0x1f8>)
  40135a:	4638      	mov	r0, r7
  40135c:	47b0      	blx	r6
	vListInitialise( &xPendingReadyList );
  40135e:	4836      	ldr	r0, [pc, #216]	; (401438 <xTaskGenericCreate+0x1fc>)
  401360:	47b0      	blx	r6
		vListInitialise( &xTasksWaitingTermination );
  401362:	4836      	ldr	r0, [pc, #216]	; (40143c <xTaskGenericCreate+0x200>)
  401364:	47b0      	blx	r6
		vListInitialise( &xSuspendedTaskList );
  401366:	4836      	ldr	r0, [pc, #216]	; (401440 <xTaskGenericCreate+0x204>)
  401368:	47b0      	blx	r6
	pxDelayedTaskList = &xDelayedTaskList1;
  40136a:	4b36      	ldr	r3, [pc, #216]	; (401444 <xTaskGenericCreate+0x208>)
  40136c:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
  401370:	4b35      	ldr	r3, [pc, #212]	; (401448 <xTaskGenericCreate+0x20c>)
  401372:	601f      	str	r7, [r3, #0]
			uxTaskNumber++;
  401374:	4a35      	ldr	r2, [pc, #212]	; (40144c <xTaskGenericCreate+0x210>)
  401376:	6813      	ldr	r3, [r2, #0]
  401378:	3301      	adds	r3, #1
  40137a:	6013      	str	r3, [r2, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
  40137c:	6423      	str	r3, [r4, #64]	; 0x40
			prvAddTaskToReadyList( pxNewTCB );
  40137e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  401380:	4a33      	ldr	r2, [pc, #204]	; (401450 <xTaskGenericCreate+0x214>)
  401382:	6811      	ldr	r1, [r2, #0]
  401384:	2301      	movs	r3, #1
  401386:	4083      	lsls	r3, r0
  401388:	430b      	orrs	r3, r1
  40138a:	6013      	str	r3, [r2, #0]
  40138c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401390:	4649      	mov	r1, r9
  401392:	4b26      	ldr	r3, [pc, #152]	; (40142c <xTaskGenericCreate+0x1f0>)
  401394:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401398:	4b2e      	ldr	r3, [pc, #184]	; (401454 <xTaskGenericCreate+0x218>)
  40139a:	4798      	blx	r3
		taskEXIT_CRITICAL();
  40139c:	4b2e      	ldr	r3, [pc, #184]	; (401458 <xTaskGenericCreate+0x21c>)
  40139e:	4798      	blx	r3
		if( xSchedulerRunning != pdFALSE )
  4013a0:	4b2e      	ldr	r3, [pc, #184]	; (40145c <xTaskGenericCreate+0x220>)
  4013a2:	681b      	ldr	r3, [r3, #0]
  4013a4:	2b00      	cmp	r3, #0
  4013a6:	d031      	beq.n	40140c <xTaskGenericCreate+0x1d0>
			if( pxCurrentTCB->uxPriority < uxPriority )
  4013a8:	4b1f      	ldr	r3, [pc, #124]	; (401428 <xTaskGenericCreate+0x1ec>)
  4013aa:	681b      	ldr	r3, [r3, #0]
  4013ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4013ae:	429d      	cmp	r5, r3
  4013b0:	d92e      	bls.n	401410 <xTaskGenericCreate+0x1d4>
				taskYIELD_IF_USING_PREEMPTION();
  4013b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4013b6:	4b2a      	ldr	r3, [pc, #168]	; (401460 <xTaskGenericCreate+0x224>)
  4013b8:	601a      	str	r2, [r3, #0]
  4013ba:	f3bf 8f4f 	dsb	sy
  4013be:	f3bf 8f6f 	isb	sy
			xReturn = pdPASS;
  4013c2:	2001      	movs	r0, #1
}
  4013c4:	b003      	add	sp, #12
  4013c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				vPortFree( pxStack );
  4013ca:	4630      	mov	r0, r6
  4013cc:	4b25      	ldr	r3, [pc, #148]	; (401464 <xTaskGenericCreate+0x228>)
  4013ce:	4798      	blx	r3
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  4013d0:	f04f 30ff 	mov.w	r0, #4294967295
  4013d4:	e7f6      	b.n	4013c4 <xTaskGenericCreate+0x188>
  4013d6:	463b      	mov	r3, r7
  4013d8:	f104 0234 	add.w	r2, r4, #52	; 0x34
  4013dc:	3709      	adds	r7, #9
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  4013de:	7859      	ldrb	r1, [r3, #1]
  4013e0:	f802 1f01 	strb.w	r1, [r2, #1]!
		if( pcName[ x ] == 0x00 )
  4013e4:	f813 1f01 	ldrb.w	r1, [r3, #1]!
  4013e8:	2900      	cmp	r1, #0
  4013ea:	f43f af70 	beq.w	4012ce <xTaskGenericCreate+0x92>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
  4013ee:	42bb      	cmp	r3, r7
  4013f0:	d1f5      	bne.n	4013de <xTaskGenericCreate+0x1a2>
  4013f2:	e76c      	b.n	4012ce <xTaskGenericCreate+0x92>
				if( xSchedulerRunning == pdFALSE )
  4013f4:	4b19      	ldr	r3, [pc, #100]	; (40145c <xTaskGenericCreate+0x220>)
  4013f6:	681b      	ldr	r3, [r3, #0]
  4013f8:	2b00      	cmp	r3, #0
  4013fa:	d1bb      	bne.n	401374 <xTaskGenericCreate+0x138>
					if( pxCurrentTCB->uxPriority <= uxPriority )
  4013fc:	4b0a      	ldr	r3, [pc, #40]	; (401428 <xTaskGenericCreate+0x1ec>)
  4013fe:	681b      	ldr	r3, [r3, #0]
  401400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401402:	429d      	cmp	r5, r3
  401404:	d3b6      	bcc.n	401374 <xTaskGenericCreate+0x138>
						pxCurrentTCB = pxNewTCB;
  401406:	4b08      	ldr	r3, [pc, #32]	; (401428 <xTaskGenericCreate+0x1ec>)
  401408:	601c      	str	r4, [r3, #0]
  40140a:	e7b3      	b.n	401374 <xTaskGenericCreate+0x138>
			xReturn = pdPASS;
  40140c:	2001      	movs	r0, #1
  40140e:	e7d9      	b.n	4013c4 <xTaskGenericCreate+0x188>
  401410:	2001      	movs	r0, #1
	return xReturn;
  401412:	e7d7      	b.n	4013c4 <xTaskGenericCreate+0x188>
  401414:	00400901 	.word	0x00400901
  401418:	00406671 	.word	0x00406671
  40141c:	00400659 	.word	0x00400659
  401420:	004006a5 	.word	0x004006a5
  401424:	2040c26c 	.word	0x2040c26c
  401428:	2040c1fc 	.word	0x2040c1fc
  40142c:	2040c208 	.word	0x2040c208
  401430:	00400559 	.word	0x00400559
  401434:	2040c298 	.word	0x2040c298
  401438:	2040c2b4 	.word	0x2040c2b4
  40143c:	2040c2e0 	.word	0x2040c2e0
  401440:	2040c2cc 	.word	0x2040c2cc
  401444:	2040c200 	.word	0x2040c200
  401448:	2040c204 	.word	0x2040c204
  40144c:	2040c278 	.word	0x2040c278
  401450:	2040c280 	.word	0x2040c280
  401454:	00400575 	.word	0x00400575
  401458:	004006f1 	.word	0x004006f1
  40145c:	2040c2c8 	.word	0x2040c2c8
  401460:	e000ed04 	.word	0xe000ed04
  401464:	00400971 	.word	0x00400971
  401468:	0040056f 	.word	0x0040056f
  40146c:	2040c284 	.word	0x2040c284

00401470 <vTaskStartScheduler>:
{
  401470:	b510      	push	{r4, lr}
  401472:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
  401474:	2300      	movs	r3, #0
  401476:	9303      	str	r3, [sp, #12]
  401478:	9302      	str	r3, [sp, #8]
  40147a:	9301      	str	r3, [sp, #4]
  40147c:	9300      	str	r3, [sp, #0]
  40147e:	2282      	movs	r2, #130	; 0x82
  401480:	4916      	ldr	r1, [pc, #88]	; (4014dc <vTaskStartScheduler+0x6c>)
  401482:	4817      	ldr	r0, [pc, #92]	; (4014e0 <vTaskStartScheduler+0x70>)
  401484:	4c17      	ldr	r4, [pc, #92]	; (4014e4 <vTaskStartScheduler+0x74>)
  401486:	47a0      	blx	r4
		if( xReturn == pdPASS )
  401488:	2801      	cmp	r0, #1
  40148a:	d00b      	beq.n	4014a4 <vTaskStartScheduler+0x34>
		configASSERT( xReturn );
  40148c:	bb20      	cbnz	r0, 4014d8 <vTaskStartScheduler+0x68>
  40148e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401492:	b672      	cpsid	i
  401494:	f383 8811 	msr	BASEPRI, r3
  401498:	f3bf 8f6f 	isb	sy
  40149c:	f3bf 8f4f 	dsb	sy
  4014a0:	b662      	cpsie	i
  4014a2:	e7fe      	b.n	4014a2 <vTaskStartScheduler+0x32>
			xReturn = xTimerCreateTimerTask();
  4014a4:	4b10      	ldr	r3, [pc, #64]	; (4014e8 <vTaskStartScheduler+0x78>)
  4014a6:	4798      	blx	r3
	if( xReturn == pdPASS )
  4014a8:	2801      	cmp	r0, #1
  4014aa:	d1ef      	bne.n	40148c <vTaskStartScheduler+0x1c>
  4014ac:	f04f 0380 	mov.w	r3, #128	; 0x80
  4014b0:	b672      	cpsid	i
  4014b2:	f383 8811 	msr	BASEPRI, r3
  4014b6:	f3bf 8f6f 	isb	sy
  4014ba:	f3bf 8f4f 	dsb	sy
  4014be:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
  4014c0:	f04f 32ff 	mov.w	r2, #4294967295
  4014c4:	4b09      	ldr	r3, [pc, #36]	; (4014ec <vTaskStartScheduler+0x7c>)
  4014c6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
  4014c8:	2201      	movs	r2, #1
  4014ca:	4b09      	ldr	r3, [pc, #36]	; (4014f0 <vTaskStartScheduler+0x80>)
  4014cc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
  4014ce:	2200      	movs	r2, #0
  4014d0:	4b08      	ldr	r3, [pc, #32]	; (4014f4 <vTaskStartScheduler+0x84>)
  4014d2:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
  4014d4:	4b08      	ldr	r3, [pc, #32]	; (4014f8 <vTaskStartScheduler+0x88>)
  4014d6:	4798      	blx	r3
}
  4014d8:	b004      	add	sp, #16
  4014da:	bd10      	pop	{r4, pc}
  4014dc:	0040c9b4 	.word	0x0040c9b4
  4014e0:	00401815 	.word	0x00401815
  4014e4:	0040123d 	.word	0x0040123d
  4014e8:	00401e55 	.word	0x00401e55
  4014ec:	2040c2ac 	.word	0x2040c2ac
  4014f0:	2040c2c8 	.word	0x2040c2c8
  4014f4:	2040c2f4 	.word	0x2040c2f4
  4014f8:	004007d9 	.word	0x004007d9

004014fc <vTaskSuspendAll>:
	++uxSchedulerSuspended;
  4014fc:	4a02      	ldr	r2, [pc, #8]	; (401508 <vTaskSuspendAll+0xc>)
  4014fe:	6813      	ldr	r3, [r2, #0]
  401500:	3301      	adds	r3, #1
  401502:	6013      	str	r3, [r2, #0]
  401504:	4770      	bx	lr
  401506:	bf00      	nop
  401508:	2040c274 	.word	0x2040c274

0040150c <xTaskGetTickCount>:
		xTicks = xTickCount;
  40150c:	4b01      	ldr	r3, [pc, #4]	; (401514 <xTaskGetTickCount+0x8>)
  40150e:	6818      	ldr	r0, [r3, #0]
}
  401510:	4770      	bx	lr
  401512:	bf00      	nop
  401514:	2040c2f4 	.word	0x2040c2f4

00401518 <xTaskIncrementTick>:
{
  401518:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  40151c:	4b42      	ldr	r3, [pc, #264]	; (401628 <xTaskIncrementTick+0x110>)
  40151e:	681b      	ldr	r3, [r3, #0]
  401520:	2b00      	cmp	r3, #0
  401522:	d178      	bne.n	401616 <xTaskIncrementTick+0xfe>
		++xTickCount;
  401524:	4b41      	ldr	r3, [pc, #260]	; (40162c <xTaskIncrementTick+0x114>)
  401526:	681a      	ldr	r2, [r3, #0]
  401528:	3201      	adds	r2, #1
  40152a:	601a      	str	r2, [r3, #0]
			const TickType_t xConstTickCount = xTickCount;
  40152c:	681e      	ldr	r6, [r3, #0]
			if( xConstTickCount == ( TickType_t ) 0U )
  40152e:	b9d6      	cbnz	r6, 401566 <xTaskIncrementTick+0x4e>
				taskSWITCH_DELAYED_LISTS();
  401530:	4b3f      	ldr	r3, [pc, #252]	; (401630 <xTaskIncrementTick+0x118>)
  401532:	681b      	ldr	r3, [r3, #0]
  401534:	681b      	ldr	r3, [r3, #0]
  401536:	b153      	cbz	r3, 40154e <xTaskIncrementTick+0x36>
  401538:	f04f 0380 	mov.w	r3, #128	; 0x80
  40153c:	b672      	cpsid	i
  40153e:	f383 8811 	msr	BASEPRI, r3
  401542:	f3bf 8f6f 	isb	sy
  401546:	f3bf 8f4f 	dsb	sy
  40154a:	b662      	cpsie	i
  40154c:	e7fe      	b.n	40154c <xTaskIncrementTick+0x34>
  40154e:	4a38      	ldr	r2, [pc, #224]	; (401630 <xTaskIncrementTick+0x118>)
  401550:	6811      	ldr	r1, [r2, #0]
  401552:	4b38      	ldr	r3, [pc, #224]	; (401634 <xTaskIncrementTick+0x11c>)
  401554:	6818      	ldr	r0, [r3, #0]
  401556:	6010      	str	r0, [r2, #0]
  401558:	6019      	str	r1, [r3, #0]
  40155a:	4a37      	ldr	r2, [pc, #220]	; (401638 <xTaskIncrementTick+0x120>)
  40155c:	6813      	ldr	r3, [r2, #0]
  40155e:	3301      	adds	r3, #1
  401560:	6013      	str	r3, [r2, #0]
  401562:	4b36      	ldr	r3, [pc, #216]	; (40163c <xTaskIncrementTick+0x124>)
  401564:	4798      	blx	r3
			if( xConstTickCount >= xNextTaskUnblockTime )
  401566:	4b36      	ldr	r3, [pc, #216]	; (401640 <xTaskIncrementTick+0x128>)
  401568:	681b      	ldr	r3, [r3, #0]
  40156a:	429e      	cmp	r6, r3
  40156c:	d218      	bcs.n	4015a0 <xTaskIncrementTick+0x88>
BaseType_t xSwitchRequired = pdFALSE;
  40156e:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
  401570:	4b34      	ldr	r3, [pc, #208]	; (401644 <xTaskIncrementTick+0x12c>)
  401572:	681b      	ldr	r3, [r3, #0]
  401574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401576:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  40157a:	4a33      	ldr	r2, [pc, #204]	; (401648 <xTaskIncrementTick+0x130>)
  40157c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
				xSwitchRequired = pdTRUE;
  401580:	2b02      	cmp	r3, #2
  401582:	bf28      	it	cs
  401584:	2401      	movcs	r4, #1
			if( uxPendedTicks == ( UBaseType_t ) 0U )
  401586:	4b31      	ldr	r3, [pc, #196]	; (40164c <xTaskIncrementTick+0x134>)
  401588:	681b      	ldr	r3, [r3, #0]
  40158a:	b90b      	cbnz	r3, 401590 <xTaskIncrementTick+0x78>
				vApplicationTickHook();
  40158c:	4b30      	ldr	r3, [pc, #192]	; (401650 <xTaskIncrementTick+0x138>)
  40158e:	4798      	blx	r3
		if( xYieldPending != pdFALSE )
  401590:	4b30      	ldr	r3, [pc, #192]	; (401654 <xTaskIncrementTick+0x13c>)
  401592:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
  401594:	2b00      	cmp	r3, #0
}
  401596:	bf0c      	ite	eq
  401598:	4620      	moveq	r0, r4
  40159a:	2001      	movne	r0, #1
  40159c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4015a0:	2400      	movs	r4, #0
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  4015a2:	f8df 908c 	ldr.w	r9, [pc, #140]	; 401630 <xTaskIncrementTick+0x118>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  4015a6:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 401660 <xTaskIncrementTick+0x148>
						prvAddTaskToReadyList( pxTCB );
  4015aa:	4f2b      	ldr	r7, [pc, #172]	; (401658 <xTaskIncrementTick+0x140>)
  4015ac:	e01f      	b.n	4015ee <xTaskIncrementTick+0xd6>
						xNextTaskUnblockTime = portMAX_DELAY;
  4015ae:	f04f 32ff 	mov.w	r2, #4294967295
  4015b2:	4b23      	ldr	r3, [pc, #140]	; (401640 <xTaskIncrementTick+0x128>)
  4015b4:	601a      	str	r2, [r3, #0]
						break;
  4015b6:	e7db      	b.n	401570 <xTaskIncrementTick+0x58>
							xNextTaskUnblockTime = xItemValue;
  4015b8:	4a21      	ldr	r2, [pc, #132]	; (401640 <xTaskIncrementTick+0x128>)
  4015ba:	6013      	str	r3, [r2, #0]
							break;
  4015bc:	e7d8      	b.n	401570 <xTaskIncrementTick+0x58>
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  4015be:	f105 0018 	add.w	r0, r5, #24
  4015c2:	47c0      	blx	r8
						prvAddTaskToReadyList( pxTCB );
  4015c4:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
  4015c6:	683a      	ldr	r2, [r7, #0]
  4015c8:	2301      	movs	r3, #1
  4015ca:	4083      	lsls	r3, r0
  4015cc:	4313      	orrs	r3, r2
  4015ce:	603b      	str	r3, [r7, #0]
  4015d0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4015d4:	4651      	mov	r1, sl
  4015d6:	4b1c      	ldr	r3, [pc, #112]	; (401648 <xTaskIncrementTick+0x130>)
  4015d8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  4015dc:	4b1f      	ldr	r3, [pc, #124]	; (40165c <xTaskIncrementTick+0x144>)
  4015de:	4798      	blx	r3
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  4015e0:	4b18      	ldr	r3, [pc, #96]	; (401644 <xTaskIncrementTick+0x12c>)
  4015e2:	681b      	ldr	r3, [r3, #0]
  4015e4:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  4015e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
								xSwitchRequired = pdTRUE;
  4015e8:	429a      	cmp	r2, r3
  4015ea:	bf28      	it	cs
  4015ec:	2401      	movcs	r4, #1
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  4015ee:	f8d9 3000 	ldr.w	r3, [r9]
  4015f2:	681b      	ldr	r3, [r3, #0]
  4015f4:	2b00      	cmp	r3, #0
  4015f6:	d0da      	beq.n	4015ae <xTaskIncrementTick+0x96>
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  4015f8:	f8d9 3000 	ldr.w	r3, [r9]
  4015fc:	68db      	ldr	r3, [r3, #12]
  4015fe:	68dd      	ldr	r5, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
  401600:	686b      	ldr	r3, [r5, #4]
						if( xConstTickCount < xItemValue )
  401602:	429e      	cmp	r6, r3
  401604:	d3d8      	bcc.n	4015b8 <xTaskIncrementTick+0xa0>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  401606:	f105 0a04 	add.w	sl, r5, #4
  40160a:	4650      	mov	r0, sl
  40160c:	47c0      	blx	r8
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
  40160e:	6aab      	ldr	r3, [r5, #40]	; 0x28
  401610:	2b00      	cmp	r3, #0
  401612:	d1d4      	bne.n	4015be <xTaskIncrementTick+0xa6>
  401614:	e7d6      	b.n	4015c4 <xTaskIncrementTick+0xac>
		++uxPendedTicks;
  401616:	4a0d      	ldr	r2, [pc, #52]	; (40164c <xTaskIncrementTick+0x134>)
  401618:	6813      	ldr	r3, [r2, #0]
  40161a:	3301      	adds	r3, #1
  40161c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
  40161e:	4b0c      	ldr	r3, [pc, #48]	; (401650 <xTaskIncrementTick+0x138>)
  401620:	4798      	blx	r3
BaseType_t xSwitchRequired = pdFALSE;
  401622:	2400      	movs	r4, #0
  401624:	e7b4      	b.n	401590 <xTaskIncrementTick+0x78>
  401626:	bf00      	nop
  401628:	2040c274 	.word	0x2040c274
  40162c:	2040c2f4 	.word	0x2040c2f4
  401630:	2040c200 	.word	0x2040c200
  401634:	2040c204 	.word	0x2040c204
  401638:	2040c2b0 	.word	0x2040c2b0
  40163c:	004011b9 	.word	0x004011b9
  401640:	2040c2ac 	.word	0x2040c2ac
  401644:	2040c1fc 	.word	0x2040c1fc
  401648:	2040c208 	.word	0x2040c208
  40164c:	2040c270 	.word	0x2040c270
  401650:	00406175 	.word	0x00406175
  401654:	2040c2f8 	.word	0x2040c2f8
  401658:	2040c280 	.word	0x2040c280
  40165c:	00400575 	.word	0x00400575
  401660:	004005c1 	.word	0x004005c1

00401664 <xTaskResumeAll>:
{
  401664:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
  401668:	4b38      	ldr	r3, [pc, #224]	; (40174c <xTaskResumeAll+0xe8>)
  40166a:	681b      	ldr	r3, [r3, #0]
  40166c:	b953      	cbnz	r3, 401684 <xTaskResumeAll+0x20>
  40166e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401672:	b672      	cpsid	i
  401674:	f383 8811 	msr	BASEPRI, r3
  401678:	f3bf 8f6f 	isb	sy
  40167c:	f3bf 8f4f 	dsb	sy
  401680:	b662      	cpsie	i
  401682:	e7fe      	b.n	401682 <xTaskResumeAll+0x1e>
	taskENTER_CRITICAL();
  401684:	4b32      	ldr	r3, [pc, #200]	; (401750 <xTaskResumeAll+0xec>)
  401686:	4798      	blx	r3
		--uxSchedulerSuspended;
  401688:	4b30      	ldr	r3, [pc, #192]	; (40174c <xTaskResumeAll+0xe8>)
  40168a:	681a      	ldr	r2, [r3, #0]
  40168c:	3a01      	subs	r2, #1
  40168e:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  401690:	681b      	ldr	r3, [r3, #0]
  401692:	2b00      	cmp	r3, #0
  401694:	d155      	bne.n	401742 <xTaskResumeAll+0xde>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
  401696:	4b2f      	ldr	r3, [pc, #188]	; (401754 <xTaskResumeAll+0xf0>)
  401698:	681b      	ldr	r3, [r3, #0]
  40169a:	2b00      	cmp	r3, #0
  40169c:	d132      	bne.n	401704 <xTaskResumeAll+0xa0>
BaseType_t xAlreadyYielded = pdFALSE;
  40169e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  4016a0:	4b2d      	ldr	r3, [pc, #180]	; (401758 <xTaskResumeAll+0xf4>)
  4016a2:	4798      	blx	r3
}
  4016a4:	4620      	mov	r0, r4
  4016a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
  4016aa:	68fb      	ldr	r3, [r7, #12]
  4016ac:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  4016ae:	f104 0018 	add.w	r0, r4, #24
  4016b2:	47b0      	blx	r6
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  4016b4:	f104 0804 	add.w	r8, r4, #4
  4016b8:	4640      	mov	r0, r8
  4016ba:	47b0      	blx	r6
					prvAddTaskToReadyList( pxTCB );
  4016bc:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  4016be:	682a      	ldr	r2, [r5, #0]
  4016c0:	2301      	movs	r3, #1
  4016c2:	4083      	lsls	r3, r0
  4016c4:	4313      	orrs	r3, r2
  4016c6:	602b      	str	r3, [r5, #0]
  4016c8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4016cc:	4641      	mov	r1, r8
  4016ce:	eb09 0080 	add.w	r0, r9, r0, lsl #2
  4016d2:	4b22      	ldr	r3, [pc, #136]	; (40175c <xTaskResumeAll+0xf8>)
  4016d4:	4798      	blx	r3
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  4016d6:	4b22      	ldr	r3, [pc, #136]	; (401760 <xTaskResumeAll+0xfc>)
  4016d8:	681b      	ldr	r3, [r3, #0]
  4016da:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  4016dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4016de:	429a      	cmp	r2, r3
  4016e0:	d20c      	bcs.n	4016fc <xTaskResumeAll+0x98>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  4016e2:	683b      	ldr	r3, [r7, #0]
  4016e4:	2b00      	cmp	r3, #0
  4016e6:	d1e0      	bne.n	4016aa <xTaskResumeAll+0x46>
				if( uxPendedTicks > ( UBaseType_t ) 0U )
  4016e8:	4b1e      	ldr	r3, [pc, #120]	; (401764 <xTaskResumeAll+0x100>)
  4016ea:	681b      	ldr	r3, [r3, #0]
  4016ec:	b1db      	cbz	r3, 401726 <xTaskResumeAll+0xc2>
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  4016ee:	4b1d      	ldr	r3, [pc, #116]	; (401764 <xTaskResumeAll+0x100>)
  4016f0:	681b      	ldr	r3, [r3, #0]
  4016f2:	b1c3      	cbz	r3, 401726 <xTaskResumeAll+0xc2>
						if( xTaskIncrementTick() != pdFALSE )
  4016f4:	4e1c      	ldr	r6, [pc, #112]	; (401768 <xTaskResumeAll+0x104>)
							xYieldPending = pdTRUE;
  4016f6:	4d1d      	ldr	r5, [pc, #116]	; (40176c <xTaskResumeAll+0x108>)
						--uxPendedTicks;
  4016f8:	4c1a      	ldr	r4, [pc, #104]	; (401764 <xTaskResumeAll+0x100>)
  4016fa:	e00e      	b.n	40171a <xTaskResumeAll+0xb6>
						xYieldPending = pdTRUE;
  4016fc:	2201      	movs	r2, #1
  4016fe:	4b1b      	ldr	r3, [pc, #108]	; (40176c <xTaskResumeAll+0x108>)
  401700:	601a      	str	r2, [r3, #0]
  401702:	e7ee      	b.n	4016e2 <xTaskResumeAll+0x7e>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  401704:	4f1a      	ldr	r7, [pc, #104]	; (401770 <xTaskResumeAll+0x10c>)
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  401706:	4e1b      	ldr	r6, [pc, #108]	; (401774 <xTaskResumeAll+0x110>)
					prvAddTaskToReadyList( pxTCB );
  401708:	4d1b      	ldr	r5, [pc, #108]	; (401778 <xTaskResumeAll+0x114>)
  40170a:	f8df 9074 	ldr.w	r9, [pc, #116]	; 401780 <xTaskResumeAll+0x11c>
  40170e:	e7e8      	b.n	4016e2 <xTaskResumeAll+0x7e>
						--uxPendedTicks;
  401710:	6823      	ldr	r3, [r4, #0]
  401712:	3b01      	subs	r3, #1
  401714:	6023      	str	r3, [r4, #0]
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  401716:	6823      	ldr	r3, [r4, #0]
  401718:	b12b      	cbz	r3, 401726 <xTaskResumeAll+0xc2>
						if( xTaskIncrementTick() != pdFALSE )
  40171a:	47b0      	blx	r6
  40171c:	2800      	cmp	r0, #0
  40171e:	d0f7      	beq.n	401710 <xTaskResumeAll+0xac>
							xYieldPending = pdTRUE;
  401720:	2301      	movs	r3, #1
  401722:	602b      	str	r3, [r5, #0]
  401724:	e7f4      	b.n	401710 <xTaskResumeAll+0xac>
				if( xYieldPending == pdTRUE )
  401726:	4b11      	ldr	r3, [pc, #68]	; (40176c <xTaskResumeAll+0x108>)
  401728:	681b      	ldr	r3, [r3, #0]
  40172a:	2b01      	cmp	r3, #1
  40172c:	d10b      	bne.n	401746 <xTaskResumeAll+0xe2>
					taskYIELD_IF_USING_PREEMPTION();
  40172e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401732:	4b12      	ldr	r3, [pc, #72]	; (40177c <xTaskResumeAll+0x118>)
  401734:	601a      	str	r2, [r3, #0]
  401736:	f3bf 8f4f 	dsb	sy
  40173a:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
  40173e:	2401      	movs	r4, #1
  401740:	e7ae      	b.n	4016a0 <xTaskResumeAll+0x3c>
BaseType_t xAlreadyYielded = pdFALSE;
  401742:	2400      	movs	r4, #0
  401744:	e7ac      	b.n	4016a0 <xTaskResumeAll+0x3c>
  401746:	2400      	movs	r4, #0
  401748:	e7aa      	b.n	4016a0 <xTaskResumeAll+0x3c>
  40174a:	bf00      	nop
  40174c:	2040c274 	.word	0x2040c274
  401750:	004006a5 	.word	0x004006a5
  401754:	2040c26c 	.word	0x2040c26c
  401758:	004006f1 	.word	0x004006f1
  40175c:	00400575 	.word	0x00400575
  401760:	2040c1fc 	.word	0x2040c1fc
  401764:	2040c270 	.word	0x2040c270
  401768:	00401519 	.word	0x00401519
  40176c:	2040c2f8 	.word	0x2040c2f8
  401770:	2040c2b4 	.word	0x2040c2b4
  401774:	004005c1 	.word	0x004005c1
  401778:	2040c280 	.word	0x2040c280
  40177c:	e000ed04 	.word	0xe000ed04
  401780:	2040c208 	.word	0x2040c208

00401784 <vTaskDelay>:
	{
  401784:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
  401786:	2800      	cmp	r0, #0
  401788:	d029      	beq.n	4017de <vTaskDelay+0x5a>
  40178a:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
  40178c:	4b18      	ldr	r3, [pc, #96]	; (4017f0 <vTaskDelay+0x6c>)
  40178e:	681b      	ldr	r3, [r3, #0]
  401790:	b153      	cbz	r3, 4017a8 <vTaskDelay+0x24>
  401792:	f04f 0380 	mov.w	r3, #128	; 0x80
  401796:	b672      	cpsid	i
  401798:	f383 8811 	msr	BASEPRI, r3
  40179c:	f3bf 8f6f 	isb	sy
  4017a0:	f3bf 8f4f 	dsb	sy
  4017a4:	b662      	cpsie	i
  4017a6:	e7fe      	b.n	4017a6 <vTaskDelay+0x22>
			vTaskSuspendAll();
  4017a8:	4b12      	ldr	r3, [pc, #72]	; (4017f4 <vTaskDelay+0x70>)
  4017aa:	4798      	blx	r3
				xTimeToWake = xTickCount + xTicksToDelay;
  4017ac:	4b12      	ldr	r3, [pc, #72]	; (4017f8 <vTaskDelay+0x74>)
  4017ae:	681b      	ldr	r3, [r3, #0]
  4017b0:	441c      	add	r4, r3
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  4017b2:	4b12      	ldr	r3, [pc, #72]	; (4017fc <vTaskDelay+0x78>)
  4017b4:	6818      	ldr	r0, [r3, #0]
  4017b6:	3004      	adds	r0, #4
  4017b8:	4b11      	ldr	r3, [pc, #68]	; (401800 <vTaskDelay+0x7c>)
  4017ba:	4798      	blx	r3
  4017bc:	b948      	cbnz	r0, 4017d2 <vTaskDelay+0x4e>
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  4017be:	4b0f      	ldr	r3, [pc, #60]	; (4017fc <vTaskDelay+0x78>)
  4017c0:	681a      	ldr	r2, [r3, #0]
  4017c2:	4910      	ldr	r1, [pc, #64]	; (401804 <vTaskDelay+0x80>)
  4017c4:	680b      	ldr	r3, [r1, #0]
  4017c6:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  4017c8:	2201      	movs	r2, #1
  4017ca:	4082      	lsls	r2, r0
  4017cc:	ea23 0302 	bic.w	r3, r3, r2
  4017d0:	600b      	str	r3, [r1, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  4017d2:	4620      	mov	r0, r4
  4017d4:	4b0c      	ldr	r3, [pc, #48]	; (401808 <vTaskDelay+0x84>)
  4017d6:	4798      	blx	r3
			xAlreadyYielded = xTaskResumeAll();
  4017d8:	4b0c      	ldr	r3, [pc, #48]	; (40180c <vTaskDelay+0x88>)
  4017da:	4798      	blx	r3
		if( xAlreadyYielded == pdFALSE )
  4017dc:	b938      	cbnz	r0, 4017ee <vTaskDelay+0x6a>
			portYIELD_WITHIN_API();
  4017de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4017e2:	4b0b      	ldr	r3, [pc, #44]	; (401810 <vTaskDelay+0x8c>)
  4017e4:	601a      	str	r2, [r3, #0]
  4017e6:	f3bf 8f4f 	dsb	sy
  4017ea:	f3bf 8f6f 	isb	sy
  4017ee:	bd10      	pop	{r4, pc}
  4017f0:	2040c274 	.word	0x2040c274
  4017f4:	004014fd 	.word	0x004014fd
  4017f8:	2040c2f4 	.word	0x2040c2f4
  4017fc:	2040c1fc 	.word	0x2040c1fc
  401800:	004005c1 	.word	0x004005c1
  401804:	2040c280 	.word	0x2040c280
  401808:	004011e5 	.word	0x004011e5
  40180c:	00401665 	.word	0x00401665
  401810:	e000ed04 	.word	0xe000ed04

00401814 <prvIdleTask>:
{
  401814:	b580      	push	{r7, lr}
			vTaskSuspendAll();
  401816:	f8df 8088 	ldr.w	r8, [pc, #136]	; 4018a0 <prvIdleTask+0x8c>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  40181a:	4e19      	ldr	r6, [pc, #100]	; (401880 <prvIdleTask+0x6c>)
				taskYIELD();
  40181c:	f8df 9084 	ldr.w	r9, [pc, #132]	; 4018a4 <prvIdleTask+0x90>
  401820:	e02a      	b.n	401878 <prvIdleTask+0x64>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
  401822:	4b18      	ldr	r3, [pc, #96]	; (401884 <prvIdleTask+0x70>)
  401824:	681b      	ldr	r3, [r3, #0]
  401826:	2b01      	cmp	r3, #1
  401828:	d81e      	bhi.n	401868 <prvIdleTask+0x54>
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  40182a:	682b      	ldr	r3, [r5, #0]
  40182c:	2b00      	cmp	r3, #0
  40182e:	d0f8      	beq.n	401822 <prvIdleTask+0xe>
			vTaskSuspendAll();
  401830:	47c0      	blx	r8
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  401832:	6834      	ldr	r4, [r6, #0]
			( void ) xTaskResumeAll();
  401834:	47b8      	blx	r7
			if( xListIsEmpty == pdFALSE )
  401836:	2c00      	cmp	r4, #0
  401838:	d0f7      	beq.n	40182a <prvIdleTask+0x16>
				taskENTER_CRITICAL();
  40183a:	4b13      	ldr	r3, [pc, #76]	; (401888 <prvIdleTask+0x74>)
  40183c:	4798      	blx	r3
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
  40183e:	68f3      	ldr	r3, [r6, #12]
  401840:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  401842:	1d20      	adds	r0, r4, #4
  401844:	4b11      	ldr	r3, [pc, #68]	; (40188c <prvIdleTask+0x78>)
  401846:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
  401848:	4a11      	ldr	r2, [pc, #68]	; (401890 <prvIdleTask+0x7c>)
  40184a:	6813      	ldr	r3, [r2, #0]
  40184c:	3b01      	subs	r3, #1
  40184e:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
  401850:	682b      	ldr	r3, [r5, #0]
  401852:	3b01      	subs	r3, #1
  401854:	602b      	str	r3, [r5, #0]
				taskEXIT_CRITICAL();
  401856:	4b0f      	ldr	r3, [pc, #60]	; (401894 <prvIdleTask+0x80>)
  401858:	4798      	blx	r3
			vPortFreeAligned( pxTCB->pxStack );
  40185a:	6b20      	ldr	r0, [r4, #48]	; 0x30
  40185c:	f8df a048 	ldr.w	sl, [pc, #72]	; 4018a8 <prvIdleTask+0x94>
  401860:	47d0      	blx	sl
		vPortFree( pxTCB );
  401862:	4620      	mov	r0, r4
  401864:	47d0      	blx	sl
  401866:	e7e0      	b.n	40182a <prvIdleTask+0x16>
				taskYIELD();
  401868:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  40186c:	f8c9 3000 	str.w	r3, [r9]
  401870:	f3bf 8f4f 	dsb	sy
  401874:	f3bf 8f6f 	isb	sy
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  401878:	4d07      	ldr	r5, [pc, #28]	; (401898 <prvIdleTask+0x84>)
			( void ) xTaskResumeAll();
  40187a:	4f08      	ldr	r7, [pc, #32]	; (40189c <prvIdleTask+0x88>)
  40187c:	e7d5      	b.n	40182a <prvIdleTask+0x16>
  40187e:	bf00      	nop
  401880:	2040c2e0 	.word	0x2040c2e0
  401884:	2040c208 	.word	0x2040c208
  401888:	004006a5 	.word	0x004006a5
  40188c:	004005c1 	.word	0x004005c1
  401890:	2040c26c 	.word	0x2040c26c
  401894:	004006f1 	.word	0x004006f1
  401898:	2040c27c 	.word	0x2040c27c
  40189c:	00401665 	.word	0x00401665
  4018a0:	004014fd 	.word	0x004014fd
  4018a4:	e000ed04 	.word	0xe000ed04
  4018a8:	00400971 	.word	0x00400971

004018ac <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
  4018ac:	4b2d      	ldr	r3, [pc, #180]	; (401964 <vTaskSwitchContext+0xb8>)
  4018ae:	681b      	ldr	r3, [r3, #0]
  4018b0:	2b00      	cmp	r3, #0
  4018b2:	d12c      	bne.n	40190e <vTaskSwitchContext+0x62>
{
  4018b4:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
  4018b6:	2200      	movs	r2, #0
  4018b8:	4b2b      	ldr	r3, [pc, #172]	; (401968 <vTaskSwitchContext+0xbc>)
  4018ba:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
  4018bc:	4b2b      	ldr	r3, [pc, #172]	; (40196c <vTaskSwitchContext+0xc0>)
  4018be:	681b      	ldr	r3, [r3, #0]
  4018c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4018c2:	681a      	ldr	r2, [r3, #0]
  4018c4:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  4018c8:	d103      	bne.n	4018d2 <vTaskSwitchContext+0x26>
  4018ca:	685a      	ldr	r2, [r3, #4]
  4018cc:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  4018d0:	d021      	beq.n	401916 <vTaskSwitchContext+0x6a>
  4018d2:	4b26      	ldr	r3, [pc, #152]	; (40196c <vTaskSwitchContext+0xc0>)
  4018d4:	6818      	ldr	r0, [r3, #0]
  4018d6:	6819      	ldr	r1, [r3, #0]
  4018d8:	3134      	adds	r1, #52	; 0x34
  4018da:	4b25      	ldr	r3, [pc, #148]	; (401970 <vTaskSwitchContext+0xc4>)
  4018dc:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
  4018de:	4b25      	ldr	r3, [pc, #148]	; (401974 <vTaskSwitchContext+0xc8>)
  4018e0:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
  4018e2:	fab3 f383 	clz	r3, r3
  4018e6:	b2db      	uxtb	r3, r3
  4018e8:	f1c3 031f 	rsb	r3, r3, #31
  4018ec:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  4018f0:	4a21      	ldr	r2, [pc, #132]	; (401978 <vTaskSwitchContext+0xcc>)
  4018f2:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  4018f6:	b9ba      	cbnz	r2, 401928 <vTaskSwitchContext+0x7c>
	__asm volatile
  4018f8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4018fc:	b672      	cpsid	i
  4018fe:	f383 8811 	msr	BASEPRI, r3
  401902:	f3bf 8f6f 	isb	sy
  401906:	f3bf 8f4f 	dsb	sy
  40190a:	b662      	cpsie	i
  40190c:	e7fe      	b.n	40190c <vTaskSwitchContext+0x60>
		xYieldPending = pdTRUE;
  40190e:	2201      	movs	r2, #1
  401910:	4b15      	ldr	r3, [pc, #84]	; (401968 <vTaskSwitchContext+0xbc>)
  401912:	601a      	str	r2, [r3, #0]
  401914:	4770      	bx	lr
		taskCHECK_FOR_STACK_OVERFLOW();
  401916:	689a      	ldr	r2, [r3, #8]
  401918:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  40191c:	d1d9      	bne.n	4018d2 <vTaskSwitchContext+0x26>
  40191e:	68db      	ldr	r3, [r3, #12]
  401920:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
  401924:	d1d5      	bne.n	4018d2 <vTaskSwitchContext+0x26>
  401926:	e7da      	b.n	4018de <vTaskSwitchContext+0x32>
		taskSELECT_HIGHEST_PRIORITY_TASK();
  401928:	4a13      	ldr	r2, [pc, #76]	; (401978 <vTaskSwitchContext+0xcc>)
  40192a:	0099      	lsls	r1, r3, #2
  40192c:	18c8      	adds	r0, r1, r3
  40192e:	eb02 0080 	add.w	r0, r2, r0, lsl #2
  401932:	6844      	ldr	r4, [r0, #4]
  401934:	6864      	ldr	r4, [r4, #4]
  401936:	6044      	str	r4, [r0, #4]
  401938:	4419      	add	r1, r3
  40193a:	4602      	mov	r2, r0
  40193c:	3208      	adds	r2, #8
  40193e:	4294      	cmp	r4, r2
  401940:	d009      	beq.n	401956 <vTaskSwitchContext+0xaa>
  401942:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  401946:	4a0c      	ldr	r2, [pc, #48]	; (401978 <vTaskSwitchContext+0xcc>)
  401948:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  40194c:	685b      	ldr	r3, [r3, #4]
  40194e:	68da      	ldr	r2, [r3, #12]
  401950:	4b06      	ldr	r3, [pc, #24]	; (40196c <vTaskSwitchContext+0xc0>)
  401952:	601a      	str	r2, [r3, #0]
  401954:	bd10      	pop	{r4, pc}
  401956:	6860      	ldr	r0, [r4, #4]
  401958:	4a07      	ldr	r2, [pc, #28]	; (401978 <vTaskSwitchContext+0xcc>)
  40195a:	eb02 0281 	add.w	r2, r2, r1, lsl #2
  40195e:	6050      	str	r0, [r2, #4]
  401960:	e7ef      	b.n	401942 <vTaskSwitchContext+0x96>
  401962:	bf00      	nop
  401964:	2040c274 	.word	0x2040c274
  401968:	2040c2f8 	.word	0x2040c2f8
  40196c:	2040c1fc 	.word	0x2040c1fc
  401970:	0040615d 	.word	0x0040615d
  401974:	2040c280 	.word	0x2040c280
  401978:	2040c208 	.word	0x2040c208

0040197c <vTaskPlaceOnEventList>:
{
  40197c:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxEventList );
  40197e:	b1e0      	cbz	r0, 4019ba <vTaskPlaceOnEventList+0x3e>
  401980:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  401982:	4d17      	ldr	r5, [pc, #92]	; (4019e0 <vTaskPlaceOnEventList+0x64>)
  401984:	6829      	ldr	r1, [r5, #0]
  401986:	3118      	adds	r1, #24
  401988:	4b16      	ldr	r3, [pc, #88]	; (4019e4 <vTaskPlaceOnEventList+0x68>)
  40198a:	4798      	blx	r3
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  40198c:	6828      	ldr	r0, [r5, #0]
  40198e:	3004      	adds	r0, #4
  401990:	4b15      	ldr	r3, [pc, #84]	; (4019e8 <vTaskPlaceOnEventList+0x6c>)
  401992:	4798      	blx	r3
  401994:	b940      	cbnz	r0, 4019a8 <vTaskPlaceOnEventList+0x2c>
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  401996:	682a      	ldr	r2, [r5, #0]
  401998:	4914      	ldr	r1, [pc, #80]	; (4019ec <vTaskPlaceOnEventList+0x70>)
  40199a:	680b      	ldr	r3, [r1, #0]
  40199c:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  40199e:	2201      	movs	r2, #1
  4019a0:	4082      	lsls	r2, r0
  4019a2:	ea23 0302 	bic.w	r3, r3, r2
  4019a6:	600b      	str	r3, [r1, #0]
		if( xTicksToWait == portMAX_DELAY )
  4019a8:	f1b4 3fff 	cmp.w	r4, #4294967295
  4019ac:	d010      	beq.n	4019d0 <vTaskPlaceOnEventList+0x54>
			xTimeToWake = xTickCount + xTicksToWait;
  4019ae:	4b10      	ldr	r3, [pc, #64]	; (4019f0 <vTaskPlaceOnEventList+0x74>)
  4019b0:	6818      	ldr	r0, [r3, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
  4019b2:	4420      	add	r0, r4
  4019b4:	4b0f      	ldr	r3, [pc, #60]	; (4019f4 <vTaskPlaceOnEventList+0x78>)
  4019b6:	4798      	blx	r3
  4019b8:	bd38      	pop	{r3, r4, r5, pc}
  4019ba:	f04f 0380 	mov.w	r3, #128	; 0x80
  4019be:	b672      	cpsid	i
  4019c0:	f383 8811 	msr	BASEPRI, r3
  4019c4:	f3bf 8f6f 	isb	sy
  4019c8:	f3bf 8f4f 	dsb	sy
  4019cc:	b662      	cpsie	i
  4019ce:	e7fe      	b.n	4019ce <vTaskPlaceOnEventList+0x52>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  4019d0:	4b03      	ldr	r3, [pc, #12]	; (4019e0 <vTaskPlaceOnEventList+0x64>)
  4019d2:	6819      	ldr	r1, [r3, #0]
  4019d4:	3104      	adds	r1, #4
  4019d6:	4808      	ldr	r0, [pc, #32]	; (4019f8 <vTaskPlaceOnEventList+0x7c>)
  4019d8:	4b08      	ldr	r3, [pc, #32]	; (4019fc <vTaskPlaceOnEventList+0x80>)
  4019da:	4798      	blx	r3
  4019dc:	bd38      	pop	{r3, r4, r5, pc}
  4019de:	bf00      	nop
  4019e0:	2040c1fc 	.word	0x2040c1fc
  4019e4:	0040058d 	.word	0x0040058d
  4019e8:	004005c1 	.word	0x004005c1
  4019ec:	2040c280 	.word	0x2040c280
  4019f0:	2040c2f4 	.word	0x2040c2f4
  4019f4:	004011e5 	.word	0x004011e5
  4019f8:	2040c2cc 	.word	0x2040c2cc
  4019fc:	00400575 	.word	0x00400575

00401a00 <vTaskPlaceOnEventListRestricted>:
		configASSERT( pxEventList );
  401a00:	b1e8      	cbz	r0, 401a3e <vTaskPlaceOnEventListRestricted+0x3e>
	{
  401a02:	b570      	push	{r4, r5, r6, lr}
  401a04:	4615      	mov	r5, r2
  401a06:	460c      	mov	r4, r1
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  401a08:	4e16      	ldr	r6, [pc, #88]	; (401a64 <vTaskPlaceOnEventListRestricted+0x64>)
  401a0a:	6831      	ldr	r1, [r6, #0]
  401a0c:	3118      	adds	r1, #24
  401a0e:	4b16      	ldr	r3, [pc, #88]	; (401a68 <vTaskPlaceOnEventListRestricted+0x68>)
  401a10:	4798      	blx	r3
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  401a12:	6830      	ldr	r0, [r6, #0]
  401a14:	3004      	adds	r0, #4
  401a16:	4b15      	ldr	r3, [pc, #84]	; (401a6c <vTaskPlaceOnEventListRestricted+0x6c>)
  401a18:	4798      	blx	r3
  401a1a:	b940      	cbnz	r0, 401a2e <vTaskPlaceOnEventListRestricted+0x2e>
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  401a1c:	6832      	ldr	r2, [r6, #0]
  401a1e:	4914      	ldr	r1, [pc, #80]	; (401a70 <vTaskPlaceOnEventListRestricted+0x70>)
  401a20:	680b      	ldr	r3, [r1, #0]
  401a22:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  401a24:	2201      	movs	r2, #1
  401a26:	4082      	lsls	r2, r0
  401a28:	ea23 0302 	bic.w	r3, r3, r2
  401a2c:	600b      	str	r3, [r1, #0]
			if( xWaitIndefinitely == pdTRUE )
  401a2e:	2d01      	cmp	r5, #1
  401a30:	d010      	beq.n	401a54 <vTaskPlaceOnEventListRestricted+0x54>
				xTimeToWake = xTickCount + xTicksToWait;
  401a32:	4b10      	ldr	r3, [pc, #64]	; (401a74 <vTaskPlaceOnEventListRestricted+0x74>)
  401a34:	6818      	ldr	r0, [r3, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  401a36:	4420      	add	r0, r4
  401a38:	4b0f      	ldr	r3, [pc, #60]	; (401a78 <vTaskPlaceOnEventListRestricted+0x78>)
  401a3a:	4798      	blx	r3
  401a3c:	bd70      	pop	{r4, r5, r6, pc}
  401a3e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401a42:	b672      	cpsid	i
  401a44:	f383 8811 	msr	BASEPRI, r3
  401a48:	f3bf 8f6f 	isb	sy
  401a4c:	f3bf 8f4f 	dsb	sy
  401a50:	b662      	cpsie	i
  401a52:	e7fe      	b.n	401a52 <vTaskPlaceOnEventListRestricted+0x52>
				vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  401a54:	4b03      	ldr	r3, [pc, #12]	; (401a64 <vTaskPlaceOnEventListRestricted+0x64>)
  401a56:	6819      	ldr	r1, [r3, #0]
  401a58:	3104      	adds	r1, #4
  401a5a:	4808      	ldr	r0, [pc, #32]	; (401a7c <vTaskPlaceOnEventListRestricted+0x7c>)
  401a5c:	4b02      	ldr	r3, [pc, #8]	; (401a68 <vTaskPlaceOnEventListRestricted+0x68>)
  401a5e:	4798      	blx	r3
  401a60:	bd70      	pop	{r4, r5, r6, pc}
  401a62:	bf00      	nop
  401a64:	2040c1fc 	.word	0x2040c1fc
  401a68:	00400575 	.word	0x00400575
  401a6c:	004005c1 	.word	0x004005c1
  401a70:	2040c280 	.word	0x2040c280
  401a74:	2040c2f4 	.word	0x2040c2f4
  401a78:	004011e5 	.word	0x004011e5
  401a7c:	2040c2cc 	.word	0x2040c2cc

00401a80 <xTaskRemoveFromEventList>:
{
  401a80:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
  401a82:	68c3      	ldr	r3, [r0, #12]
  401a84:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
  401a86:	b324      	cbz	r4, 401ad2 <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
  401a88:	f104 0518 	add.w	r5, r4, #24
  401a8c:	4628      	mov	r0, r5
  401a8e:	4b1a      	ldr	r3, [pc, #104]	; (401af8 <xTaskRemoveFromEventList+0x78>)
  401a90:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  401a92:	4b1a      	ldr	r3, [pc, #104]	; (401afc <xTaskRemoveFromEventList+0x7c>)
  401a94:	681b      	ldr	r3, [r3, #0]
  401a96:	bb3b      	cbnz	r3, 401ae8 <xTaskRemoveFromEventList+0x68>
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
  401a98:	1d25      	adds	r5, r4, #4
  401a9a:	4628      	mov	r0, r5
  401a9c:	4b16      	ldr	r3, [pc, #88]	; (401af8 <xTaskRemoveFromEventList+0x78>)
  401a9e:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
  401aa0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  401aa2:	4a17      	ldr	r2, [pc, #92]	; (401b00 <xTaskRemoveFromEventList+0x80>)
  401aa4:	6811      	ldr	r1, [r2, #0]
  401aa6:	2301      	movs	r3, #1
  401aa8:	4083      	lsls	r3, r0
  401aaa:	430b      	orrs	r3, r1
  401aac:	6013      	str	r3, [r2, #0]
  401aae:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401ab2:	4629      	mov	r1, r5
  401ab4:	4b13      	ldr	r3, [pc, #76]	; (401b04 <xTaskRemoveFromEventList+0x84>)
  401ab6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401aba:	4b13      	ldr	r3, [pc, #76]	; (401b08 <xTaskRemoveFromEventList+0x88>)
  401abc:	4798      	blx	r3
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
  401abe:	4b13      	ldr	r3, [pc, #76]	; (401b0c <xTaskRemoveFromEventList+0x8c>)
  401ac0:	681b      	ldr	r3, [r3, #0]
  401ac2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  401ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401ac6:	429a      	cmp	r2, r3
  401ac8:	d913      	bls.n	401af2 <xTaskRemoveFromEventList+0x72>
		xYieldPending = pdTRUE;
  401aca:	2001      	movs	r0, #1
  401acc:	4b10      	ldr	r3, [pc, #64]	; (401b10 <xTaskRemoveFromEventList+0x90>)
  401ace:	6018      	str	r0, [r3, #0]
  401ad0:	bd38      	pop	{r3, r4, r5, pc}
  401ad2:	f04f 0380 	mov.w	r3, #128	; 0x80
  401ad6:	b672      	cpsid	i
  401ad8:	f383 8811 	msr	BASEPRI, r3
  401adc:	f3bf 8f6f 	isb	sy
  401ae0:	f3bf 8f4f 	dsb	sy
  401ae4:	b662      	cpsie	i
  401ae6:	e7fe      	b.n	401ae6 <xTaskRemoveFromEventList+0x66>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  401ae8:	4629      	mov	r1, r5
  401aea:	480a      	ldr	r0, [pc, #40]	; (401b14 <xTaskRemoveFromEventList+0x94>)
  401aec:	4b06      	ldr	r3, [pc, #24]	; (401b08 <xTaskRemoveFromEventList+0x88>)
  401aee:	4798      	blx	r3
  401af0:	e7e5      	b.n	401abe <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
  401af2:	2000      	movs	r0, #0
}
  401af4:	bd38      	pop	{r3, r4, r5, pc}
  401af6:	bf00      	nop
  401af8:	004005c1 	.word	0x004005c1
  401afc:	2040c274 	.word	0x2040c274
  401b00:	2040c280 	.word	0x2040c280
  401b04:	2040c208 	.word	0x2040c208
  401b08:	00400575 	.word	0x00400575
  401b0c:	2040c1fc 	.word	0x2040c1fc
  401b10:	2040c2f8 	.word	0x2040c2f8
  401b14:	2040c2b4 	.word	0x2040c2b4

00401b18 <vTaskSetTimeOutState>:
	configASSERT( pxTimeOut );
  401b18:	b130      	cbz	r0, 401b28 <vTaskSetTimeOutState+0x10>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  401b1a:	4a09      	ldr	r2, [pc, #36]	; (401b40 <vTaskSetTimeOutState+0x28>)
  401b1c:	6812      	ldr	r2, [r2, #0]
  401b1e:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  401b20:	4a08      	ldr	r2, [pc, #32]	; (401b44 <vTaskSetTimeOutState+0x2c>)
  401b22:	6812      	ldr	r2, [r2, #0]
  401b24:	6042      	str	r2, [r0, #4]
  401b26:	4770      	bx	lr
  401b28:	f04f 0380 	mov.w	r3, #128	; 0x80
  401b2c:	b672      	cpsid	i
  401b2e:	f383 8811 	msr	BASEPRI, r3
  401b32:	f3bf 8f6f 	isb	sy
  401b36:	f3bf 8f4f 	dsb	sy
  401b3a:	b662      	cpsie	i
  401b3c:	e7fe      	b.n	401b3c <vTaskSetTimeOutState+0x24>
  401b3e:	bf00      	nop
  401b40:	2040c2b0 	.word	0x2040c2b0
  401b44:	2040c2f4 	.word	0x2040c2f4

00401b48 <xTaskCheckForTimeOut>:
{
  401b48:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxTimeOut );
  401b4a:	b1c0      	cbz	r0, 401b7e <xTaskCheckForTimeOut+0x36>
  401b4c:	4604      	mov	r4, r0
	configASSERT( pxTicksToWait );
  401b4e:	b309      	cbz	r1, 401b94 <xTaskCheckForTimeOut+0x4c>
  401b50:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  401b52:	4b1d      	ldr	r3, [pc, #116]	; (401bc8 <xTaskCheckForTimeOut+0x80>)
  401b54:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
  401b56:	4b1d      	ldr	r3, [pc, #116]	; (401bcc <xTaskCheckForTimeOut+0x84>)
  401b58:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
  401b5a:	682b      	ldr	r3, [r5, #0]
  401b5c:	f1b3 3fff 	cmp.w	r3, #4294967295
  401b60:	d02e      	beq.n	401bc0 <xTaskCheckForTimeOut+0x78>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
  401b62:	491b      	ldr	r1, [pc, #108]	; (401bd0 <xTaskCheckForTimeOut+0x88>)
  401b64:	6809      	ldr	r1, [r1, #0]
  401b66:	6820      	ldr	r0, [r4, #0]
  401b68:	4288      	cmp	r0, r1
  401b6a:	d002      	beq.n	401b72 <xTaskCheckForTimeOut+0x2a>
  401b6c:	6861      	ldr	r1, [r4, #4]
  401b6e:	428a      	cmp	r2, r1
  401b70:	d228      	bcs.n	401bc4 <xTaskCheckForTimeOut+0x7c>
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
  401b72:	6861      	ldr	r1, [r4, #4]
  401b74:	1a50      	subs	r0, r2, r1
  401b76:	4283      	cmp	r3, r0
  401b78:	d817      	bhi.n	401baa <xTaskCheckForTimeOut+0x62>
			xReturn = pdTRUE;
  401b7a:	2401      	movs	r4, #1
  401b7c:	e01c      	b.n	401bb8 <xTaskCheckForTimeOut+0x70>
  401b7e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401b82:	b672      	cpsid	i
  401b84:	f383 8811 	msr	BASEPRI, r3
  401b88:	f3bf 8f6f 	isb	sy
  401b8c:	f3bf 8f4f 	dsb	sy
  401b90:	b662      	cpsie	i
  401b92:	e7fe      	b.n	401b92 <xTaskCheckForTimeOut+0x4a>
  401b94:	f04f 0380 	mov.w	r3, #128	; 0x80
  401b98:	b672      	cpsid	i
  401b9a:	f383 8811 	msr	BASEPRI, r3
  401b9e:	f3bf 8f6f 	isb	sy
  401ba2:	f3bf 8f4f 	dsb	sy
  401ba6:	b662      	cpsie	i
  401ba8:	e7fe      	b.n	401ba8 <xTaskCheckForTimeOut+0x60>
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
  401baa:	1a9b      	subs	r3, r3, r2
  401bac:	440b      	add	r3, r1
  401bae:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
  401bb0:	4620      	mov	r0, r4
  401bb2:	4b08      	ldr	r3, [pc, #32]	; (401bd4 <xTaskCheckForTimeOut+0x8c>)
  401bb4:	4798      	blx	r3
			xReturn = pdFALSE;
  401bb6:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  401bb8:	4b07      	ldr	r3, [pc, #28]	; (401bd8 <xTaskCheckForTimeOut+0x90>)
  401bba:	4798      	blx	r3
}
  401bbc:	4620      	mov	r0, r4
  401bbe:	bd38      	pop	{r3, r4, r5, pc}
				xReturn = pdFALSE;
  401bc0:	2400      	movs	r4, #0
  401bc2:	e7f9      	b.n	401bb8 <xTaskCheckForTimeOut+0x70>
			xReturn = pdTRUE;
  401bc4:	2401      	movs	r4, #1
  401bc6:	e7f7      	b.n	401bb8 <xTaskCheckForTimeOut+0x70>
  401bc8:	004006a5 	.word	0x004006a5
  401bcc:	2040c2f4 	.word	0x2040c2f4
  401bd0:	2040c2b0 	.word	0x2040c2b0
  401bd4:	00401b19 	.word	0x00401b19
  401bd8:	004006f1 	.word	0x004006f1

00401bdc <vTaskMissedYield>:
	xYieldPending = pdTRUE;
  401bdc:	2201      	movs	r2, #1
  401bde:	4b01      	ldr	r3, [pc, #4]	; (401be4 <vTaskMissedYield+0x8>)
  401be0:	601a      	str	r2, [r3, #0]
  401be2:	4770      	bx	lr
  401be4:	2040c2f8 	.word	0x2040c2f8

00401be8 <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
  401be8:	4b05      	ldr	r3, [pc, #20]	; (401c00 <xTaskGetSchedulerState+0x18>)
  401bea:	681b      	ldr	r3, [r3, #0]
  401bec:	b133      	cbz	r3, 401bfc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  401bee:	4b05      	ldr	r3, [pc, #20]	; (401c04 <xTaskGetSchedulerState+0x1c>)
  401bf0:	681b      	ldr	r3, [r3, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
  401bf2:	2b00      	cmp	r3, #0
  401bf4:	bf0c      	ite	eq
  401bf6:	2002      	moveq	r0, #2
  401bf8:	2000      	movne	r0, #0
  401bfa:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
  401bfc:	2001      	movs	r0, #1
			}
		}

		return xReturn;
	}
  401bfe:	4770      	bx	lr
  401c00:	2040c2c8 	.word	0x2040c2c8
  401c04:	2040c274 	.word	0x2040c274

00401c08 <vTaskPriorityInherit>:
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
  401c08:	2800      	cmp	r0, #0
  401c0a:	d044      	beq.n	401c96 <vTaskPriorityInherit+0x8e>
	{
  401c0c:	b538      	push	{r3, r4, r5, lr}
  401c0e:	4604      	mov	r4, r0
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
  401c10:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  401c12:	4921      	ldr	r1, [pc, #132]	; (401c98 <vTaskPriorityInherit+0x90>)
  401c14:	6809      	ldr	r1, [r1, #0]
  401c16:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  401c18:	428a      	cmp	r2, r1
  401c1a:	d214      	bcs.n	401c46 <vTaskPriorityInherit+0x3e>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
  401c1c:	6981      	ldr	r1, [r0, #24]
  401c1e:	2900      	cmp	r1, #0
  401c20:	db05      	blt.n	401c2e <vTaskPriorityInherit+0x26>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401c22:	491d      	ldr	r1, [pc, #116]	; (401c98 <vTaskPriorityInherit+0x90>)
  401c24:	6809      	ldr	r1, [r1, #0]
  401c26:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  401c28:	f1c1 0105 	rsb	r1, r1, #5
  401c2c:	6181      	str	r1, [r0, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
  401c2e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  401c32:	491a      	ldr	r1, [pc, #104]	; (401c9c <vTaskPriorityInherit+0x94>)
  401c34:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  401c38:	6961      	ldr	r1, [r4, #20]
  401c3a:	4291      	cmp	r1, r2
  401c3c:	d004      	beq.n	401c48 <vTaskPriorityInherit+0x40>
					prvAddTaskToReadyList( pxTCB );
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  401c3e:	4a16      	ldr	r2, [pc, #88]	; (401c98 <vTaskPriorityInherit+0x90>)
  401c40:	6812      	ldr	r2, [r2, #0]
  401c42:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
  401c44:	62e2      	str	r2, [r4, #44]	; 0x2c
  401c46:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  401c48:	1d25      	adds	r5, r4, #4
  401c4a:	4628      	mov	r0, r5
  401c4c:	4b14      	ldr	r3, [pc, #80]	; (401ca0 <vTaskPriorityInherit+0x98>)
  401c4e:	4798      	blx	r3
  401c50:	b970      	cbnz	r0, 401c70 <vTaskPriorityInherit+0x68>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  401c52:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  401c54:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  401c58:	4a10      	ldr	r2, [pc, #64]	; (401c9c <vTaskPriorityInherit+0x94>)
  401c5a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  401c5e:	b93a      	cbnz	r2, 401c70 <vTaskPriorityInherit+0x68>
  401c60:	4810      	ldr	r0, [pc, #64]	; (401ca4 <vTaskPriorityInherit+0x9c>)
  401c62:	6802      	ldr	r2, [r0, #0]
  401c64:	2101      	movs	r1, #1
  401c66:	fa01 f303 	lsl.w	r3, r1, r3
  401c6a:	ea22 0303 	bic.w	r3, r2, r3
  401c6e:	6003      	str	r3, [r0, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  401c70:	4b09      	ldr	r3, [pc, #36]	; (401c98 <vTaskPriorityInherit+0x90>)
  401c72:	681b      	ldr	r3, [r3, #0]
  401c74:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  401c76:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
  401c78:	4a0a      	ldr	r2, [pc, #40]	; (401ca4 <vTaskPriorityInherit+0x9c>)
  401c7a:	6811      	ldr	r1, [r2, #0]
  401c7c:	2301      	movs	r3, #1
  401c7e:	4083      	lsls	r3, r0
  401c80:	430b      	orrs	r3, r1
  401c82:	6013      	str	r3, [r2, #0]
  401c84:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401c88:	4629      	mov	r1, r5
  401c8a:	4b04      	ldr	r3, [pc, #16]	; (401c9c <vTaskPriorityInherit+0x94>)
  401c8c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401c90:	4b05      	ldr	r3, [pc, #20]	; (401ca8 <vTaskPriorityInherit+0xa0>)
  401c92:	4798      	blx	r3
  401c94:	bd38      	pop	{r3, r4, r5, pc}
  401c96:	4770      	bx	lr
  401c98:	2040c1fc 	.word	0x2040c1fc
  401c9c:	2040c208 	.word	0x2040c208
  401ca0:	004005c1 	.word	0x004005c1
  401ca4:	2040c280 	.word	0x2040c280
  401ca8:	00400575 	.word	0x00400575

00401cac <xTaskPriorityDisinherit>:
	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;

		if( pxMutexHolder != NULL )
  401cac:	2800      	cmp	r0, #0
  401cae:	d04d      	beq.n	401d4c <xTaskPriorityDisinherit+0xa0>
	{
  401cb0:	b538      	push	{r3, r4, r5, lr}
  401cb2:	4604      	mov	r4, r0
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
  401cb4:	4a27      	ldr	r2, [pc, #156]	; (401d54 <xTaskPriorityDisinherit+0xa8>)
  401cb6:	6812      	ldr	r2, [r2, #0]
  401cb8:	4290      	cmp	r0, r2
  401cba:	d00a      	beq.n	401cd2 <xTaskPriorityDisinherit+0x26>
  401cbc:	f04f 0380 	mov.w	r3, #128	; 0x80
  401cc0:	b672      	cpsid	i
  401cc2:	f383 8811 	msr	BASEPRI, r3
  401cc6:	f3bf 8f6f 	isb	sy
  401cca:	f3bf 8f4f 	dsb	sy
  401cce:	b662      	cpsie	i
  401cd0:	e7fe      	b.n	401cd0 <xTaskPriorityDisinherit+0x24>

			configASSERT( pxTCB->uxMutexesHeld );
  401cd2:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  401cd4:	b952      	cbnz	r2, 401cec <xTaskPriorityDisinherit+0x40>
  401cd6:	f04f 0380 	mov.w	r3, #128	; 0x80
  401cda:	b672      	cpsid	i
  401cdc:	f383 8811 	msr	BASEPRI, r3
  401ce0:	f3bf 8f6f 	isb	sy
  401ce4:	f3bf 8f4f 	dsb	sy
  401ce8:	b662      	cpsie	i
  401cea:	e7fe      	b.n	401cea <xTaskPriorityDisinherit+0x3e>
			( pxTCB->uxMutexesHeld )--;
  401cec:	3a01      	subs	r2, #1
  401cee:	64c2      	str	r2, [r0, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  401cf0:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  401cf2:	6ca1      	ldr	r1, [r4, #72]	; 0x48
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
  401cf4:	4288      	cmp	r0, r1
  401cf6:	d02b      	beq.n	401d50 <xTaskPriorityDisinherit+0xa4>
  401cf8:	bb52      	cbnz	r2, 401d50 <xTaskPriorityDisinherit+0xa4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  401cfa:	1d25      	adds	r5, r4, #4
  401cfc:	4628      	mov	r0, r5
  401cfe:	4b16      	ldr	r3, [pc, #88]	; (401d58 <xTaskPriorityDisinherit+0xac>)
  401d00:	4798      	blx	r3
  401d02:	b968      	cbnz	r0, 401d20 <xTaskPriorityDisinherit+0x74>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  401d04:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  401d06:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  401d0a:	4b14      	ldr	r3, [pc, #80]	; (401d5c <xTaskPriorityDisinherit+0xb0>)
  401d0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  401d10:	b933      	cbnz	r3, 401d20 <xTaskPriorityDisinherit+0x74>
  401d12:	4813      	ldr	r0, [pc, #76]	; (401d60 <xTaskPriorityDisinherit+0xb4>)
  401d14:	6803      	ldr	r3, [r0, #0]
  401d16:	2201      	movs	r2, #1
  401d18:	408a      	lsls	r2, r1
  401d1a:	ea23 0302 	bic.w	r3, r3, r2
  401d1e:	6003      	str	r3, [r0, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
  401d20:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  401d22:	62e0      	str	r0, [r4, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401d24:	f1c0 0305 	rsb	r3, r0, #5
  401d28:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
  401d2a:	4a0d      	ldr	r2, [pc, #52]	; (401d60 <xTaskPriorityDisinherit+0xb4>)
  401d2c:	6811      	ldr	r1, [r2, #0]
  401d2e:	2401      	movs	r4, #1
  401d30:	fa04 f300 	lsl.w	r3, r4, r0
  401d34:	430b      	orrs	r3, r1
  401d36:	6013      	str	r3, [r2, #0]
  401d38:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401d3c:	4629      	mov	r1, r5
  401d3e:	4b07      	ldr	r3, [pc, #28]	; (401d5c <xTaskPriorityDisinherit+0xb0>)
  401d40:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401d44:	4b07      	ldr	r3, [pc, #28]	; (401d64 <xTaskPriorityDisinherit+0xb8>)
  401d46:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
  401d48:	4620      	mov	r0, r4
  401d4a:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
  401d4c:	2000      	movs	r0, #0
  401d4e:	4770      	bx	lr
  401d50:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  401d52:	bd38      	pop	{r3, r4, r5, pc}
  401d54:	2040c1fc 	.word	0x2040c1fc
  401d58:	004005c1 	.word	0x004005c1
  401d5c:	2040c208 	.word	0x2040c208
  401d60:	2040c280 	.word	0x2040c280
  401d64:	00400575 	.word	0x00400575

00401d68 <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
  401d68:	4b05      	ldr	r3, [pc, #20]	; (401d80 <pvTaskIncrementMutexHeldCount+0x18>)
  401d6a:	681b      	ldr	r3, [r3, #0]
  401d6c:	b123      	cbz	r3, 401d78 <pvTaskIncrementMutexHeldCount+0x10>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
  401d6e:	4b04      	ldr	r3, [pc, #16]	; (401d80 <pvTaskIncrementMutexHeldCount+0x18>)
  401d70:	681a      	ldr	r2, [r3, #0]
  401d72:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
  401d74:	3301      	adds	r3, #1
  401d76:	64d3      	str	r3, [r2, #76]	; 0x4c
		}

		return pxCurrentTCB;
  401d78:	4b01      	ldr	r3, [pc, #4]	; (401d80 <pvTaskIncrementMutexHeldCount+0x18>)
  401d7a:	6818      	ldr	r0, [r3, #0]
	}
  401d7c:	4770      	bx	lr
  401d7e:	bf00      	nop
  401d80:	2040c1fc 	.word	0x2040c1fc

00401d84 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
  401d84:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  401d86:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  401d88:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
  401d8a:	4291      	cmp	r1, r2
  401d8c:	d80c      	bhi.n	401da8 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
  401d8e:	1ad2      	subs	r2, r2, r3
  401d90:	6983      	ldr	r3, [r0, #24]
  401d92:	429a      	cmp	r2, r3
  401d94:	d301      	bcc.n	401d9a <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
  401d96:	2001      	movs	r0, #1
  401d98:	bd08      	pop	{r3, pc}
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
  401d9a:	1d01      	adds	r1, r0, #4
  401d9c:	4b09      	ldr	r3, [pc, #36]	; (401dc4 <prvInsertTimerInActiveList+0x40>)
  401d9e:	6818      	ldr	r0, [r3, #0]
  401da0:	4b09      	ldr	r3, [pc, #36]	; (401dc8 <prvInsertTimerInActiveList+0x44>)
  401da2:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  401da4:	2000      	movs	r0, #0
  401da6:	bd08      	pop	{r3, pc}
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
  401da8:	429a      	cmp	r2, r3
  401daa:	d203      	bcs.n	401db4 <prvInsertTimerInActiveList+0x30>
  401dac:	4299      	cmp	r1, r3
  401dae:	d301      	bcc.n	401db4 <prvInsertTimerInActiveList+0x30>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
  401db0:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
  401db2:	bd08      	pop	{r3, pc}
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  401db4:	1d01      	adds	r1, r0, #4
  401db6:	4b05      	ldr	r3, [pc, #20]	; (401dcc <prvInsertTimerInActiveList+0x48>)
  401db8:	6818      	ldr	r0, [r3, #0]
  401dba:	4b03      	ldr	r3, [pc, #12]	; (401dc8 <prvInsertTimerInActiveList+0x44>)
  401dbc:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  401dbe:	2000      	movs	r0, #0
  401dc0:	bd08      	pop	{r3, pc}
  401dc2:	bf00      	nop
  401dc4:	2040c300 	.word	0x2040c300
  401dc8:	0040058d 	.word	0x0040058d
  401dcc:	2040c2fc 	.word	0x2040c2fc

00401dd0 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
  401dd0:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
  401dd2:	4b15      	ldr	r3, [pc, #84]	; (401e28 <prvCheckForValidListAndQueue+0x58>)
  401dd4:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
  401dd6:	4b15      	ldr	r3, [pc, #84]	; (401e2c <prvCheckForValidListAndQueue+0x5c>)
  401dd8:	681b      	ldr	r3, [r3, #0]
  401dda:	b113      	cbz	r3, 401de2 <prvCheckForValidListAndQueue+0x12>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
  401ddc:	4b14      	ldr	r3, [pc, #80]	; (401e30 <prvCheckForValidListAndQueue+0x60>)
  401dde:	4798      	blx	r3
  401de0:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
  401de2:	4d14      	ldr	r5, [pc, #80]	; (401e34 <prvCheckForValidListAndQueue+0x64>)
  401de4:	4628      	mov	r0, r5
  401de6:	4e14      	ldr	r6, [pc, #80]	; (401e38 <prvCheckForValidListAndQueue+0x68>)
  401de8:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
  401dea:	4c14      	ldr	r4, [pc, #80]	; (401e3c <prvCheckForValidListAndQueue+0x6c>)
  401dec:	4620      	mov	r0, r4
  401dee:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
  401df0:	4b13      	ldr	r3, [pc, #76]	; (401e40 <prvCheckForValidListAndQueue+0x70>)
  401df2:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
  401df4:	4b13      	ldr	r3, [pc, #76]	; (401e44 <prvCheckForValidListAndQueue+0x74>)
  401df6:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
  401df8:	2200      	movs	r2, #0
  401dfa:	2110      	movs	r1, #16
  401dfc:	2005      	movs	r0, #5
  401dfe:	4b12      	ldr	r3, [pc, #72]	; (401e48 <prvCheckForValidListAndQueue+0x78>)
  401e00:	4798      	blx	r3
  401e02:	4b0a      	ldr	r3, [pc, #40]	; (401e2c <prvCheckForValidListAndQueue+0x5c>)
  401e04:	6018      	str	r0, [r3, #0]
			configASSERT( xTimerQueue );
  401e06:	b118      	cbz	r0, 401e10 <prvCheckForValidListAndQueue+0x40>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
  401e08:	4910      	ldr	r1, [pc, #64]	; (401e4c <prvCheckForValidListAndQueue+0x7c>)
  401e0a:	4b11      	ldr	r3, [pc, #68]	; (401e50 <prvCheckForValidListAndQueue+0x80>)
  401e0c:	4798      	blx	r3
  401e0e:	e7e5      	b.n	401ddc <prvCheckForValidListAndQueue+0xc>
  401e10:	f04f 0380 	mov.w	r3, #128	; 0x80
  401e14:	b672      	cpsid	i
  401e16:	f383 8811 	msr	BASEPRI, r3
  401e1a:	f3bf 8f6f 	isb	sy
  401e1e:	f3bf 8f4f 	dsb	sy
  401e22:	b662      	cpsie	i
  401e24:	e7fe      	b.n	401e24 <prvCheckForValidListAndQueue+0x54>
  401e26:	bf00      	nop
  401e28:	004006a5 	.word	0x004006a5
  401e2c:	2040c330 	.word	0x2040c330
  401e30:	004006f1 	.word	0x004006f1
  401e34:	2040c304 	.word	0x2040c304
  401e38:	00400559 	.word	0x00400559
  401e3c:	2040c318 	.word	0x2040c318
  401e40:	2040c2fc 	.word	0x2040c2fc
  401e44:	2040c300 	.word	0x2040c300
  401e48:	00400bfd 	.word	0x00400bfd
  401e4c:	0040c9bc 	.word	0x0040c9bc
  401e50:	0040112d 	.word	0x0040112d

00401e54 <xTimerCreateTimerTask>:
{
  401e54:	b510      	push	{r4, lr}
  401e56:	b084      	sub	sp, #16
	prvCheckForValidListAndQueue();
  401e58:	4b0f      	ldr	r3, [pc, #60]	; (401e98 <xTimerCreateTimerTask+0x44>)
  401e5a:	4798      	blx	r3
	if( xTimerQueue != NULL )
  401e5c:	4b0f      	ldr	r3, [pc, #60]	; (401e9c <xTimerCreateTimerTask+0x48>)
  401e5e:	681b      	ldr	r3, [r3, #0]
  401e60:	b173      	cbz	r3, 401e80 <xTimerCreateTimerTask+0x2c>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
  401e62:	2300      	movs	r3, #0
  401e64:	9303      	str	r3, [sp, #12]
  401e66:	9302      	str	r3, [sp, #8]
  401e68:	9301      	str	r3, [sp, #4]
  401e6a:	2204      	movs	r2, #4
  401e6c:	9200      	str	r2, [sp, #0]
  401e6e:	f44f 7282 	mov.w	r2, #260	; 0x104
  401e72:	490b      	ldr	r1, [pc, #44]	; (401ea0 <xTimerCreateTimerTask+0x4c>)
  401e74:	480b      	ldr	r0, [pc, #44]	; (401ea4 <xTimerCreateTimerTask+0x50>)
  401e76:	4c0c      	ldr	r4, [pc, #48]	; (401ea8 <xTimerCreateTimerTask+0x54>)
  401e78:	47a0      	blx	r4
	configASSERT( xReturn );
  401e7a:	b108      	cbz	r0, 401e80 <xTimerCreateTimerTask+0x2c>
}
  401e7c:	b004      	add	sp, #16
  401e7e:	bd10      	pop	{r4, pc}
  401e80:	f04f 0380 	mov.w	r3, #128	; 0x80
  401e84:	b672      	cpsid	i
  401e86:	f383 8811 	msr	BASEPRI, r3
  401e8a:	f3bf 8f6f 	isb	sy
  401e8e:	f3bf 8f4f 	dsb	sy
  401e92:	b662      	cpsie	i
  401e94:	e7fe      	b.n	401e94 <xTimerCreateTimerTask+0x40>
  401e96:	bf00      	nop
  401e98:	00401dd1 	.word	0x00401dd1
  401e9c:	2040c330 	.word	0x2040c330
  401ea0:	0040c9c4 	.word	0x0040c9c4
  401ea4:	00401fd5 	.word	0x00401fd5
  401ea8:	0040123d 	.word	0x0040123d

00401eac <xTimerGenericCommand>:
	configASSERT( xTimer );
  401eac:	b1d8      	cbz	r0, 401ee6 <xTimerGenericCommand+0x3a>
{
  401eae:	b530      	push	{r4, r5, lr}
  401eb0:	b085      	sub	sp, #20
  401eb2:	4615      	mov	r5, r2
  401eb4:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
  401eb6:	4a15      	ldr	r2, [pc, #84]	; (401f0c <xTimerGenericCommand+0x60>)
  401eb8:	6810      	ldr	r0, [r2, #0]
  401eba:	b320      	cbz	r0, 401f06 <xTimerGenericCommand+0x5a>
  401ebc:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
  401ebe:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
  401ec0:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
  401ec2:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
  401ec4:	2905      	cmp	r1, #5
  401ec6:	dc19      	bgt.n	401efc <xTimerGenericCommand+0x50>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
  401ec8:	4b11      	ldr	r3, [pc, #68]	; (401f10 <xTimerGenericCommand+0x64>)
  401eca:	4798      	blx	r3
  401ecc:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
  401ece:	f04f 0300 	mov.w	r3, #0
  401ed2:	bf0c      	ite	eq
  401ed4:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
  401ed6:	461a      	movne	r2, r3
  401ed8:	4669      	mov	r1, sp
  401eda:	480c      	ldr	r0, [pc, #48]	; (401f0c <xTimerGenericCommand+0x60>)
  401edc:	6800      	ldr	r0, [r0, #0]
  401ede:	4c0d      	ldr	r4, [pc, #52]	; (401f14 <xTimerGenericCommand+0x68>)
  401ee0:	47a0      	blx	r4
}
  401ee2:	b005      	add	sp, #20
  401ee4:	bd30      	pop	{r4, r5, pc}
  401ee6:	f04f 0380 	mov.w	r3, #128	; 0x80
  401eea:	b672      	cpsid	i
  401eec:	f383 8811 	msr	BASEPRI, r3
  401ef0:	f3bf 8f6f 	isb	sy
  401ef4:	f3bf 8f4f 	dsb	sy
  401ef8:	b662      	cpsie	i
  401efa:	e7fe      	b.n	401efa <xTimerGenericCommand+0x4e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
  401efc:	2300      	movs	r3, #0
  401efe:	4669      	mov	r1, sp
  401f00:	4c05      	ldr	r4, [pc, #20]	; (401f18 <xTimerGenericCommand+0x6c>)
  401f02:	47a0      	blx	r4
  401f04:	e7ed      	b.n	401ee2 <xTimerGenericCommand+0x36>
BaseType_t xReturn = pdFAIL;
  401f06:	2000      	movs	r0, #0
	return xReturn;
  401f08:	e7eb      	b.n	401ee2 <xTimerGenericCommand+0x36>
  401f0a:	bf00      	nop
  401f0c:	2040c330 	.word	0x2040c330
  401f10:	00401be9 	.word	0x00401be9
  401f14:	00400c79 	.word	0x00400c79
  401f18:	00400e5d 	.word	0x00400e5d

00401f1c <prvSampleTimeNow>:
{
  401f1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401f20:	b082      	sub	sp, #8
  401f22:	4680      	mov	r8, r0
	xTimeNow = xTaskGetTickCount();
  401f24:	4b24      	ldr	r3, [pc, #144]	; (401fb8 <prvSampleTimeNow+0x9c>)
  401f26:	4798      	blx	r3
  401f28:	4607      	mov	r7, r0
	if( xTimeNow < xLastTime )
  401f2a:	4b24      	ldr	r3, [pc, #144]	; (401fbc <prvSampleTimeNow+0xa0>)
  401f2c:	681b      	ldr	r3, [r3, #0]
  401f2e:	4298      	cmp	r0, r3
  401f30:	d31b      	bcc.n	401f6a <prvSampleTimeNow+0x4e>
		*pxTimerListsWereSwitched = pdFALSE;
  401f32:	2300      	movs	r3, #0
  401f34:	f8c8 3000 	str.w	r3, [r8]
	xLastTime = xTimeNow;
  401f38:	4b20      	ldr	r3, [pc, #128]	; (401fbc <prvSampleTimeNow+0xa0>)
  401f3a:	601f      	str	r7, [r3, #0]
}
  401f3c:	4638      	mov	r0, r7
  401f3e:	b002      	add	sp, #8
  401f40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  401f44:	2100      	movs	r1, #0
  401f46:	9100      	str	r1, [sp, #0]
  401f48:	460b      	mov	r3, r1
  401f4a:	4652      	mov	r2, sl
  401f4c:	4620      	mov	r0, r4
  401f4e:	4c1c      	ldr	r4, [pc, #112]	; (401fc0 <prvSampleTimeNow+0xa4>)
  401f50:	47a0      	blx	r4
				configASSERT( xResult );
  401f52:	b960      	cbnz	r0, 401f6e <prvSampleTimeNow+0x52>
  401f54:	f04f 0380 	mov.w	r3, #128	; 0x80
  401f58:	b672      	cpsid	i
  401f5a:	f383 8811 	msr	BASEPRI, r3
  401f5e:	f3bf 8f6f 	isb	sy
  401f62:	f3bf 8f4f 	dsb	sy
  401f66:	b662      	cpsie	i
  401f68:	e7fe      	b.n	401f68 <prvSampleTimeNow+0x4c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  401f6a:	4d16      	ldr	r5, [pc, #88]	; (401fc4 <prvSampleTimeNow+0xa8>)
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  401f6c:	4e16      	ldr	r6, [pc, #88]	; (401fc8 <prvSampleTimeNow+0xac>)
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  401f6e:	682b      	ldr	r3, [r5, #0]
  401f70:	681a      	ldr	r2, [r3, #0]
  401f72:	b1c2      	cbz	r2, 401fa6 <prvSampleTimeNow+0x8a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  401f74:	68db      	ldr	r3, [r3, #12]
  401f76:	f8d3 a000 	ldr.w	sl, [r3]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  401f7a:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  401f7c:	f104 0904 	add.w	r9, r4, #4
  401f80:	4648      	mov	r0, r9
  401f82:	47b0      	blx	r6
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  401f84:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401f86:	4620      	mov	r0, r4
  401f88:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  401f8a:	69e3      	ldr	r3, [r4, #28]
  401f8c:	2b01      	cmp	r3, #1
  401f8e:	d1ee      	bne.n	401f6e <prvSampleTimeNow+0x52>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
  401f90:	69a3      	ldr	r3, [r4, #24]
  401f92:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
  401f94:	459a      	cmp	sl, r3
  401f96:	d2d5      	bcs.n	401f44 <prvSampleTimeNow+0x28>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
  401f98:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  401f9a:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  401f9c:	4649      	mov	r1, r9
  401f9e:	6828      	ldr	r0, [r5, #0]
  401fa0:	4b0a      	ldr	r3, [pc, #40]	; (401fcc <prvSampleTimeNow+0xb0>)
  401fa2:	4798      	blx	r3
  401fa4:	e7e3      	b.n	401f6e <prvSampleTimeNow+0x52>
	pxCurrentTimerList = pxOverflowTimerList;
  401fa6:	4a0a      	ldr	r2, [pc, #40]	; (401fd0 <prvSampleTimeNow+0xb4>)
  401fa8:	6810      	ldr	r0, [r2, #0]
  401faa:	4906      	ldr	r1, [pc, #24]	; (401fc4 <prvSampleTimeNow+0xa8>)
  401fac:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
  401fae:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
  401fb0:	2301      	movs	r3, #1
  401fb2:	f8c8 3000 	str.w	r3, [r8]
  401fb6:	e7bf      	b.n	401f38 <prvSampleTimeNow+0x1c>
  401fb8:	0040150d 	.word	0x0040150d
  401fbc:	2040c32c 	.word	0x2040c32c
  401fc0:	00401ead 	.word	0x00401ead
  401fc4:	2040c2fc 	.word	0x2040c2fc
  401fc8:	004005c1 	.word	0x004005c1
  401fcc:	0040058d 	.word	0x0040058d
  401fd0:	2040c300 	.word	0x2040c300

00401fd4 <prvTimerTask>:
{
  401fd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401fd8:	b088      	sub	sp, #32
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  401fda:	4e75      	ldr	r6, [pc, #468]	; (4021b0 <prvTimerTask+0x1dc>)
	vTaskSuspendAll();
  401fdc:	4f75      	ldr	r7, [pc, #468]	; (4021b4 <prvTimerTask+0x1e0>)
					portYIELD_WITHIN_API();
  401fde:	f8df 91fc 	ldr.w	r9, [pc, #508]	; 4021dc <prvTimerTask+0x208>
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  401fe2:	f8df 81fc 	ldr.w	r8, [pc, #508]	; 4021e0 <prvTimerTask+0x20c>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  401fe6:	6833      	ldr	r3, [r6, #0]
	if( *pxListWasEmpty == pdFALSE )
  401fe8:	681a      	ldr	r2, [r3, #0]
  401fea:	2a00      	cmp	r2, #0
  401fec:	f000 80ce 	beq.w	40218c <prvTimerTask+0x1b8>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  401ff0:	68db      	ldr	r3, [r3, #12]
  401ff2:	681c      	ldr	r4, [r3, #0]
	vTaskSuspendAll();
  401ff4:	47b8      	blx	r7
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  401ff6:	a804      	add	r0, sp, #16
  401ff8:	4b6f      	ldr	r3, [pc, #444]	; (4021b8 <prvTimerTask+0x1e4>)
  401ffa:	4798      	blx	r3
  401ffc:	4605      	mov	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
  401ffe:	9b04      	ldr	r3, [sp, #16]
  402000:	2b00      	cmp	r3, #0
  402002:	d144      	bne.n	40208e <prvTimerTask+0xba>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  402004:	42a0      	cmp	r0, r4
  402006:	d212      	bcs.n	40202e <prvTimerTask+0x5a>
  402008:	2200      	movs	r2, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
  40200a:	1b61      	subs	r1, r4, r5
  40200c:	4b6b      	ldr	r3, [pc, #428]	; (4021bc <prvTimerTask+0x1e8>)
  40200e:	6818      	ldr	r0, [r3, #0]
  402010:	4b6b      	ldr	r3, [pc, #428]	; (4021c0 <prvTimerTask+0x1ec>)
  402012:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  402014:	4b6b      	ldr	r3, [pc, #428]	; (4021c4 <prvTimerTask+0x1f0>)
  402016:	4798      	blx	r3
  402018:	2800      	cmp	r0, #0
  40201a:	d13a      	bne.n	402092 <prvTimerTask+0xbe>
					portYIELD_WITHIN_API();
  40201c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  402020:	f8c9 3000 	str.w	r3, [r9]
  402024:	f3bf 8f4f 	dsb	sy
  402028:	f3bf 8f6f 	isb	sy
  40202c:	e031      	b.n	402092 <prvTimerTask+0xbe>
				( void ) xTaskResumeAll();
  40202e:	4b65      	ldr	r3, [pc, #404]	; (4021c4 <prvTimerTask+0x1f0>)
  402030:	4798      	blx	r3
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  402032:	6833      	ldr	r3, [r6, #0]
  402034:	68db      	ldr	r3, [r3, #12]
  402036:	f8d3 a00c 	ldr.w	sl, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  40203a:	f10a 0004 	add.w	r0, sl, #4
  40203e:	47c0      	blx	r8
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  402040:	f8da 301c 	ldr.w	r3, [sl, #28]
  402044:	2b01      	cmp	r3, #1
  402046:	d004      	beq.n	402052 <prvTimerTask+0x7e>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  402048:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  40204c:	4650      	mov	r0, sl
  40204e:	4798      	blx	r3
  402050:	e01f      	b.n	402092 <prvTimerTask+0xbe>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
  402052:	f8da 1018 	ldr.w	r1, [sl, #24]
  402056:	4623      	mov	r3, r4
  402058:	462a      	mov	r2, r5
  40205a:	4421      	add	r1, r4
  40205c:	4650      	mov	r0, sl
  40205e:	4d5a      	ldr	r5, [pc, #360]	; (4021c8 <prvTimerTask+0x1f4>)
  402060:	47a8      	blx	r5
  402062:	2801      	cmp	r0, #1
  402064:	d1f0      	bne.n	402048 <prvTimerTask+0x74>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  402066:	2100      	movs	r1, #0
  402068:	9100      	str	r1, [sp, #0]
  40206a:	460b      	mov	r3, r1
  40206c:	4622      	mov	r2, r4
  40206e:	4650      	mov	r0, sl
  402070:	4c56      	ldr	r4, [pc, #344]	; (4021cc <prvTimerTask+0x1f8>)
  402072:	47a0      	blx	r4
			configASSERT( xResult );
  402074:	2800      	cmp	r0, #0
  402076:	d1e7      	bne.n	402048 <prvTimerTask+0x74>
  402078:	f04f 0380 	mov.w	r3, #128	; 0x80
  40207c:	b672      	cpsid	i
  40207e:	f383 8811 	msr	BASEPRI, r3
  402082:	f3bf 8f6f 	isb	sy
  402086:	f3bf 8f4f 	dsb	sy
  40208a:	b662      	cpsie	i
  40208c:	e7fe      	b.n	40208c <prvTimerTask+0xb8>
			( void ) xTaskResumeAll();
  40208e:	4b4d      	ldr	r3, [pc, #308]	; (4021c4 <prvTimerTask+0x1f0>)
  402090:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  402092:	4d4a      	ldr	r5, [pc, #296]	; (4021bc <prvTimerTask+0x1e8>)
  402094:	4c4e      	ldr	r4, [pc, #312]	; (4021d0 <prvTimerTask+0x1fc>)
  402096:	e006      	b.n	4020a6 <prvTimerTask+0xd2>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
  402098:	9907      	ldr	r1, [sp, #28]
  40209a:	9806      	ldr	r0, [sp, #24]
  40209c:	9b05      	ldr	r3, [sp, #20]
  40209e:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
  4020a0:	9b04      	ldr	r3, [sp, #16]
  4020a2:	2b00      	cmp	r3, #0
  4020a4:	da09      	bge.n	4020ba <prvTimerTask+0xe6>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  4020a6:	2300      	movs	r3, #0
  4020a8:	461a      	mov	r2, r3
  4020aa:	a904      	add	r1, sp, #16
  4020ac:	6828      	ldr	r0, [r5, #0]
  4020ae:	47a0      	blx	r4
  4020b0:	2800      	cmp	r0, #0
  4020b2:	d098      	beq.n	401fe6 <prvTimerTask+0x12>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
  4020b4:	9b04      	ldr	r3, [sp, #16]
  4020b6:	2b00      	cmp	r3, #0
  4020b8:	dbee      	blt.n	402098 <prvTimerTask+0xc4>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
  4020ba:	f8dd a018 	ldr.w	sl, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
  4020be:	f8da 3014 	ldr.w	r3, [sl, #20]
  4020c2:	b113      	cbz	r3, 4020ca <prvTimerTask+0xf6>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  4020c4:	f10a 0004 	add.w	r0, sl, #4
  4020c8:	47c0      	blx	r8
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  4020ca:	a803      	add	r0, sp, #12
  4020cc:	4b3a      	ldr	r3, [pc, #232]	; (4021b8 <prvTimerTask+0x1e4>)
  4020ce:	4798      	blx	r3
			switch( xMessage.xMessageID )
  4020d0:	9b04      	ldr	r3, [sp, #16]
  4020d2:	2b09      	cmp	r3, #9
  4020d4:	d8e7      	bhi.n	4020a6 <prvTimerTask+0xd2>
  4020d6:	a201      	add	r2, pc, #4	; (adr r2, 4020dc <prvTimerTask+0x108>)
  4020d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4020dc:	00402105 	.word	0x00402105
  4020e0:	00402105 	.word	0x00402105
  4020e4:	00402105 	.word	0x00402105
  4020e8:	004020a7 	.word	0x004020a7
  4020ec:	00402159 	.word	0x00402159
  4020f0:	00402185 	.word	0x00402185
  4020f4:	00402105 	.word	0x00402105
  4020f8:	00402105 	.word	0x00402105
  4020fc:	004020a7 	.word	0x004020a7
  402100:	00402159 	.word	0x00402159
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
  402104:	9c05      	ldr	r4, [sp, #20]
  402106:	f8da 1018 	ldr.w	r1, [sl, #24]
  40210a:	4623      	mov	r3, r4
  40210c:	4602      	mov	r2, r0
  40210e:	4421      	add	r1, r4
  402110:	4650      	mov	r0, sl
  402112:	4c2d      	ldr	r4, [pc, #180]	; (4021c8 <prvTimerTask+0x1f4>)
  402114:	47a0      	blx	r4
  402116:	2801      	cmp	r0, #1
  402118:	d1bc      	bne.n	402094 <prvTimerTask+0xc0>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  40211a:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  40211e:	4650      	mov	r0, sl
  402120:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  402122:	f8da 301c 	ldr.w	r3, [sl, #28]
  402126:	2b01      	cmp	r3, #1
  402128:	d1b4      	bne.n	402094 <prvTimerTask+0xc0>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
  40212a:	f8da 2018 	ldr.w	r2, [sl, #24]
  40212e:	2100      	movs	r1, #0
  402130:	9100      	str	r1, [sp, #0]
  402132:	460b      	mov	r3, r1
  402134:	9805      	ldr	r0, [sp, #20]
  402136:	4402      	add	r2, r0
  402138:	4650      	mov	r0, sl
  40213a:	4c24      	ldr	r4, [pc, #144]	; (4021cc <prvTimerTask+0x1f8>)
  40213c:	47a0      	blx	r4
							configASSERT( xResult );
  40213e:	2800      	cmp	r0, #0
  402140:	d1a8      	bne.n	402094 <prvTimerTask+0xc0>
  402142:	f04f 0380 	mov.w	r3, #128	; 0x80
  402146:	b672      	cpsid	i
  402148:	f383 8811 	msr	BASEPRI, r3
  40214c:	f3bf 8f6f 	isb	sy
  402150:	f3bf 8f4f 	dsb	sy
  402154:	b662      	cpsie	i
  402156:	e7fe      	b.n	402156 <prvTimerTask+0x182>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
  402158:	9905      	ldr	r1, [sp, #20]
  40215a:	f8ca 1018 	str.w	r1, [sl, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  40215e:	b131      	cbz	r1, 40216e <prvTimerTask+0x19a>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  402160:	4603      	mov	r3, r0
  402162:	4602      	mov	r2, r0
  402164:	4401      	add	r1, r0
  402166:	4650      	mov	r0, sl
  402168:	4c17      	ldr	r4, [pc, #92]	; (4021c8 <prvTimerTask+0x1f4>)
  40216a:	47a0      	blx	r4
  40216c:	e792      	b.n	402094 <prvTimerTask+0xc0>
  40216e:	f04f 0380 	mov.w	r3, #128	; 0x80
  402172:	b672      	cpsid	i
  402174:	f383 8811 	msr	BASEPRI, r3
  402178:	f3bf 8f6f 	isb	sy
  40217c:	f3bf 8f4f 	dsb	sy
  402180:	b662      	cpsie	i
  402182:	e7fe      	b.n	402182 <prvTimerTask+0x1ae>
					vPortFree( pxTimer );
  402184:	4650      	mov	r0, sl
  402186:	4b13      	ldr	r3, [pc, #76]	; (4021d4 <prvTimerTask+0x200>)
  402188:	4798      	blx	r3
  40218a:	e783      	b.n	402094 <prvTimerTask+0xc0>
	vTaskSuspendAll();
  40218c:	47b8      	blx	r7
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  40218e:	a804      	add	r0, sp, #16
  402190:	4b09      	ldr	r3, [pc, #36]	; (4021b8 <prvTimerTask+0x1e4>)
  402192:	4798      	blx	r3
  402194:	4605      	mov	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
  402196:	9b04      	ldr	r3, [sp, #16]
  402198:	2b00      	cmp	r3, #0
  40219a:	f47f af78 	bne.w	40208e <prvTimerTask+0xba>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
  40219e:	4b0e      	ldr	r3, [pc, #56]	; (4021d8 <prvTimerTask+0x204>)
  4021a0:	681b      	ldr	r3, [r3, #0]
  4021a2:	681a      	ldr	r2, [r3, #0]
  4021a4:	fab2 f282 	clz	r2, r2
  4021a8:	0952      	lsrs	r2, r2, #5
  4021aa:	2400      	movs	r4, #0
  4021ac:	e72d      	b.n	40200a <prvTimerTask+0x36>
  4021ae:	bf00      	nop
  4021b0:	2040c2fc 	.word	0x2040c2fc
  4021b4:	004014fd 	.word	0x004014fd
  4021b8:	00401f1d 	.word	0x00401f1d
  4021bc:	2040c330 	.word	0x2040c330
  4021c0:	00401161 	.word	0x00401161
  4021c4:	00401665 	.word	0x00401665
  4021c8:	00401d85 	.word	0x00401d85
  4021cc:	00401ead 	.word	0x00401ead
  4021d0:	00400f5d 	.word	0x00400f5d
  4021d4:	00400971 	.word	0x00400971
  4021d8:	2040c300 	.word	0x2040c300
  4021dc:	e000ed04 	.word	0xe000ed04
  4021e0:	004005c1 	.word	0x004005c1

004021e4 <chip_isr>:

static tpfNmBspIsr gpfIsr;

static void chip_isr(uint32_t id, uint32_t mask)
{
	if ((id == CONF_WINC_SPI_INT_PIO_ID) && (mask == CONF_WINC_SPI_INT_MASK)) {
  4021e4:	2810      	cmp	r0, #16
  4021e6:	d108      	bne.n	4021fa <chip_isr+0x16>
  4021e8:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  4021ec:	d105      	bne.n	4021fa <chip_isr+0x16>
{
  4021ee:	b508      	push	{r3, lr}
		if (gpfIsr) {
  4021f0:	4b02      	ldr	r3, [pc, #8]	; (4021fc <chip_isr+0x18>)
  4021f2:	681b      	ldr	r3, [r3, #0]
  4021f4:	b103      	cbz	r3, 4021f8 <chip_isr+0x14>
			gpfIsr();
  4021f6:	4798      	blx	r3
  4021f8:	bd08      	pop	{r3, pc}
  4021fa:	4770      	bx	lr
  4021fc:	2040c334 	.word	0x2040c334

00402200 <nm_bsp_sleep>:
*	@param[IN]	u32TimeMsec
*				Time in milliseconds
*/
void nm_bsp_sleep(uint32 u32TimeMsec)
{
	while(u32TimeMsec--) {
  402200:	b150      	cbz	r0, 402218 <nm_bsp_sleep+0x18>
{
  402202:	b570      	push	{r4, r5, r6, lr}
  402204:	1e44      	subs	r4, r0, #1
		delay_ms(4);
  402206:	4e05      	ldr	r6, [pc, #20]	; (40221c <nm_bsp_sleep+0x1c>)
  402208:	4d05      	ldr	r5, [pc, #20]	; (402220 <nm_bsp_sleep+0x20>)
  40220a:	4630      	mov	r0, r6
  40220c:	47a8      	blx	r5
	while(u32TimeMsec--) {
  40220e:	3c01      	subs	r4, #1
  402210:	f1b4 3fff 	cmp.w	r4, #4294967295
  402214:	d1f9      	bne.n	40220a <nm_bsp_sleep+0xa>
  402216:	bd70      	pop	{r4, r5, r6, pc}
  402218:	4770      	bx	lr
  40221a:	bf00      	nop
  40221c:	00031635 	.word	0x00031635
  402220:	20400001 	.word	0x20400001

00402224 <nm_bsp_reset>:
{
  402224:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  402228:	4f09      	ldr	r7, [pc, #36]	; (402250 <nm_bsp_reset+0x2c>)
  40222a:	f44f 3800 	mov.w	r8, #131072	; 0x20000
  40222e:	f8c7 8034 	str.w	r8, [r7, #52]	; 0x34
  402232:	4d08      	ldr	r5, [pc, #32]	; (402254 <nm_bsp_reset+0x30>)
  402234:	2608      	movs	r6, #8
  402236:	636e      	str	r6, [r5, #52]	; 0x34
	nm_bsp_sleep(100);
  402238:	2064      	movs	r0, #100	; 0x64
  40223a:	4c07      	ldr	r4, [pc, #28]	; (402258 <nm_bsp_reset+0x34>)
  40223c:	47a0      	blx	r4
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40223e:	f8c7 8030 	str.w	r8, [r7, #48]	; 0x30
	nm_bsp_sleep(100);
  402242:	2064      	movs	r0, #100	; 0x64
  402244:	47a0      	blx	r4
  402246:	632e      	str	r6, [r5, #48]	; 0x30
	nm_bsp_sleep(100);
  402248:	2064      	movs	r0, #100	; 0x64
  40224a:	47a0      	blx	r4
  40224c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402250:	400e1200 	.word	0x400e1200
  402254:	400e1000 	.word	0x400e1000
  402258:	00402201 	.word	0x00402201

0040225c <nm_bsp_init>:
{
  40225c:	b510      	push	{r4, lr}
	gpfIsr = NULL;
  40225e:	2200      	movs	r2, #0
  402260:	4b14      	ldr	r3, [pc, #80]	; (4022b4 <nm_bsp_init+0x58>)
  402262:	601a      	str	r2, [r3, #0]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  402264:	200a      	movs	r0, #10
  402266:	4c14      	ldr	r4, [pc, #80]	; (4022b8 <nm_bsp_init+0x5c>)
  402268:	47a0      	blx	r4
  40226a:	200b      	movs	r0, #11
  40226c:	47a0      	blx	r4
  40226e:	200c      	movs	r0, #12
  402270:	47a0      	blx	r4
  402272:	2010      	movs	r0, #16
  402274:	47a0      	blx	r4
  402276:	2011      	movs	r0, #17
  402278:	47a0      	blx	r4
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40227a:	4b10      	ldr	r3, [pc, #64]	; (4022bc <nm_bsp_init+0x60>)
  40227c:	2208      	movs	r2, #8
  40227e:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  402280:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  402284:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  402286:	4a0e      	ldr	r2, [pc, #56]	; (4022c0 <nm_bsp_init+0x64>)
  402288:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  40228c:	6111      	str	r1, [r2, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40228e:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  402292:	6311      	str	r1, [r2, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  402294:	2204      	movs	r2, #4
  402296:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  402298:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40229c:	631a      	str	r2, [r3, #48]	; 0x30
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
  40229e:	4b09      	ldr	r3, [pc, #36]	; (4022c4 <nm_bsp_init+0x68>)
  4022a0:	681b      	ldr	r3, [r3, #0]
  4022a2:	f013 0f01 	tst.w	r3, #1
  4022a6:	d001      	beq.n	4022ac <nm_bsp_init+0x50>
  4022a8:	4b06      	ldr	r3, [pc, #24]	; (4022c4 <nm_bsp_init+0x68>)
  4022aa:	681b      	ldr	r3, [r3, #0]
	nm_bsp_reset();
  4022ac:	4b06      	ldr	r3, [pc, #24]	; (4022c8 <nm_bsp_init+0x6c>)
  4022ae:	4798      	blx	r3
}
  4022b0:	2000      	movs	r0, #0
  4022b2:	bd10      	pop	{r4, pc}
  4022b4:	2040c334 	.word	0x2040c334
  4022b8:	00405511 	.word	0x00405511
  4022bc:	400e1000 	.word	0x400e1000
  4022c0:	400e1200 	.word	0x400e1200
  4022c4:	e000e010 	.word	0xe000e010
  4022c8:	00402225 	.word	0x00402225

004022cc <nm_bsp_register_isr>:
*	@brief	Register interrupt service routine
*	@param[IN]	pfIsr
*				Pointer to ISR handler
*/
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
  4022cc:	b530      	push	{r4, r5, lr}
  4022ce:	b083      	sub	sp, #12
	gpfIsr = pfIsr;
  4022d0:	4b14      	ldr	r3, [pc, #80]	; (402324 <nm_bsp_register_isr+0x58>)
  4022d2:	6018      	str	r0, [r3, #0]

	/* Configure PGIO pin for interrupt from SPI slave, used when slave has data to send. */
	pmc_enable_periph_clk(CONF_WINC_SPI_INT_PIO_ID);
  4022d4:	2010      	movs	r0, #16
  4022d6:	4b14      	ldr	r3, [pc, #80]	; (402328 <nm_bsp_register_isr+0x5c>)
  4022d8:	4798      	blx	r3
	pio_configure_pin(CONF_WINC_SPI_INT_PIN, PIO_TYPE_PIO_INPUT);
  4022da:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  4022de:	207c      	movs	r0, #124	; 0x7c
  4022e0:	4b12      	ldr	r3, [pc, #72]	; (40232c <nm_bsp_register_isr+0x60>)
  4022e2:	4798      	blx	r3
	pio_pull_up(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK, PIO_PULLUP);
  4022e4:	4c12      	ldr	r4, [pc, #72]	; (402330 <nm_bsp_register_isr+0x64>)
  4022e6:	2201      	movs	r2, #1
  4022e8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4022ec:	4620      	mov	r0, r4
  4022ee:	4b11      	ldr	r3, [pc, #68]	; (402334 <nm_bsp_register_isr+0x68>)
  4022f0:	4798      	blx	r3
	/*Interrupt on falling edge*/
	pio_handler_set(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_PIO_ID,
  4022f2:	4b11      	ldr	r3, [pc, #68]	; (402338 <nm_bsp_register_isr+0x6c>)
  4022f4:	9300      	str	r3, [sp, #0]
  4022f6:	2351      	movs	r3, #81	; 0x51
  4022f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4022fc:	2110      	movs	r1, #16
  4022fe:	4620      	mov	r0, r4
  402300:	4d0e      	ldr	r5, [pc, #56]	; (40233c <nm_bsp_register_isr+0x70>)
  402302:	47a8      	blx	r5
	CONF_WINC_SPI_INT_MASK, PIO_PULLUP | PIO_IT_FALL_EDGE, chip_isr);
	pio_enable_interrupt(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK);
  402304:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  402308:	4620      	mov	r0, r4
  40230a:	4b0d      	ldr	r3, [pc, #52]	; (402340 <nm_bsp_register_isr+0x74>)
  40230c:	4798      	blx	r3
  40230e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  402312:	4b0c      	ldr	r3, [pc, #48]	; (402344 <nm_bsp_register_isr+0x78>)
  402314:	601a      	str	r2, [r3, #0]
	NVIC_EnableIRQ((IRQn_Type) CONF_WINC_SPI_INT_PIO_ID);
	pio_handler_set_priority(CONF_WINC_SPI_INT_PIO, (IRQn_Type)CONF_WINC_SPI_INT_PIO_ID,
  402316:	2200      	movs	r2, #0
  402318:	2110      	movs	r1, #16
  40231a:	4620      	mov	r0, r4
  40231c:	4b0a      	ldr	r3, [pc, #40]	; (402348 <nm_bsp_register_isr+0x7c>)
  40231e:	4798      	blx	r3
			CONF_WINC_SPI_INT_PRIORITY);
}
  402320:	b003      	add	sp, #12
  402322:	bd30      	pop	{r4, r5, pc}
  402324:	2040c334 	.word	0x2040c334
  402328:	00405511 	.word	0x00405511
  40232c:	00405119 	.word	0x00405119
  402330:	400e1400 	.word	0x400e1400
  402334:	00404f49 	.word	0x00404f49
  402338:	004021e5 	.word	0x004021e5
  40233c:	00405299 	.word	0x00405299
  402340:	00405107 	.word	0x00405107
  402344:	e000e100 	.word	0xe000e100
  402348:	0040536d 	.word	0x0040536d

0040234c <nm_bsp_interrupt_ctrl>:
*	@brief	Enable/Disable interrupts
*	@param[IN]	u8Enable
*				'0' disable interrupts. '1' enable interrupts
*/
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
  40234c:	b508      	push	{r3, lr}
	if (u8Enable) {
  40234e:	b928      	cbnz	r0, 40235c <nm_bsp_interrupt_ctrl+0x10>
		pio_enable_interrupt(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK);
	}
	else {
		pio_disable_interrupt(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK);
  402350:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  402354:	4804      	ldr	r0, [pc, #16]	; (402368 <nm_bsp_interrupt_ctrl+0x1c>)
  402356:	4b05      	ldr	r3, [pc, #20]	; (40236c <nm_bsp_interrupt_ctrl+0x20>)
  402358:	4798      	blx	r3
  40235a:	bd08      	pop	{r3, pc}
		pio_enable_interrupt(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK);
  40235c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  402360:	4801      	ldr	r0, [pc, #4]	; (402368 <nm_bsp_interrupt_ctrl+0x1c>)
  402362:	4b03      	ldr	r3, [pc, #12]	; (402370 <nm_bsp_interrupt_ctrl+0x24>)
  402364:	4798      	blx	r3
  402366:	bd08      	pop	{r3, pc}
  402368:	400e1400 	.word	0x400e1400
  40236c:	0040510b 	.word	0x0040510b
  402370:	00405107 	.word	0x00405107

00402374 <nm_bus_init>:
 *	@fn		nm_bus_init
 *	@brief	Initialize the bus wrapper
 *	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
 */
sint8 nm_bus_init(void *pvinit)
{
  402374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		base->PIO_PUDR = mask;
  402376:	4c39      	ldr	r4, [pc, #228]	; (40245c <nm_bus_init+0xe8>)
  402378:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
  40237c:	6621      	str	r1, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40237e:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  402382:	6561      	str	r1, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  402384:	6261      	str	r1, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  402386:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  40238a:	6f23      	ldr	r3, [r4, #112]	; 0x70
  40238c:	430b      	orrs	r3, r1
  40238e:	6723      	str	r3, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  402390:	6f63      	ldr	r3, [r4, #116]	; 0x74
  402392:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
  402396:	6763      	str	r3, [r4, #116]	; 0x74
		base->PIO_PUDR = mask;
  402398:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  40239c:	6622      	str	r2, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40239e:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  4023a2:	6562      	str	r2, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  4023a4:	6262      	str	r2, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4023a6:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  4023aa:	6f23      	ldr	r3, [r4, #112]	; 0x70
  4023ac:	4313      	orrs	r3, r2
  4023ae:	6723      	str	r3, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4023b0:	6f63      	ldr	r3, [r4, #116]	; 0x74
  4023b2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  4023b6:	6763      	str	r3, [r4, #116]	; 0x74
		base->PIO_PUDR = mask;
  4023b8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  4023bc:	6623      	str	r3, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4023be:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  4023c2:	6563      	str	r3, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  4023c4:	6263      	str	r3, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4023c6:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  4023ca:	6f20      	ldr	r0, [r4, #112]	; 0x70
  4023cc:	4318      	orrs	r0, r3
  4023ce:	6720      	str	r0, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4023d0:	6f60      	ldr	r0, [r4, #116]	; 0x74
  4023d2:	f420 0080 	bic.w	r0, r0, #4194304	; 0x400000
  4023d6:	6760      	str	r0, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4023d8:	6061      	str	r1, [r4, #4]
  4023da:	6062      	str	r2, [r4, #4]
  4023dc:	6063      	str	r3, [r4, #4]
  4023de:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
  4023e2:	6066      	str	r6, [r4, #4]
	ioport_disable_pin(CONF_WINC_SPI_MOSI_GPIO);
	ioport_disable_pin(CONF_WINC_SPI_CLK_GPIO);
	ioport_disable_pin(CONF_WINC_SPI_CS_GPIO);
	
	/* disable CS control by peripheral */
	PIOD->PIO_PER = (1<<25);
  4023e4:	6026      	str	r6, [r4, #0]
	PIOD->PIO_OER = (1<<25);
  4023e6:	6126      	str	r6, [r4, #16]
	SPI_DEASSERT_CS();
  4023e8:	6326      	str	r6, [r4, #48]	; 0x30

	spi_enable_clock(CONF_WINC_SPI);
  4023ea:	4d1d      	ldr	r5, [pc, #116]	; (402460 <nm_bus_init+0xec>)
  4023ec:	4628      	mov	r0, r5
  4023ee:	4b1d      	ldr	r3, [pc, #116]	; (402464 <nm_bus_init+0xf0>)
  4023f0:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  4023f2:	2302      	movs	r3, #2
  4023f4:	602b      	str	r3, [r5, #0]
	p_spi->SPI_CR = SPI_CR_SWRST;
  4023f6:	2380      	movs	r3, #128	; 0x80
  4023f8:	602b      	str	r3, [r5, #0]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_master_mode(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MSTR;
  4023fa:	686b      	ldr	r3, [r5, #4]
  4023fc:	f043 0301 	orr.w	r3, r3, #1
  402400:	606b      	str	r3, [r5, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_mode_fault_detect(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  402402:	686b      	ldr	r3, [r5, #4]
  402404:	f043 0310 	orr.w	r3, r3, #16
  402408:	606b      	str	r3, [r5, #4]
	spi_disable(CONF_WINC_SPI);
	spi_reset(CONF_WINC_SPI);
	spi_set_master_mode(CONF_WINC_SPI);
	spi_disable_mode_fault_detect(CONF_WINC_SPI);
	spi_set_peripheral_chip_select_value(CONF_WINC_SPI, CONF_WINC_SPI_NPCS);
  40240a:	2101      	movs	r1, #1
  40240c:	4628      	mov	r0, r5
  40240e:	4b16      	ldr	r3, [pc, #88]	; (402468 <nm_bus_init+0xf4>)
  402410:	4798      	blx	r3
	spi_set_clock_polarity(CONF_WINC_SPI,
  402412:	2200      	movs	r2, #0
  402414:	2101      	movs	r1, #1
  402416:	4628      	mov	r0, r5
  402418:	4b14      	ldr	r3, [pc, #80]	; (40246c <nm_bus_init+0xf8>)
  40241a:	4798      	blx	r3
			CONF_WINC_SPI_NPCS, CONF_WINC_SPI_POL);
	spi_set_clock_phase(CONF_WINC_SPI, CONF_WINC_SPI_NPCS, CONF_WINC_SPI_PHA);
  40241c:	2201      	movs	r2, #1
  40241e:	4611      	mov	r1, r2
  402420:	4628      	mov	r0, r5
  402422:	4b13      	ldr	r3, [pc, #76]	; (402470 <nm_bus_init+0xfc>)
  402424:	4798      	blx	r3
	spi_set_bits_per_transfer(CONF_WINC_SPI, CONF_WINC_SPI_NPCS, SPI_CSR_BITS_8_BIT);
  402426:	2200      	movs	r2, #0
  402428:	2101      	movs	r1, #1
  40242a:	4628      	mov	r0, r5
  40242c:	4b11      	ldr	r3, [pc, #68]	; (402474 <nm_bus_init+0x100>)
  40242e:	4798      	blx	r3
	spi_set_baudrate_div(CONF_WINC_SPI, CONF_WINC_SPI_NPCS,
			spi_calc_baudrate_div(CONF_WINC_SPI_CLOCK, sysclk_get_cpu_hz()));
  402430:	4911      	ldr	r1, [pc, #68]	; (402478 <nm_bus_init+0x104>)
  402432:	4812      	ldr	r0, [pc, #72]	; (40247c <nm_bus_init+0x108>)
  402434:	4b12      	ldr	r3, [pc, #72]	; (402480 <nm_bus_init+0x10c>)
  402436:	4798      	blx	r3
	spi_set_baudrate_div(CONF_WINC_SPI, CONF_WINC_SPI_NPCS,
  402438:	b2c2      	uxtb	r2, r0
  40243a:	2101      	movs	r1, #1
  40243c:	4628      	mov	r0, r5
  40243e:	4b11      	ldr	r3, [pc, #68]	; (402484 <nm_bus_init+0x110>)
  402440:	4798      	blx	r3
	spi_set_transfer_delay(CONF_WINC_SPI, CONF_WINC_SPI_NPCS, CONF_WINC_SPI_DLYBS,
  402442:	2300      	movs	r3, #0
  402444:	461a      	mov	r2, r3
  402446:	2101      	movs	r1, #1
  402448:	4628      	mov	r0, r5
  40244a:	4f0f      	ldr	r7, [pc, #60]	; (402488 <nm_bus_init+0x114>)
  40244c:	47b8      	blx	r7
	p_spi->SPI_CR = SPI_CR_SPIEN;
  40244e:	2301      	movs	r3, #1
  402450:	602b      	str	r3, [r5, #0]
			CONF_WINC_SPI_DLYBCT);
	spi_enable(CONF_WINC_SPI);
	
	SPI_DEASSERT_CS();
  402452:	6326      	str	r6, [r4, #48]	; 0x30
	nm_bsp_reset();
  402454:	4b0d      	ldr	r3, [pc, #52]	; (40248c <nm_bus_init+0x118>)
  402456:	4798      	blx	r3
#endif
	return result;
}
  402458:	2000      	movs	r0, #0
  40245a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40245c:	400e1400 	.word	0x400e1400
  402460:	40008000 	.word	0x40008000
  402464:	00405565 	.word	0x00405565
  402468:	00405591 	.word	0x00405591
  40246c:	0040560b 	.word	0x0040560b
  402470:	00405629 	.word	0x00405629
  402474:	00405647 	.word	0x00405647
  402478:	11e1a300 	.word	0x11e1a300
  40247c:	02dc6c00 	.word	0x02dc6c00
  402480:	0040565b 	.word	0x0040565b
  402484:	00405671 	.word	0x00405671
  402488:	00405699 	.word	0x00405699
  40248c:	00402225 	.word	0x00402225

00402490 <nm_bus_ioctl>:
 *					Arbitrary parameter depenging on IOCTL
 *	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
 *	@note	For SPI only, it's important to be able to send/receive at the same time
 */
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
  402490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402494:	b083      	sub	sp, #12
	sint8 s8Ret = 0;
	switch(u8Cmd)
  402496:	2803      	cmp	r0, #3
  402498:	d144      	bne.n	402524 <nm_bus_ioctl+0x94>
		}
		break;
#elif CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
  40249a:	680e      	ldr	r6, [r1, #0]
  40249c:	684d      	ldr	r5, [r1, #4]
  40249e:	890c      	ldrh	r4, [r1, #8]
	uint8 u8Dummy = 0;
  4024a0:	2300      	movs	r3, #0
  4024a2:	f88d 3004 	strb.w	r3, [sp, #4]
	uint16_t rxd_data = 0;
  4024a6:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (!pu8Mosi) {
  4024aa:	b186      	cbz	r6, 4024ce <nm_bus_ioctl+0x3e>
	else if(!pu8Miso) {
  4024ac:	2d00      	cmp	r5, #0
  4024ae:	d136      	bne.n	40251e <nm_bus_ioctl+0x8e>
		u8SkipMiso = 1;
  4024b0:	f04f 0801 	mov.w	r8, #1
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
  4024b4:	4699      	mov	r9, r3
		pu8Miso = &u8Dummy;
  4024b6:	ad01      	add	r5, sp, #4
	SPI_ASSERT_CS();
  4024b8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  4024bc:	4b20      	ldr	r3, [pc, #128]	; (402540 <nm_bus_ioctl+0xb0>)
  4024be:	635a      	str	r2, [r3, #52]	; 0x34
	while (u16Sz) {
  4024c0:	b32c      	cbz	r4, 40250e <nm_bus_ioctl+0x7e>
		spi_write(CONF_WINC_SPI, txd_data, 0, 0);
  4024c2:	4f20      	ldr	r7, [pc, #128]	; (402544 <nm_bus_ioctl+0xb4>)
  4024c4:	f8df b094 	ldr.w	fp, [pc, #148]	; 40255c <nm_bus_ioctl+0xcc>
		spi_read(CONF_WINC_SPI, &rxd_data, &uc_pcs);
  4024c8:	f8df a094 	ldr.w	sl, [pc, #148]	; 402560 <nm_bus_ioctl+0xd0>
  4024cc:	e006      	b.n	4024dc <nm_bus_ioctl+0x4c>
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
  4024ce:	f04f 0800 	mov.w	r8, #0
		u8SkipMosi = 1;
  4024d2:	f04f 0901 	mov.w	r9, #1
		pu8Mosi = &u8Dummy;
  4024d6:	ae01      	add	r6, sp, #4
  4024d8:	e7ee      	b.n	4024b8 <nm_bus_ioctl+0x28>
	while (u16Sz) {
  4024da:	b1c4      	cbz	r4, 40250e <nm_bus_ioctl+0x7e>
		spi_write(CONF_WINC_SPI, txd_data, 0, 0);
  4024dc:	2300      	movs	r3, #0
  4024de:	461a      	mov	r2, r3
  4024e0:	7831      	ldrb	r1, [r6, #0]
  4024e2:	4638      	mov	r0, r7
  4024e4:	47d8      	blx	fp
		spi_read(CONF_WINC_SPI, &rxd_data, &uc_pcs);
  4024e6:	f10d 0205 	add.w	r2, sp, #5
  4024ea:	f10d 0106 	add.w	r1, sp, #6
  4024ee:	4638      	mov	r0, r7
  4024f0:	47d0      	blx	sl
		*pu8Miso = rxd_data;
  4024f2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  4024f6:	702b      	strb	r3, [r5, #0]
		u16Sz--;
  4024f8:	3c01      	subs	r4, #1
  4024fa:	b2a4      	uxth	r4, r4
		if (!u8SkipMiso)
  4024fc:	f1b8 0f00 	cmp.w	r8, #0
  402500:	d100      	bne.n	402504 <nm_bus_ioctl+0x74>
			pu8Miso++;
  402502:	3501      	adds	r5, #1
		if (!u8SkipMosi)
  402504:	f1b9 0f00 	cmp.w	r9, #0
  402508:	d1e7      	bne.n	4024da <nm_bus_ioctl+0x4a>
			pu8Mosi++;
  40250a:	3601      	adds	r6, #1
  40250c:	e7e5      	b.n	4024da <nm_bus_ioctl+0x4a>
	SPI_DEASSERT_CS();
  40250e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  402512:	4b0b      	ldr	r3, [pc, #44]	; (402540 <nm_bus_ioctl+0xb0>)
  402514:	631a      	str	r2, [r3, #48]	; 0x30
	return M2M_SUCCESS;
  402516:	2000      	movs	r0, #0
			M2M_ERR("Invalid IOCTL command!\n");
			break;
	}

	return s8Ret;
}
  402518:	b003      	add	sp, #12
  40251a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return M2M_ERR_BUS_FAIL;
  40251e:	f06f 0005 	mvn.w	r0, #5
		break;
  402522:	e7f9      	b.n	402518 <nm_bus_ioctl+0x88>
			M2M_ERR("Invalid IOCTL command!\n");
  402524:	f240 121f 	movw	r2, #287	; 0x11f
  402528:	4907      	ldr	r1, [pc, #28]	; (402548 <nm_bus_ioctl+0xb8>)
  40252a:	4808      	ldr	r0, [pc, #32]	; (40254c <nm_bus_ioctl+0xbc>)
  40252c:	4c08      	ldr	r4, [pc, #32]	; (402550 <nm_bus_ioctl+0xc0>)
  40252e:	47a0      	blx	r4
  402530:	4808      	ldr	r0, [pc, #32]	; (402554 <nm_bus_ioctl+0xc4>)
  402532:	47a0      	blx	r4
  402534:	4808      	ldr	r0, [pc, #32]	; (402558 <nm_bus_ioctl+0xc8>)
  402536:	47a0      	blx	r4
			s8Ret = -1;
  402538:	f04f 30ff 	mov.w	r0, #4294967295
			break;
  40253c:	e7ec      	b.n	402518 <nm_bus_ioctl+0x88>
  40253e:	bf00      	nop
  402540:	400e1400 	.word	0x400e1400
  402544:	40008000 	.word	0x40008000
  402548:	0040c9cc 	.word	0x0040c9cc
  40254c:	0040c9dc 	.word	0x0040c9dc
  402550:	00406515 	.word	0x00406515
  402554:	0040c9f0 	.word	0x0040c9f0
  402558:	0040ca08 	.word	0x0040ca08
  40255c:	004055d7 	.word	0x004055d7
  402560:	004055a7 	.word	0x004055a7

00402564 <nm_bus_deinit>:
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  402564:	2202      	movs	r2, #2
  402566:	4b0e      	ldr	r3, [pc, #56]	; (4025a0 <nm_bus_deinit+0x3c>)
  402568:	601a      	str	r2, [r3, #0]
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40256a:	f503 2359 	add.w	r3, r3, #888832	; 0xd9000
  40256e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
  402572:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  402576:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  402578:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40257c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  402580:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  402582:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  402586:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  40258a:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40258c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  402590:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  402594:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  402596:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	ioport_set_pin_dir(CONF_WINC_SPI_MOSI_GPIO, IOPORT_DIR_INPUT);
	ioport_set_pin_dir(CONF_WINC_SPI_MISO_GPIO, IOPORT_DIR_INPUT);
	ioport_set_pin_dir(CONF_WINC_SPI_CLK_GPIO, IOPORT_DIR_INPUT);
	ioport_set_pin_dir(CONF_WINC_SPI_CS_GPIO, IOPORT_DIR_INPUT);
	return M2M_SUCCESS;
}
  40259a:	2000      	movs	r0, #0
  40259c:	4770      	bx	lr
  40259e:	bf00      	nop
  4025a0:	40008000 	.word	0x40008000

004025a4 <m2m_memcpy>:
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
	if(sz == 0) return;
  4025a4:	b13a      	cbz	r2, 4025b6 <m2m_memcpy+0x12>
  4025a6:	3901      	subs	r1, #1
  4025a8:	1882      	adds	r2, r0, r2
	do
	{
		*pDst = *pSrc;
  4025aa:	f811 3f01 	ldrb.w	r3, [r1, #1]!
  4025ae:	f800 3b01 	strb.w	r3, [r0], #1
		pDst++;
		pSrc++;
	}while(--sz);
  4025b2:	4290      	cmp	r0, r2
  4025b4:	d1f9      	bne.n	4025aa <m2m_memcpy+0x6>
  4025b6:	4770      	bx	lr

004025b8 <m2m_memset>:
	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
	if(sz == 0) return;
  4025b8:	b122      	cbz	r2, 4025c4 <m2m_memset+0xc>
  4025ba:	1882      	adds	r2, r0, r2
	do
	{
		*pBuf = val;
  4025bc:	f800 1b01 	strb.w	r1, [r0], #1
		pBuf++;
	}while(--sz);
  4025c0:	4290      	cmp	r0, r2
  4025c2:	d1fb      	bne.n	4025bc <m2m_memset+0x4>
  4025c4:	4770      	bx	lr

004025c6 <m2m_strlen>:
}

uint16 m2m_strlen(uint8 * pcStr)
{
	uint16	u16StrLen = 0;
	while(*pcStr)
  4025c6:	7803      	ldrb	r3, [r0, #0]
  4025c8:	b143      	cbz	r3, 4025dc <m2m_strlen+0x16>
  4025ca:	2300      	movs	r3, #0
	{
		u16StrLen ++;
  4025cc:	3301      	adds	r3, #1
  4025ce:	b29b      	uxth	r3, r3
	while(*pcStr)
  4025d0:	f810 2f01 	ldrb.w	r2, [r0, #1]!
  4025d4:	2a00      	cmp	r2, #0
  4025d6:	d1f9      	bne.n	4025cc <m2m_strlen+0x6>
		pcStr++;
	}
	return u16StrLen;
}
  4025d8:	4618      	mov	r0, r3
  4025da:	4770      	bx	lr
	uint16	u16StrLen = 0;
  4025dc:	2300      	movs	r3, #0
  4025de:	e7fb      	b.n	4025d8 <m2m_strlen+0x12>

004025e0 <isr>:
tpfHifCallBack pfHifCb = NULL;
tpfHifCallBack pfCryptoCb = NULL;

static void isr(void)
{
	gu8Interrupt++;
  4025e0:	4a02      	ldr	r2, [pc, #8]	; (4025ec <isr+0xc>)
  4025e2:	7813      	ldrb	r3, [r2, #0]
  4025e4:	3301      	adds	r3, #1
  4025e6:	b2db      	uxtb	r3, r3
  4025e8:	7013      	strb	r3, [r2, #0]
  4025ea:	4770      	bx	lr
  4025ec:	2040c33b 	.word	0x2040c33b

004025f0 <m2m_hif_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
  4025f0:	4770      	bx	lr
	...

004025f4 <hif_set_rx_done>:
{
  4025f4:	b500      	push	{lr}
  4025f6:	b083      	sub	sp, #12
	nm_bsp_interrupt_ctrl(1);
  4025f8:	2001      	movs	r0, #1
  4025fa:	4b0b      	ldr	r3, [pc, #44]	; (402628 <hif_set_rx_done+0x34>)
  4025fc:	4798      	blx	r3
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
  4025fe:	a901      	add	r1, sp, #4
  402600:	f241 0070 	movw	r0, #4208	; 0x1070
  402604:	4b09      	ldr	r3, [pc, #36]	; (40262c <hif_set_rx_done+0x38>)
  402606:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
  402608:	4603      	mov	r3, r0
  40260a:	b118      	cbz	r0, 402614 <hif_set_rx_done+0x20>
}
  40260c:	4618      	mov	r0, r3
  40260e:	b003      	add	sp, #12
  402610:	f85d fb04 	ldr.w	pc, [sp], #4
	reg |= (1<<1);
  402614:	9901      	ldr	r1, [sp, #4]
  402616:	f041 0102 	orr.w	r1, r1, #2
  40261a:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
  40261c:	f241 0070 	movw	r0, #4208	; 0x1070
  402620:	4b03      	ldr	r3, [pc, #12]	; (402630 <hif_set_rx_done+0x3c>)
  402622:	4798      	blx	r3
  402624:	4603      	mov	r3, r0
  402626:	e7f1      	b.n	40260c <hif_set_rx_done+0x18>
  402628:	0040234d 	.word	0x0040234d
  40262c:	004038e1 	.word	0x004038e1
  402630:	004038ed 	.word	0x004038ed

00402634 <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
  402634:	b508      	push	{r3, lr}
	sint8 ret = M2M_SUCCESS;
	if(gu8ChipSleep == 0)
  402636:	4b12      	ldr	r3, [pc, #72]	; (402680 <hif_chip_wake+0x4c>)
  402638:	781b      	ldrb	r3, [r3, #0]
  40263a:	b94b      	cbnz	r3, 402650 <hif_chip_wake+0x1c>
	{
		if((gu8ChipMode == M2M_PS_DEEP_AUTOMATIC)||(gu8ChipMode == M2M_PS_MANUAL))
  40263c:	4b11      	ldr	r3, [pc, #68]	; (402684 <hif_chip_wake+0x50>)
  40263e:	781b      	ldrb	r3, [r3, #0]
  402640:	b2db      	uxtb	r3, r3
  402642:	2b03      	cmp	r3, #3
  402644:	d00c      	beq.n	402660 <hif_chip_wake+0x2c>
  402646:	4b0f      	ldr	r3, [pc, #60]	; (402684 <hif_chip_wake+0x50>)
  402648:	781b      	ldrb	r3, [r3, #0]
  40264a:	b2db      	uxtb	r3, r3
  40264c:	2b04      	cmp	r3, #4
  40264e:	d007      	beq.n	402660 <hif_chip_wake+0x2c>
		}
		else
		{
		}
	}
	gu8ChipSleep++;
  402650:	4a0b      	ldr	r2, [pc, #44]	; (402680 <hif_chip_wake+0x4c>)
  402652:	7813      	ldrb	r3, [r2, #0]
  402654:	3301      	adds	r3, #1
  402656:	b2db      	uxtb	r3, r3
  402658:	7013      	strb	r3, [r2, #0]
  40265a:	2300      	movs	r3, #0
ERR1:
	return ret;
}
  40265c:	4618      	mov	r0, r3
  40265e:	bd08      	pop	{r3, pc}
			ret = nm_clkless_wake();
  402660:	4b09      	ldr	r3, [pc, #36]	; (402688 <hif_chip_wake+0x54>)
  402662:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
  402664:	4603      	mov	r3, r0
  402666:	2800      	cmp	r0, #0
  402668:	d1f8      	bne.n	40265c <hif_chip_wake+0x28>
			ret = nm_write_reg(WAKE_REG, WAKE_VALUE);
  40266a:	f245 6178 	movw	r1, #22136	; 0x5678
  40266e:	f241 0074 	movw	r0, #4212	; 0x1074
  402672:	4b06      	ldr	r3, [pc, #24]	; (40268c <hif_chip_wake+0x58>)
  402674:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
  402676:	4603      	mov	r3, r0
  402678:	2800      	cmp	r0, #0
  40267a:	d0e9      	beq.n	402650 <hif_chip_wake+0x1c>
  40267c:	e7ee      	b.n	40265c <hif_chip_wake+0x28>
  40267e:	bf00      	nop
  402680:	2040c339 	.word	0x2040c339
  402684:	2040c338 	.word	0x2040c338
  402688:	00403451 	.word	0x00403451
  40268c:	004038ed 	.word	0x004038ed

00402690 <hif_chip_sleep>:

sint8 hif_chip_sleep(void)
{
	sint8 ret = M2M_SUCCESS;

	if(gu8ChipSleep >= 1)
  402690:	4b1e      	ldr	r3, [pc, #120]	; (40270c <hif_chip_sleep+0x7c>)
  402692:	781b      	ldrb	r3, [r3, #0]
  402694:	b123      	cbz	r3, 4026a0 <hif_chip_sleep+0x10>
	{
		gu8ChipSleep--;
  402696:	4a1d      	ldr	r2, [pc, #116]	; (40270c <hif_chip_sleep+0x7c>)
  402698:	7813      	ldrb	r3, [r2, #0]
  40269a:	3b01      	subs	r3, #1
  40269c:	b2db      	uxtb	r3, r3
  40269e:	7013      	strb	r3, [r2, #0]
	}
	
	if(gu8ChipSleep == 0)
  4026a0:	4b1a      	ldr	r3, [pc, #104]	; (40270c <hif_chip_sleep+0x7c>)
  4026a2:	781b      	ldrb	r3, [r3, #0]
  4026a4:	2b00      	cmp	r3, #0
  4026a6:	d12e      	bne.n	402706 <hif_chip_sleep+0x76>
	{
		if((gu8ChipMode == M2M_PS_DEEP_AUTOMATIC)||(gu8ChipMode == M2M_PS_MANUAL))
  4026a8:	4b19      	ldr	r3, [pc, #100]	; (402710 <hif_chip_sleep+0x80>)
  4026aa:	781b      	ldrb	r3, [r3, #0]
  4026ac:	b2db      	uxtb	r3, r3
  4026ae:	2b03      	cmp	r3, #3
  4026b0:	d006      	beq.n	4026c0 <hif_chip_sleep+0x30>
  4026b2:	4b17      	ldr	r3, [pc, #92]	; (402710 <hif_chip_sleep+0x80>)
  4026b4:	781b      	ldrb	r3, [r3, #0]
  4026b6:	b2db      	uxtb	r3, r3
  4026b8:	2b04      	cmp	r3, #4
  4026ba:	d001      	beq.n	4026c0 <hif_chip_sleep+0x30>
	sint8 ret = M2M_SUCCESS;
  4026bc:	2300      	movs	r3, #0
  4026be:	e023      	b.n	402708 <hif_chip_sleep+0x78>
{
  4026c0:	b500      	push	{lr}
  4026c2:	b083      	sub	sp, #12
		{
			uint32 reg = 0;
  4026c4:	2300      	movs	r3, #0
  4026c6:	9301      	str	r3, [sp, #4]
			ret = nm_write_reg(WAKE_REG, SLEEP_VALUE);
  4026c8:	f244 3121 	movw	r1, #17185	; 0x4321
  4026cc:	f241 0074 	movw	r0, #4212	; 0x1074
  4026d0:	4b10      	ldr	r3, [pc, #64]	; (402714 <hif_chip_sleep+0x84>)
  4026d2:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
  4026d4:	4603      	mov	r3, r0
  4026d6:	b118      	cbz	r0, 4026e0 <hif_chip_sleep+0x50>
		{
		}
	}
ERR1:
	return ret;
}
  4026d8:	4618      	mov	r0, r3
  4026da:	b003      	add	sp, #12
  4026dc:	f85d fb04 	ldr.w	pc, [sp], #4
			ret = nm_read_reg_with_ret(0x1, &reg);
  4026e0:	a901      	add	r1, sp, #4
  4026e2:	2001      	movs	r0, #1
  4026e4:	4b0c      	ldr	r3, [pc, #48]	; (402718 <hif_chip_sleep+0x88>)
  4026e6:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
  4026e8:	4603      	mov	r3, r0
  4026ea:	2800      	cmp	r0, #0
  4026ec:	d1f4      	bne.n	4026d8 <hif_chip_sleep+0x48>
			if(reg&0x2)
  4026ee:	9901      	ldr	r1, [sp, #4]
  4026f0:	f011 0f02 	tst.w	r1, #2
  4026f4:	d0f0      	beq.n	4026d8 <hif_chip_sleep+0x48>
				reg &=~(1 << 1);
  4026f6:	f021 0102 	bic.w	r1, r1, #2
  4026fa:	9101      	str	r1, [sp, #4]
				ret = nm_write_reg(0x1, reg);
  4026fc:	2001      	movs	r0, #1
  4026fe:	4b05      	ldr	r3, [pc, #20]	; (402714 <hif_chip_sleep+0x84>)
  402700:	4798      	blx	r3
  402702:	4603      	mov	r3, r0
  402704:	e7e8      	b.n	4026d8 <hif_chip_sleep+0x48>
	sint8 ret = M2M_SUCCESS;
  402706:	2300      	movs	r3, #0
}
  402708:	4618      	mov	r0, r3
  40270a:	4770      	bx	lr
  40270c:	2040c339 	.word	0x2040c339
  402710:	2040c338 	.word	0x2040c338
  402714:	004038ed 	.word	0x004038ed
  402718:	004038e1 	.word	0x004038e1

0040271c <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
  40271c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402720:	b087      	sub	sp, #28
  402722:	4607      	mov	r7, r0
  402724:	4688      	mov	r8, r1
  402726:	4692      	mov	sl, r2
  402728:	4699      	mov	r9, r3
  40272a:	9c10      	ldr	r4, [sp, #64]	; 0x40
  40272c:	f8bd 6044 	ldrh.w	r6, [sp, #68]	; 0x44
  402730:	f8bd 5048 	ldrh.w	r5, [sp, #72]	; 0x48
	sint8		ret = M2M_ERR_SEND;
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
  402734:	f001 037f 	and.w	r3, r1, #127	; 0x7f
  402738:	f88d 3015 	strb.w	r3, [sp, #21]
	strHif.u8Gid		= u8Gid;
  40273c:	f88d 0014 	strb.w	r0, [sp, #20]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
  402740:	2308      	movs	r3, #8
  402742:	f8ad 3016 	strh.w	r3, [sp, #22]
	if(pu8DataBuf != NULL)
  402746:	2c00      	cmp	r4, #0
  402748:	f000 809f 	beq.w	40288a <hif_send+0x16e>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
  40274c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  402750:	fa16 f383 	uxtah	r3, r6, r3
  402754:	442b      	add	r3, r5
  402756:	b29b      	uxth	r3, r3
  402758:	f8ad 3016 	strh.w	r3, [sp, #22]
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
	}
	ret = hif_chip_wake();
  40275c:	4b5c      	ldr	r3, [pc, #368]	; (4028d0 <hif_send+0x1b4>)
  40275e:	4798      	blx	r3
	if(ret == M2M_SUCCESS)
  402760:	4683      	mov	fp, r0
  402762:	2800      	cmp	r0, #0
  402764:	f040 80a2 	bne.w	4028ac <hif_send+0x190>
	{
		volatile uint32 reg, dma_addr = 0;
  402768:	2300      	movs	r3, #0
  40276a:	9303      	str	r3, [sp, #12]
		volatile uint16 cnt = 0;
  40276c:	f8ad 3006 	strh.w	r3, [sp, #6]

		reg = 0UL;
  402770:	9302      	str	r3, [sp, #8]
		reg |= (uint32)u8Gid;
  402772:	9b02      	ldr	r3, [sp, #8]
  402774:	431f      	orrs	r7, r3
  402776:	9702      	str	r7, [sp, #8]
		reg |= ((uint32)u8Opcode<<8);
  402778:	9b02      	ldr	r3, [sp, #8]
  40277a:	ea43 2308 	orr.w	r3, r3, r8, lsl #8
  40277e:	9302      	str	r3, [sp, #8]
		reg |= ((uint32)strHif.u16Length<<16);
  402780:	f8bd 2016 	ldrh.w	r2, [sp, #22]
  402784:	9b02      	ldr	r3, [sp, #8]
  402786:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  40278a:	9302      	str	r3, [sp, #8]
		ret = nm_write_reg(NMI_STATE_REG,reg);
  40278c:	9902      	ldr	r1, [sp, #8]
  40278e:	f241 008c 	movw	r0, #4236	; 0x108c
  402792:	4b50      	ldr	r3, [pc, #320]	; (4028d4 <hif_send+0x1b8>)
  402794:	4798      	blx	r3
		if(M2M_SUCCESS != ret) goto ERR1;
  402796:	4683      	mov	fp, r0
  402798:	2800      	cmp	r0, #0
  40279a:	f040 8091 	bne.w	4028c0 <hif_send+0x1a4>


		reg = 0;
  40279e:	2300      	movs	r3, #0
  4027a0:	9302      	str	r3, [sp, #8]
		reg |= (1<<1);
  4027a2:	9b02      	ldr	r3, [sp, #8]
  4027a4:	f043 0302 	orr.w	r3, r3, #2
  4027a8:	9302      	str	r3, [sp, #8]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
  4027aa:	9902      	ldr	r1, [sp, #8]
  4027ac:	f241 0078 	movw	r0, #4216	; 0x1078
  4027b0:	4b48      	ldr	r3, [pc, #288]	; (4028d4 <hif_send+0x1b8>)
  4027b2:	4798      	blx	r3
		if(M2M_SUCCESS != ret) goto ERR1;
  4027b4:	4683      	mov	fp, r0
  4027b6:	2800      	cmp	r0, #0
  4027b8:	f040 8082 	bne.w	4028c0 <hif_send+0x1a4>
		dma_addr = 0;
  4027bc:	2300      	movs	r3, #0
  4027be:	9303      	str	r3, [sp, #12]

		//nm_bsp_interrupt_ctrl(0);

		for(cnt = 0; cnt < 1000; cnt ++)
  4027c0:	f8ad 3006 	strh.w	r3, [sp, #6]
  4027c4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  4027c8:	b29b      	uxth	r3, r3
  4027ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  4027ce:	d216      	bcs.n	4027fe <hif_send+0xe2>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
  4027d0:	f241 0878 	movw	r8, #4216	; 0x1078
  4027d4:	4f40      	ldr	r7, [pc, #256]	; (4028d8 <hif_send+0x1bc>)
  4027d6:	a902      	add	r1, sp, #8
  4027d8:	4640      	mov	r0, r8
  4027da:	47b8      	blx	r7
			if(ret != M2M_SUCCESS) break;
  4027dc:	b978      	cbnz	r0, 4027fe <hif_send+0xe2>
			if (!(reg & 0x2))
  4027de:	9b02      	ldr	r3, [sp, #8]
  4027e0:	f013 0f02 	tst.w	r3, #2
  4027e4:	d059      	beq.n	40289a <hif_send+0x17e>
		for(cnt = 0; cnt < 1000; cnt ++)
  4027e6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  4027ea:	3301      	adds	r3, #1
  4027ec:	b29b      	uxth	r3, r3
  4027ee:	f8ad 3006 	strh.w	r3, [sp, #6]
  4027f2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  4027f6:	b29b      	uxth	r3, r3
  4027f8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  4027fc:	d3eb      	bcc.n	4027d6 <hif_send+0xba>
				break;
			}
		}
		//nm_bsp_interrupt_ctrl(1);

		if (dma_addr != 0)
  4027fe:	9b03      	ldr	r3, [sp, #12]
  402800:	2b00      	cmp	r3, #0
  402802:	d061      	beq.n	4028c8 <hif_send+0x1ac>
		{
			volatile uint32	u32CurrAddr;
			u32CurrAddr = dma_addr;
  402804:	9b03      	ldr	r3, [sp, #12]
  402806:	9304      	str	r3, [sp, #16]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
  402808:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  40280c:	b29b      	uxth	r3, r3
  40280e:	f8ad 3016 	strh.w	r3, [sp, #22]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
  402812:	9804      	ldr	r0, [sp, #16]
  402814:	2208      	movs	r2, #8
  402816:	a905      	add	r1, sp, #20
  402818:	4b30      	ldr	r3, [pc, #192]	; (4028dc <hif_send+0x1c0>)
  40281a:	4798      	blx	r3
		#ifdef CONF_WINC_USE_I2C
			nm_bsp_sleep(1);
		#endif
			if(M2M_SUCCESS != ret) goto ERR1;
  40281c:	4683      	mov	fp, r0
  40281e:	2800      	cmp	r0, #0
  402820:	d14e      	bne.n	4028c0 <hif_send+0x1a4>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
  402822:	9b04      	ldr	r3, [sp, #16]
  402824:	3308      	adds	r3, #8
  402826:	9304      	str	r3, [sp, #16]
			if(pu8CtrlBuf != NULL)
  402828:	f1ba 0f00 	cmp.w	sl, #0
  40282c:	d00a      	beq.n	402844 <hif_send+0x128>
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
  40282e:	9804      	ldr	r0, [sp, #16]
  402830:	464a      	mov	r2, r9
  402832:	4651      	mov	r1, sl
  402834:	4b29      	ldr	r3, [pc, #164]	; (4028dc <hif_send+0x1c0>)
  402836:	4798      	blx	r3
			#ifdef CONF_WINC_USE_I2C
				nm_bsp_sleep(1);
			#endif
				if(M2M_SUCCESS != ret) goto ERR1;
  402838:	4683      	mov	fp, r0
  40283a:	2800      	cmp	r0, #0
  40283c:	d140      	bne.n	4028c0 <hif_send+0x1a4>
				u32CurrAddr += u16CtrlBufSize;
  40283e:	9b04      	ldr	r3, [sp, #16]
  402840:	444b      	add	r3, r9
  402842:	9304      	str	r3, [sp, #16]
			}
			if(pu8DataBuf != NULL)
  402844:	b17c      	cbz	r4, 402866 <hif_send+0x14a>
			{
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
  402846:	9b04      	ldr	r3, [sp, #16]
  402848:	eba5 0509 	sub.w	r5, r5, r9
  40284c:	441d      	add	r5, r3
  40284e:	9504      	str	r5, [sp, #16]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
  402850:	9804      	ldr	r0, [sp, #16]
  402852:	4632      	mov	r2, r6
  402854:	4621      	mov	r1, r4
  402856:	4b21      	ldr	r3, [pc, #132]	; (4028dc <hif_send+0x1c0>)
  402858:	4798      	blx	r3
			#ifdef CONF_WINC_USE_I2C	
				nm_bsp_sleep(1);
			#endif
				if(M2M_SUCCESS != ret) goto ERR1;
  40285a:	4683      	mov	fp, r0
  40285c:	2800      	cmp	r0, #0
  40285e:	d12f      	bne.n	4028c0 <hif_send+0x1a4>
				u32CurrAddr += u16DataSize;
  402860:	9b04      	ldr	r3, [sp, #16]
  402862:	441e      	add	r6, r3
  402864:	9604      	str	r6, [sp, #16]
			}

			reg = dma_addr << 2;
  402866:	9b03      	ldr	r3, [sp, #12]
  402868:	009b      	lsls	r3, r3, #2
  40286a:	9302      	str	r3, [sp, #8]
			reg |= (1 << 1);
  40286c:	9b02      	ldr	r3, [sp, #8]
  40286e:	f043 0302 	orr.w	r3, r3, #2
  402872:	9302      	str	r3, [sp, #8]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
  402874:	9902      	ldr	r1, [sp, #8]
  402876:	f241 006c 	movw	r0, #4204	; 0x106c
  40287a:	4b16      	ldr	r3, [pc, #88]	; (4028d4 <hif_send+0x1b8>)
  40287c:	4798      	blx	r3
			if(M2M_SUCCESS != ret) goto ERR1;
  40287e:	4683      	mov	fp, r0
  402880:	b9f0      	cbnz	r0, 4028c0 <hif_send+0x1a4>
	else
	{
		M2M_ERR("(HIF)Fail to wakup the chip\n");
		goto ERR1;
	}
	ret = hif_chip_sleep();
  402882:	4b17      	ldr	r3, [pc, #92]	; (4028e0 <hif_send+0x1c4>)
  402884:	4798      	blx	r3
  402886:	4683      	mov	fp, r0
  402888:	e01a      	b.n	4028c0 <hif_send+0x1a4>
		strHif.u16Length += u16CtrlBufSize;
  40288a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  40288e:	fa19 f383 	uxtah	r3, r9, r3
  402892:	b29b      	uxth	r3, r3
  402894:	f8ad 3016 	strh.w	r3, [sp, #22]
  402898:	e760      	b.n	40275c <hif_send+0x40>
				ret = nm_read_reg_with_ret(0x150400,(uint32 *)&dma_addr);
  40289a:	a903      	add	r1, sp, #12
  40289c:	4811      	ldr	r0, [pc, #68]	; (4028e4 <hif_send+0x1c8>)
  40289e:	4b0e      	ldr	r3, [pc, #56]	; (4028d8 <hif_send+0x1bc>)
  4028a0:	4798      	blx	r3
				if(ret != M2M_SUCCESS) {
  4028a2:	2800      	cmp	r0, #0
  4028a4:	d0ab      	beq.n	4027fe <hif_send+0xe2>
					dma_addr = 0;
  4028a6:	2300      	movs	r3, #0
  4028a8:	9303      	str	r3, [sp, #12]
  4028aa:	e7a8      	b.n	4027fe <hif_send+0xe2>
		M2M_ERR("(HIF)Fail to wakup the chip\n");
  4028ac:	f240 129f 	movw	r2, #415	; 0x19f
  4028b0:	490d      	ldr	r1, [pc, #52]	; (4028e8 <hif_send+0x1cc>)
  4028b2:	480e      	ldr	r0, [pc, #56]	; (4028ec <hif_send+0x1d0>)
  4028b4:	4c0e      	ldr	r4, [pc, #56]	; (4028f0 <hif_send+0x1d4>)
  4028b6:	47a0      	blx	r4
  4028b8:	480e      	ldr	r0, [pc, #56]	; (4028f4 <hif_send+0x1d8>)
  4028ba:	47a0      	blx	r4
  4028bc:	480e      	ldr	r0, [pc, #56]	; (4028f8 <hif_send+0x1dc>)
  4028be:	47a0      	blx	r4

ERR1:
	return ret;
}
  4028c0:	4658      	mov	r0, fp
  4028c2:	b007      	add	sp, #28
  4028c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ret =  M2M_ERR_MEM_ALLOC;
  4028c8:	f06f 0b02 	mvn.w	fp, #2
  4028cc:	e7f8      	b.n	4028c0 <hif_send+0x1a4>
  4028ce:	bf00      	nop
  4028d0:	00402635 	.word	0x00402635
  4028d4:	004038ed 	.word	0x004038ed
  4028d8:	004038e1 	.word	0x004038e1
  4028dc:	00403955 	.word	0x00403955
  4028e0:	00402691 	.word	0x00402691
  4028e4:	00150400 	.word	0x00150400
  4028e8:	0040ca0c 	.word	0x0040ca0c
  4028ec:	0040c9dc 	.word	0x0040c9dc
  4028f0:	00406515 	.word	0x00406515
  4028f4:	0040cc60 	.word	0x0040cc60
  4028f8:	0040ca08 	.word	0x0040ca08

004028fc <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
  4028fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  402900:	b087      	sub	sp, #28
	sint8 ret = M2M_SUCCESS;

	while (gu8Interrupt) {
  402902:	f8df 92f8 	ldr.w	r9, [pc, #760]	; 402bfc <hif_handle_isr+0x300>
	ret = hif_chip_wake();
  402906:	4fa2      	ldr	r7, [pc, #648]	; (402b90 <hif_handle_isr+0x294>)
			if(ret == M2M_SUCCESS) {
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
  402908:	4ea2      	ldr	r6, [pc, #648]	; (402b94 <hif_handle_isr+0x298>)
		M2M_ERR("(hif) FAIL to wakeup the chip\n");
  40290a:	f8df 82f4 	ldr.w	r8, [pc, #756]	; 402c00 <hif_handle_isr+0x304>
	while (gu8Interrupt) {
  40290e:	e0d5      	b.n	402abc <hif_handle_isr+0x1c0>
					ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
  402910:	2204      	movs	r2, #4
  402912:	a904      	add	r1, sp, #16
  402914:	9805      	ldr	r0, [sp, #20]
  402916:	4ba0      	ldr	r3, [pc, #640]	; (402b98 <hif_handle_isr+0x29c>)
  402918:	4798      	blx	r3
					strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
  40291a:	f8bd 3012 	ldrh.w	r3, [sp, #18]
  40291e:	b29b      	uxth	r3, r3
  402920:	f8ad 3012 	strh.w	r3, [sp, #18]
					if(M2M_SUCCESS != ret)
  402924:	4604      	mov	r4, r0
  402926:	2800      	cmp	r0, #0
  402928:	d130      	bne.n	40298c <hif_handle_isr+0x90>
					if(strHif.u16Length != size)
  40292a:	f8bd 3012 	ldrh.w	r3, [sp, #18]
  40292e:	b29b      	uxth	r3, r3
  402930:	429d      	cmp	r5, r3
  402932:	d005      	beq.n	402940 <hif_handle_isr+0x44>
						if((size - strHif.u16Length) > 4)
  402934:	f8bd 3012 	ldrh.w	r3, [sp, #18]
  402938:	b29b      	uxth	r3, r3
  40293a:	1aeb      	subs	r3, r5, r3
  40293c:	2b04      	cmp	r3, #4
  40293e:	dc33      	bgt.n	4029a8 <hif_handle_isr+0xac>
					if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
  402940:	f89d 3010 	ldrb.w	r3, [sp, #16]
  402944:	b2db      	uxtb	r3, r3
  402946:	2b01      	cmp	r3, #1
  402948:	d047      	beq.n	4029da <hif_handle_isr+0xde>
					else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
  40294a:	f89d 3010 	ldrb.w	r3, [sp, #16]
  40294e:	b2db      	uxtb	r3, r3
  402950:	2b02      	cmp	r3, #2
  402952:	d05f      	beq.n	402a14 <hif_handle_isr+0x118>
					else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
  402954:	f89d 3010 	ldrb.w	r3, [sp, #16]
  402958:	b2db      	uxtb	r3, r3
  40295a:	2b04      	cmp	r3, #4
  40295c:	d068      	beq.n	402a30 <hif_handle_isr+0x134>
					else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
  40295e:	f89d 3010 	ldrb.w	r3, [sp, #16]
  402962:	b2db      	uxtb	r3, r3
  402964:	2b06      	cmp	r3, #6
  402966:	d071      	beq.n	402a4c <hif_handle_isr+0x150>
					else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
  402968:	f89d 3010 	ldrb.w	r3, [sp, #16]
  40296c:	b2db      	uxtb	r3, r3
  40296e:	2b07      	cmp	r3, #7
  402970:	d07a      	beq.n	402a68 <hif_handle_isr+0x16c>
						M2M_ERR("(hif) invalid group ID\n");
  402972:	f240 2202 	movw	r2, #514	; 0x202
  402976:	4641      	mov	r1, r8
  402978:	4630      	mov	r0, r6
  40297a:	4c88      	ldr	r4, [pc, #544]	; (402b9c <hif_handle_isr+0x2a0>)
  40297c:	47a0      	blx	r4
  40297e:	4888      	ldr	r0, [pc, #544]	; (402ba0 <hif_handle_isr+0x2a4>)
  402980:	47a0      	blx	r4
  402982:	4888      	ldr	r0, [pc, #544]	; (402ba4 <hif_handle_isr+0x2a8>)
  402984:	47a0      	blx	r4
						ret = M2M_ERR_BUS_FAIL;
  402986:	f06f 0405 	mvn.w	r4, #5
  40298a:	e096      	b.n	402aba <hif_handle_isr+0x1be>
						M2M_ERR("(hif) address bus fail\n");
  40298c:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
  402990:	4641      	mov	r1, r8
  402992:	4630      	mov	r0, r6
  402994:	4d81      	ldr	r5, [pc, #516]	; (402b9c <hif_handle_isr+0x2a0>)
  402996:	47a8      	blx	r5
  402998:	4883      	ldr	r0, [pc, #524]	; (402ba8 <hif_handle_isr+0x2ac>)
  40299a:	47a8      	blx	r5
  40299c:	4881      	ldr	r0, [pc, #516]	; (402ba4 <hif_handle_isr+0x2a8>)
  40299e:	47a8      	blx	r5
						nm_bsp_interrupt_ctrl(1);
  4029a0:	2001      	movs	r0, #1
  4029a2:	4b82      	ldr	r3, [pc, #520]	; (402bac <hif_handle_isr+0x2b0>)
  4029a4:	4798      	blx	r3
  4029a6:	e088      	b.n	402aba <hif_handle_isr+0x1be>
							M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
  4029a8:	f240 12df 	movw	r2, #479	; 0x1df
  4029ac:	4641      	mov	r1, r8
  4029ae:	4630      	mov	r0, r6
  4029b0:	4c7a      	ldr	r4, [pc, #488]	; (402b9c <hif_handle_isr+0x2a0>)
  4029b2:	47a0      	blx	r4
  4029b4:	f8bd 2012 	ldrh.w	r2, [sp, #18]
  4029b8:	f89d 3010 	ldrb.w	r3, [sp, #16]
  4029bc:	f89d 1011 	ldrb.w	r1, [sp, #17]
  4029c0:	9100      	str	r1, [sp, #0]
  4029c2:	b292      	uxth	r2, r2
  4029c4:	4629      	mov	r1, r5
  4029c6:	487a      	ldr	r0, [pc, #488]	; (402bb0 <hif_handle_isr+0x2b4>)
  4029c8:	47a0      	blx	r4
  4029ca:	4876      	ldr	r0, [pc, #472]	; (402ba4 <hif_handle_isr+0x2a8>)
  4029cc:	47a0      	blx	r4
							nm_bsp_interrupt_ctrl(1);
  4029ce:	2001      	movs	r0, #1
  4029d0:	4b76      	ldr	r3, [pc, #472]	; (402bac <hif_handle_isr+0x2b0>)
  4029d2:	4798      	blx	r3
							ret = M2M_ERR_BUS_FAIL;
  4029d4:	f06f 0405 	mvn.w	r4, #5
  4029d8:	e06f      	b.n	402aba <hif_handle_isr+0x1be>
						if(pfWifiCb)
  4029da:	4b76      	ldr	r3, [pc, #472]	; (402bb4 <hif_handle_isr+0x2b8>)
  4029dc:	681b      	ldr	r3, [r3, #0]
  4029de:	b143      	cbz	r3, 4029f2 <hif_handle_isr+0xf6>
							pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  4029e0:	f89d 0011 	ldrb.w	r0, [sp, #17]
  4029e4:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  4029e8:	3908      	subs	r1, #8
  4029ea:	9a05      	ldr	r2, [sp, #20]
  4029ec:	3208      	adds	r2, #8
  4029ee:	b289      	uxth	r1, r1
  4029f0:	4798      	blx	r3
					if(!gu8HifSizeDone)
  4029f2:	4b71      	ldr	r3, [pc, #452]	; (402bb8 <hif_handle_isr+0x2bc>)
  4029f4:	781b      	ldrb	r3, [r3, #0]
  4029f6:	2b00      	cmp	r3, #0
  4029f8:	d15c      	bne.n	402ab4 <hif_handle_isr+0x1b8>
						M2M_ERR("(hif) host app didn't set RX Done\n");
  4029fa:	f240 2209 	movw	r2, #521	; 0x209
  4029fe:	4641      	mov	r1, r8
  402a00:	4630      	mov	r0, r6
  402a02:	4c66      	ldr	r4, [pc, #408]	; (402b9c <hif_handle_isr+0x2a0>)
  402a04:	47a0      	blx	r4
  402a06:	486d      	ldr	r0, [pc, #436]	; (402bbc <hif_handle_isr+0x2c0>)
  402a08:	47a0      	blx	r4
  402a0a:	4866      	ldr	r0, [pc, #408]	; (402ba4 <hif_handle_isr+0x2a8>)
  402a0c:	47a0      	blx	r4
						ret = hif_set_rx_done();
  402a0e:	4b6c      	ldr	r3, [pc, #432]	; (402bc0 <hif_handle_isr+0x2c4>)
  402a10:	4798      	blx	r3
  402a12:	e04f      	b.n	402ab4 <hif_handle_isr+0x1b8>
						if(pfIpCb)
  402a14:	4b6b      	ldr	r3, [pc, #428]	; (402bc4 <hif_handle_isr+0x2c8>)
  402a16:	681b      	ldr	r3, [r3, #0]
  402a18:	2b00      	cmp	r3, #0
  402a1a:	d0ea      	beq.n	4029f2 <hif_handle_isr+0xf6>
							pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  402a1c:	f89d 0011 	ldrb.w	r0, [sp, #17]
  402a20:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  402a24:	3908      	subs	r1, #8
  402a26:	9a05      	ldr	r2, [sp, #20]
  402a28:	3208      	adds	r2, #8
  402a2a:	b289      	uxth	r1, r1
  402a2c:	4798      	blx	r3
  402a2e:	e7e0      	b.n	4029f2 <hif_handle_isr+0xf6>
						if(pfOtaCb)
  402a30:	4b65      	ldr	r3, [pc, #404]	; (402bc8 <hif_handle_isr+0x2cc>)
  402a32:	681b      	ldr	r3, [r3, #0]
  402a34:	2b00      	cmp	r3, #0
  402a36:	d0dc      	beq.n	4029f2 <hif_handle_isr+0xf6>
							pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  402a38:	f89d 0011 	ldrb.w	r0, [sp, #17]
  402a3c:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  402a40:	3908      	subs	r1, #8
  402a42:	9a05      	ldr	r2, [sp, #20]
  402a44:	3208      	adds	r2, #8
  402a46:	b289      	uxth	r1, r1
  402a48:	4798      	blx	r3
  402a4a:	e7d2      	b.n	4029f2 <hif_handle_isr+0xf6>
						if(pfCryptoCb)
  402a4c:	4b5f      	ldr	r3, [pc, #380]	; (402bcc <hif_handle_isr+0x2d0>)
  402a4e:	681b      	ldr	r3, [r3, #0]
  402a50:	2b00      	cmp	r3, #0
  402a52:	d0ce      	beq.n	4029f2 <hif_handle_isr+0xf6>
							pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  402a54:	f89d 0011 	ldrb.w	r0, [sp, #17]
  402a58:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  402a5c:	3908      	subs	r1, #8
  402a5e:	9a05      	ldr	r2, [sp, #20]
  402a60:	3208      	adds	r2, #8
  402a62:	b289      	uxth	r1, r1
  402a64:	4798      	blx	r3
  402a66:	e7c4      	b.n	4029f2 <hif_handle_isr+0xf6>
						if(pfSigmaCb)
  402a68:	4b59      	ldr	r3, [pc, #356]	; (402bd0 <hif_handle_isr+0x2d4>)
  402a6a:	681b      	ldr	r3, [r3, #0]
  402a6c:	2b00      	cmp	r3, #0
  402a6e:	d0c0      	beq.n	4029f2 <hif_handle_isr+0xf6>
							pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  402a70:	f89d 0011 	ldrb.w	r0, [sp, #17]
  402a74:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  402a78:	3908      	subs	r1, #8
  402a7a:	9a05      	ldr	r2, [sp, #20]
  402a7c:	3208      	adds	r2, #8
  402a7e:	b289      	uxth	r1, r1
  402a80:	4798      	blx	r3
  402a82:	e7b6      	b.n	4029f2 <hif_handle_isr+0xf6>
					M2M_ERR("(hif) Wrong Size\n");
  402a84:	f240 2211 	movw	r2, #529	; 0x211
  402a88:	4641      	mov	r1, r8
  402a8a:	4630      	mov	r0, r6
  402a8c:	4c43      	ldr	r4, [pc, #268]	; (402b9c <hif_handle_isr+0x2a0>)
  402a8e:	47a0      	blx	r4
  402a90:	4850      	ldr	r0, [pc, #320]	; (402bd4 <hif_handle_isr+0x2d8>)
  402a92:	47a0      	blx	r4
  402a94:	4843      	ldr	r0, [pc, #268]	; (402ba4 <hif_handle_isr+0x2a8>)
  402a96:	47a0      	blx	r4
					ret = M2M_ERR_RCV;
  402a98:	f06f 0401 	mvn.w	r4, #1
  402a9c:	e02f      	b.n	402afe <hif_handle_isr+0x202>
				M2M_ERR("(hif) False interrupt %lx",reg);
  402a9e:	f44f 7206 	mov.w	r2, #536	; 0x218
  402aa2:	4641      	mov	r1, r8
  402aa4:	4630      	mov	r0, r6
  402aa6:	4c3d      	ldr	r4, [pc, #244]	; (402b9c <hif_handle_isr+0x2a0>)
  402aa8:	47a0      	blx	r4
  402aaa:	9903      	ldr	r1, [sp, #12]
  402aac:	484a      	ldr	r0, [pc, #296]	; (402bd8 <hif_handle_isr+0x2dc>)
  402aae:	47a0      	blx	r4
  402ab0:	483c      	ldr	r0, [pc, #240]	; (402ba4 <hif_handle_isr+0x2a8>)
  402ab2:	47a0      	blx	r4
	ret = hif_chip_sleep();
  402ab4:	4b49      	ldr	r3, [pc, #292]	; (402bdc <hif_handle_isr+0x2e0>)
  402ab6:	4798      	blx	r3
  402ab8:	4604      	mov	r4, r0
			if(ret == M2M_SUCCESS) {
  402aba:	bb04      	cbnz	r4, 402afe <hif_handle_isr+0x202>
	while (gu8Interrupt) {
  402abc:	f899 3000 	ldrb.w	r3, [r9]
  402ac0:	2b00      	cmp	r3, #0
  402ac2:	f000 809f 	beq.w	402c04 <hif_handle_isr+0x308>
		gu8Interrupt--;
  402ac6:	f899 3000 	ldrb.w	r3, [r9]
  402aca:	3b01      	subs	r3, #1
  402acc:	b2db      	uxtb	r3, r3
  402ace:	f889 3000 	strb.w	r3, [r9]
  402ad2:	e01f      	b.n	402b14 <hif_handle_isr+0x218>
			M2M_ERR("(hif) Fail to Read interrupt reg\n");
  402ad4:	f240 221e 	movw	r2, #542	; 0x21e
  402ad8:	4641      	mov	r1, r8
  402ada:	4630      	mov	r0, r6
  402adc:	4d2f      	ldr	r5, [pc, #188]	; (402b9c <hif_handle_isr+0x2a0>)
  402ade:	47a8      	blx	r5
  402ae0:	483f      	ldr	r0, [pc, #252]	; (402be0 <hif_handle_isr+0x2e4>)
  402ae2:	47a8      	blx	r5
  402ae4:	482f      	ldr	r0, [pc, #188]	; (402ba4 <hif_handle_isr+0x2a8>)
  402ae6:	47a8      	blx	r5
  402ae8:	e009      	b.n	402afe <hif_handle_isr+0x202>
		M2M_ERR("(hif) FAIL to wakeup the chip\n");
  402aea:	f44f 7209 	mov.w	r2, #548	; 0x224
  402aee:	4641      	mov	r1, r8
  402af0:	4630      	mov	r0, r6
  402af2:	4d2a      	ldr	r5, [pc, #168]	; (402b9c <hif_handle_isr+0x2a0>)
  402af4:	47a8      	blx	r5
  402af6:	483b      	ldr	r0, [pc, #236]	; (402be4 <hif_handle_isr+0x2e8>)
  402af8:	47a8      	blx	r5
  402afa:	482a      	ldr	r0, [pc, #168]	; (402ba4 <hif_handle_isr+0x2a8>)
  402afc:	47a8      	blx	r5
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
  402afe:	f240 2243 	movw	r2, #579	; 0x243
  402b02:	4939      	ldr	r1, [pc, #228]	; (402be8 <hif_handle_isr+0x2ec>)
  402b04:	4630      	mov	r0, r6
  402b06:	4d25      	ldr	r5, [pc, #148]	; (402b9c <hif_handle_isr+0x2a0>)
  402b08:	47a8      	blx	r5
  402b0a:	4621      	mov	r1, r4
  402b0c:	4837      	ldr	r0, [pc, #220]	; (402bec <hif_handle_isr+0x2f0>)
  402b0e:	47a8      	blx	r5
  402b10:	4824      	ldr	r0, [pc, #144]	; (402ba4 <hif_handle_isr+0x2a8>)
  402b12:	47a8      	blx	r5
	ret = hif_chip_wake();
  402b14:	47b8      	blx	r7
	if(ret == M2M_SUCCESS)
  402b16:	4604      	mov	r4, r0
  402b18:	2800      	cmp	r0, #0
  402b1a:	d1e6      	bne.n	402aea <hif_handle_isr+0x1ee>
		ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
  402b1c:	a903      	add	r1, sp, #12
  402b1e:	f241 0070 	movw	r0, #4208	; 0x1070
  402b22:	4b33      	ldr	r3, [pc, #204]	; (402bf0 <hif_handle_isr+0x2f4>)
  402b24:	4798      	blx	r3
		if(M2M_SUCCESS == ret)
  402b26:	4604      	mov	r4, r0
  402b28:	2800      	cmp	r0, #0
  402b2a:	d1d3      	bne.n	402ad4 <hif_handle_isr+0x1d8>
			if(reg & 0x1)	/* New interrupt has been received */
  402b2c:	9b03      	ldr	r3, [sp, #12]
  402b2e:	f013 0f01 	tst.w	r3, #1
  402b32:	d0b4      	beq.n	402a9e <hif_handle_isr+0x1a2>
				nm_bsp_interrupt_ctrl(0);
  402b34:	4b1d      	ldr	r3, [pc, #116]	; (402bac <hif_handle_isr+0x2b0>)
  402b36:	4798      	blx	r3
				reg &= ~(1<<0);
  402b38:	9903      	ldr	r1, [sp, #12]
  402b3a:	f021 0101 	bic.w	r1, r1, #1
  402b3e:	9103      	str	r1, [sp, #12]
				ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
  402b40:	f241 0070 	movw	r0, #4208	; 0x1070
  402b44:	4b2b      	ldr	r3, [pc, #172]	; (402bf4 <hif_handle_isr+0x2f8>)
  402b46:	4798      	blx	r3
				if(ret != M2M_SUCCESS)goto ERR1;
  402b48:	4604      	mov	r4, r0
  402b4a:	2800      	cmp	r0, #0
  402b4c:	d1d7      	bne.n	402afe <hif_handle_isr+0x202>
				gu8HifSizeDone = 0;
  402b4e:	2200      	movs	r2, #0
  402b50:	4b19      	ldr	r3, [pc, #100]	; (402bb8 <hif_handle_isr+0x2bc>)
  402b52:	701a      	strb	r2, [r3, #0]
				size = (uint16)((reg >> 2) & 0xfff);
  402b54:	9d03      	ldr	r5, [sp, #12]
  402b56:	f3c5 058b 	ubfx	r5, r5, #2, #12
				if (size > 0) {
  402b5a:	2d00      	cmp	r5, #0
  402b5c:	d092      	beq.n	402a84 <hif_handle_isr+0x188>
					uint32 address = 0;
  402b5e:	a906      	add	r1, sp, #24
  402b60:	f841 2d04 	str.w	r2, [r1, #-4]!
					ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
  402b64:	f241 0084 	movw	r0, #4228	; 0x1084
  402b68:	4b21      	ldr	r3, [pc, #132]	; (402bf0 <hif_handle_isr+0x2f4>)
  402b6a:	4798      	blx	r3
					if(M2M_SUCCESS != ret)
  402b6c:	4604      	mov	r4, r0
  402b6e:	2800      	cmp	r0, #0
  402b70:	f43f aece 	beq.w	402910 <hif_handle_isr+0x14>
						M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
  402b74:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
  402b78:	4641      	mov	r1, r8
  402b7a:	4630      	mov	r0, r6
  402b7c:	4d07      	ldr	r5, [pc, #28]	; (402b9c <hif_handle_isr+0x2a0>)
  402b7e:	47a8      	blx	r5
  402b80:	481d      	ldr	r0, [pc, #116]	; (402bf8 <hif_handle_isr+0x2fc>)
  402b82:	47a8      	blx	r5
  402b84:	4807      	ldr	r0, [pc, #28]	; (402ba4 <hif_handle_isr+0x2a8>)
  402b86:	47a8      	blx	r5
						nm_bsp_interrupt_ctrl(1);
  402b88:	2001      	movs	r0, #1
  402b8a:	4b08      	ldr	r3, [pc, #32]	; (402bac <hif_handle_isr+0x2b0>)
  402b8c:	4798      	blx	r3
  402b8e:	e794      	b.n	402aba <hif_handle_isr+0x1be>
  402b90:	00402635 	.word	0x00402635
  402b94:	0040c9dc 	.word	0x0040c9dc
  402b98:	004038f9 	.word	0x004038f9
  402b9c:	00406515 	.word	0x00406515
  402ba0:	0040cacc 	.word	0x0040cacc
  402ba4:	0040ca08 	.word	0x0040ca08
  402ba8:	0040ca74 	.word	0x0040ca74
  402bac:	0040234d 	.word	0x0040234d
  402bb0:	0040ca8c 	.word	0x0040ca8c
  402bb4:	2040c350 	.word	0x2040c350
  402bb8:	2040c33a 	.word	0x2040c33a
  402bbc:	0040cae4 	.word	0x0040cae4
  402bc0:	004025f5 	.word	0x004025f5
  402bc4:	2040c344 	.word	0x2040c344
  402bc8:	2040c348 	.word	0x2040c348
  402bcc:	2040c33c 	.word	0x2040c33c
  402bd0:	2040c34c 	.word	0x2040c34c
  402bd4:	0040cb08 	.word	0x0040cb08
  402bd8:	0040cb1c 	.word	0x0040cb1c
  402bdc:	00402691 	.word	0x00402691
  402be0:	0040cb38 	.word	0x0040cb38
  402be4:	0040cb5c 	.word	0x0040cb5c
  402be8:	0040ca20 	.word	0x0040ca20
  402bec:	0040cb7c 	.word	0x0040cb7c
  402bf0:	004038e1 	.word	0x004038e1
  402bf4:	004038ed 	.word	0x004038ed
  402bf8:	0040ca4c 	.word	0x0040ca4c
  402bfc:	2040c33b 	.word	0x2040c33b
  402c00:	0040ca18 	.word	0x0040ca18
			}
		}
	}

	return ret;
}
  402c04:	2000      	movs	r0, #0
  402c06:	b007      	add	sp, #28
  402c08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00402c0c <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
  402c0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  402c10:	b083      	sub	sp, #12
  402c12:	461c      	mov	r4, r3
	uint32 address, reg;
	uint16 size;
	sint8 ret = M2M_SUCCESS;

	if(u32Addr == 0 ||pu8Buf == NULL || u16Sz == 0)
  402c14:	2a00      	cmp	r2, #0
  402c16:	bf18      	it	ne
  402c18:	2900      	cmpne	r1, #0
  402c1a:	d003      	beq.n	402c24 <hif_receive+0x18>
  402c1c:	4605      	mov	r5, r0
  402c1e:	460f      	mov	r7, r1
  402c20:	4616      	mov	r6, r2
  402c22:	b9b8      	cbnz	r0, 402c54 <hif_receive+0x48>
	{
		if(isDone)
  402c24:	b14c      	cbz	r4, 402c3a <hif_receive+0x2e>
		{
			gu8HifSizeDone = 1;
  402c26:	2201      	movs	r2, #1
  402c28:	4b32      	ldr	r3, [pc, #200]	; (402cf4 <hif_receive+0xe8>)
  402c2a:	701a      	strb	r2, [r3, #0]
			
			/* set RX done */
			ret = hif_set_rx_done();
  402c2c:	4b32      	ldr	r3, [pc, #200]	; (402cf8 <hif_receive+0xec>)
  402c2e:	4798      	blx	r3
  402c30:	4603      	mov	r3, r0



ERR1:
	return ret;
}
  402c32:	4618      	mov	r0, r3
  402c34:	b003      	add	sp, #12
  402c36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			M2M_ERR(" hif_receive: Invalid argument\n");
  402c3a:	f240 2269 	movw	r2, #617	; 0x269
  402c3e:	492f      	ldr	r1, [pc, #188]	; (402cfc <hif_receive+0xf0>)
  402c40:	482f      	ldr	r0, [pc, #188]	; (402d00 <hif_receive+0xf4>)
  402c42:	4c30      	ldr	r4, [pc, #192]	; (402d04 <hif_receive+0xf8>)
  402c44:	47a0      	blx	r4
  402c46:	4830      	ldr	r0, [pc, #192]	; (402d08 <hif_receive+0xfc>)
  402c48:	47a0      	blx	r4
  402c4a:	4830      	ldr	r0, [pc, #192]	; (402d0c <hif_receive+0x100>)
  402c4c:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  402c4e:	f06f 030b 	mvn.w	r3, #11
  402c52:	e7ee      	b.n	402c32 <hif_receive+0x26>
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
  402c54:	4669      	mov	r1, sp
  402c56:	f241 0070 	movw	r0, #4208	; 0x1070
  402c5a:	4b2d      	ldr	r3, [pc, #180]	; (402d10 <hif_receive+0x104>)
  402c5c:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
  402c5e:	4603      	mov	r3, r0
  402c60:	2800      	cmp	r0, #0
  402c62:	d1e6      	bne.n	402c32 <hif_receive+0x26>
	size = (uint16)((reg >> 2) & 0xfff);
  402c64:	f8dd 8000 	ldr.w	r8, [sp]
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1,&address);
  402c68:	a901      	add	r1, sp, #4
  402c6a:	f241 0084 	movw	r0, #4228	; 0x1084
  402c6e:	4b28      	ldr	r3, [pc, #160]	; (402d10 <hif_receive+0x104>)
  402c70:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
  402c72:	4603      	mov	r3, r0
  402c74:	2800      	cmp	r0, #0
  402c76:	d1dc      	bne.n	402c32 <hif_receive+0x26>
	size = (uint16)((reg >> 2) & 0xfff);
  402c78:	f3c8 088b 	ubfx	r8, r8, #2, #12
	if(u16Sz > size)
  402c7c:	4546      	cmp	r6, r8
  402c7e:	d81c      	bhi.n	402cba <hif_receive+0xae>
	if((u32Addr < address)||((u32Addr + u16Sz)>(address+size)))
  402c80:	9b01      	ldr	r3, [sp, #4]
  402c82:	429d      	cmp	r5, r3
  402c84:	d328      	bcc.n	402cd8 <hif_receive+0xcc>
  402c86:	eb05 0906 	add.w	r9, r5, r6
  402c8a:	4443      	add	r3, r8
  402c8c:	4599      	cmp	r9, r3
  402c8e:	d823      	bhi.n	402cd8 <hif_receive+0xcc>
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
  402c90:	4632      	mov	r2, r6
  402c92:	4639      	mov	r1, r7
  402c94:	4628      	mov	r0, r5
  402c96:	4b1f      	ldr	r3, [pc, #124]	; (402d14 <hif_receive+0x108>)
  402c98:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
  402c9a:	4603      	mov	r3, r0
  402c9c:	2800      	cmp	r0, #0
  402c9e:	d1c8      	bne.n	402c32 <hif_receive+0x26>
	if((((address + size) - (u32Addr + u16Sz)) <= 0) || isDone)
  402ca0:	9a01      	ldr	r2, [sp, #4]
  402ca2:	4490      	add	r8, r2
  402ca4:	45c8      	cmp	r8, r9
  402ca6:	d001      	beq.n	402cac <hif_receive+0xa0>
  402ca8:	2c00      	cmp	r4, #0
  402caa:	d0c2      	beq.n	402c32 <hif_receive+0x26>
		gu8HifSizeDone = 1;
  402cac:	2201      	movs	r2, #1
  402cae:	4b11      	ldr	r3, [pc, #68]	; (402cf4 <hif_receive+0xe8>)
  402cb0:	701a      	strb	r2, [r3, #0]
		ret = hif_set_rx_done();
  402cb2:	4b11      	ldr	r3, [pc, #68]	; (402cf8 <hif_receive+0xec>)
  402cb4:	4798      	blx	r3
  402cb6:	4603      	mov	r3, r0
  402cb8:	e7bb      	b.n	402c32 <hif_receive+0x26>
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%d><%d>\n",u16Sz, size);
  402cba:	f240 227a 	movw	r2, #634	; 0x27a
  402cbe:	490f      	ldr	r1, [pc, #60]	; (402cfc <hif_receive+0xf0>)
  402cc0:	480f      	ldr	r0, [pc, #60]	; (402d00 <hif_receive+0xf4>)
  402cc2:	4c10      	ldr	r4, [pc, #64]	; (402d04 <hif_receive+0xf8>)
  402cc4:	47a0      	blx	r4
  402cc6:	4642      	mov	r2, r8
  402cc8:	4631      	mov	r1, r6
  402cca:	4813      	ldr	r0, [pc, #76]	; (402d18 <hif_receive+0x10c>)
  402ccc:	47a0      	blx	r4
  402cce:	480f      	ldr	r0, [pc, #60]	; (402d0c <hif_receive+0x100>)
  402cd0:	47a0      	blx	r4
		ret = M2M_ERR_FAIL;
  402cd2:	f06f 030b 	mvn.w	r3, #11
		goto ERR1;
  402cd6:	e7ac      	b.n	402c32 <hif_receive+0x26>
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
  402cd8:	f44f 7220 	mov.w	r2, #640	; 0x280
  402cdc:	4907      	ldr	r1, [pc, #28]	; (402cfc <hif_receive+0xf0>)
  402cde:	4808      	ldr	r0, [pc, #32]	; (402d00 <hif_receive+0xf4>)
  402ce0:	4c08      	ldr	r4, [pc, #32]	; (402d04 <hif_receive+0xf8>)
  402ce2:	47a0      	blx	r4
  402ce4:	480d      	ldr	r0, [pc, #52]	; (402d1c <hif_receive+0x110>)
  402ce6:	47a0      	blx	r4
  402ce8:	4808      	ldr	r0, [pc, #32]	; (402d0c <hif_receive+0x100>)
  402cea:	47a0      	blx	r4
		ret = M2M_ERR_FAIL;
  402cec:	f06f 030b 	mvn.w	r3, #11
		goto ERR1;
  402cf0:	e79f      	b.n	402c32 <hif_receive+0x26>
  402cf2:	bf00      	nop
  402cf4:	2040c33a 	.word	0x2040c33a
  402cf8:	004025f5 	.word	0x004025f5
  402cfc:	0040ca30 	.word	0x0040ca30
  402d00:	0040c9dc 	.word	0x0040c9dc
  402d04:	00406515 	.word	0x00406515
  402d08:	0040cbac 	.word	0x0040cbac
  402d0c:	0040ca08 	.word	0x0040ca08
  402d10:	004038e1 	.word	0x004038e1
  402d14:	004038f9 	.word	0x004038f9
  402d18:	0040cbcc 	.word	0x0040cbcc
  402d1c:	0040cc10 	.word	0x0040cc10

00402d20 <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
  402d20:	b538      	push	{r3, r4, r5, lr}
	sint8 ret = M2M_SUCCESS;
	switch(u8Grp)
  402d22:	1e43      	subs	r3, r0, #1
  402d24:	2b06      	cmp	r3, #6
  402d26:	d81d      	bhi.n	402d64 <hif_register_cb+0x44>
  402d28:	e8df f003 	tbb	[pc, r3]
  402d2c:	0c100408 	.word	0x0c100408
  402d30:	141c      	.short	0x141c
  402d32:	18          	.byte	0x18
  402d33:	00          	.byte	0x00
	{
		case M2M_REQ_GROUP_IP:
			pfIpCb = fn;
  402d34:	4b13      	ldr	r3, [pc, #76]	; (402d84 <hif_register_cb+0x64>)
  402d36:	6019      	str	r1, [r3, #0]
	sint8 ret = M2M_SUCCESS;
  402d38:	2000      	movs	r0, #0
			break;
  402d3a:	bd38      	pop	{r3, r4, r5, pc}
		case M2M_REQ_GROUP_WIFI:
			pfWifiCb = fn;
  402d3c:	4b12      	ldr	r3, [pc, #72]	; (402d88 <hif_register_cb+0x68>)
  402d3e:	6019      	str	r1, [r3, #0]
	sint8 ret = M2M_SUCCESS;
  402d40:	2000      	movs	r0, #0
			break;
  402d42:	bd38      	pop	{r3, r4, r5, pc}
		case M2M_REQ_GROUP_OTA:
			pfOtaCb = fn;
  402d44:	4b11      	ldr	r3, [pc, #68]	; (402d8c <hif_register_cb+0x6c>)
  402d46:	6019      	str	r1, [r3, #0]
	sint8 ret = M2M_SUCCESS;
  402d48:	2000      	movs	r0, #0
			break;
  402d4a:	bd38      	pop	{r3, r4, r5, pc}
		case M2M_REQ_GROUP_HIF:
			pfHifCb = fn;
  402d4c:	4b10      	ldr	r3, [pc, #64]	; (402d90 <hif_register_cb+0x70>)
  402d4e:	6019      	str	r1, [r3, #0]
	sint8 ret = M2M_SUCCESS;
  402d50:	2000      	movs	r0, #0
			break;
  402d52:	bd38      	pop	{r3, r4, r5, pc}
		case M2M_REQ_GROUP_CRYPTO:
			pfCryptoCb = fn;
  402d54:	4b0f      	ldr	r3, [pc, #60]	; (402d94 <hif_register_cb+0x74>)
  402d56:	6019      	str	r1, [r3, #0]
	sint8 ret = M2M_SUCCESS;
  402d58:	2000      	movs	r0, #0
			break;
  402d5a:	bd38      	pop	{r3, r4, r5, pc}
		case M2M_REQ_GROUP_SIGMA:
			pfSigmaCb = fn;
  402d5c:	4b0e      	ldr	r3, [pc, #56]	; (402d98 <hif_register_cb+0x78>)
  402d5e:	6019      	str	r1, [r3, #0]
	sint8 ret = M2M_SUCCESS;
  402d60:	2000      	movs	r0, #0
			break;
  402d62:	bd38      	pop	{r3, r4, r5, pc}
  402d64:	4604      	mov	r4, r0
		default:
			M2M_ERR("GRp ? %d\n",u8Grp);
  402d66:	f240 22b9 	movw	r2, #697	; 0x2b9
  402d6a:	490c      	ldr	r1, [pc, #48]	; (402d9c <hif_register_cb+0x7c>)
  402d6c:	480c      	ldr	r0, [pc, #48]	; (402da0 <hif_register_cb+0x80>)
  402d6e:	4d0d      	ldr	r5, [pc, #52]	; (402da4 <hif_register_cb+0x84>)
  402d70:	47a8      	blx	r5
  402d72:	4621      	mov	r1, r4
  402d74:	480c      	ldr	r0, [pc, #48]	; (402da8 <hif_register_cb+0x88>)
  402d76:	47a8      	blx	r5
  402d78:	480c      	ldr	r0, [pc, #48]	; (402dac <hif_register_cb+0x8c>)
  402d7a:	47a8      	blx	r5
			ret = M2M_ERR_FAIL;
  402d7c:	f06f 000b 	mvn.w	r0, #11
			break;
	}
	return ret;
}
  402d80:	bd38      	pop	{r3, r4, r5, pc}
  402d82:	bf00      	nop
  402d84:	2040c344 	.word	0x2040c344
  402d88:	2040c350 	.word	0x2040c350
  402d8c:	2040c348 	.word	0x2040c348
  402d90:	2040c340 	.word	0x2040c340
  402d94:	2040c33c 	.word	0x2040c33c
  402d98:	2040c34c 	.word	0x2040c34c
  402d9c:	0040ca3c 	.word	0x0040ca3c
  402da0:	0040c9dc 	.word	0x0040c9dc
  402da4:	00406515 	.word	0x00406515
  402da8:	0040cc54 	.word	0x0040cc54
  402dac:	0040ca08 	.word	0x0040ca08

00402db0 <hif_init>:
{
  402db0:	b510      	push	{r4, lr}
	pfWifiCb = NULL;
  402db2:	2400      	movs	r4, #0
  402db4:	4b09      	ldr	r3, [pc, #36]	; (402ddc <hif_init+0x2c>)
  402db6:	601c      	str	r4, [r3, #0]
	pfIpCb = NULL;
  402db8:	4b09      	ldr	r3, [pc, #36]	; (402de0 <hif_init+0x30>)
  402dba:	601c      	str	r4, [r3, #0]
	gu8ChipSleep = 0;
  402dbc:	4b09      	ldr	r3, [pc, #36]	; (402de4 <hif_init+0x34>)
  402dbe:	701c      	strb	r4, [r3, #0]
	gu8ChipMode = M2M_NO_PS;
  402dc0:	4b09      	ldr	r3, [pc, #36]	; (402de8 <hif_init+0x38>)
  402dc2:	701c      	strb	r4, [r3, #0]
	gu8Interrupt = 0;
  402dc4:	4b09      	ldr	r3, [pc, #36]	; (402dec <hif_init+0x3c>)
  402dc6:	701c      	strb	r4, [r3, #0]
	nm_bsp_register_isr(isr);
  402dc8:	4809      	ldr	r0, [pc, #36]	; (402df0 <hif_init+0x40>)
  402dca:	4b0a      	ldr	r3, [pc, #40]	; (402df4 <hif_init+0x44>)
  402dcc:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
  402dce:	490a      	ldr	r1, [pc, #40]	; (402df8 <hif_init+0x48>)
  402dd0:	2003      	movs	r0, #3
  402dd2:	4b0a      	ldr	r3, [pc, #40]	; (402dfc <hif_init+0x4c>)
  402dd4:	4798      	blx	r3
}
  402dd6:	4620      	mov	r0, r4
  402dd8:	bd10      	pop	{r4, pc}
  402dda:	bf00      	nop
  402ddc:	2040c350 	.word	0x2040c350
  402de0:	2040c344 	.word	0x2040c344
  402de4:	2040c339 	.word	0x2040c339
  402de8:	2040c338 	.word	0x2040c338
  402dec:	2040c33b 	.word	0x2040c33b
  402df0:	004025e1 	.word	0x004025e1
  402df4:	004022cd 	.word	0x004022cd
  402df8:	004025f1 	.word	0x004025f1
  402dfc:	00402d21 	.word	0x00402d21

00402e00 <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
  402e00:	b530      	push	{r4, r5, lr}
  402e02:	b09f      	sub	sp, #124	; 0x7c
  402e04:	4615      	mov	r5, r2
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
  402e06:	282c      	cmp	r0, #44	; 0x2c
  402e08:	d02e      	beq.n	402e68 <m2m_wifi_cb+0x68>
  402e0a:	4604      	mov	r4, r0
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
  402e0c:	281b      	cmp	r0, #27
  402e0e:	d03b      	beq.n	402e88 <m2m_wifi_cb+0x88>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
  402e10:	2806      	cmp	r0, #6
  402e12:	d049      	beq.n	402ea8 <m2m_wifi_cb+0xa8>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
  402e14:	280e      	cmp	r0, #14
  402e16:	d025      	beq.n	402e64 <m2m_wifi_cb+0x64>
			if (app_wifi_recover_cb)
				app_wifi_recover_cb(strState.u8CurrState);
		}
#endif
	}
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
  402e18:	2832      	cmp	r0, #50	; 0x32
  402e1a:	d055      	beq.n	402ec8 <m2m_wifi_cb+0xc8>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
		}
	}
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
  402e1c:	282f      	cmp	r0, #47	; 0x2f
  402e1e:	d063      	beq.n	402ee8 <m2m_wifi_cb+0xe8>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
  402e20:	2834      	cmp	r0, #52	; 0x34
  402e22:	d076      	beq.n	402f12 <m2m_wifi_cb+0x112>
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);

		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
  402e24:	2811      	cmp	r0, #17
  402e26:	f000 8093 	beq.w	402f50 <m2m_wifi_cb+0x150>
			gu8ChNum = strState.u8NumofCh;
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
  402e2a:	2813      	cmp	r0, #19
  402e2c:	f000 80a8 	beq.w	402f80 <m2m_wifi_cb+0x180>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
  402e30:	2804      	cmp	r0, #4
  402e32:	f000 80b7 	beq.w	402fa4 <m2m_wifi_cb+0x1a4>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
  402e36:	2865      	cmp	r0, #101	; 0x65
  402e38:	f000 80c6 	beq.w	402fc8 <m2m_wifi_cb+0x1c8>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
  402e3c:	2809      	cmp	r0, #9
  402e3e:	f000 80d5 	beq.w	402fec <m2m_wifi_cb+0x1ec>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
  402e42:	282a      	cmp	r0, #42	; 0x2a
  402e44:	f000 80e4 	beq.w	403010 <m2m_wifi_cb+0x210>
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
		}
	}
	
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
  402e48:	2820      	cmp	r0, #32
  402e4a:	f000 80f3 	beq.w	403034 <m2m_wifi_cb+0x234>
		}
	}
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
  402e4e:	f44f 7295 	mov.w	r2, #298	; 0x12a
  402e52:	4986      	ldr	r1, [pc, #536]	; (40306c <m2m_wifi_cb+0x26c>)
  402e54:	4886      	ldr	r0, [pc, #536]	; (403070 <m2m_wifi_cb+0x270>)
  402e56:	4d87      	ldr	r5, [pc, #540]	; (403074 <m2m_wifi_cb+0x274>)
  402e58:	47a8      	blx	r5
  402e5a:	4621      	mov	r1, r4
  402e5c:	4886      	ldr	r0, [pc, #536]	; (403078 <m2m_wifi_cb+0x278>)
  402e5e:	47a8      	blx	r5
  402e60:	4886      	ldr	r0, [pc, #536]	; (40307c <m2m_wifi_cb+0x27c>)
  402e62:	47a8      	blx	r5
	}
}
  402e64:	b01f      	add	sp, #124	; 0x7c
  402e66:	bd30      	pop	{r4, r5, pc}
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
  402e68:	2300      	movs	r3, #0
  402e6a:	2204      	movs	r2, #4
  402e6c:	a903      	add	r1, sp, #12
  402e6e:	4628      	mov	r0, r5
  402e70:	4c83      	ldr	r4, [pc, #524]	; (403080 <m2m_wifi_cb+0x280>)
  402e72:	47a0      	blx	r4
  402e74:	2800      	cmp	r0, #0
  402e76:	d1f5      	bne.n	402e64 <m2m_wifi_cb+0x64>
			if (gpfAppWifiCb)
  402e78:	4b82      	ldr	r3, [pc, #520]	; (403084 <m2m_wifi_cb+0x284>)
  402e7a:	681b      	ldr	r3, [r3, #0]
  402e7c:	2b00      	cmp	r3, #0
  402e7e:	d0f1      	beq.n	402e64 <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
  402e80:	a903      	add	r1, sp, #12
  402e82:	202c      	movs	r0, #44	; 0x2c
  402e84:	4798      	blx	r3
  402e86:	e7ed      	b.n	402e64 <m2m_wifi_cb+0x64>
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
  402e88:	2300      	movs	r3, #0
  402e8a:	2208      	movs	r2, #8
  402e8c:	a903      	add	r1, sp, #12
  402e8e:	4628      	mov	r0, r5
  402e90:	4c7b      	ldr	r4, [pc, #492]	; (403080 <m2m_wifi_cb+0x280>)
  402e92:	47a0      	blx	r4
  402e94:	2800      	cmp	r0, #0
  402e96:	d1e5      	bne.n	402e64 <m2m_wifi_cb+0x64>
			if (gpfAppWifiCb)
  402e98:	4b7a      	ldr	r3, [pc, #488]	; (403084 <m2m_wifi_cb+0x284>)
  402e9a:	681b      	ldr	r3, [r3, #0]
  402e9c:	2b00      	cmp	r3, #0
  402e9e:	d0e1      	beq.n	402e64 <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
  402ea0:	a903      	add	r1, sp, #12
  402ea2:	201b      	movs	r0, #27
  402ea4:	4798      	blx	r3
  402ea6:	e7dd      	b.n	402e64 <m2m_wifi_cb+0x64>
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
  402ea8:	2301      	movs	r3, #1
  402eaa:	2230      	movs	r2, #48	; 0x30
  402eac:	a903      	add	r1, sp, #12
  402eae:	4628      	mov	r0, r5
  402eb0:	4c73      	ldr	r4, [pc, #460]	; (403080 <m2m_wifi_cb+0x280>)
  402eb2:	47a0      	blx	r4
  402eb4:	2800      	cmp	r0, #0
  402eb6:	d1d5      	bne.n	402e64 <m2m_wifi_cb+0x64>
			if(gpfAppWifiCb)
  402eb8:	4b72      	ldr	r3, [pc, #456]	; (403084 <m2m_wifi_cb+0x284>)
  402eba:	681b      	ldr	r3, [r3, #0]
  402ebc:	2b00      	cmp	r3, #0
  402ebe:	d0d1      	beq.n	402e64 <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
  402ec0:	a903      	add	r1, sp, #12
  402ec2:	2006      	movs	r0, #6
  402ec4:	4798      	blx	r3
  402ec6:	e7cd      	b.n	402e64 <m2m_wifi_cb+0x64>
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
  402ec8:	2300      	movs	r3, #0
  402eca:	2210      	movs	r2, #16
  402ecc:	a903      	add	r1, sp, #12
  402ece:	4628      	mov	r0, r5
  402ed0:	4c6b      	ldr	r4, [pc, #428]	; (403080 <m2m_wifi_cb+0x280>)
  402ed2:	47a0      	blx	r4
  402ed4:	2800      	cmp	r0, #0
  402ed6:	d1c5      	bne.n	402e64 <m2m_wifi_cb+0x64>
			if (gpfAppWifiCb)
  402ed8:	4b6a      	ldr	r3, [pc, #424]	; (403084 <m2m_wifi_cb+0x284>)
  402eda:	681b      	ldr	r3, [r3, #0]
  402edc:	2b00      	cmp	r3, #0
  402ede:	d0c1      	beq.n	402e64 <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
  402ee0:	a903      	add	r1, sp, #12
  402ee2:	2032      	movs	r0, #50	; 0x32
  402ee4:	4798      	blx	r3
  402ee6:	e7bd      	b.n	402e64 <m2m_wifi_cb+0x64>
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
  402ee8:	2264      	movs	r2, #100	; 0x64
  402eea:	2100      	movs	r1, #0
  402eec:	a803      	add	r0, sp, #12
  402eee:	4b66      	ldr	r3, [pc, #408]	; (403088 <m2m_wifi_cb+0x288>)
  402ef0:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
  402ef2:	2300      	movs	r3, #0
  402ef4:	2264      	movs	r2, #100	; 0x64
  402ef6:	a903      	add	r1, sp, #12
  402ef8:	4628      	mov	r0, r5
  402efa:	4c61      	ldr	r4, [pc, #388]	; (403080 <m2m_wifi_cb+0x280>)
  402efc:	47a0      	blx	r4
  402efe:	2800      	cmp	r0, #0
  402f00:	d1b0      	bne.n	402e64 <m2m_wifi_cb+0x64>
			if (gpfAppWifiCb)
  402f02:	4b60      	ldr	r3, [pc, #384]	; (403084 <m2m_wifi_cb+0x284>)
  402f04:	681b      	ldr	r3, [r3, #0]
  402f06:	2b00      	cmp	r3, #0
  402f08:	d0ac      	beq.n	402e64 <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
  402f0a:	a903      	add	r1, sp, #12
  402f0c:	202f      	movs	r0, #47	; 0x2f
  402f0e:	4798      	blx	r3
  402f10:	e7a8      	b.n	402e64 <m2m_wifi_cb+0x64>
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
  402f12:	2300      	movs	r3, #0
  402f14:	2204      	movs	r2, #4
  402f16:	a903      	add	r1, sp, #12
  402f18:	4628      	mov	r0, r5
  402f1a:	4c59      	ldr	r4, [pc, #356]	; (403080 <m2m_wifi_cb+0x280>)
  402f1c:	47a0      	blx	r4
  402f1e:	2800      	cmp	r0, #0
  402f20:	d1a0      	bne.n	402e64 <m2m_wifi_cb+0x64>
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
  402f22:	485a      	ldr	r0, [pc, #360]	; (40308c <m2m_wifi_cb+0x28c>)
  402f24:	4c53      	ldr	r4, [pc, #332]	; (403074 <m2m_wifi_cb+0x274>)
  402f26:	47a0      	blx	r4
  402f28:	9903      	ldr	r1, [sp, #12]
  402f2a:	b2cb      	uxtb	r3, r1
  402f2c:	9300      	str	r3, [sp, #0]
  402f2e:	f3c1 2307 	ubfx	r3, r1, #8, #8
  402f32:	f3c1 4207 	ubfx	r2, r1, #16, #8
  402f36:	0e09      	lsrs	r1, r1, #24
  402f38:	4855      	ldr	r0, [pc, #340]	; (403090 <m2m_wifi_cb+0x290>)
  402f3a:	47a0      	blx	r4
  402f3c:	484f      	ldr	r0, [pc, #316]	; (40307c <m2m_wifi_cb+0x27c>)
  402f3e:	47a0      	blx	r4
			if (gpfAppWifiCb)
  402f40:	4b50      	ldr	r3, [pc, #320]	; (403084 <m2m_wifi_cb+0x284>)
  402f42:	681b      	ldr	r3, [r3, #0]
  402f44:	2b00      	cmp	r3, #0
  402f46:	d08d      	beq.n	402e64 <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
  402f48:	2100      	movs	r1, #0
  402f4a:	2034      	movs	r0, #52	; 0x34
  402f4c:	4798      	blx	r3
  402f4e:	e789      	b.n	402e64 <m2m_wifi_cb+0x64>
		gu8scanInProgress = 0;
  402f50:	2300      	movs	r3, #0
  402f52:	4a50      	ldr	r2, [pc, #320]	; (403094 <m2m_wifi_cb+0x294>)
  402f54:	7013      	strb	r3, [r2, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
  402f56:	2204      	movs	r2, #4
  402f58:	a903      	add	r1, sp, #12
  402f5a:	4628      	mov	r0, r5
  402f5c:	4c48      	ldr	r4, [pc, #288]	; (403080 <m2m_wifi_cb+0x280>)
  402f5e:	47a0      	blx	r4
  402f60:	2800      	cmp	r0, #0
  402f62:	f47f af7f 	bne.w	402e64 <m2m_wifi_cb+0x64>
			gu8ChNum = strState.u8NumofCh;
  402f66:	f89d 200c 	ldrb.w	r2, [sp, #12]
  402f6a:	4b4b      	ldr	r3, [pc, #300]	; (403098 <m2m_wifi_cb+0x298>)
  402f6c:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
  402f6e:	4b45      	ldr	r3, [pc, #276]	; (403084 <m2m_wifi_cb+0x284>)
  402f70:	681b      	ldr	r3, [r3, #0]
  402f72:	2b00      	cmp	r3, #0
  402f74:	f43f af76 	beq.w	402e64 <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
  402f78:	a903      	add	r1, sp, #12
  402f7a:	2011      	movs	r0, #17
  402f7c:	4798      	blx	r3
  402f7e:	e771      	b.n	402e64 <m2m_wifi_cb+0x64>
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
  402f80:	2300      	movs	r3, #0
  402f82:	222c      	movs	r2, #44	; 0x2c
  402f84:	a903      	add	r1, sp, #12
  402f86:	4628      	mov	r0, r5
  402f88:	4c3d      	ldr	r4, [pc, #244]	; (403080 <m2m_wifi_cb+0x280>)
  402f8a:	47a0      	blx	r4
  402f8c:	2800      	cmp	r0, #0
  402f8e:	f47f af69 	bne.w	402e64 <m2m_wifi_cb+0x64>
			if (gpfAppWifiCb)
  402f92:	4b3c      	ldr	r3, [pc, #240]	; (403084 <m2m_wifi_cb+0x284>)
  402f94:	681b      	ldr	r3, [r3, #0]
  402f96:	2b00      	cmp	r3, #0
  402f98:	f43f af64 	beq.w	402e64 <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
  402f9c:	a903      	add	r1, sp, #12
  402f9e:	2013      	movs	r0, #19
  402fa0:	4798      	blx	r3
  402fa2:	e75f      	b.n	402e64 <m2m_wifi_cb+0x64>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
  402fa4:	2300      	movs	r3, #0
  402fa6:	2204      	movs	r2, #4
  402fa8:	a91c      	add	r1, sp, #112	; 0x70
  402faa:	4628      	mov	r0, r5
  402fac:	4c34      	ldr	r4, [pc, #208]	; (403080 <m2m_wifi_cb+0x280>)
  402fae:	47a0      	blx	r4
  402fb0:	2800      	cmp	r0, #0
  402fb2:	f47f af57 	bne.w	402e64 <m2m_wifi_cb+0x64>
			if (gpfAppWifiCb)
  402fb6:	4b33      	ldr	r3, [pc, #204]	; (403084 <m2m_wifi_cb+0x284>)
  402fb8:	681b      	ldr	r3, [r3, #0]
  402fba:	2b00      	cmp	r3, #0
  402fbc:	f43f af52 	beq.w	402e64 <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
  402fc0:	a91c      	add	r1, sp, #112	; 0x70
  402fc2:	2004      	movs	r0, #4
  402fc4:	4798      	blx	r3
  402fc6:	e74d      	b.n	402e64 <m2m_wifi_cb+0x64>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
  402fc8:	2300      	movs	r3, #0
  402fca:	2204      	movs	r2, #4
  402fcc:	a91c      	add	r1, sp, #112	; 0x70
  402fce:	4628      	mov	r0, r5
  402fd0:	4c2b      	ldr	r4, [pc, #172]	; (403080 <m2m_wifi_cb+0x280>)
  402fd2:	47a0      	blx	r4
  402fd4:	2800      	cmp	r0, #0
  402fd6:	f47f af45 	bne.w	402e64 <m2m_wifi_cb+0x64>
			if (gpfAppWifiCb)
  402fda:	4b2a      	ldr	r3, [pc, #168]	; (403084 <m2m_wifi_cb+0x284>)
  402fdc:	681b      	ldr	r3, [r3, #0]
  402fde:	2b00      	cmp	r3, #0
  402fe0:	f43f af40 	beq.w	402e64 <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
  402fe4:	a91c      	add	r1, sp, #112	; 0x70
  402fe6:	2065      	movs	r0, #101	; 0x65
  402fe8:	4798      	blx	r3
  402fea:	e73b      	b.n	402e64 <m2m_wifi_cb+0x64>
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
  402fec:	2301      	movs	r3, #1
  402fee:	2264      	movs	r2, #100	; 0x64
  402ff0:	a903      	add	r1, sp, #12
  402ff2:	4628      	mov	r0, r5
  402ff4:	4c22      	ldr	r4, [pc, #136]	; (403080 <m2m_wifi_cb+0x280>)
  402ff6:	47a0      	blx	r4
  402ff8:	2800      	cmp	r0, #0
  402ffa:	f47f af33 	bne.w	402e64 <m2m_wifi_cb+0x64>
			if(gpfAppWifiCb)
  402ffe:	4b21      	ldr	r3, [pc, #132]	; (403084 <m2m_wifi_cb+0x284>)
  403000:	681b      	ldr	r3, [r3, #0]
  403002:	2b00      	cmp	r3, #0
  403004:	f43f af2e 	beq.w	402e64 <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
  403008:	a903      	add	r1, sp, #12
  40300a:	2009      	movs	r0, #9
  40300c:	4798      	blx	r3
  40300e:	e729      	b.n	402e64 <m2m_wifi_cb+0x64>
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
  403010:	2301      	movs	r3, #1
  403012:	2204      	movs	r2, #4
  403014:	a903      	add	r1, sp, #12
  403016:	4628      	mov	r0, r5
  403018:	4c19      	ldr	r4, [pc, #100]	; (403080 <m2m_wifi_cb+0x280>)
  40301a:	47a0      	blx	r4
  40301c:	2800      	cmp	r0, #0
  40301e:	f47f af21 	bne.w	402e64 <m2m_wifi_cb+0x64>
			if(gpfAppWifiCb)
  403022:	4b18      	ldr	r3, [pc, #96]	; (403084 <m2m_wifi_cb+0x284>)
  403024:	681b      	ldr	r3, [r3, #0]
  403026:	2b00      	cmp	r3, #0
  403028:	f43f af1c 	beq.w	402e64 <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
  40302c:	a903      	add	r1, sp, #12
  40302e:	202a      	movs	r0, #42	; 0x2a
  403030:	4798      	blx	r3
  403032:	e717      	b.n	402e64 <m2m_wifi_cb+0x64>
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
  403034:	2300      	movs	r3, #0
  403036:	2208      	movs	r2, #8
  403038:	a903      	add	r1, sp, #12
  40303a:	4628      	mov	r0, r5
  40303c:	4c10      	ldr	r4, [pc, #64]	; (403080 <m2m_wifi_cb+0x280>)
  40303e:	47a0      	blx	r4
  403040:	2800      	cmp	r0, #0
  403042:	f47f af0f 	bne.w	402e64 <m2m_wifi_cb+0x64>
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
  403046:	2301      	movs	r3, #1
  403048:	f8bd 2010 	ldrh.w	r2, [sp, #16]
  40304c:	9903      	ldr	r1, [sp, #12]
  40304e:	f105 0008 	add.w	r0, r5, #8
  403052:	47a0      	blx	r4
  403054:	2800      	cmp	r0, #0
  403056:	f47f af05 	bne.w	402e64 <m2m_wifi_cb+0x64>
				if(gpfAppWifiCb)
  40305a:	4b0a      	ldr	r3, [pc, #40]	; (403084 <m2m_wifi_cb+0x284>)
  40305c:	681b      	ldr	r3, [r3, #0]
  40305e:	2b00      	cmp	r3, #0
  403060:	f43f af00 	beq.w	402e64 <m2m_wifi_cb+0x64>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
  403064:	a903      	add	r1, sp, #12
  403066:	2020      	movs	r0, #32
  403068:	4798      	blx	r3
  40306a:	e6fb      	b.n	402e64 <m2m_wifi_cb+0x64>
  40306c:	0040cc80 	.word	0x0040cc80
  403070:	0040c9dc 	.word	0x0040c9dc
  403074:	00406515 	.word	0x00406515
  403078:	0040ccdc 	.word	0x0040ccdc
  40307c:	0040ca08 	.word	0x0040ca08
  403080:	00402c0d 	.word	0x00402c0d
  403084:	2040c354 	.word	0x2040c354
  403088:	004025b9 	.word	0x004025b9
  40308c:	0040ccb0 	.word	0x0040ccb0
  403090:	0040ccbc 	.word	0x0040ccbc
  403094:	2040c359 	.word	0x2040c359
  403098:	2040c358 	.word	0x2040c358

0040309c <m2m_wifi_init>:
	}	
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
  40309c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40309e:	b08b      	sub	sp, #44	; 0x2c
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
  4030a0:	2301      	movs	r3, #1
  4030a2:	f88d 3007 	strb.w	r3, [sp, #7]
	
	if(param == NULL) {
  4030a6:	2800      	cmp	r0, #0
  4030a8:	d050      	beq.n	40314c <m2m_wifi_init+0xb0>
		ret = M2M_ERR_FAIL;
		goto _EXIT0;
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
  4030aa:	6802      	ldr	r2, [r0, #0]
  4030ac:	4b29      	ldr	r3, [pc, #164]	; (403154 <m2m_wifi_init+0xb8>)
  4030ae:	601a      	str	r2, [r3, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
  4030b0:	2200      	movs	r2, #0
  4030b2:	4b29      	ldr	r3, [pc, #164]	; (403158 <m2m_wifi_init+0xbc>)
  4030b4:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
  4030b6:	f10d 0007 	add.w	r0, sp, #7
  4030ba:	4b28      	ldr	r3, [pc, #160]	; (40315c <m2m_wifi_init+0xc0>)
  4030bc:	4798      	blx	r3
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
  4030be:	4604      	mov	r4, r0
  4030c0:	b110      	cbz	r0, 4030c8 <m2m_wifi_init+0x2c>

_EXIT1:
	nm_drv_deinit(NULL);
_EXIT0:
	return ret;
}
  4030c2:	4620      	mov	r0, r4
  4030c4:	b00b      	add	sp, #44	; 0x2c
  4030c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ret = hif_init(NULL);
  4030c8:	4b25      	ldr	r3, [pc, #148]	; (403160 <m2m_wifi_init+0xc4>)
  4030ca:	4798      	blx	r3
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
  4030cc:	4604      	mov	r4, r0
  4030ce:	2800      	cmp	r0, #0
  4030d0:	d138      	bne.n	403144 <m2m_wifi_init+0xa8>
	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
  4030d2:	4924      	ldr	r1, [pc, #144]	; (403164 <m2m_wifi_init+0xc8>)
  4030d4:	2001      	movs	r0, #1
  4030d6:	4b24      	ldr	r3, [pc, #144]	; (403168 <m2m_wifi_init+0xcc>)
  4030d8:	4798      	blx	r3
	ret = nm_get_firmware_info(&strtmp);
  4030da:	a802      	add	r0, sp, #8
  4030dc:	4b23      	ldr	r3, [pc, #140]	; (40316c <m2m_wifi_init+0xd0>)
  4030de:	4798      	blx	r3
  4030e0:	4604      	mov	r4, r0
	M2M_INFO("Firmware ver   : %u.%u.%u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch);
  4030e2:	4f23      	ldr	r7, [pc, #140]	; (403170 <m2m_wifi_init+0xd4>)
  4030e4:	4638      	mov	r0, r7
  4030e6:	4d23      	ldr	r5, [pc, #140]	; (403174 <m2m_wifi_init+0xd8>)
  4030e8:	47a8      	blx	r5
  4030ea:	f89d 300e 	ldrb.w	r3, [sp, #14]
  4030ee:	f89d 200d 	ldrb.w	r2, [sp, #13]
  4030f2:	f89d 100c 	ldrb.w	r1, [sp, #12]
  4030f6:	4820      	ldr	r0, [pc, #128]	; (403178 <m2m_wifi_init+0xdc>)
  4030f8:	47a8      	blx	r5
  4030fa:	4e20      	ldr	r6, [pc, #128]	; (40317c <m2m_wifi_init+0xe0>)
  4030fc:	4630      	mov	r0, r6
  4030fe:	47a8      	blx	r5
	M2M_INFO("Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
  403100:	4638      	mov	r0, r7
  403102:	47a8      	blx	r5
  403104:	f89d 3011 	ldrb.w	r3, [sp, #17]
  403108:	f89d 2010 	ldrb.w	r2, [sp, #16]
  40310c:	f89d 100f 	ldrb.w	r1, [sp, #15]
  403110:	481b      	ldr	r0, [pc, #108]	; (403180 <m2m_wifi_init+0xe4>)
  403112:	47a8      	blx	r5
  403114:	4630      	mov	r0, r6
  403116:	47a8      	blx	r5
	M2M_INFO("Curr driver ver: %u.%u.%u\n", M2M_DRIVER_VERSION_MAJOR_NO, M2M_DRIVER_VERSION_MINOR_NO, M2M_DRIVER_VERSION_PATCH_NO);
  403118:	4638      	mov	r0, r7
  40311a:	47a8      	blx	r5
  40311c:	2300      	movs	r3, #0
  40311e:	2203      	movs	r2, #3
  403120:	2113      	movs	r1, #19
  403122:	4818      	ldr	r0, [pc, #96]	; (403184 <m2m_wifi_init+0xe8>)
  403124:	47a8      	blx	r5
  403126:	4630      	mov	r0, r6
  403128:	47a8      	blx	r5
	if(M2M_ERR_FW_VER_MISMATCH == ret)
  40312a:	f114 0f0d 	cmn.w	r4, #13
  40312e:	d1c8      	bne.n	4030c2 <m2m_wifi_init+0x26>
		M2M_ERR("Mismatch Firmawre Version\n");
  403130:	f240 12d5 	movw	r2, #469	; 0x1d5
  403134:	4914      	ldr	r1, [pc, #80]	; (403188 <m2m_wifi_init+0xec>)
  403136:	4815      	ldr	r0, [pc, #84]	; (40318c <m2m_wifi_init+0xf0>)
  403138:	47a8      	blx	r5
  40313a:	4815      	ldr	r0, [pc, #84]	; (403190 <m2m_wifi_init+0xf4>)
  40313c:	47a8      	blx	r5
  40313e:	4630      	mov	r0, r6
  403140:	47a8      	blx	r5
  403142:	e7be      	b.n	4030c2 <m2m_wifi_init+0x26>
	nm_drv_deinit(NULL);
  403144:	2000      	movs	r0, #0
  403146:	4b13      	ldr	r3, [pc, #76]	; (403194 <m2m_wifi_init+0xf8>)
  403148:	4798      	blx	r3
  40314a:	e7ba      	b.n	4030c2 <m2m_wifi_init+0x26>
		ret = M2M_ERR_FAIL;
  40314c:	f06f 040b 	mvn.w	r4, #11
  403150:	e7b7      	b.n	4030c2 <m2m_wifi_init+0x26>
  403152:	bf00      	nop
  403154:	2040c354 	.word	0x2040c354
  403158:	2040c359 	.word	0x2040c359
  40315c:	00403a61 	.word	0x00403a61
  403160:	00402db1 	.word	0x00402db1
  403164:	00402e01 	.word	0x00402e01
  403168:	00402d21 	.word	0x00402d21
  40316c:	004039b1 	.word	0x004039b1
  403170:	0040ccb0 	.word	0x0040ccb0
  403174:	00406515 	.word	0x00406515
  403178:	0040cd9c 	.word	0x0040cd9c
  40317c:	0040ca08 	.word	0x0040ca08
  403180:	0040cdb8 	.word	0x0040cdb8
  403184:	0040cdd4 	.word	0x0040cdd4
  403188:	0040cc8c 	.word	0x0040cc8c
  40318c:	0040c9dc 	.word	0x0040c9dc
  403190:	0040cdf0 	.word	0x0040cdf0
  403194:	00403b2d 	.word	0x00403b2d

00403198 <m2m_wifi_handle_events>:
	return M2M_SUCCESS;
}


sint8 m2m_wifi_handle_events(void * arg)
{
  403198:	b508      	push	{r3, lr}
	return hif_handle_isr();
  40319a:	4b01      	ldr	r3, [pc, #4]	; (4031a0 <m2m_wifi_handle_events+0x8>)
  40319c:	4798      	blx	r3
}
  40319e:	bd08      	pop	{r3, pc}
  4031a0:	004028fd 	.word	0x004028fd

004031a4 <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
}
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
  4031a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4031a8:	b0a0      	sub	sp, #128	; 0x80
  4031aa:	4680      	mov	r8, r0
  4031ac:	460d      	mov	r5, r1
  4031ae:	4614      	mov	r4, r2
  4031b0:	461e      	mov	r6, r3
  4031b2:	f8bd 7098 	ldrh.w	r7, [sp, #152]	; 0x98
	sint8				ret = M2M_SUCCESS;
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
  4031b6:	2a01      	cmp	r2, #1
  4031b8:	d003      	beq.n	4031c2 <m2m_wifi_connect_sc+0x1e>
	{
		if(pvAuthInfo == NULL)
  4031ba:	2b00      	cmp	r3, #0
  4031bc:	d037      	beq.n	40322e <m2m_wifi_connect_sc+0x8a>
		{
			M2M_ERR("Key is not valid\n");
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
  4031be:	2a02      	cmp	r2, #2
  4031c0:	d042      	beq.n	403248 <m2m_wifi_connect_sc+0xa4>
				}
				i++;
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
  4031c2:	1e6b      	subs	r3, r5, #1
  4031c4:	b2db      	uxtb	r3, r3
  4031c6:	2b1f      	cmp	r3, #31
  4031c8:	d875      	bhi.n	4032b6 <m2m_wifi_connect_sc+0x112>
		goto ERR1;
	}

	if(u16Ch>M2M_WIFI_CH_14)
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
  4031ca:	2fff      	cmp	r7, #255	; 0xff
  4031cc:	d001      	beq.n	4031d2 <m2m_wifi_connect_sc+0x2e>
  4031ce:	2f0d      	cmp	r7, #13
  4031d0:	d87e      	bhi.n	4032d0 <m2m_wifi_connect_sc+0x12c>
			goto ERR1;
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
  4031d2:	462a      	mov	r2, r5
  4031d4:	4641      	mov	r1, r8
  4031d6:	f10d 005a 	add.w	r0, sp, #90	; 0x5a
  4031da:	4b77      	ldr	r3, [pc, #476]	; (4033b8 <m2m_wifi_connect_sc+0x214>)
  4031dc:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
  4031de:	ab20      	add	r3, sp, #128	; 0x80
  4031e0:	441d      	add	r5, r3
  4031e2:	2300      	movs	r3, #0
  4031e4:	f805 3c26 	strb.w	r3, [r5, #-38]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
  4031e8:	f8ad 7058 	strh.w	r7, [sp, #88]	; 0x58
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
  4031ec:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
  4031f0:	3300      	adds	r3, #0
  4031f2:	bf18      	it	ne
  4031f4:	2301      	movne	r3, #1
  4031f6:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
	pstrAuthInfo = &strConnect.strSec;
	pstrAuthInfo->u8SecType		= u8SecType;
  4031fa:	f88d 4055 	strb.w	r4, [sp, #85]	; 0x55

	if(u8SecType == M2M_WIFI_SEC_WEP)
  4031fe:	2c03      	cmp	r4, #3
  403200:	d073      	beq.n	4032ea <m2m_wifi_connect_sc+0x146>
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
  403202:	2c02      	cmp	r4, #2
  403204:	f000 80aa 	beq.w	40335c <m2m_wifi_connect_sc+0x1b8>
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
  403208:	2c04      	cmp	r4, #4
  40320a:	f000 80c1 	beq.w	403390 <m2m_wifi_connect_sc+0x1ec>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
  40320e:	2c01      	cmp	r4, #1
  403210:	f040 80c4 	bne.w	40339c <m2m_wifi_connect_sc+0x1f8>
		M2M_ERR("undefined sec type\n");
		ret = M2M_ERR_FAIL;
		goto ERR1;
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
  403214:	2300      	movs	r3, #0
  403216:	9302      	str	r3, [sp, #8]
  403218:	9301      	str	r3, [sp, #4]
  40321a:	9300      	str	r3, [sp, #0]
  40321c:	236c      	movs	r3, #108	; 0x6c
  40321e:	aa05      	add	r2, sp, #20
  403220:	2128      	movs	r1, #40	; 0x28
  403222:	2001      	movs	r0, #1
  403224:	4c65      	ldr	r4, [pc, #404]	; (4033bc <m2m_wifi_connect_sc+0x218>)
  403226:	47a0      	blx	r4

ERR1:
	return ret;
}
  403228:	b020      	add	sp, #128	; 0x80
  40322a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			M2M_ERR("Key is not valid\n");
  40322e:	f240 2203 	movw	r2, #515	; 0x203
  403232:	4963      	ldr	r1, [pc, #396]	; (4033c0 <m2m_wifi_connect_sc+0x21c>)
  403234:	4863      	ldr	r0, [pc, #396]	; (4033c4 <m2m_wifi_connect_sc+0x220>)
  403236:	4c64      	ldr	r4, [pc, #400]	; (4033c8 <m2m_wifi_connect_sc+0x224>)
  403238:	47a0      	blx	r4
  40323a:	4864      	ldr	r0, [pc, #400]	; (4033cc <m2m_wifi_connect_sc+0x228>)
  40323c:	47a0      	blx	r4
  40323e:	4864      	ldr	r0, [pc, #400]	; (4033d0 <m2m_wifi_connect_sc+0x22c>)
  403240:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  403242:	f06f 000b 	mvn.w	r0, #11
			goto ERR1;
  403246:	e7ef      	b.n	403228 <m2m_wifi_connect_sc+0x84>
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
  403248:	4618      	mov	r0, r3
  40324a:	4b62      	ldr	r3, [pc, #392]	; (4033d4 <m2m_wifi_connect_sc+0x230>)
  40324c:	4798      	blx	r3
  40324e:	2840      	cmp	r0, #64	; 0x40
  403250:	d1b7      	bne.n	4031c2 <m2m_wifi_connect_sc+0x1e>
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
  403252:	7833      	ldrb	r3, [r6, #0]
  403254:	f1a3 023a 	sub.w	r2, r3, #58	; 0x3a
  403258:	b2d2      	uxtb	r2, r2
  40325a:	2a06      	cmp	r2, #6
  40325c:	d91e      	bls.n	40329c <m2m_wifi_connect_sc+0xf8>
  40325e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  403262:	b2d2      	uxtb	r2, r2
  403264:	2a36      	cmp	r2, #54	; 0x36
  403266:	d819      	bhi.n	40329c <m2m_wifi_connect_sc+0xf8>
  403268:	3b47      	subs	r3, #71	; 0x47
  40326a:	b2db      	uxtb	r3, r3
  40326c:	2b19      	cmp	r3, #25
  40326e:	d915      	bls.n	40329c <m2m_wifi_connect_sc+0xf8>
  403270:	4631      	mov	r1, r6
  403272:	f106 003f 	add.w	r0, r6, #63	; 0x3f
  403276:	f811 3f01 	ldrb.w	r3, [r1, #1]!
  40327a:	f1a3 023a 	sub.w	r2, r3, #58	; 0x3a
  40327e:	b2d2      	uxtb	r2, r2
  403280:	2a06      	cmp	r2, #6
  403282:	d90b      	bls.n	40329c <m2m_wifi_connect_sc+0xf8>
  403284:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  403288:	b2d2      	uxtb	r2, r2
  40328a:	2a36      	cmp	r2, #54	; 0x36
  40328c:	d806      	bhi.n	40329c <m2m_wifi_connect_sc+0xf8>
  40328e:	3b47      	subs	r3, #71	; 0x47
  403290:	b2db      	uxtb	r3, r3
  403292:	2b19      	cmp	r3, #25
  403294:	d902      	bls.n	40329c <m2m_wifi_connect_sc+0xf8>
			while(i < (M2M_MAX_PSK_LEN-1))
  403296:	4288      	cmp	r0, r1
  403298:	d1ed      	bne.n	403276 <m2m_wifi_connect_sc+0xd2>
  40329a:	e792      	b.n	4031c2 <m2m_wifi_connect_sc+0x1e>
					M2M_ERR("Invalid Key\n");
  40329c:	f240 220f 	movw	r2, #527	; 0x20f
  4032a0:	4947      	ldr	r1, [pc, #284]	; (4033c0 <m2m_wifi_connect_sc+0x21c>)
  4032a2:	4848      	ldr	r0, [pc, #288]	; (4033c4 <m2m_wifi_connect_sc+0x220>)
  4032a4:	4c48      	ldr	r4, [pc, #288]	; (4033c8 <m2m_wifi_connect_sc+0x224>)
  4032a6:	47a0      	blx	r4
  4032a8:	484b      	ldr	r0, [pc, #300]	; (4033d8 <m2m_wifi_connect_sc+0x234>)
  4032aa:	47a0      	blx	r4
  4032ac:	4848      	ldr	r0, [pc, #288]	; (4033d0 <m2m_wifi_connect_sc+0x22c>)
  4032ae:	47a0      	blx	r4
					ret = M2M_ERR_FAIL;
  4032b0:	f06f 000b 	mvn.w	r0, #11
					goto ERR1;
  4032b4:	e7b8      	b.n	403228 <m2m_wifi_connect_sc+0x84>
		M2M_ERR("SSID LEN INVALID\n");
  4032b6:	f240 2219 	movw	r2, #537	; 0x219
  4032ba:	4941      	ldr	r1, [pc, #260]	; (4033c0 <m2m_wifi_connect_sc+0x21c>)
  4032bc:	4841      	ldr	r0, [pc, #260]	; (4033c4 <m2m_wifi_connect_sc+0x220>)
  4032be:	4c42      	ldr	r4, [pc, #264]	; (4033c8 <m2m_wifi_connect_sc+0x224>)
  4032c0:	47a0      	blx	r4
  4032c2:	4846      	ldr	r0, [pc, #280]	; (4033dc <m2m_wifi_connect_sc+0x238>)
  4032c4:	47a0      	blx	r4
  4032c6:	4842      	ldr	r0, [pc, #264]	; (4033d0 <m2m_wifi_connect_sc+0x22c>)
  4032c8:	47a0      	blx	r4
		ret = M2M_ERR_FAIL;
  4032ca:	f06f 000b 	mvn.w	r0, #11
		goto ERR1;
  4032ce:	e7ab      	b.n	403228 <m2m_wifi_connect_sc+0x84>
			M2M_ERR("CH INVALID\n");
  4032d0:	f240 2222 	movw	r2, #546	; 0x222
  4032d4:	493a      	ldr	r1, [pc, #232]	; (4033c0 <m2m_wifi_connect_sc+0x21c>)
  4032d6:	483b      	ldr	r0, [pc, #236]	; (4033c4 <m2m_wifi_connect_sc+0x220>)
  4032d8:	4c3b      	ldr	r4, [pc, #236]	; (4033c8 <m2m_wifi_connect_sc+0x224>)
  4032da:	47a0      	blx	r4
  4032dc:	4840      	ldr	r0, [pc, #256]	; (4033e0 <m2m_wifi_connect_sc+0x23c>)
  4032de:	47a0      	blx	r4
  4032e0:	483b      	ldr	r0, [pc, #236]	; (4033d0 <m2m_wifi_connect_sc+0x22c>)
  4032e2:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  4032e4:	f06f 000b 	mvn.w	r0, #11
			goto ERR1;
  4032e8:	e79e      	b.n	403228 <m2m_wifi_connect_sc+0x84>
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
  4032ea:	7833      	ldrb	r3, [r6, #0]
  4032ec:	3b01      	subs	r3, #1
  4032ee:	b2db      	uxtb	r3, r3
  4032f0:	f88d 3014 	strb.w	r3, [sp, #20]
		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
  4032f4:	2b03      	cmp	r3, #3
  4032f6:	d813      	bhi.n	403320 <m2m_wifi_connect_sc+0x17c>
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
  4032f8:	7872      	ldrb	r2, [r6, #1]
  4032fa:	1e53      	subs	r3, r2, #1
  4032fc:	f88d 3015 	strb.w	r3, [sp, #21]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
  403300:	f002 03ef 	and.w	r3, r2, #239	; 0xef
  403304:	2b0b      	cmp	r3, #11
  403306:	d11a      	bne.n	40333e <m2m_wifi_connect_sc+0x19a>
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
  403308:	1cb1      	adds	r1, r6, #2
  40330a:	f10d 0016 	add.w	r0, sp, #22
  40330e:	4b2a      	ldr	r3, [pc, #168]	; (4033b8 <m2m_wifi_connect_sc+0x214>)
  403310:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
  403312:	7873      	ldrb	r3, [r6, #1]
  403314:	aa20      	add	r2, sp, #128	; 0x80
  403316:	4413      	add	r3, r2
  403318:	2200      	movs	r2, #0
  40331a:	f803 2c6a 	strb.w	r2, [r3, #-106]
  40331e:	e779      	b.n	403214 <m2m_wifi_connect_sc+0x70>
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
  403320:	f240 2239 	movw	r2, #569	; 0x239
  403324:	4926      	ldr	r1, [pc, #152]	; (4033c0 <m2m_wifi_connect_sc+0x21c>)
  403326:	4827      	ldr	r0, [pc, #156]	; (4033c4 <m2m_wifi_connect_sc+0x220>)
  403328:	4c27      	ldr	r4, [pc, #156]	; (4033c8 <m2m_wifi_connect_sc+0x224>)
  40332a:	47a0      	blx	r4
  40332c:	f89d 1014 	ldrb.w	r1, [sp, #20]
  403330:	482c      	ldr	r0, [pc, #176]	; (4033e4 <m2m_wifi_connect_sc+0x240>)
  403332:	47a0      	blx	r4
  403334:	4826      	ldr	r0, [pc, #152]	; (4033d0 <m2m_wifi_connect_sc+0x22c>)
  403336:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  403338:	f06f 000b 	mvn.w	r0, #11
			goto ERR1;
  40333c:	e774      	b.n	403228 <m2m_wifi_connect_sc+0x84>
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
  40333e:	f44f 7210 	mov.w	r2, #576	; 0x240
  403342:	491f      	ldr	r1, [pc, #124]	; (4033c0 <m2m_wifi_connect_sc+0x21c>)
  403344:	481f      	ldr	r0, [pc, #124]	; (4033c4 <m2m_wifi_connect_sc+0x220>)
  403346:	4c20      	ldr	r4, [pc, #128]	; (4033c8 <m2m_wifi_connect_sc+0x224>)
  403348:	47a0      	blx	r4
  40334a:	f89d 1015 	ldrb.w	r1, [sp, #21]
  40334e:	4826      	ldr	r0, [pc, #152]	; (4033e8 <m2m_wifi_connect_sc+0x244>)
  403350:	47a0      	blx	r4
  403352:	481f      	ldr	r0, [pc, #124]	; (4033d0 <m2m_wifi_connect_sc+0x22c>)
  403354:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  403356:	f06f 000b 	mvn.w	r0, #11
			goto ERR1;
  40335a:	e765      	b.n	403228 <m2m_wifi_connect_sc+0x84>
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
  40335c:	4630      	mov	r0, r6
  40335e:	4b1d      	ldr	r3, [pc, #116]	; (4033d4 <m2m_wifi_connect_sc+0x230>)
  403360:	4798      	blx	r3
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
  403362:	1e43      	subs	r3, r0, #1
  403364:	b29b      	uxth	r3, r3
  403366:	2b3f      	cmp	r3, #63	; 0x3f
  403368:	d805      	bhi.n	403376 <m2m_wifi_connect_sc+0x1d2>
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
  40336a:	1c42      	adds	r2, r0, #1
  40336c:	4631      	mov	r1, r6
  40336e:	a805      	add	r0, sp, #20
  403370:	4b11      	ldr	r3, [pc, #68]	; (4033b8 <m2m_wifi_connect_sc+0x214>)
  403372:	4798      	blx	r3
  403374:	e74e      	b.n	403214 <m2m_wifi_connect_sc+0x70>
			M2M_ERR("Incorrect PSK key length\n");
  403376:	f240 224f 	movw	r2, #591	; 0x24f
  40337a:	4911      	ldr	r1, [pc, #68]	; (4033c0 <m2m_wifi_connect_sc+0x21c>)
  40337c:	4811      	ldr	r0, [pc, #68]	; (4033c4 <m2m_wifi_connect_sc+0x220>)
  40337e:	4c12      	ldr	r4, [pc, #72]	; (4033c8 <m2m_wifi_connect_sc+0x224>)
  403380:	47a0      	blx	r4
  403382:	481a      	ldr	r0, [pc, #104]	; (4033ec <m2m_wifi_connect_sc+0x248>)
  403384:	47a0      	blx	r4
  403386:	4812      	ldr	r0, [pc, #72]	; (4033d0 <m2m_wifi_connect_sc+0x22c>)
  403388:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  40338a:	f06f 000b 	mvn.w	r0, #11
			goto ERR1;
  40338e:	e74b      	b.n	403228 <m2m_wifi_connect_sc+0x84>
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
  403390:	223e      	movs	r2, #62	; 0x3e
  403392:	4631      	mov	r1, r6
  403394:	a805      	add	r0, sp, #20
  403396:	4b08      	ldr	r3, [pc, #32]	; (4033b8 <m2m_wifi_connect_sc+0x214>)
  403398:	4798      	blx	r3
  40339a:	e73b      	b.n	403214 <m2m_wifi_connect_sc+0x70>
		M2M_ERR("undefined sec type\n");
  40339c:	f240 225f 	movw	r2, #607	; 0x25f
  4033a0:	4907      	ldr	r1, [pc, #28]	; (4033c0 <m2m_wifi_connect_sc+0x21c>)
  4033a2:	4808      	ldr	r0, [pc, #32]	; (4033c4 <m2m_wifi_connect_sc+0x220>)
  4033a4:	4c08      	ldr	r4, [pc, #32]	; (4033c8 <m2m_wifi_connect_sc+0x224>)
  4033a6:	47a0      	blx	r4
  4033a8:	4811      	ldr	r0, [pc, #68]	; (4033f0 <m2m_wifi_connect_sc+0x24c>)
  4033aa:	47a0      	blx	r4
  4033ac:	4808      	ldr	r0, [pc, #32]	; (4033d0 <m2m_wifi_connect_sc+0x22c>)
  4033ae:	47a0      	blx	r4
		ret = M2M_ERR_FAIL;
  4033b0:	f06f 000b 	mvn.w	r0, #11
		goto ERR1;
  4033b4:	e738      	b.n	403228 <m2m_wifi_connect_sc+0x84>
  4033b6:	bf00      	nop
  4033b8:	004025a5 	.word	0x004025a5
  4033bc:	0040271d 	.word	0x0040271d
  4033c0:	0040cc9c 	.word	0x0040cc9c
  4033c4:	0040c9dc 	.word	0x0040c9dc
  4033c8:	00406515 	.word	0x00406515
  4033cc:	0040ccf0 	.word	0x0040ccf0
  4033d0:	0040ca08 	.word	0x0040ca08
  4033d4:	004025c7 	.word	0x004025c7
  4033d8:	0040cd04 	.word	0x0040cd04
  4033dc:	0040cd14 	.word	0x0040cd14
  4033e0:	0040cd28 	.word	0x0040cd28
  4033e4:	0040cd34 	.word	0x0040cd34
  4033e8:	0040cd50 	.word	0x0040cd50
  4033ec:	0040cd6c 	.word	0x0040cd6c
  4033f0:	0040cd88 	.word	0x0040cd88

004033f4 <m2m_wifi_connect>:
{
  4033f4:	b510      	push	{r4, lr}
  4033f6:	b082      	sub	sp, #8
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
  4033f8:	2400      	movs	r4, #0
  4033fa:	9401      	str	r4, [sp, #4]
  4033fc:	f8bd 4010 	ldrh.w	r4, [sp, #16]
  403400:	9400      	str	r4, [sp, #0]
  403402:	4c02      	ldr	r4, [pc, #8]	; (40340c <m2m_wifi_connect+0x18>)
  403404:	47a0      	blx	r4
}
  403406:	b002      	add	sp, #8
  403408:	bd10      	pop	{r4, pc}
  40340a:	bf00      	nop
  40340c:	004031a5 	.word	0x004031a5

00403410 <m2m_wifi_request_dhcp_client>:

sint8 m2m_wifi_request_dhcp_client(void)
{
	/*legacy API should be removed */
	return 0;
}
  403410:	2000      	movs	r0, #0
  403412:	4770      	bx	lr

00403414 <chip_apply_conf>:
#define M2M_DISABLE_PS				(0xd0ul)

static uint32 clk_status_reg_adr = 0xf; /* Assume initially it is B0 chip */

sint8 chip_apply_conf(uint32 u32Conf)
{
  403414:	b5f0      	push	{r4, r5, r6, r7, lr}
  403416:	b083      	sub	sp, #12
  403418:	4604      	mov	r4, r0
#endif
#ifdef __DISABLE_FIRMWARE_LOGS__
	val32 |= rHAVE_LOGS_DISABLED_BIT;
#endif
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
  40341a:	f44f 55a5 	mov.w	r5, #5280	; 0x14a0
  40341e:	4e0a      	ldr	r6, [pc, #40]	; (403448 <chip_apply_conf+0x34>)
		if(val32 != 0) {		
			uint32 reg = 0;
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
  403420:	4f0a      	ldr	r7, [pc, #40]	; (40344c <chip_apply_conf+0x38>)
		nm_write_reg(rNMI_GP_REG_1, val32);
  403422:	4621      	mov	r1, r4
  403424:	4628      	mov	r0, r5
  403426:	47b0      	blx	r6
		if(val32 != 0) {		
  403428:	b154      	cbz	r4, 403440 <chip_apply_conf+0x2c>
			uint32 reg = 0;
  40342a:	a902      	add	r1, sp, #8
  40342c:	2300      	movs	r3, #0
  40342e:	f841 3d04 	str.w	r3, [r1, #-4]!
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
  403432:	4628      	mov	r0, r5
  403434:	47b8      	blx	r7
			if(ret == M2M_SUCCESS) {
  403436:	2800      	cmp	r0, #0
  403438:	d1f3      	bne.n	403422 <chip_apply_conf+0xe>
				if(reg == val32)
  40343a:	9b01      	ldr	r3, [sp, #4]
  40343c:	429c      	cmp	r4, r3
  40343e:	d1f0      	bne.n	403422 <chip_apply_conf+0xe>
			break;
		}
	} while(1);

	return M2M_SUCCESS;
}
  403440:	2000      	movs	r0, #0
  403442:	b003      	add	sp, #12
  403444:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403446:	bf00      	nop
  403448:	004038ed 	.word	0x004038ed
  40344c:	004038e1 	.word	0x004038e1

00403450 <nm_clkless_wake>:
*	@author	Samer Sarhan
*	@date	06 June 2014
*	@version	1.0
*/
sint8 nm_clkless_wake(void)
{
  403450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403454:	b083      	sub	sp, #12
	sint8 ret = M2M_SUCCESS;
	uint32 reg, clk_status_reg,trials = 0;
	/* wait 1ms, spi data read */
	nm_bsp_sleep(1);
  403456:	2001      	movs	r0, #1
  403458:	4b3c      	ldr	r3, [pc, #240]	; (40354c <nm_clkless_wake+0xfc>)
  40345a:	4798      	blx	r3
	ret = nm_read_reg_with_ret(0x1, &reg);
  40345c:	a901      	add	r1, sp, #4
  40345e:	2001      	movs	r0, #1
  403460:	4b3b      	ldr	r3, [pc, #236]	; (403550 <nm_clkless_wake+0x100>)
  403462:	4798      	blx	r3
	if(ret != M2M_SUCCESS) {
  403464:	4682      	mov	sl, r0
  403466:	b938      	cbnz	r0, 403478 <nm_clkless_wake+0x28>
  403468:	2400      	movs	r4, #0
	 * If A0, then clks_enabled bit exists in register 0xe
	 */
	do
	{
		/* Set bit 1 */
		nm_write_reg(0x1, reg | (1 << 1));
  40346a:	f04f 0801 	mov.w	r8, #1
  40346e:	f8df 9108 	ldr.w	r9, [pc, #264]	; 403578 <nm_clkless_wake+0x128>
		/* wait 1ms, spi data read */
		nm_bsp_sleep(1);
  403472:	4d36      	ldr	r5, [pc, #216]	; (40354c <nm_clkless_wake+0xfc>)
		}

		// in case of clocks off, wait 2ms, and check it again.
		// if still off, wait for another 2ms, for a total wait of 6ms.
		// If still off, redo the wake up sequence
		while( ((clk_status_reg & 0x4) == 0) && (((++trials) %3) == 0))
  403474:	4f37      	ldr	r7, [pc, #220]	; (403554 <nm_clkless_wake+0x104>)
  403476:	e020      	b.n	4034ba <nm_clkless_wake+0x6a>
		M2M_ERR("Bus error (1). Wake up failed\n");
  403478:	2272      	movs	r2, #114	; 0x72
  40347a:	4937      	ldr	r1, [pc, #220]	; (403558 <nm_clkless_wake+0x108>)
  40347c:	4837      	ldr	r0, [pc, #220]	; (40355c <nm_clkless_wake+0x10c>)
  40347e:	4c38      	ldr	r4, [pc, #224]	; (403560 <nm_clkless_wake+0x110>)
  403480:	47a0      	blx	r4
  403482:	4838      	ldr	r0, [pc, #224]	; (403564 <nm_clkless_wake+0x114>)
  403484:	47a0      	blx	r4
  403486:	4838      	ldr	r0, [pc, #224]	; (403568 <nm_clkless_wake+0x118>)
  403488:	47a0      	blx	r4
		goto _WAKE_EXIT;
  40348a:	e009      	b.n	4034a0 <nm_clkless_wake+0x50>
					M2M_ERR("Bus error (2). Wake up failed\n");
  40348c:	2296      	movs	r2, #150	; 0x96
  40348e:	4932      	ldr	r1, [pc, #200]	; (403558 <nm_clkless_wake+0x108>)
  403490:	4832      	ldr	r0, [pc, #200]	; (40355c <nm_clkless_wake+0x10c>)
  403492:	4c33      	ldr	r4, [pc, #204]	; (403560 <nm_clkless_wake+0x110>)
  403494:	47a0      	blx	r4
  403496:	4835      	ldr	r0, [pc, #212]	; (40356c <nm_clkless_wake+0x11c>)
  403498:	47a0      	blx	r4
  40349a:	4833      	ldr	r0, [pc, #204]	; (403568 <nm_clkless_wake+0x118>)
  40349c:	47a0      	blx	r4
				ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  40349e:	46b2      	mov	sl, r6
		}
	} while((clk_status_reg & 0x4) == 0);

_WAKE_EXIT:
	return ret;
}
  4034a0:	4650      	mov	r0, sl
  4034a2:	b003      	add	sp, #12
  4034a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			nm_write_reg(0x1, reg | (1 << 1));
  4034a8:	9901      	ldr	r1, [sp, #4]
  4034aa:	f041 0102 	orr.w	r1, r1, #2
  4034ae:	4640      	mov	r0, r8
  4034b0:	47c8      	blx	r9
	} while((clk_status_reg & 0x4) == 0);
  4034b2:	9b00      	ldr	r3, [sp, #0]
  4034b4:	f013 0f04 	tst.w	r3, #4
  4034b8:	d1f2      	bne.n	4034a0 <nm_clkless_wake+0x50>
		nm_write_reg(0x1, reg | (1 << 1));
  4034ba:	9901      	ldr	r1, [sp, #4]
  4034bc:	f041 0102 	orr.w	r1, r1, #2
  4034c0:	4640      	mov	r0, r8
  4034c2:	47c8      	blx	r9
		nm_bsp_sleep(1);
  4034c4:	4640      	mov	r0, r8
  4034c6:	47a8      	blx	r5
		ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  4034c8:	4669      	mov	r1, sp
  4034ca:	4b29      	ldr	r3, [pc, #164]	; (403570 <nm_clkless_wake+0x120>)
  4034cc:	6818      	ldr	r0, [r3, #0]
  4034ce:	4b20      	ldr	r3, [pc, #128]	; (403550 <nm_clkless_wake+0x100>)
  4034d0:	4798      	blx	r3
		if( (ret != M2M_SUCCESS) || ((ret == M2M_SUCCESS) && (clk_status_reg == 0)) ) {
  4034d2:	b908      	cbnz	r0, 4034d8 <nm_clkless_wake+0x88>
  4034d4:	9b00      	ldr	r3, [sp, #0]
  4034d6:	b9bb      	cbnz	r3, 403508 <nm_clkless_wake+0xb8>
			clk_status_reg_adr = 0xe;
  4034d8:	4e25      	ldr	r6, [pc, #148]	; (403570 <nm_clkless_wake+0x120>)
  4034da:	230e      	movs	r3, #14
  4034dc:	6033      	str	r3, [r6, #0]
			nm_bsp_sleep(1);
  4034de:	4640      	mov	r0, r8
  4034e0:	47a8      	blx	r5
			ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  4034e2:	4669      	mov	r1, sp
  4034e4:	6830      	ldr	r0, [r6, #0]
  4034e6:	4b1a      	ldr	r3, [pc, #104]	; (403550 <nm_clkless_wake+0x100>)
  4034e8:	4798      	blx	r3
			if( (ret != M2M_SUCCESS) || ((ret == M2M_SUCCESS) && (clk_status_reg == 0)) ) {
  4034ea:	b908      	cbnz	r0, 4034f0 <nm_clkless_wake+0xa0>
  4034ec:	9b00      	ldr	r3, [sp, #0]
  4034ee:	b95b      	cbnz	r3, 403508 <nm_clkless_wake+0xb8>
				clk_status_reg_adr = 0x13;
  4034f0:	4e1f      	ldr	r6, [pc, #124]	; (403570 <nm_clkless_wake+0x120>)
  4034f2:	2313      	movs	r3, #19
  4034f4:	6033      	str	r3, [r6, #0]
				nm_bsp_sleep(1);
  4034f6:	4640      	mov	r0, r8
  4034f8:	47a8      	blx	r5
				ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  4034fa:	4669      	mov	r1, sp
  4034fc:	6830      	ldr	r0, [r6, #0]
  4034fe:	4b14      	ldr	r3, [pc, #80]	; (403550 <nm_clkless_wake+0x100>)
  403500:	4798      	blx	r3
				if(ret != M2M_SUCCESS) {
  403502:	4606      	mov	r6, r0
  403504:	2800      	cmp	r0, #0
  403506:	d1c1      	bne.n	40348c <nm_clkless_wake+0x3c>
			nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  403508:	4e19      	ldr	r6, [pc, #100]	; (403570 <nm_clkless_wake+0x120>)
		while( ((clk_status_reg & 0x4) == 0) && (((++trials) %3) == 0))
  40350a:	9b00      	ldr	r3, [sp, #0]
  40350c:	f013 0f04 	tst.w	r3, #4
  403510:	d1c6      	bne.n	4034a0 <nm_clkless_wake+0x50>
  403512:	3401      	adds	r4, #1
  403514:	fba7 2304 	umull	r2, r3, r7, r4
  403518:	085b      	lsrs	r3, r3, #1
  40351a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  40351e:	429c      	cmp	r4, r3
  403520:	d1c2      	bne.n	4034a8 <nm_clkless_wake+0x58>
			nm_bsp_sleep(2);
  403522:	2002      	movs	r0, #2
  403524:	47a8      	blx	r5
			nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  403526:	4669      	mov	r1, sp
  403528:	6830      	ldr	r0, [r6, #0]
  40352a:	4b09      	ldr	r3, [pc, #36]	; (403550 <nm_clkless_wake+0x100>)
  40352c:	4798      	blx	r3
			if((clk_status_reg & 0x4) == 0)
  40352e:	9b00      	ldr	r3, [sp, #0]
  403530:	f013 0f04 	tst.w	r3, #4
  403534:	d1e9      	bne.n	40350a <nm_clkless_wake+0xba>
				M2M_ERR("clocks still OFF. Wake up failed\n");
  403536:	22aa      	movs	r2, #170	; 0xaa
  403538:	4907      	ldr	r1, [pc, #28]	; (403558 <nm_clkless_wake+0x108>)
  40353a:	4808      	ldr	r0, [pc, #32]	; (40355c <nm_clkless_wake+0x10c>)
  40353c:	f8df b020 	ldr.w	fp, [pc, #32]	; 403560 <nm_clkless_wake+0x110>
  403540:	47d8      	blx	fp
  403542:	480c      	ldr	r0, [pc, #48]	; (403574 <nm_clkless_wake+0x124>)
  403544:	47d8      	blx	fp
  403546:	4808      	ldr	r0, [pc, #32]	; (403568 <nm_clkless_wake+0x118>)
  403548:	47d8      	blx	fp
  40354a:	e7de      	b.n	40350a <nm_clkless_wake+0xba>
  40354c:	00402201 	.word	0x00402201
  403550:	004038e1 	.word	0x004038e1
  403554:	aaaaaaab 	.word	0xaaaaaaab
  403558:	0040ce0c 	.word	0x0040ce0c
  40355c:	0040c9dc 	.word	0x0040c9dc
  403560:	00406515 	.word	0x00406515
  403564:	0040ce7c 	.word	0x0040ce7c
  403568:	0040ca08 	.word	0x0040ca08
  40356c:	0040ce9c 	.word	0x0040ce9c
  403570:	20400014 	.word	0x20400014
  403574:	0040cebc 	.word	0x0040cebc
  403578:	004038ed 	.word	0x004038ed

0040357c <enable_interrupts>:
	nm_write_reg(0x6, 0x0);
	nm_write_reg(0x7, 0x0);
}

sint8 enable_interrupts(void)
{
  40357c:	b500      	push	{lr}
  40357e:	b083      	sub	sp, #12
	uint32 reg;
	sint8 ret;
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
  403580:	a901      	add	r1, sp, #4
  403582:	f241 4008 	movw	r0, #5128	; 0x1408
  403586:	4b15      	ldr	r3, [pc, #84]	; (4035dc <enable_interrupts+0x60>)
  403588:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  40358a:	b9e8      	cbnz	r0, 4035c8 <enable_interrupts+0x4c>
		return M2M_ERR_BUS_FAIL;
	}
	reg |= ((uint32) 1 << 8);
  40358c:	9901      	ldr	r1, [sp, #4]
  40358e:	f441 7180 	orr.w	r1, r1, #256	; 0x100
  403592:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
  403594:	f241 4008 	movw	r0, #5128	; 0x1408
  403598:	4b11      	ldr	r3, [pc, #68]	; (4035e0 <enable_interrupts+0x64>)
  40359a:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  40359c:	b9b8      	cbnz	r0, 4035ce <enable_interrupts+0x52>
		return M2M_ERR_BUS_FAIL;
	}
	/**
	interrupt enable
	**/
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
  40359e:	a901      	add	r1, sp, #4
  4035a0:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
  4035a4:	4b0d      	ldr	r3, [pc, #52]	; (4035dc <enable_interrupts+0x60>)
  4035a6:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  4035a8:	b9a0      	cbnz	r0, 4035d4 <enable_interrupts+0x58>
		return M2M_ERR_BUS_FAIL;
	}
	reg |= ((uint32) 1 << 16);
  4035aa:	9901      	ldr	r1, [sp, #4]
  4035ac:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
  4035b0:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
  4035b2:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
  4035b6:	4b0a      	ldr	r3, [pc, #40]	; (4035e0 <enable_interrupts+0x64>)
  4035b8:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  4035ba:	2800      	cmp	r0, #0
		return M2M_ERR_BUS_FAIL;
  4035bc:	bf18      	it	ne
  4035be:	f06f 0005 	mvnne.w	r0, #5
	}
	return M2M_SUCCESS;
}
  4035c2:	b003      	add	sp, #12
  4035c4:	f85d fb04 	ldr.w	pc, [sp], #4
		return M2M_ERR_BUS_FAIL;
  4035c8:	f06f 0005 	mvn.w	r0, #5
  4035cc:	e7f9      	b.n	4035c2 <enable_interrupts+0x46>
		return M2M_ERR_BUS_FAIL;
  4035ce:	f06f 0005 	mvn.w	r0, #5
  4035d2:	e7f6      	b.n	4035c2 <enable_interrupts+0x46>
		return M2M_ERR_BUS_FAIL;
  4035d4:	f06f 0005 	mvn.w	r0, #5
  4035d8:	e7f3      	b.n	4035c2 <enable_interrupts+0x46>
  4035da:	bf00      	nop
  4035dc:	004038e1 	.word	0x004038e1
  4035e0:	004038ed 	.word	0x004038ed

004035e4 <nmi_get_chipid>:
	nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
	return ret;
}

uint32 nmi_get_chipid(void)
{
  4035e4:	b510      	push	{r4, lr}
  4035e6:	b082      	sub	sp, #8
	static uint32 chipid = 0;

	if (chipid == 0) {
  4035e8:	4b25      	ldr	r3, [pc, #148]	; (403680 <nmi_get_chipid+0x9c>)
  4035ea:	681c      	ldr	r4, [r3, #0]
  4035ec:	b124      	cbz	r4, 4035f8 <nmi_get_chipid+0x14>
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
		chipid |= 0x050000;
#endif /* PROBE_FLASH */
	}
	return chipid;
  4035ee:	4b24      	ldr	r3, [pc, #144]	; (403680 <nmi_get_chipid+0x9c>)
  4035f0:	681c      	ldr	r4, [r3, #0]
}
  4035f2:	4620      	mov	r0, r4
  4035f4:	b002      	add	sp, #8
  4035f6:	bd10      	pop	{r4, pc}
		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
  4035f8:	4619      	mov	r1, r3
  4035fa:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  4035fe:	4b21      	ldr	r3, [pc, #132]	; (403684 <nmi_get_chipid+0xa0>)
  403600:	4798      	blx	r3
  403602:	b118      	cbz	r0, 40360c <nmi_get_chipid+0x28>
			chipid = 0;
  403604:	2200      	movs	r2, #0
  403606:	4b1e      	ldr	r3, [pc, #120]	; (403680 <nmi_get_chipid+0x9c>)
  403608:	601a      	str	r2, [r3, #0]
			return 0;
  40360a:	e7f2      	b.n	4035f2 <nmi_get_chipid+0xe>
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
  40360c:	a901      	add	r1, sp, #4
  40360e:	f241 30f4 	movw	r0, #5108	; 0x13f4
  403612:	4b1c      	ldr	r3, [pc, #112]	; (403684 <nmi_get_chipid+0xa0>)
  403614:	4798      	blx	r3
  403616:	b118      	cbz	r0, 403620 <nmi_get_chipid+0x3c>
			chipid = 0;
  403618:	2200      	movs	r2, #0
  40361a:	4b19      	ldr	r3, [pc, #100]	; (403680 <nmi_get_chipid+0x9c>)
  40361c:	601a      	str	r2, [r3, #0]
			return 0;
  40361e:	e7e8      	b.n	4035f2 <nmi_get_chipid+0xe>
		if (chipid == 0x1002a0)  {
  403620:	4b17      	ldr	r3, [pc, #92]	; (403680 <nmi_get_chipid+0x9c>)
  403622:	681b      	ldr	r3, [r3, #0]
  403624:	4a18      	ldr	r2, [pc, #96]	; (403688 <nmi_get_chipid+0xa4>)
  403626:	4293      	cmp	r3, r2
  403628:	d00d      	beq.n	403646 <nmi_get_chipid+0x62>
		} else if(chipid == 0x1002b0) {
  40362a:	4a18      	ldr	r2, [pc, #96]	; (40368c <nmi_get_chipid+0xa8>)
  40362c:	4293      	cmp	r3, r2
  40362e:	d011      	beq.n	403654 <nmi_get_chipid+0x70>
		} else if(chipid == 0x1000F0) { 
  403630:	4a17      	ldr	r2, [pc, #92]	; (403690 <nmi_get_chipid+0xac>)
  403632:	4293      	cmp	r3, r2
  403634:	d018      	beq.n	403668 <nmi_get_chipid+0x84>
		chipid |= 0x050000;
  403636:	4a12      	ldr	r2, [pc, #72]	; (403680 <nmi_get_chipid+0x9c>)
		chipid &= ~(0x0f0000);
  403638:	6813      	ldr	r3, [r2, #0]
  40363a:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
		chipid |= 0x050000;
  40363e:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
  403642:	6013      	str	r3, [r2, #0]
  403644:	e7d3      	b.n	4035ee <nmi_get_chipid+0xa>
			if (rfrevid == 0x1) { /* 1002A0 */
  403646:	9b01      	ldr	r3, [sp, #4]
  403648:	2b01      	cmp	r3, #1
  40364a:	d0f4      	beq.n	403636 <nmi_get_chipid+0x52>
				chipid = 0x1002a1;
  40364c:	3201      	adds	r2, #1
  40364e:	4b0c      	ldr	r3, [pc, #48]	; (403680 <nmi_get_chipid+0x9c>)
  403650:	601a      	str	r2, [r3, #0]
  403652:	e7f0      	b.n	403636 <nmi_get_chipid+0x52>
			if(rfrevid == 3) { /* 1002B0 */
  403654:	9b01      	ldr	r3, [sp, #4]
  403656:	2b03      	cmp	r3, #3
  403658:	d0ed      	beq.n	403636 <nmi_get_chipid+0x52>
			} else if(rfrevid == 4) { /* 1002B1 */
  40365a:	2b04      	cmp	r3, #4
				chipid = 0x1002b1;
  40365c:	bf0c      	ite	eq
  40365e:	3201      	addeq	r2, #1
				chipid = 0x1002b2;
  403660:	4a0c      	ldrne	r2, [pc, #48]	; (403694 <nmi_get_chipid+0xb0>)
  403662:	4b07      	ldr	r3, [pc, #28]	; (403680 <nmi_get_chipid+0x9c>)
  403664:	601a      	str	r2, [r3, #0]
  403666:	e7e6      	b.n	403636 <nmi_get_chipid+0x52>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
  403668:	4905      	ldr	r1, [pc, #20]	; (403680 <nmi_get_chipid+0x9c>)
  40366a:	f44f 106c 	mov.w	r0, #3866624	; 0x3b0000
  40366e:	4b05      	ldr	r3, [pc, #20]	; (403684 <nmi_get_chipid+0xa0>)
  403670:	4798      	blx	r3
  403672:	2800      	cmp	r0, #0
  403674:	d0df      	beq.n	403636 <nmi_get_chipid+0x52>
			chipid = 0;
  403676:	2200      	movs	r2, #0
  403678:	4b01      	ldr	r3, [pc, #4]	; (403680 <nmi_get_chipid+0x9c>)
  40367a:	601a      	str	r2, [r3, #0]
			return 0;
  40367c:	e7b9      	b.n	4035f2 <nmi_get_chipid+0xe>
  40367e:	bf00      	nop
  403680:	2040c35c 	.word	0x2040c35c
  403684:	004038e1 	.word	0x004038e1
  403688:	001002a0 	.word	0x001002a0
  40368c:	001002b0 	.word	0x001002b0
  403690:	001000f0 	.word	0x001000f0
  403694:	001002b2 	.word	0x001002b2

00403698 <wait_for_bootrom>:
#endif
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
  403698:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40369c:	4607      	mov	r7, r0
	uint32 reg = 0, cnt = 0;
	uint32 u32GpReg1 = 0;

	reg = 0;
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
  40369e:	f241 0514 	movw	r5, #4116	; 0x1014
  4036a2:	4c28      	ldr	r4, [pc, #160]	; (403744 <wait_for_bootrom+0xac>)
		if (reg & 0x80000000) {
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
  4036a4:	4e28      	ldr	r6, [pc, #160]	; (403748 <wait_for_bootrom+0xb0>)
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
  4036a6:	4628      	mov	r0, r5
  4036a8:	47a0      	blx	r4
		if (reg & 0x80000000) {
  4036aa:	2800      	cmp	r0, #0
  4036ac:	db02      	blt.n	4036b4 <wait_for_bootrom+0x1c>
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
  4036ae:	2001      	movs	r0, #1
  4036b0:	47b0      	blx	r6
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
  4036b2:	e7f8      	b.n	4036a6 <wait_for_bootrom+0xe>
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
  4036b4:	4825      	ldr	r0, [pc, #148]	; (40374c <wait_for_bootrom+0xb4>)
  4036b6:	4b23      	ldr	r3, [pc, #140]	; (403744 <wait_for_bootrom+0xac>)
  4036b8:	4798      	blx	r3
	reg &= 0x1;

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
  4036ba:	f010 0f01 	tst.w	r0, #1
  4036be:	d110      	bne.n	4036e2 <wait_for_bootrom+0x4a>
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
		{
			nm_bsp_sleep(1);
  4036c0:	f8df 8084 	ldr.w	r8, [pc, #132]	; 403748 <wait_for_bootrom+0xb0>
			reg = nm_read_reg(BOOTROM_REG);
  4036c4:	4e1f      	ldr	r6, [pc, #124]	; (403744 <wait_for_bootrom+0xac>)

			printf("reg:%x / %x \n",reg, M2M_FINISH_BOOT_ROM );
  4036c6:	4d22      	ldr	r5, [pc, #136]	; (403750 <wait_for_bootrom+0xb8>)
			nm_bsp_sleep(1);
  4036c8:	2001      	movs	r0, #1
  4036ca:	47c0      	blx	r8
			reg = nm_read_reg(BOOTROM_REG);
  4036cc:	f04f 100c 	mov.w	r0, #786444	; 0xc000c
  4036d0:	47b0      	blx	r6
  4036d2:	4604      	mov	r4, r0
			printf("reg:%x / %x \n",reg, M2M_FINISH_BOOT_ROM );
  4036d4:	462a      	mov	r2, r5
  4036d6:	4601      	mov	r1, r0
  4036d8:	481e      	ldr	r0, [pc, #120]	; (403754 <wait_for_bootrom+0xbc>)
  4036da:	4b1f      	ldr	r3, [pc, #124]	; (403758 <wait_for_bootrom+0xc0>)
  4036dc:	4798      	blx	r3
		while(reg != M2M_FINISH_BOOT_ROM)
  4036de:	42ac      	cmp	r4, r5
  4036e0:	d1f2      	bne.n	4036c8 <wait_for_bootrom+0x30>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
  4036e2:	2f02      	cmp	r7, #2
  4036e4:	d019      	beq.n	40371a <wait_for_bootrom+0x82>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, NBIT20);
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
  4036e6:	2f03      	cmp	r7, #3
  4036e8:	d022      	beq.n	403730 <wait_for_bootrom+0x98>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, 0);
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
  4036ea:	2f04      	cmp	r7, #4
  4036ec:	bf14      	ite	ne
  4036ee:	2400      	movne	r4, #0
  4036f0:	2480      	moveq	r4, #128	; 0x80
	} else {
		/*bypass this step*/
	}

	if(REV(nmi_get_chipid()) == REV_3A0)
  4036f2:	4b1a      	ldr	r3, [pc, #104]	; (40375c <wait_for_bootrom+0xc4>)
  4036f4:	4798      	blx	r3
  4036f6:	f3c0 000b 	ubfx	r0, r0, #0, #12
  4036fa:	f5b0 7f68 	cmp.w	r0, #928	; 0x3a0
	{
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
  4036fe:	bf0c      	ite	eq
  403700:	f044 0002 	orreq.w	r0, r4, #2
	}
	else
	{
		chip_apply_conf(u32GpReg1);
  403704:	4620      	movne	r0, r4
  403706:	4b16      	ldr	r3, [pc, #88]	; (403760 <wait_for_bootrom+0xc8>)
  403708:	4798      	blx	r3
	}
	
	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
  40370a:	4916      	ldr	r1, [pc, #88]	; (403764 <wait_for_bootrom+0xcc>)
  40370c:	f04f 100c 	mov.w	r0, #786444	; 0xc000c
  403710:	4b15      	ldr	r3, [pc, #84]	; (403768 <wait_for_bootrom+0xd0>)
  403712:	4798      	blx	r3
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
}
  403714:	2000      	movs	r0, #0
  403716:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
  40371a:	4914      	ldr	r1, [pc, #80]	; (40376c <wait_for_bootrom+0xd4>)
  40371c:	4814      	ldr	r0, [pc, #80]	; (403770 <wait_for_bootrom+0xd8>)
  40371e:	4c12      	ldr	r4, [pc, #72]	; (403768 <wait_for_bootrom+0xd0>)
  403720:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, NBIT20);
  403722:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
  403726:	f241 008c 	movw	r0, #4236	; 0x108c
  40372a:	47a0      	blx	r4
	uint32 u32GpReg1 = 0;
  40372c:	2400      	movs	r4, #0
  40372e:	e7e0      	b.n	4036f2 <wait_for_bootrom+0x5a>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
  403730:	490e      	ldr	r1, [pc, #56]	; (40376c <wait_for_bootrom+0xd4>)
  403732:	480f      	ldr	r0, [pc, #60]	; (403770 <wait_for_bootrom+0xd8>)
  403734:	4c0c      	ldr	r4, [pc, #48]	; (403768 <wait_for_bootrom+0xd0>)
  403736:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, 0);
  403738:	2100      	movs	r1, #0
  40373a:	f241 008c 	movw	r0, #4236	; 0x108c
  40373e:	47a0      	blx	r4
	uint32 u32GpReg1 = 0;
  403740:	2400      	movs	r4, #0
  403742:	e7d6      	b.n	4036f2 <wait_for_bootrom+0x5a>
  403744:	004038d5 	.word	0x004038d5
  403748:	00402201 	.word	0x00402201
  40374c:	000207bc 	.word	0x000207bc
  403750:	10add09e 	.word	0x10add09e
  403754:	0040cee0 	.word	0x0040cee0
  403758:	00406515 	.word	0x00406515
  40375c:	004035e5 	.word	0x004035e5
  403760:	00403415 	.word	0x00403415
  403764:	ef522f61 	.word	0xef522f61
  403768:	004038ed 	.word	0x004038ed
  40376c:	3c1cd57d 	.word	0x3c1cd57d
  403770:	000207ac 	.word	0x000207ac

00403774 <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
  403774:	b5f0      	push	{r4, r5, r6, r7, lr}
  403776:	b083      	sub	sp, #12
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, cnt = 0;
	uint32 u32Timeout = TIMEOUT;
	volatile uint32 regAddress = NMI_STATE_REG;
  403778:	f241 038c 	movw	r3, #4236	; 0x108c
  40377c:	9301      	str	r3, [sp, #4]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
  40377e:	4b18      	ldr	r3, [pc, #96]	; (4037e0 <wait_for_firmware_start+0x6c>)
  403780:	9300      	str	r3, [sp, #0]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
  403782:	3802      	subs	r0, #2
  403784:	b2c0      	uxtb	r0, r0
  403786:	2801      	cmp	r0, #1
  403788:	d911      	bls.n	4037ae <wait_for_firmware_start+0x3a>
{
  40378a:	f04f 34ff 	mov.w	r4, #4294967295
  40378e:	2000      	movs	r0, #0
	
	
	while (checkValue != reg)
	{
	
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
  403790:	2702      	movs	r7, #2
  403792:	4e14      	ldr	r6, [pc, #80]	; (4037e4 <wait_for_firmware_start+0x70>)
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
  403794:	4d14      	ldr	r5, [pc, #80]	; (4037e8 <wait_for_firmware_start+0x74>)
	while (checkValue != reg)
  403796:	9b00      	ldr	r3, [sp, #0]
  403798:	4298      	cmp	r0, r3
  40379a:	d012      	beq.n	4037c2 <wait_for_firmware_start+0x4e>
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
  40379c:	4638      	mov	r0, r7
  40379e:	47b0      	blx	r6
		reg = nm_read_reg(regAddress);
  4037a0:	9801      	ldr	r0, [sp, #4]
  4037a2:	47a8      	blx	r5
		if(++cnt >= u32Timeout)
  4037a4:	3c01      	subs	r4, #1
  4037a6:	d1f6      	bne.n	403796 <wait_for_firmware_start+0x22>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
  4037a8:	f06f 0004 	mvn.w	r0, #4
  4037ac:	e00e      	b.n	4037cc <wait_for_firmware_start+0x58>
		regAddress = NMI_REV_REG;
  4037ae:	4b0f      	ldr	r3, [pc, #60]	; (4037ec <wait_for_firmware_start+0x78>)
  4037b0:	9301      	str	r3, [sp, #4]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
  4037b2:	f1a3 5322 	sub.w	r3, r3, #679477248	; 0x28800000
  4037b6:	f5a3 1311 	sub.w	r3, r3, #2375680	; 0x244000
  4037ba:	f2a3 53e9 	subw	r3, r3, #1513	; 0x5e9
  4037be:	9300      	str	r3, [sp, #0]
  4037c0:	e7e3      	b.n	40378a <wait_for_firmware_start+0x16>
			goto ERR;
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
  4037c2:	9a00      	ldr	r2, [sp, #0]
  4037c4:	4b06      	ldr	r3, [pc, #24]	; (4037e0 <wait_for_firmware_start+0x6c>)
  4037c6:	429a      	cmp	r2, r3
  4037c8:	d002      	beq.n	4037d0 <wait_for_firmware_start+0x5c>
	sint8 ret = M2M_SUCCESS;
  4037ca:	2000      	movs	r0, #0
	{
		nm_write_reg(NMI_STATE_REG, 0);
	}
ERR:
	return ret;
}
  4037cc:	b003      	add	sp, #12
  4037ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nm_write_reg(NMI_STATE_REG, 0);
  4037d0:	2100      	movs	r1, #0
  4037d2:	f241 008c 	movw	r0, #4236	; 0x108c
  4037d6:	4b06      	ldr	r3, [pc, #24]	; (4037f0 <wait_for_firmware_start+0x7c>)
  4037d8:	4798      	blx	r3
	sint8 ret = M2M_SUCCESS;
  4037da:	2000      	movs	r0, #0
  4037dc:	e7f6      	b.n	4037cc <wait_for_firmware_start+0x58>
  4037de:	bf00      	nop
  4037e0:	02532636 	.word	0x02532636
  4037e4:	00402201 	.word	0x00402201
  4037e8:	004038d5 	.word	0x004038d5
  4037ec:	000207ac 	.word	0x000207ac
  4037f0:	004038ed 	.word	0x004038ed

004037f4 <chip_deinit>:

sint8 chip_deinit(void)
{
  4037f4:	b5f0      	push	{r4, r5, r6, r7, lr}
  4037f6:	b083      	sub	sp, #12
	uint32 reg = 0;
  4037f8:	a902      	add	r1, sp, #8
  4037fa:	2300      	movs	r3, #0
  4037fc:	f841 3d04 	str.w	r3, [r1, #-4]!
	uint8 timeout = 10;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
  403800:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
  403804:	4b24      	ldr	r3, [pc, #144]	; (403898 <chip_deinit+0xa4>)
  403806:	4798      	blx	r3
	if (ret != M2M_SUCCESS) {
  403808:	bb20      	cbnz	r0, 403854 <chip_deinit+0x60>
		M2M_ERR("failed to de-initialize\n");
	}
	reg &= ~(1 << 10);
  40380a:	9901      	ldr	r1, [sp, #4]
  40380c:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
  403810:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
  403812:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
  403816:	4b21      	ldr	r3, [pc, #132]	; (40389c <chip_deinit+0xa8>)
  403818:	4798      	blx	r3

	if (ret != M2M_SUCCESS) {
  40381a:	4605      	mov	r5, r0
  40381c:	bb28      	cbnz	r0, 40386a <chip_deinit+0x76>
  40381e:	240a      	movs	r4, #10
		M2M_ERR("Error while writing reg\n");
		return ret;
	}

	do {
		ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
  403820:	4e1d      	ldr	r6, [pc, #116]	; (403898 <chip_deinit+0xa4>)
		}
		/*Workaround to ensure that the chip is actually reset*/
		if ((reg & (1 << 10))) {
			M2M_DBG("Bit 10 not reset retry %d\n", timeout);
			reg &= ~(1 << 10);
			ret = nm_write_reg(NMI_GLB_RESET_0, reg);
  403822:	4f1e      	ldr	r7, [pc, #120]	; (40389c <chip_deinit+0xa8>)
		ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
  403824:	a901      	add	r1, sp, #4
  403826:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
  40382a:	47b0      	blx	r6
		if (ret != M2M_SUCCESS) {
  40382c:	4605      	mov	r5, r0
  40382e:	bb38      	cbnz	r0, 403880 <chip_deinit+0x8c>
		if ((reg & (1 << 10))) {
  403830:	9901      	ldr	r1, [sp, #4]
  403832:	f411 6f80 	tst.w	r1, #1024	; 0x400
  403836:	d00a      	beq.n	40384e <chip_deinit+0x5a>
			reg &= ~(1 << 10);
  403838:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
  40383c:	9101      	str	r1, [sp, #4]
			ret = nm_write_reg(NMI_GLB_RESET_0, reg);
  40383e:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
  403842:	47b8      	blx	r7
  403844:	4605      	mov	r5, r0
  403846:	1e63      	subs	r3, r4, #1
			timeout--;
		} else {
			break;
		}

	} while (timeout);
  403848:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
  40384c:	d1ea      	bne.n	403824 <chip_deinit+0x30>

	return ret;
}
  40384e:	4628      	mov	r0, r5
  403850:	b003      	add	sp, #12
  403852:	bdf0      	pop	{r4, r5, r6, r7, pc}
		M2M_ERR("failed to de-initialize\n");
  403854:	f240 2231 	movw	r2, #561	; 0x231
  403858:	4911      	ldr	r1, [pc, #68]	; (4038a0 <chip_deinit+0xac>)
  40385a:	4812      	ldr	r0, [pc, #72]	; (4038a4 <chip_deinit+0xb0>)
  40385c:	4c12      	ldr	r4, [pc, #72]	; (4038a8 <chip_deinit+0xb4>)
  40385e:	47a0      	blx	r4
  403860:	4812      	ldr	r0, [pc, #72]	; (4038ac <chip_deinit+0xb8>)
  403862:	47a0      	blx	r4
  403864:	4812      	ldr	r0, [pc, #72]	; (4038b0 <chip_deinit+0xbc>)
  403866:	47a0      	blx	r4
  403868:	e7cf      	b.n	40380a <chip_deinit+0x16>
		M2M_ERR("Error while writing reg\n");
  40386a:	f240 2237 	movw	r2, #567	; 0x237
  40386e:	490c      	ldr	r1, [pc, #48]	; (4038a0 <chip_deinit+0xac>)
  403870:	480c      	ldr	r0, [pc, #48]	; (4038a4 <chip_deinit+0xb0>)
  403872:	4c0d      	ldr	r4, [pc, #52]	; (4038a8 <chip_deinit+0xb4>)
  403874:	47a0      	blx	r4
  403876:	480f      	ldr	r0, [pc, #60]	; (4038b4 <chip_deinit+0xc0>)
  403878:	47a0      	blx	r4
  40387a:	480d      	ldr	r0, [pc, #52]	; (4038b0 <chip_deinit+0xbc>)
  40387c:	47a0      	blx	r4
		return ret;
  40387e:	e7e6      	b.n	40384e <chip_deinit+0x5a>
			M2M_ERR("Error while reading reg\n");
  403880:	f240 223e 	movw	r2, #574	; 0x23e
  403884:	4906      	ldr	r1, [pc, #24]	; (4038a0 <chip_deinit+0xac>)
  403886:	4807      	ldr	r0, [pc, #28]	; (4038a4 <chip_deinit+0xb0>)
  403888:	4c07      	ldr	r4, [pc, #28]	; (4038a8 <chip_deinit+0xb4>)
  40388a:	47a0      	blx	r4
  40388c:	480a      	ldr	r0, [pc, #40]	; (4038b8 <chip_deinit+0xc4>)
  40388e:	47a0      	blx	r4
  403890:	4807      	ldr	r0, [pc, #28]	; (4038b0 <chip_deinit+0xbc>)
  403892:	47a0      	blx	r4
			return ret;
  403894:	e7db      	b.n	40384e <chip_deinit+0x5a>
  403896:	bf00      	nop
  403898:	004038e1 	.word	0x004038e1
  40389c:	004038ed 	.word	0x004038ed
  4038a0:	0040ce1c 	.word	0x0040ce1c
  4038a4:	0040c9dc 	.word	0x0040c9dc
  4038a8:	00406515 	.word	0x00406515
  4038ac:	0040ce28 	.word	0x0040ce28
  4038b0:	0040ca08 	.word	0x0040ca08
  4038b4:	0040ce44 	.word	0x0040ce44
  4038b8:	0040ce60 	.word	0x0040ce60

004038bc <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
  4038bc:	b508      	push	{r3, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_init(pvInitVal);
  4038be:	4b01      	ldr	r3, [pc, #4]	; (4038c4 <nm_bus_iface_init+0x8>)
  4038c0:	4798      	blx	r3

	return ret;
}
  4038c2:	bd08      	pop	{r3, pc}
  4038c4:	00402375 	.word	0x00402375

004038c8 <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
  4038c8:	b508      	push	{r3, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_deinit();
  4038ca:	4b01      	ldr	r3, [pc, #4]	; (4038d0 <nm_bus_iface_deinit+0x8>)
  4038cc:	4798      	blx	r3

	return ret;
}
  4038ce:	bd08      	pop	{r3, pc}
  4038d0:	00402565 	.word	0x00402565

004038d4 <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
  4038d4:	b508      	push	{r3, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
  4038d6:	4b01      	ldr	r3, [pc, #4]	; (4038dc <nm_read_reg+0x8>)
  4038d8:	4798      	blx	r3
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
  4038da:	bd08      	pop	{r3, pc}
  4038dc:	00404129 	.word	0x00404129

004038e0 <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
  4038e0:	b508      	push	{r3, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
  4038e2:	4b01      	ldr	r3, [pc, #4]	; (4038e8 <nm_read_reg_with_ret+0x8>)
  4038e4:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
  4038e6:	bd08      	pop	{r3, pc}
  4038e8:	00404141 	.word	0x00404141

004038ec <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
  4038ec:	b508      	push	{r3, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
  4038ee:	4b01      	ldr	r3, [pc, #4]	; (4038f4 <nm_write_reg+0x8>)
  4038f0:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
  4038f2:	bd08      	pop	{r3, pc}
  4038f4:	00404159 	.word	0x00404159

004038f8 <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
  4038f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4038fc:	4607      	mov	r7, r0
  4038fe:	4689      	mov	r9, r1
  403900:	4615      	mov	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
  403902:	4b12      	ldr	r3, [pc, #72]	; (40394c <nm_read_block+0x54>)
  403904:	f8b3 8000 	ldrh.w	r8, [r3]
  403908:	f1a8 0808 	sub.w	r8, r8, #8
  40390c:	fa1f f888 	uxth.w	r8, r8
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
  403910:	4542      	cmp	r2, r8
  403912:	d919      	bls.n	403948 <nm_read_block+0x50>
  403914:	4644      	mov	r4, r8
  403916:	2600      	movs	r6, #0
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
  403918:	f8df a034 	ldr.w	sl, [pc, #52]	; 403950 <nm_read_block+0x58>
  40391c:	4642      	mov	r2, r8
  40391e:	eb09 0106 	add.w	r1, r9, r6
  403922:	4638      	mov	r0, r7
  403924:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
  403926:	4603      	mov	r3, r0
  403928:	b958      	cbnz	r0, 403942 <nm_read_block+0x4a>
			u32Sz -= u16MaxTrxSz;
  40392a:	1b2d      	subs	r5, r5, r4
			off += u16MaxTrxSz;
  40392c:	4426      	add	r6, r4
			u32Addr += u16MaxTrxSz;
  40392e:	4427      	add	r7, r4
		if(u32Sz <= u16MaxTrxSz)
  403930:	42a5      	cmp	r5, r4
  403932:	d8f3      	bhi.n	40391c <nm_read_block+0x24>
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
  403934:	b2aa      	uxth	r2, r5
  403936:	eb09 0106 	add.w	r1, r9, r6
  40393a:	4638      	mov	r0, r7
  40393c:	4b04      	ldr	r3, [pc, #16]	; (403950 <nm_read_block+0x58>)
  40393e:	4798      	blx	r3
  403940:	4603      	mov	r3, r0
		}
	}

	return s8Ret;
}
  403942:	4618      	mov	r0, r3
  403944:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	uint32 off = 0;
  403948:	2600      	movs	r6, #0
  40394a:	e7f3      	b.n	403934 <nm_read_block+0x3c>
  40394c:	20400010 	.word	0x20400010
  403950:	00404285 	.word	0x00404285

00403954 <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
  403954:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403958:	4607      	mov	r7, r0
  40395a:	4689      	mov	r9, r1
  40395c:	4615      	mov	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
  40395e:	4b12      	ldr	r3, [pc, #72]	; (4039a8 <nm_write_block+0x54>)
  403960:	f8b3 8000 	ldrh.w	r8, [r3]
  403964:	f1a8 0808 	sub.w	r8, r8, #8
  403968:	fa1f f888 	uxth.w	r8, r8
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
  40396c:	4542      	cmp	r2, r8
  40396e:	d919      	bls.n	4039a4 <nm_write_block+0x50>
  403970:	4644      	mov	r4, r8
  403972:	2600      	movs	r6, #0
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
  403974:	f8df a034 	ldr.w	sl, [pc, #52]	; 4039ac <nm_write_block+0x58>
  403978:	4642      	mov	r2, r8
  40397a:	eb09 0106 	add.w	r1, r9, r6
  40397e:	4638      	mov	r0, r7
  403980:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
  403982:	4603      	mov	r3, r0
  403984:	b958      	cbnz	r0, 40399e <nm_write_block+0x4a>
			u32Sz -= u16MaxTrxSz;
  403986:	1b2d      	subs	r5, r5, r4
			off += u16MaxTrxSz;
  403988:	4426      	add	r6, r4
			u32Addr += u16MaxTrxSz;
  40398a:	4427      	add	r7, r4
		if(u32Sz <= u16MaxTrxSz)
  40398c:	42a5      	cmp	r5, r4
  40398e:	d8f3      	bhi.n	403978 <nm_write_block+0x24>
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
  403990:	b2aa      	uxth	r2, r5
  403992:	eb09 0106 	add.w	r1, r9, r6
  403996:	4638      	mov	r0, r7
  403998:	4b04      	ldr	r3, [pc, #16]	; (4039ac <nm_write_block+0x58>)
  40399a:	4798      	blx	r3
  40399c:	4603      	mov	r3, r0
		}
	}

	return s8Ret;
}
  40399e:	4618      	mov	r0, r3
  4039a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	uint32 off = 0;
  4039a4:	2600      	movs	r6, #0
  4039a6:	e7f3      	b.n	403990 <nm_write_block+0x3c>
  4039a8:	20400010 	.word	0x20400010
  4039ac:	0040434d 	.word	0x0040434d

004039b0 <nm_get_firmware_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_info(tstrM2mRev* M2mRev)
{
  4039b0:	b530      	push	{r4, r5, lr}
  4039b2:	b083      	sub	sp, #12
  4039b4:	4604      	mov	r4, r0
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
  4039b6:	a902      	add	r1, sp, #8
  4039b8:	2300      	movs	r3, #0
  4039ba:	f841 3d04 	str.w	r3, [r1, #-4]!
	sint8	ret = M2M_SUCCESS;

	ret = nm_read_reg_with_ret(NMI_REV_REG, &reg);
  4039be:	4824      	ldr	r0, [pc, #144]	; (403a50 <nm_get_firmware_info+0xa0>)
  4039c0:	4b24      	ldr	r3, [pc, #144]	; (403a54 <nm_get_firmware_info+0xa4>)
  4039c2:	4798      	blx	r3
  4039c4:	4605      	mov	r5, r0
	//In case the Firmware running is ATE fw
	if(M2M_ATE_FW_IS_UP_VALUE == reg)
  4039c6:	9a01      	ldr	r2, [sp, #4]
  4039c8:	4b23      	ldr	r3, [pc, #140]	; (403a58 <nm_get_firmware_info+0xa8>)
  4039ca:	429a      	cmp	r2, r3
  4039cc:	d039      	beq.n	403a42 <nm_get_firmware_info+0x92>
	{
		//Read FW info again from the register specified for ATE
		ret = nm_read_reg_with_ret(NMI_REV_REG_ATE, &reg);
	}
	M2mRev->u8DriverMajor	= M2M_GET_DRV_MAJOR(reg);
  4039ce:	9b01      	ldr	r3, [sp, #4]
  4039d0:	0c1a      	lsrs	r2, r3, #16
  4039d2:	b291      	uxth	r1, r2
  4039d4:	0a08      	lsrs	r0, r1, #8
  4039d6:	71e0      	strb	r0, [r4, #7]
	M2mRev->u8DriverMinor   = M2M_GET_DRV_MINOR(reg);
  4039d8:	f3c1 1103 	ubfx	r1, r1, #4, #4
  4039dc:	7221      	strb	r1, [r4, #8]
	M2mRev->u8DriverPatch	= M2M_GET_DRV_PATCH(reg);
  4039de:	f002 020f 	and.w	r2, r2, #15
  4039e2:	7262      	strb	r2, [r4, #9]
	M2mRev->u8FirmwareMajor	= M2M_GET_FW_MAJOR(reg);
  4039e4:	b29a      	uxth	r2, r3
  4039e6:	0a11      	lsrs	r1, r2, #8
  4039e8:	7121      	strb	r1, [r4, #4]
	M2mRev->u8FirmwareMinor = M2M_GET_FW_MINOR(reg);
  4039ea:	f3c2 1203 	ubfx	r2, r2, #4, #4
  4039ee:	7162      	strb	r2, [r4, #5]
	M2mRev->u8FirmwarePatch = M2M_GET_FW_PATCH(reg);
  4039f0:	f003 030f 	and.w	r3, r3, #15
  4039f4:	71a3      	strb	r3, [r4, #6]
	M2mRev->u32Chipid	= nmi_get_chipid();
  4039f6:	4b19      	ldr	r3, [pc, #100]	; (403a5c <nm_get_firmware_info+0xac>)
  4039f8:	4798      	blx	r3
  4039fa:	6020      	str	r0, [r4, #0]
	
	curr_firm_ver   = M2M_MAKE_VERSION(M2mRev->u8FirmwareMajor, M2mRev->u8FirmwareMinor,M2mRev->u8FirmwarePatch);
  4039fc:	7922      	ldrb	r2, [r4, #4]
  4039fe:	79a3      	ldrb	r3, [r4, #6]
  403a00:	f003 030f 	and.w	r3, r3, #15
  403a04:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  403a08:	7962      	ldrb	r2, [r4, #5]
  403a0a:	0112      	lsls	r2, r2, #4
  403a0c:	b2d2      	uxtb	r2, r2
  403a0e:	4313      	orrs	r3, r2
	curr_drv_ver    = M2M_MAKE_VERSION(M2M_DRIVER_VERSION_MAJOR_NO, M2M_DRIVER_VERSION_MINOR_NO, M2M_DRIVER_VERSION_PATCH_NO);
	min_req_drv_ver = M2M_MAKE_VERSION(M2mRev->u8DriverMajor, M2mRev->u8DriverMinor,M2mRev->u8DriverPatch);
  403a10:	79e1      	ldrb	r1, [r4, #7]
  403a12:	7a62      	ldrb	r2, [r4, #9]
  403a14:	f002 020f 	and.w	r2, r2, #15
  403a18:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  403a1c:	7a21      	ldrb	r1, [r4, #8]
  403a1e:	0109      	lsls	r1, r1, #4
  403a20:	b2c9      	uxtb	r1, r1
	if(curr_drv_ver <  min_req_drv_ver) {
  403a22:	430a      	orrs	r2, r1
  403a24:	f241 3130 	movw	r1, #4912	; 0x1330
		/*The current driver version should be larger or equal 
		than the min driver that the current firmware support  */
		ret = M2M_ERR_FW_VER_MISMATCH;
  403a28:	428a      	cmp	r2, r1
  403a2a:	bf88      	it	hi
  403a2c:	f06f 050c 	mvnhi.w	r5, #12
	}
	if(curr_drv_ver >  curr_firm_ver) {
  403a30:	f241 322f 	movw	r2, #4911	; 0x132f
		/*The current driver should be equal or less than the firmware version*/
		ret = M2M_ERR_FW_VER_MISMATCH;
  403a34:	4293      	cmp	r3, r2
	}
	return ret;
}
  403a36:	bf8c      	ite	hi
  403a38:	4628      	movhi	r0, r5
  403a3a:	f06f 000c 	mvnls.w	r0, #12
  403a3e:	b003      	add	sp, #12
  403a40:	bd30      	pop	{r4, r5, pc}
		ret = nm_read_reg_with_ret(NMI_REV_REG_ATE, &reg);
  403a42:	a901      	add	r1, sp, #4
  403a44:	f241 0048 	movw	r0, #4168	; 0x1048
  403a48:	4b02      	ldr	r3, [pc, #8]	; (403a54 <nm_get_firmware_info+0xa4>)
  403a4a:	4798      	blx	r3
  403a4c:	4605      	mov	r5, r0
  403a4e:	e7be      	b.n	4039ce <nm_get_firmware_info+0x1e>
  403a50:	000207ac 	.word	0x000207ac
  403a54:	004038e1 	.word	0x004038e1
  403a58:	d75dc1c3 	.word	0xd75dc1c3
  403a5c:	004035e5 	.word	0x004035e5

00403a60 <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
  403a60:	b538      	push	{r3, r4, r5, lr}
	sint8 ret = M2M_SUCCESS;
	uint8 u8Mode;
	
	if(NULL != arg) {
  403a62:	2800      	cmp	r0, #0
  403a64:	d037      	beq.n	403ad6 <nm_drv_init+0x76>
		u8Mode = *((uint8 *)arg);
  403a66:	7804      	ldrb	r4, [r0, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
  403a68:	1e63      	subs	r3, r4, #1
  403a6a:	b2db      	uxtb	r3, r3
			u8Mode = M2M_WIFI_MODE_NORMAL;
  403a6c:	2b04      	cmp	r3, #4
  403a6e:	bf28      	it	cs
  403a70:	2401      	movcs	r4, #1
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
	}
	
	ret = nm_bus_iface_init(NULL);
  403a72:	2000      	movs	r0, #0
  403a74:	4b1e      	ldr	r3, [pc, #120]	; (403af0 <nm_drv_init+0x90>)
  403a76:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  403a78:	4605      	mov	r5, r0
  403a7a:	2800      	cmp	r0, #0
  403a7c:	d12d      	bne.n	403ada <nm_drv_init+0x7a>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
  403a7e:	481d      	ldr	r0, [pc, #116]	; (403af4 <nm_drv_init+0x94>)
  403a80:	4d1d      	ldr	r5, [pc, #116]	; (403af8 <nm_drv_init+0x98>)
  403a82:	47a8      	blx	r5
  403a84:	4b1d      	ldr	r3, [pc, #116]	; (403afc <nm_drv_init+0x9c>)
  403a86:	4798      	blx	r3
  403a88:	4601      	mov	r1, r0
  403a8a:	481d      	ldr	r0, [pc, #116]	; (403b00 <nm_drv_init+0xa0>)
  403a8c:	47a8      	blx	r5
  403a8e:	481d      	ldr	r0, [pc, #116]	; (403b04 <nm_drv_init+0xa4>)
  403a90:	47a8      	blx	r5
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
  403a92:	4b1d      	ldr	r3, [pc, #116]	; (403b08 <nm_drv_init+0xa8>)
  403a94:	4798      	blx	r3
	ret = cpu_start();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	ret = wait_for_bootrom(u8Mode);
  403a96:	4620      	mov	r0, r4
  403a98:	4b1c      	ldr	r3, [pc, #112]	; (403b0c <nm_drv_init+0xac>)
  403a9a:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  403a9c:	4605      	mov	r5, r0
  403a9e:	b9b0      	cbnz	r0, 403ace <nm_drv_init+0x6e>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
  403aa0:	4620      	mov	r0, r4
  403aa2:	4b1b      	ldr	r3, [pc, #108]	; (403b10 <nm_drv_init+0xb0>)
  403aa4:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  403aa6:	4605      	mov	r5, r0
  403aa8:	b988      	cbnz	r0, 403ace <nm_drv_init+0x6e>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
  403aaa:	3c02      	subs	r4, #2
  403aac:	b2e4      	uxtb	r4, r4
  403aae:	2c01      	cmp	r4, #1
  403ab0:	d90f      	bls.n	403ad2 <nm_drv_init+0x72>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
  403ab2:	4b18      	ldr	r3, [pc, #96]	; (403b14 <nm_drv_init+0xb4>)
  403ab4:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  403ab6:	4605      	mov	r5, r0
  403ab8:	b158      	cbz	r0, 403ad2 <nm_drv_init+0x72>
		M2M_ERR("failed to enable interrupts..\n");
  403aba:	f44f 72ae 	mov.w	r2, #348	; 0x15c
  403abe:	4916      	ldr	r1, [pc, #88]	; (403b18 <nm_drv_init+0xb8>)
  403ac0:	4816      	ldr	r0, [pc, #88]	; (403b1c <nm_drv_init+0xbc>)
  403ac2:	4c0d      	ldr	r4, [pc, #52]	; (403af8 <nm_drv_init+0x98>)
  403ac4:	47a0      	blx	r4
  403ac6:	4816      	ldr	r0, [pc, #88]	; (403b20 <nm_drv_init+0xc0>)
  403ac8:	47a0      	blx	r4
  403aca:	480e      	ldr	r0, [pc, #56]	; (403b04 <nm_drv_init+0xa4>)
  403acc:	47a0      	blx	r4
		goto ERR2;
	}
	
	return ret;
ERR2:
	nm_bus_iface_deinit();
  403ace:	4b15      	ldr	r3, [pc, #84]	; (403b24 <nm_drv_init+0xc4>)
  403ad0:	4798      	blx	r3
ERR1:
	return ret;
}
  403ad2:	4628      	mov	r0, r5
  403ad4:	bd38      	pop	{r3, r4, r5, pc}
		u8Mode = M2M_WIFI_MODE_NORMAL;
  403ad6:	2401      	movs	r4, #1
  403ad8:	e7cb      	b.n	403a72 <nm_drv_init+0x12>
		M2M_ERR("[nmi start]: fail init bus\n");
  403ada:	f44f 7292 	mov.w	r2, #292	; 0x124
  403ade:	490e      	ldr	r1, [pc, #56]	; (403b18 <nm_drv_init+0xb8>)
  403ae0:	480e      	ldr	r0, [pc, #56]	; (403b1c <nm_drv_init+0xbc>)
  403ae2:	4c05      	ldr	r4, [pc, #20]	; (403af8 <nm_drv_init+0x98>)
  403ae4:	47a0      	blx	r4
  403ae6:	4810      	ldr	r0, [pc, #64]	; (403b28 <nm_drv_init+0xc8>)
  403ae8:	47a0      	blx	r4
  403aea:	4806      	ldr	r0, [pc, #24]	; (403b04 <nm_drv_init+0xa4>)
  403aec:	47a0      	blx	r4
		goto ERR1;
  403aee:	e7f0      	b.n	403ad2 <nm_drv_init+0x72>
  403af0:	004038bd 	.word	0x004038bd
  403af4:	0040ccb0 	.word	0x0040ccb0
  403af8:	00406515 	.word	0x00406515
  403afc:	004035e5 	.word	0x004035e5
  403b00:	0040cfa8 	.word	0x0040cfa8
  403b04:	0040ca08 	.word	0x0040ca08
  403b08:	00404171 	.word	0x00404171
  403b0c:	00403699 	.word	0x00403699
  403b10:	00403775 	.word	0x00403775
  403b14:	0040357d 	.word	0x0040357d
  403b18:	0040cef0 	.word	0x0040cef0
  403b1c:	0040c9dc 	.word	0x0040c9dc
  403b20:	0040cf6c 	.word	0x0040cf6c
  403b24:	004038c9 	.word	0x004038c9
  403b28:	0040cf8c 	.word	0x0040cf8c

00403b2c <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
  403b2c:	b538      	push	{r3, r4, r5, lr}
	sint8 ret;

	ret = chip_deinit();
  403b2e:	4b19      	ldr	r3, [pc, #100]	; (403b94 <nm_drv_deinit+0x68>)
  403b30:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  403b32:	b958      	cbnz	r0, 403b4c <nm_drv_deinit+0x20>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
		goto ERR1;
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
  403b34:	2000      	movs	r0, #0
  403b36:	4b18      	ldr	r3, [pc, #96]	; (403b98 <nm_drv_deinit+0x6c>)
  403b38:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  403b3a:	4604      	mov	r4, r0
  403b3c:	b998      	cbnz	r0, 403b66 <nm_drv_deinit+0x3a>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
		goto ERR1;
	}

	ret = nm_bus_iface_deinit();
  403b3e:	4b17      	ldr	r3, [pc, #92]	; (403b9c <nm_drv_deinit+0x70>)
  403b40:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  403b42:	4604      	mov	r4, r0
  403b44:	b9d0      	cbnz	r0, 403b7c <nm_drv_deinit+0x50>
		M2M_ERR("[nmi stop]: fail init bus\n");
		goto ERR1;
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
  403b46:	4b16      	ldr	r3, [pc, #88]	; (403ba0 <nm_drv_deinit+0x74>)
  403b48:	4798      	blx	r3
  403b4a:	e00a      	b.n	403b62 <nm_drv_deinit+0x36>
  403b4c:	4604      	mov	r4, r0
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
  403b4e:	f44f 72ba 	mov.w	r2, #372	; 0x174
  403b52:	4914      	ldr	r1, [pc, #80]	; (403ba4 <nm_drv_deinit+0x78>)
  403b54:	4814      	ldr	r0, [pc, #80]	; (403ba8 <nm_drv_deinit+0x7c>)
  403b56:	4d15      	ldr	r5, [pc, #84]	; (403bac <nm_drv_deinit+0x80>)
  403b58:	47a8      	blx	r5
  403b5a:	4815      	ldr	r0, [pc, #84]	; (403bb0 <nm_drv_deinit+0x84>)
  403b5c:	47a8      	blx	r5
  403b5e:	4815      	ldr	r0, [pc, #84]	; (403bb4 <nm_drv_deinit+0x88>)
  403b60:	47a8      	blx	r5
#endif

ERR1:
	return ret;
}
  403b62:	4620      	mov	r0, r4
  403b64:	bd38      	pop	{r3, r4, r5, pc}
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
  403b66:	f240 127b 	movw	r2, #379	; 0x17b
  403b6a:	490e      	ldr	r1, [pc, #56]	; (403ba4 <nm_drv_deinit+0x78>)
  403b6c:	480e      	ldr	r0, [pc, #56]	; (403ba8 <nm_drv_deinit+0x7c>)
  403b6e:	4d0f      	ldr	r5, [pc, #60]	; (403bac <nm_drv_deinit+0x80>)
  403b70:	47a8      	blx	r5
  403b72:	4811      	ldr	r0, [pc, #68]	; (403bb8 <nm_drv_deinit+0x8c>)
  403b74:	47a8      	blx	r5
  403b76:	480f      	ldr	r0, [pc, #60]	; (403bb4 <nm_drv_deinit+0x88>)
  403b78:	47a8      	blx	r5
		goto ERR1;
  403b7a:	e7f2      	b.n	403b62 <nm_drv_deinit+0x36>
		M2M_ERR("[nmi stop]: fail init bus\n");
  403b7c:	f240 1281 	movw	r2, #385	; 0x181
  403b80:	4908      	ldr	r1, [pc, #32]	; (403ba4 <nm_drv_deinit+0x78>)
  403b82:	4809      	ldr	r0, [pc, #36]	; (403ba8 <nm_drv_deinit+0x7c>)
  403b84:	4d09      	ldr	r5, [pc, #36]	; (403bac <nm_drv_deinit+0x80>)
  403b86:	47a8      	blx	r5
  403b88:	480c      	ldr	r0, [pc, #48]	; (403bbc <nm_drv_deinit+0x90>)
  403b8a:	47a8      	blx	r5
  403b8c:	4809      	ldr	r0, [pc, #36]	; (403bb4 <nm_drv_deinit+0x88>)
  403b8e:	47a8      	blx	r5
		goto ERR1;
  403b90:	e7e7      	b.n	403b62 <nm_drv_deinit+0x36>
  403b92:	bf00      	nop
  403b94:	004037f5 	.word	0x004037f5
  403b98:	00404bd1 	.word	0x00404bd1
  403b9c:	004038c9 	.word	0x004038c9
  403ba0:	0040411d 	.word	0x0040411d
  403ba4:	0040cefc 	.word	0x0040cefc
  403ba8:	0040c9dc 	.word	0x0040c9dc
  403bac:	00406515 	.word	0x00406515
  403bb0:	0040cf0c 	.word	0x0040cf0c
  403bb4:	0040ca08 	.word	0x0040ca08
  403bb8:	0040cf2c 	.word	0x0040cf2c
  403bbc:	0040cf50 	.word	0x0040cf50

00403bc0 <nmi_spi_read>:
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static uint8 	gu8Crc_off	=   0;

static sint8 nmi_spi_read(uint8* b, uint16 sz)
{
  403bc0:	b500      	push	{lr}
  403bc2:	b085      	sub	sp, #20
	tstrNmSpiRw spi;
	spi.pu8InBuf = NULL;
  403bc4:	2300      	movs	r3, #0
  403bc6:	9301      	str	r3, [sp, #4]
	spi.pu8OutBuf = b;
  403bc8:	9002      	str	r0, [sp, #8]
	spi.u16Sz = sz;
  403bca:	f8ad 100c 	strh.w	r1, [sp, #12]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
  403bce:	a901      	add	r1, sp, #4
  403bd0:	2003      	movs	r0, #3
  403bd2:	4b02      	ldr	r3, [pc, #8]	; (403bdc <nmi_spi_read+0x1c>)
  403bd4:	4798      	blx	r3
}
  403bd6:	b005      	add	sp, #20
  403bd8:	f85d fb04 	ldr.w	pc, [sp], #4
  403bdc:	00402491 	.word	0x00402491

00403be0 <spi_cmd_rsp>:

	return result;
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
  403be0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403be4:	b082      	sub	sp, #8
  403be6:	4605      	mov	r5, r0

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
		 (cmd == CMD_TERMINATE) ||
  403be8:	f100 033b 	add.w	r3, r0, #59	; 0x3b
  403bec:	b2db      	uxtb	r3, r3
  403bee:	2b01      	cmp	r3, #1
  403bf0:	d927      	bls.n	403c42 <spi_cmd_rsp+0x62>
  403bf2:	28cf      	cmp	r0, #207	; 0xcf
  403bf4:	d025      	beq.n	403c42 <spi_cmd_rsp+0x62>
{
  403bf6:	240b      	movs	r4, #11

	/* wait for response */
	s8RetryCnt = 10;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  403bf8:	f04f 0801 	mov.w	r8, #1
  403bfc:	4f23      	ldr	r7, [pc, #140]	; (403c8c <spi_cmd_rsp+0xac>)
  403bfe:	4641      	mov	r1, r8
  403c00:	f10d 0007 	add.w	r0, sp, #7
  403c04:	47b8      	blx	r7
  403c06:	4606      	mov	r6, r0
  403c08:	bb20      	cbnz	r0, 403c54 <spi_cmd_rsp+0x74>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
  403c0a:	f89d 3007 	ldrb.w	r3, [sp, #7]
  403c0e:	42ab      	cmp	r3, r5
  403c10:	d02c      	beq.n	403c6c <spi_cmd_rsp+0x8c>
  403c12:	1e63      	subs	r3, r4, #1
  403c14:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
  403c18:	d1f1      	bne.n	403bfe <spi_cmd_rsp+0x1e>
  403c1a:	240b      	movs	r4, #11
	**/
	/* wait for response */
	s8RetryCnt = 10;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  403c1c:	2701      	movs	r7, #1
  403c1e:	4d1b      	ldr	r5, [pc, #108]	; (403c8c <spi_cmd_rsp+0xac>)
  403c20:	4639      	mov	r1, r7
  403c22:	f10d 0007 	add.w	r0, sp, #7
  403c26:	47a8      	blx	r5
  403c28:	bb10      	cbnz	r0, 403c70 <spi_cmd_rsp+0x90>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
  403c2a:	f89d 3007 	ldrb.w	r3, [sp, #7]
  403c2e:	b353      	cbz	r3, 403c86 <spi_cmd_rsp+0xa6>
  403c30:	1e63      	subs	r3, r4, #1
  403c32:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
  403c36:	d1f3      	bne.n	403c20 <spi_cmd_rsp+0x40>
	sint8 result = N_OK;
  403c38:	2601      	movs	r6, #1

_fail_:

	return result;
}
  403c3a:	4630      	mov	r0, r6
  403c3c:	b002      	add	sp, #8
  403c3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  403c42:	2101      	movs	r1, #1
  403c44:	f10d 0007 	add.w	r0, sp, #7
  403c48:	4b10      	ldr	r3, [pc, #64]	; (403c8c <spi_cmd_rsp+0xac>)
  403c4a:	4798      	blx	r3
  403c4c:	2800      	cmp	r0, #0
  403c4e:	d0d2      	beq.n	403bf6 <spi_cmd_rsp+0x16>
			result = N_FAIL;
  403c50:	2600      	movs	r6, #0
  403c52:	e7f2      	b.n	403c3a <spi_cmd_rsp+0x5a>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
  403c54:	f240 1227 	movw	r2, #295	; 0x127
  403c58:	490d      	ldr	r1, [pc, #52]	; (403c90 <spi_cmd_rsp+0xb0>)
  403c5a:	480e      	ldr	r0, [pc, #56]	; (403c94 <spi_cmd_rsp+0xb4>)
  403c5c:	4c0e      	ldr	r4, [pc, #56]	; (403c98 <spi_cmd_rsp+0xb8>)
  403c5e:	47a0      	blx	r4
  403c60:	480e      	ldr	r0, [pc, #56]	; (403c9c <spi_cmd_rsp+0xbc>)
  403c62:	47a0      	blx	r4
  403c64:	480e      	ldr	r0, [pc, #56]	; (403ca0 <spi_cmd_rsp+0xc0>)
  403c66:	47a0      	blx	r4
			result = N_FAIL;
  403c68:	2600      	movs	r6, #0
			goto _fail_;
  403c6a:	e7e6      	b.n	403c3a <spi_cmd_rsp+0x5a>
  403c6c:	240b      	movs	r4, #11
  403c6e:	e7d5      	b.n	403c1c <spi_cmd_rsp+0x3c>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
  403c70:	f240 1235 	movw	r2, #309	; 0x135
  403c74:	4906      	ldr	r1, [pc, #24]	; (403c90 <spi_cmd_rsp+0xb0>)
  403c76:	4807      	ldr	r0, [pc, #28]	; (403c94 <spi_cmd_rsp+0xb4>)
  403c78:	4c07      	ldr	r4, [pc, #28]	; (403c98 <spi_cmd_rsp+0xb8>)
  403c7a:	47a0      	blx	r4
  403c7c:	4807      	ldr	r0, [pc, #28]	; (403c9c <spi_cmd_rsp+0xbc>)
  403c7e:	47a0      	blx	r4
  403c80:	4807      	ldr	r0, [pc, #28]	; (403ca0 <spi_cmd_rsp+0xc0>)
  403c82:	47a0      	blx	r4
			goto _fail_;
  403c84:	e7d9      	b.n	403c3a <spi_cmd_rsp+0x5a>
	sint8 result = N_OK;
  403c86:	2601      	movs	r6, #1
  403c88:	e7d7      	b.n	403c3a <spi_cmd_rsp+0x5a>
  403c8a:	bf00      	nop
  403c8c:	00403bc1 	.word	0x00403bc1
  403c90:	0040cfc0 	.word	0x0040cfc0
  403c94:	0040c9dc 	.word	0x0040c9dc
  403c98:	00406515 	.word	0x00406515
  403c9c:	0040d400 	.word	0x0040d400
  403ca0:	0040ca08 	.word	0x0040ca08

00403ca4 <spi_data_read>:

static sint8 spi_data_read(uint8 *b, uint16 sz,uint8 clockless)
{
  403ca4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403ca8:	b085      	sub	sp, #20
  403caa:	4683      	mov	fp, r0
  403cac:	468a      	mov	sl, r1
  403cae:	4617      	mov	r7, r2
	uint8 rsp;

	/**
		Data
	**/
	ix = 0;
  403cb0:	f04f 0900 	mov.w	r9, #0
		/**
			Data Respnose header
		**/
		retry = 10;
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  403cb4:	4d37      	ldr	r5, [pc, #220]	; (403d94 <spi_data_read+0xf0>)
  403cb6:	e027      	b.n	403d08 <spi_data_read+0x64>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
  403cb8:	f240 1257 	movw	r2, #343	; 0x157
  403cbc:	4936      	ldr	r1, [pc, #216]	; (403d98 <spi_data_read+0xf4>)
  403cbe:	4837      	ldr	r0, [pc, #220]	; (403d9c <spi_data_read+0xf8>)
  403cc0:	4c37      	ldr	r4, [pc, #220]	; (403da0 <spi_data_read+0xfc>)
  403cc2:	47a0      	blx	r4
  403cc4:	4837      	ldr	r0, [pc, #220]	; (403da4 <spi_data_read+0x100>)
  403cc6:	47a0      	blx	r4
  403cc8:	4837      	ldr	r0, [pc, #220]	; (403da8 <spi_data_read+0x104>)
  403cca:	47a0      	blx	r4
  403ccc:	2300      	movs	r3, #0
  403cce:	9301      	str	r3, [sp, #4]
		sz -= nbytes;

	} while (sz);

	return result;
}
  403cd0:	9801      	ldr	r0, [sp, #4]
  403cd2:	b005      	add	sp, #20
  403cd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (retry <= 0) {
  403cd8:	2c00      	cmp	r4, #0
  403cda:	dd2e      	ble.n	403d3a <spi_data_read+0x96>
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
  403cdc:	4641      	mov	r1, r8
  403cde:	eb0b 0009 	add.w	r0, fp, r9
  403ce2:	47a8      	blx	r5
  403ce4:	4604      	mov	r4, r0
  403ce6:	2800      	cmp	r0, #0
  403ce8:	d134      	bne.n	403d54 <spi_data_read+0xb0>
		if(!clockless)
  403cea:	b91f      	cbnz	r7, 403cf4 <spi_data_read+0x50>
			if (!gu8Crc_off) {
  403cec:	4b2f      	ldr	r3, [pc, #188]	; (403dac <spi_data_read+0x108>)
  403cee:	781b      	ldrb	r3, [r3, #0]
  403cf0:	2b00      	cmp	r3, #0
  403cf2:	d03a      	beq.n	403d6a <spi_data_read+0xc6>
		ix += nbytes;
  403cf4:	44c1      	add	r9, r8
  403cf6:	fa0f f989 	sxth.w	r9, r9
		sz -= nbytes;
  403cfa:	ebaa 0a08 	sub.w	sl, sl, r8
  403cfe:	fa1f fa8a 	uxth.w	sl, sl
	} while (sz);
  403d02:	f1ba 0f00 	cmp.w	sl, #0
  403d06:	d041      	beq.n	403d8c <spi_data_read+0xe8>
  403d08:	46d0      	mov	r8, sl
  403d0a:	f5ba 5f00 	cmp.w	sl, #8192	; 0x2000
  403d0e:	bf28      	it	cs
  403d10:	f44f 5800 	movcs.w	r8, #8192	; 0x2000
		retry = 10;
  403d14:	240a      	movs	r4, #10
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  403d16:	2601      	movs	r6, #1
  403d18:	4631      	mov	r1, r6
  403d1a:	f10d 000b 	add.w	r0, sp, #11
  403d1e:	47a8      	blx	r5
  403d20:	9001      	str	r0, [sp, #4]
  403d22:	2800      	cmp	r0, #0
  403d24:	d1c8      	bne.n	403cb8 <spi_data_read+0x14>
			if (((rsp >> 4) & 0xf) == 0xf)
  403d26:	f89d 300b 	ldrb.w	r3, [sp, #11]
  403d2a:	091b      	lsrs	r3, r3, #4
  403d2c:	2b0f      	cmp	r3, #15
  403d2e:	d0d3      	beq.n	403cd8 <spi_data_read+0x34>
  403d30:	3c01      	subs	r4, #1
  403d32:	b224      	sxth	r4, r4
		} while (retry--);
  403d34:	f1b4 3fff 	cmp.w	r4, #4294967295
  403d38:	d1ee      	bne.n	403d18 <spi_data_read+0x74>
			M2M_ERR("[nmi spi]: Failed data response read...(%02x)\n", rsp);
  403d3a:	f240 1263 	movw	r2, #355	; 0x163
  403d3e:	4916      	ldr	r1, [pc, #88]	; (403d98 <spi_data_read+0xf4>)
  403d40:	4816      	ldr	r0, [pc, #88]	; (403d9c <spi_data_read+0xf8>)
  403d42:	4c17      	ldr	r4, [pc, #92]	; (403da0 <spi_data_read+0xfc>)
  403d44:	47a0      	blx	r4
  403d46:	f89d 100b 	ldrb.w	r1, [sp, #11]
  403d4a:	4819      	ldr	r0, [pc, #100]	; (403db0 <spi_data_read+0x10c>)
  403d4c:	47a0      	blx	r4
  403d4e:	4816      	ldr	r0, [pc, #88]	; (403da8 <spi_data_read+0x104>)
  403d50:	47a0      	blx	r4
			break;
  403d52:	e7bd      	b.n	403cd0 <spi_data_read+0x2c>
			M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
  403d54:	f44f 72b6 	mov.w	r2, #364	; 0x16c
  403d58:	490f      	ldr	r1, [pc, #60]	; (403d98 <spi_data_read+0xf4>)
  403d5a:	4810      	ldr	r0, [pc, #64]	; (403d9c <spi_data_read+0xf8>)
  403d5c:	4c10      	ldr	r4, [pc, #64]	; (403da0 <spi_data_read+0xfc>)
  403d5e:	47a0      	blx	r4
  403d60:	4814      	ldr	r0, [pc, #80]	; (403db4 <spi_data_read+0x110>)
  403d62:	47a0      	blx	r4
  403d64:	4810      	ldr	r0, [pc, #64]	; (403da8 <spi_data_read+0x104>)
  403d66:	47a0      	blx	r4
			break;
  403d68:	e7b2      	b.n	403cd0 <spi_data_read+0x2c>
				if (M2M_SUCCESS != nmi_spi_read(crc, 2)) {
  403d6a:	2102      	movs	r1, #2
  403d6c:	a803      	add	r0, sp, #12
  403d6e:	47a8      	blx	r5
  403d70:	2800      	cmp	r0, #0
  403d72:	d0bf      	beq.n	403cf4 <spi_data_read+0x50>
					M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
  403d74:	f240 1277 	movw	r2, #375	; 0x177
  403d78:	4907      	ldr	r1, [pc, #28]	; (403d98 <spi_data_read+0xf4>)
  403d7a:	4808      	ldr	r0, [pc, #32]	; (403d9c <spi_data_read+0xf8>)
  403d7c:	4d08      	ldr	r5, [pc, #32]	; (403da0 <spi_data_read+0xfc>)
  403d7e:	47a8      	blx	r5
  403d80:	480d      	ldr	r0, [pc, #52]	; (403db8 <spi_data_read+0x114>)
  403d82:	47a8      	blx	r5
  403d84:	4808      	ldr	r0, [pc, #32]	; (403da8 <spi_data_read+0x104>)
  403d86:	47a8      	blx	r5
					result = N_FAIL;
  403d88:	9401      	str	r4, [sp, #4]
					break;
  403d8a:	e7a1      	b.n	403cd0 <spi_data_read+0x2c>
  403d8c:	2301      	movs	r3, #1
  403d8e:	9301      	str	r3, [sp, #4]
  403d90:	e79e      	b.n	403cd0 <spi_data_read+0x2c>
  403d92:	bf00      	nop
  403d94:	00403bc1 	.word	0x00403bc1
  403d98:	0040cfcc 	.word	0x0040cfcc
  403d9c:	0040c9dc 	.word	0x0040c9dc
  403da0:	00406515 	.word	0x00406515
  403da4:	0040d434 	.word	0x0040d434
  403da8:	0040ca08 	.word	0x0040ca08
  403dac:	2040c360 	.word	0x2040c360
  403db0:	0040d468 	.word	0x0040d468
  403db4:	0040d498 	.word	0x0040d498
  403db8:	0040d4cc 	.word	0x0040d4cc

00403dbc <nmi_spi_write>:
{
  403dbc:	b500      	push	{lr}
  403dbe:	b085      	sub	sp, #20
	spi.pu8InBuf = b;
  403dc0:	9001      	str	r0, [sp, #4]
	spi.pu8OutBuf = NULL;
  403dc2:	2300      	movs	r3, #0
  403dc4:	9302      	str	r3, [sp, #8]
	spi.u16Sz = sz;
  403dc6:	f8ad 100c 	strh.w	r1, [sp, #12]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
  403dca:	a901      	add	r1, sp, #4
  403dcc:	2003      	movs	r0, #3
  403dce:	4b02      	ldr	r3, [pc, #8]	; (403dd8 <nmi_spi_write+0x1c>)
  403dd0:	4798      	blx	r3
}
  403dd2:	b005      	add	sp, #20
  403dd4:	f85d fb04 	ldr.w	pc, [sp], #4
  403dd8:	00402491 	.word	0x00402491

00403ddc <spi_cmd>:
{
  403ddc:	b570      	push	{r4, r5, r6, lr}
  403dde:	b084      	sub	sp, #16
  403de0:	f89d 4020 	ldrb.w	r4, [sp, #32]
	bc[0] = cmd;
  403de4:	f88d 0004 	strb.w	r0, [sp, #4]
	switch (cmd) {
  403de8:	38c1      	subs	r0, #193	; 0xc1
  403dea:	280e      	cmp	r0, #14
  403dec:	f200 80a2 	bhi.w	403f34 <spi_cmd+0x158>
  403df0:	e8df f000 	tbb	[pc, r0]
  403df4:	19664545 	.word	0x19664545
  403df8:	5454332a 	.word	0x5454332a
  403dfc:	a0a0087f 	.word	0xa0a0087f
  403e00:	a0a0      	.short	0xa0a0
  403e02:	3c          	.byte	0x3c
  403e03:	00          	.byte	0x00
		bc[1] = (uint8)(adr >> 16);
  403e04:	0c0b      	lsrs	r3, r1, #16
  403e06:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = (uint8)(adr >> 8);
  403e0a:	0a0b      	lsrs	r3, r1, #8
  403e0c:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = (uint8)adr;
  403e10:	f88d 1007 	strb.w	r1, [sp, #7]
		len = 5;
  403e14:	2105      	movs	r1, #5
		if (!gu8Crc_off)
  403e16:	4b55      	ldr	r3, [pc, #340]	; (403f6c <spi_cmd+0x190>)
  403e18:	781b      	ldrb	r3, [r3, #0]
  403e1a:	2b00      	cmp	r3, #0
  403e1c:	f000 808c 	beq.w	403f38 <spi_cmd+0x15c>
			len-=1;
  403e20:	3901      	subs	r1, #1
  403e22:	b2c9      	uxtb	r1, r1
  403e24:	e09a      	b.n	403f5c <spi_cmd+0x180>
		bc[1] = (uint8)(adr >> 8);
  403e26:	f3c1 2307 	ubfx	r3, r1, #8, #8
		if(clockless)  bc[1] |= (1 << 7);
  403e2a:	b944      	cbnz	r4, 403e3e <spi_cmd+0x62>
		bc[1] = (uint8)(adr >> 8);
  403e2c:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = (uint8)adr;
  403e30:	f88d 1006 	strb.w	r1, [sp, #6]
		bc[3] = 0x00;
  403e34:	2300      	movs	r3, #0
  403e36:	f88d 3007 	strb.w	r3, [sp, #7]
		len = 5;
  403e3a:	2105      	movs	r1, #5
		break;
  403e3c:	e7eb      	b.n	403e16 <spi_cmd+0x3a>
		if(clockless)  bc[1] |= (1 << 7);
  403e3e:	f063 037f 	orn	r3, r3, #127	; 0x7f
  403e42:	f88d 3005 	strb.w	r3, [sp, #5]
  403e46:	e7f3      	b.n	403e30 <spi_cmd+0x54>
		bc[1] = 0x00;
  403e48:	2300      	movs	r3, #0
  403e4a:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = 0x00;
  403e4e:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = 0x00;
  403e52:	f88d 3007 	strb.w	r3, [sp, #7]
		len = 5;
  403e56:	2105      	movs	r1, #5
		break;
  403e58:	e7dd      	b.n	403e16 <spi_cmd+0x3a>
		bc[1] = 0x00;
  403e5a:	2300      	movs	r3, #0
  403e5c:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = 0x00;
  403e60:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = 0x00;
  403e64:	f88d 3007 	strb.w	r3, [sp, #7]
		len = 5;
  403e68:	2105      	movs	r1, #5
		break;
  403e6a:	e7d4      	b.n	403e16 <spi_cmd+0x3a>
		bc[1] = 0xff;
  403e6c:	23ff      	movs	r3, #255	; 0xff
  403e6e:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = 0xff;
  403e72:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = 0xff;
  403e76:	f88d 3007 	strb.w	r3, [sp, #7]
		len = 5;
  403e7a:	2105      	movs	r1, #5
		break;
  403e7c:	e7cb      	b.n	403e16 <spi_cmd+0x3a>
		bc[1] = (uint8)(adr >> 16);
  403e7e:	0c0a      	lsrs	r2, r1, #16
  403e80:	f88d 2005 	strb.w	r2, [sp, #5]
		bc[2] = (uint8)(adr >> 8);
  403e84:	0a0a      	lsrs	r2, r1, #8
  403e86:	f88d 2006 	strb.w	r2, [sp, #6]
		bc[3] = (uint8)adr;
  403e8a:	f88d 1007 	strb.w	r1, [sp, #7]
		bc[4] = (uint8)(sz >> 8);
  403e8e:	0a1a      	lsrs	r2, r3, #8
  403e90:	f88d 2008 	strb.w	r2, [sp, #8]
		bc[5] = (uint8)(sz);
  403e94:	f88d 3009 	strb.w	r3, [sp, #9]
		len = 7;
  403e98:	2107      	movs	r1, #7
		break;
  403e9a:	e7bc      	b.n	403e16 <spi_cmd+0x3a>
		bc[1] = (uint8)(adr >> 16);
  403e9c:	0c0a      	lsrs	r2, r1, #16
  403e9e:	f88d 2005 	strb.w	r2, [sp, #5]
		bc[2] = (uint8)(adr >> 8);
  403ea2:	0a0a      	lsrs	r2, r1, #8
  403ea4:	f88d 2006 	strb.w	r2, [sp, #6]
		bc[3] = (uint8)adr;
  403ea8:	f88d 1007 	strb.w	r1, [sp, #7]
		bc[4] = (uint8)(sz >> 16);
  403eac:	0c1a      	lsrs	r2, r3, #16
  403eae:	f88d 2008 	strb.w	r2, [sp, #8]
		bc[5] = (uint8)(sz >> 8);
  403eb2:	0a1a      	lsrs	r2, r3, #8
  403eb4:	f88d 2009 	strb.w	r2, [sp, #9]
		bc[6] = (uint8)(sz);
  403eb8:	f88d 300a 	strb.w	r3, [sp, #10]
		len = 8;
  403ebc:	2108      	movs	r1, #8
		break;
  403ebe:	e7aa      	b.n	403e16 <spi_cmd+0x3a>
		bc[1] = (uint8)(adr >> 8);
  403ec0:	f3c1 2307 	ubfx	r3, r1, #8, #8
		if(clockless)  bc[1] |= (1 << 7);
  403ec4:	b984      	cbnz	r4, 403ee8 <spi_cmd+0x10c>
		bc[1] = (uint8)(adr >> 8);
  403ec6:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = (uint8)(adr);
  403eca:	f88d 1006 	strb.w	r1, [sp, #6]
		bc[3] = (uint8)(u32data >> 24);
  403ece:	0e13      	lsrs	r3, r2, #24
  403ed0:	f88d 3007 	strb.w	r3, [sp, #7]
		bc[4] = (uint8)(u32data >> 16);
  403ed4:	0c13      	lsrs	r3, r2, #16
  403ed6:	f88d 3008 	strb.w	r3, [sp, #8]
		bc[5] = (uint8)(u32data >> 8);
  403eda:	0a13      	lsrs	r3, r2, #8
  403edc:	f88d 3009 	strb.w	r3, [sp, #9]
		bc[6] = (uint8)(u32data);
  403ee0:	f88d 200a 	strb.w	r2, [sp, #10]
		len = 8;
  403ee4:	2108      	movs	r1, #8
		break;
  403ee6:	e796      	b.n	403e16 <spi_cmd+0x3a>
		if(clockless)  bc[1] |= (1 << 7);
  403ee8:	f063 037f 	orn	r3, r3, #127	; 0x7f
  403eec:	f88d 3005 	strb.w	r3, [sp, #5]
  403ef0:	e7eb      	b.n	403eca <spi_cmd+0xee>
		bc[1] = (uint8)(adr >> 16);
  403ef2:	0c0b      	lsrs	r3, r1, #16
  403ef4:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = (uint8)(adr >> 8);
  403ef8:	0a0b      	lsrs	r3, r1, #8
  403efa:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = (uint8)(adr);
  403efe:	f88d 1007 	strb.w	r1, [sp, #7]
		bc[4] = (uint8)(u32data >> 24);
  403f02:	0e13      	lsrs	r3, r2, #24
  403f04:	f88d 3008 	strb.w	r3, [sp, #8]
		bc[5] = (uint8)(u32data >> 16);
  403f08:	0c13      	lsrs	r3, r2, #16
  403f0a:	f88d 3009 	strb.w	r3, [sp, #9]
		bc[6] = (uint8)(u32data >> 8);
  403f0e:	0a13      	lsrs	r3, r2, #8
  403f10:	f88d 300a 	strb.w	r3, [sp, #10]
		bc[7] = (uint8)(u32data);
  403f14:	f88d 200b 	strb.w	r2, [sp, #11]
		len = 9;
  403f18:	2109      	movs	r1, #9
		break;
  403f1a:	e77c      	b.n	403e16 <spi_cmd+0x3a>
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
  403f1c:	f44f 7284 	mov.w	r2, #264	; 0x108
  403f20:	4913      	ldr	r1, [pc, #76]	; (403f70 <spi_cmd+0x194>)
  403f22:	4814      	ldr	r0, [pc, #80]	; (403f74 <spi_cmd+0x198>)
  403f24:	4c14      	ldr	r4, [pc, #80]	; (403f78 <spi_cmd+0x19c>)
  403f26:	47a0      	blx	r4
  403f28:	4814      	ldr	r0, [pc, #80]	; (403f7c <spi_cmd+0x1a0>)
  403f2a:	47a0      	blx	r4
  403f2c:	4814      	ldr	r0, [pc, #80]	; (403f80 <spi_cmd+0x1a4>)
  403f2e:	47a0      	blx	r4
			result = N_FAIL;
  403f30:	2000      	movs	r0, #0
  403f32:	e019      	b.n	403f68 <spi_cmd+0x18c>
	switch (cmd) {
  403f34:	2000      	movs	r0, #0
  403f36:	e017      	b.n	403f68 <spi_cmd+0x18c>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
  403f38:	1e4e      	subs	r6, r1, #1
  403f3a:	ab01      	add	r3, sp, #4
  403f3c:	199d      	adds	r5, r3, r6
  403f3e:	207f      	movs	r0, #127	; 0x7f
  403f40:	461a      	mov	r2, r3
	return crc7_syndrome_table[(crc << 1) ^ data];
  403f42:	4c10      	ldr	r4, [pc, #64]	; (403f84 <spi_cmd+0x1a8>)
  403f44:	f812 3b01 	ldrb.w	r3, [r2], #1
  403f48:	ea83 0340 	eor.w	r3, r3, r0, lsl #1
  403f4c:	5ce0      	ldrb	r0, [r4, r3]
	while (len--)
  403f4e:	4295      	cmp	r5, r2
  403f50:	d1f8      	bne.n	403f44 <spi_cmd+0x168>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
  403f52:	ab04      	add	r3, sp, #16
  403f54:	441e      	add	r6, r3
  403f56:	0043      	lsls	r3, r0, #1
  403f58:	f806 3c0c 	strb.w	r3, [r6, #-12]
		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
  403f5c:	a801      	add	r0, sp, #4
  403f5e:	4b0a      	ldr	r3, [pc, #40]	; (403f88 <spi_cmd+0x1ac>)
  403f60:	4798      	blx	r3
  403f62:	2800      	cmp	r0, #0
  403f64:	d1da      	bne.n	403f1c <spi_cmd+0x140>
  403f66:	2001      	movs	r0, #1
}
  403f68:	b004      	add	sp, #16
  403f6a:	bd70      	pop	{r4, r5, r6, pc}
  403f6c:	2040c360 	.word	0x2040c360
  403f70:	0040cfb8 	.word	0x0040cfb8
  403f74:	0040c9dc 	.word	0x0040c9dc
  403f78:	00406515 	.word	0x00406515
  403f7c:	0040d3d4 	.word	0x0040d3d4
  403f80:	0040ca08 	.word	0x0040ca08
  403f84:	0040d034 	.word	0x0040d034
  403f88:	00403dbd 	.word	0x00403dbd

00403f8c <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
  403f8c:	b570      	push	{r4, r5, r6, lr}
  403f8e:	b082      	sub	sp, #8
  403f90:	4604      	mov	r4, r0
		clockless = 1;
	}
	else
	{
		cmd = CMD_SINGLE_WRITE;
		clockless = 0;
  403f92:	2831      	cmp	r0, #49	; 0x31
  403f94:	bf35      	itete	cc
  403f96:	2301      	movcc	r3, #1
  403f98:	2300      	movcs	r3, #0
  403f9a:	25c3      	movcc	r5, #195	; 0xc3
  403f9c:	25c9      	movcs	r5, #201	; 0xc9
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
  403f9e:	9300      	str	r3, [sp, #0]
  403fa0:	2304      	movs	r3, #4
  403fa2:	460a      	mov	r2, r1
  403fa4:	4601      	mov	r1, r0
  403fa6:	4628      	mov	r0, r5
  403fa8:	4e15      	ldr	r6, [pc, #84]	; (404000 <spi_write_reg+0x74>)
  403faa:	47b0      	blx	r6
	if (result != N_OK) {
  403fac:	2801      	cmp	r0, #1
  403fae:	d00d      	beq.n	403fcc <spi_write_reg+0x40>
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
  403fb0:	f240 12eb 	movw	r2, #491	; 0x1eb
  403fb4:	4913      	ldr	r1, [pc, #76]	; (404004 <spi_write_reg+0x78>)
  403fb6:	4814      	ldr	r0, [pc, #80]	; (404008 <spi_write_reg+0x7c>)
  403fb8:	4d14      	ldr	r5, [pc, #80]	; (40400c <spi_write_reg+0x80>)
  403fba:	47a8      	blx	r5
  403fbc:	4621      	mov	r1, r4
  403fbe:	4814      	ldr	r0, [pc, #80]	; (404010 <spi_write_reg+0x84>)
  403fc0:	47a8      	blx	r5
  403fc2:	4814      	ldr	r0, [pc, #80]	; (404014 <spi_write_reg+0x88>)
  403fc4:	47a8      	blx	r5
		return N_FAIL;
  403fc6:	2000      	movs	r0, #0
	}

	return result;

#endif
}
  403fc8:	b002      	add	sp, #8
  403fca:	bd70      	pop	{r4, r5, r6, pc}
	result = spi_cmd_rsp(cmd);
  403fcc:	4628      	mov	r0, r5
  403fce:	4b12      	ldr	r3, [pc, #72]	; (404018 <spi_write_reg+0x8c>)
  403fd0:	4798      	blx	r3
	if (result != N_OK) {
  403fd2:	2801      	cmp	r0, #1
  403fd4:	d0f8      	beq.n	403fc8 <spi_write_reg+0x3c>
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
  403fd6:	f240 12f1 	movw	r2, #497	; 0x1f1
  403fda:	490a      	ldr	r1, [pc, #40]	; (404004 <spi_write_reg+0x78>)
  403fdc:	480a      	ldr	r0, [pc, #40]	; (404008 <spi_write_reg+0x7c>)
  403fde:	4d0b      	ldr	r5, [pc, #44]	; (40400c <spi_write_reg+0x80>)
  403fe0:	47a8      	blx	r5
  403fe2:	4621      	mov	r1, r4
  403fe4:	480d      	ldr	r0, [pc, #52]	; (40401c <spi_write_reg+0x90>)
  403fe6:	47a8      	blx	r5
  403fe8:	480a      	ldr	r0, [pc, #40]	; (404014 <spi_write_reg+0x88>)
  403fea:	47a8      	blx	r5
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  403fec:	2400      	movs	r4, #0
  403fee:	9400      	str	r4, [sp, #0]
  403ff0:	4623      	mov	r3, r4
  403ff2:	4622      	mov	r2, r4
  403ff4:	4621      	mov	r1, r4
  403ff6:	20cf      	movs	r0, #207	; 0xcf
  403ff8:	4d01      	ldr	r5, [pc, #4]	; (404000 <spi_write_reg+0x74>)
  403ffa:	47a8      	blx	r5
		return N_FAIL;
  403ffc:	4620      	mov	r0, r4
  403ffe:	e7e3      	b.n	403fc8 <spi_write_reg+0x3c>
  404000:	00403ddd 	.word	0x00403ddd
  404004:	0040cfec 	.word	0x0040cfec
  404008:	0040c9dc 	.word	0x0040c9dc
  40400c:	00406515 	.word	0x00406515
  404010:	0040d584 	.word	0x0040d584
  404014:	0040ca08 	.word	0x0040ca08
  404018:	00403be1 	.word	0x00403be1
  40401c:	0040d5b0 	.word	0x0040d5b0

00404020 <spi_read_reg>:

	return N_OK;
}

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
  404020:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404024:	b084      	sub	sp, #16
  404026:	4604      	mov	r4, r0
  404028:	4688      	mov	r8, r1
		clockless = 1;
	}
	else
	{
		cmd = CMD_SINGLE_READ;
		clockless = 0;
  40402a:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
  40402e:	bf35      	itete	cc
  404030:	2601      	movcc	r6, #1
  404032:	2600      	movcs	r6, #0
  404034:	25c4      	movcc	r5, #196	; 0xc4
  404036:	25ca      	movcs	r5, #202	; 0xca
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, 4, clockless);
  404038:	9600      	str	r6, [sp, #0]
  40403a:	2304      	movs	r3, #4
  40403c:	2200      	movs	r2, #0
  40403e:	4601      	mov	r1, r0
  404040:	4628      	mov	r0, r5
  404042:	4f2c      	ldr	r7, [pc, #176]	; (4040f4 <spi_read_reg+0xd4>)
  404044:	47b8      	blx	r7
	if (result != N_OK) {
  404046:	2801      	cmp	r0, #1
  404048:	d00e      	beq.n	404068 <spi_read_reg+0x48>
		M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
  40404a:	f240 2245 	movw	r2, #581	; 0x245
  40404e:	492a      	ldr	r1, [pc, #168]	; (4040f8 <spi_read_reg+0xd8>)
  404050:	482a      	ldr	r0, [pc, #168]	; (4040fc <spi_read_reg+0xdc>)
  404052:	4d2b      	ldr	r5, [pc, #172]	; (404100 <spi_read_reg+0xe0>)
  404054:	47a8      	blx	r5
  404056:	4621      	mov	r1, r4
  404058:	482a      	ldr	r0, [pc, #168]	; (404104 <spi_read_reg+0xe4>)
  40405a:	47a8      	blx	r5
  40405c:	482a      	ldr	r0, [pc, #168]	; (404108 <spi_read_reg+0xe8>)
  40405e:	47a8      	blx	r5
		return N_FAIL;
  404060:	2000      	movs	r0, #0
		((uint32)tmp[1] << 8) |
		((uint32)tmp[2] << 16) |
		((uint32)tmp[3] << 24);

	return N_OK;
}
  404062:	b004      	add	sp, #16
  404064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	result = spi_cmd_rsp(cmd);
  404068:	4628      	mov	r0, r5
  40406a:	4b28      	ldr	r3, [pc, #160]	; (40410c <spi_read_reg+0xec>)
  40406c:	4798      	blx	r3
	if (result != N_OK) {
  40406e:	2801      	cmp	r0, #1
  404070:	d014      	beq.n	40409c <spi_read_reg+0x7c>
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
  404072:	f240 224b 	movw	r2, #587	; 0x24b
  404076:	4920      	ldr	r1, [pc, #128]	; (4040f8 <spi_read_reg+0xd8>)
  404078:	4820      	ldr	r0, [pc, #128]	; (4040fc <spi_read_reg+0xdc>)
  40407a:	4d21      	ldr	r5, [pc, #132]	; (404100 <spi_read_reg+0xe0>)
  40407c:	47a8      	blx	r5
  40407e:	4621      	mov	r1, r4
  404080:	4823      	ldr	r0, [pc, #140]	; (404110 <spi_read_reg+0xf0>)
  404082:	47a8      	blx	r5
  404084:	4820      	ldr	r0, [pc, #128]	; (404108 <spi_read_reg+0xe8>)
  404086:	47a8      	blx	r5
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  404088:	2400      	movs	r4, #0
  40408a:	9400      	str	r4, [sp, #0]
  40408c:	4623      	mov	r3, r4
  40408e:	4622      	mov	r2, r4
  404090:	4621      	mov	r1, r4
  404092:	20cf      	movs	r0, #207	; 0xcf
  404094:	4d17      	ldr	r5, [pc, #92]	; (4040f4 <spi_read_reg+0xd4>)
  404096:	47a8      	blx	r5
		return N_FAIL;
  404098:	4620      	mov	r0, r4
  40409a:	e7e2      	b.n	404062 <spi_read_reg+0x42>
	result = spi_data_read(&tmp[0], 4, clockless);
  40409c:	4632      	mov	r2, r6
  40409e:	2104      	movs	r1, #4
  4040a0:	a803      	add	r0, sp, #12
  4040a2:	4b1c      	ldr	r3, [pc, #112]	; (404114 <spi_read_reg+0xf4>)
  4040a4:	4798      	blx	r3
	if (result != N_OK) {
  4040a6:	2801      	cmp	r0, #1
  4040a8:	d110      	bne.n	4040cc <spi_read_reg+0xac>
		((uint32)tmp[1] << 8) |
  4040aa:	f89d 200d 	ldrb.w	r2, [sp, #13]
		((uint32)tmp[2] << 16) |
  4040ae:	f89d 300e 	ldrb.w	r3, [sp, #14]
  4040b2:	041b      	lsls	r3, r3, #16
		((uint32)tmp[1] << 8) |
  4040b4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	*u32data = tmp[0] |
  4040b8:	f89d 200c 	ldrb.w	r2, [sp, #12]
		((uint32)tmp[1] << 8) |
  4040bc:	4313      	orrs	r3, r2
		((uint32)tmp[3] << 24);
  4040be:	f89d 200f 	ldrb.w	r2, [sp, #15]
		((uint32)tmp[2] << 16) |
  4040c2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
	*u32data = tmp[0] |
  4040c6:	f8c8 3000 	str.w	r3, [r8]
	return N_OK;
  4040ca:	e7ca      	b.n	404062 <spi_read_reg+0x42>
		M2M_ERR("[nmi spi]: Failed data read...\n");
  4040cc:	f240 2253 	movw	r2, #595	; 0x253
  4040d0:	4909      	ldr	r1, [pc, #36]	; (4040f8 <spi_read_reg+0xd8>)
  4040d2:	480a      	ldr	r0, [pc, #40]	; (4040fc <spi_read_reg+0xdc>)
  4040d4:	4c0a      	ldr	r4, [pc, #40]	; (404100 <spi_read_reg+0xe0>)
  4040d6:	47a0      	blx	r4
  4040d8:	480f      	ldr	r0, [pc, #60]	; (404118 <spi_read_reg+0xf8>)
  4040da:	47a0      	blx	r4
  4040dc:	480a      	ldr	r0, [pc, #40]	; (404108 <spi_read_reg+0xe8>)
  4040de:	47a0      	blx	r4
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  4040e0:	2400      	movs	r4, #0
  4040e2:	9400      	str	r4, [sp, #0]
  4040e4:	4623      	mov	r3, r4
  4040e6:	4622      	mov	r2, r4
  4040e8:	4621      	mov	r1, r4
  4040ea:	20cf      	movs	r0, #207	; 0xcf
  4040ec:	4d01      	ldr	r5, [pc, #4]	; (4040f4 <spi_read_reg+0xd4>)
  4040ee:	47a8      	blx	r5
		return N_FAIL;
  4040f0:	4620      	mov	r0, r4
  4040f2:	e7b6      	b.n	404062 <spi_read_reg+0x42>
  4040f4:	00403ddd 	.word	0x00403ddd
  4040f8:	0040d00c 	.word	0x0040d00c
  4040fc:	0040c9dc 	.word	0x0040c9dc
  404100:	00406515 	.word	0x00406515
  404104:	0040d504 	.word	0x0040d504
  404108:	0040ca08 	.word	0x0040ca08
  40410c:	00403be1 	.word	0x00403be1
  404110:	0040d530 	.word	0x0040d530
  404114:	00403ca5 	.word	0x00403ca5
  404118:	0040d564 	.word	0x0040d564

0040411c <nm_spi_deinit>:
*	@date	27 Feb 2015
*	@version	1.0
*/
sint8 nm_spi_deinit(void)
{
	gu8Crc_off = 0;
  40411c:	2000      	movs	r0, #0
  40411e:	4b01      	ldr	r3, [pc, #4]	; (404124 <nm_spi_deinit+0x8>)
  404120:	7018      	strb	r0, [r3, #0]
	return M2M_SUCCESS;
}
  404122:	4770      	bx	lr
  404124:	2040c360 	.word	0x2040c360

00404128 <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
  404128:	b500      	push	{lr}
  40412a:	b083      	sub	sp, #12
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
  40412c:	a901      	add	r1, sp, #4
  40412e:	4b03      	ldr	r3, [pc, #12]	; (40413c <nm_spi_read_reg+0x14>)
  404130:	4798      	blx	r3

	return u32Val;
}
  404132:	9801      	ldr	r0, [sp, #4]
  404134:	b003      	add	sp, #12
  404136:	f85d fb04 	ldr.w	pc, [sp], #4
  40413a:	bf00      	nop
  40413c:	00404021 	.word	0x00404021

00404140 <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
  404140:	b508      	push	{r3, lr}
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
  404142:	4b04      	ldr	r3, [pc, #16]	; (404154 <nm_spi_read_reg_with_ret+0x14>)
  404144:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
	else s8Ret = M2M_ERR_BUS_FAIL;
  404146:	2801      	cmp	r0, #1

	return s8Ret;
}
  404148:	bf0c      	ite	eq
  40414a:	2000      	moveq	r0, #0
  40414c:	f06f 0005 	mvnne.w	r0, #5
  404150:	bd08      	pop	{r3, pc}
  404152:	bf00      	nop
  404154:	00404021 	.word	0x00404021

00404158 <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
  404158:	b508      	push	{r3, lr}
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
  40415a:	4b04      	ldr	r3, [pc, #16]	; (40416c <nm_spi_write_reg+0x14>)
  40415c:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
	else s8Ret = M2M_ERR_BUS_FAIL;
  40415e:	2801      	cmp	r0, #1

	return s8Ret;
}
  404160:	bf0c      	ite	eq
  404162:	2000      	moveq	r0, #0
  404164:	f06f 0005 	mvnne.w	r0, #5
  404168:	bd08      	pop	{r3, pc}
  40416a:	bf00      	nop
  40416c:	00403f8d 	.word	0x00403f8d

00404170 <nm_spi_init>:
{
  404170:	b530      	push	{r4, r5, lr}
  404172:	b083      	sub	sp, #12
	uint32 reg =0;
  404174:	2300      	movs	r3, #0
  404176:	a902      	add	r1, sp, #8
  404178:	f841 3d08 	str.w	r3, [r1, #-8]!
	gu8Crc_off = 0;
  40417c:	4a34      	ldr	r2, [pc, #208]	; (404250 <nm_spi_init+0xe0>)
  40417e:	7013      	strb	r3, [r2, #0]
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
  404180:	f64e 0024 	movw	r0, #59428	; 0xe824
  404184:	4b33      	ldr	r3, [pc, #204]	; (404254 <nm_spi_init+0xe4>)
  404186:	4798      	blx	r3
  404188:	b348      	cbz	r0, 4041de <nm_spi_init+0x6e>
	if(gu8Crc_off == 0)
  40418a:	4b31      	ldr	r3, [pc, #196]	; (404250 <nm_spi_init+0xe0>)
  40418c:	781b      	ldrb	r3, [r3, #0]
  40418e:	b97b      	cbnz	r3, 4041b0 <nm_spi_init+0x40>
		reg &= ~0x70;
  404190:	9900      	ldr	r1, [sp, #0]
  404192:	f021 017c 	bic.w	r1, r1, #124	; 0x7c
		reg |= (0x5 << 4);
  404196:	f041 0150 	orr.w	r1, r1, #80	; 0x50
  40419a:	9100      	str	r1, [sp, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
  40419c:	f64e 0024 	movw	r0, #59428	; 0xe824
  4041a0:	4b2d      	ldr	r3, [pc, #180]	; (404258 <nm_spi_init+0xe8>)
  4041a2:	4798      	blx	r3
  4041a4:	4604      	mov	r4, r0
  4041a6:	2800      	cmp	r0, #0
  4041a8:	d039      	beq.n	40421e <nm_spi_init+0xae>
		gu8Crc_off = 1;
  4041aa:	2201      	movs	r2, #1
  4041ac:	4b28      	ldr	r3, [pc, #160]	; (404250 <nm_spi_init+0xe0>)
  4041ae:	701a      	strb	r2, [r3, #0]
	if (!spi_read_reg(0x1000, &chipid)) {
  4041b0:	a901      	add	r1, sp, #4
  4041b2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  4041b6:	4b27      	ldr	r3, [pc, #156]	; (404254 <nm_spi_init+0xe4>)
  4041b8:	4798      	blx	r3
  4041ba:	2800      	cmp	r0, #0
  4041bc:	d03a      	beq.n	404234 <nm_spi_init+0xc4>
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
  4041be:	f64e 0024 	movw	r0, #59428	; 0xe824
  4041c2:	4b26      	ldr	r3, [pc, #152]	; (40425c <nm_spi_init+0xec>)
  4041c4:	4798      	blx	r3
	val32 &= ~(0x7 << 4);
  4041c6:	f020 0170 	bic.w	r1, r0, #112	; 0x70
	nm_spi_write_reg(SPI_BASE+0x24, val32);
  4041ca:	f041 0150 	orr.w	r1, r1, #80	; 0x50
  4041ce:	f64e 0024 	movw	r0, #59428	; 0xe824
  4041d2:	4b23      	ldr	r3, [pc, #140]	; (404260 <nm_spi_init+0xf0>)
  4041d4:	4798      	blx	r3
	return M2M_SUCCESS;
  4041d6:	2400      	movs	r4, #0
}
  4041d8:	4620      	mov	r0, r4
  4041da:	b003      	add	sp, #12
  4041dc:	bd30      	pop	{r4, r5, pc}
		gu8Crc_off = 1;
  4041de:	2201      	movs	r2, #1
  4041e0:	4b1b      	ldr	r3, [pc, #108]	; (404250 <nm_spi_init+0xe0>)
  4041e2:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
  4041e4:	f240 22c5 	movw	r2, #709	; 0x2c5
  4041e8:	491e      	ldr	r1, [pc, #120]	; (404264 <nm_spi_init+0xf4>)
  4041ea:	481f      	ldr	r0, [pc, #124]	; (404268 <nm_spi_init+0xf8>)
  4041ec:	4c1f      	ldr	r4, [pc, #124]	; (40426c <nm_spi_init+0xfc>)
  4041ee:	47a0      	blx	r4
  4041f0:	481f      	ldr	r0, [pc, #124]	; (404270 <nm_spi_init+0x100>)
  4041f2:	47a0      	blx	r4
  4041f4:	481f      	ldr	r0, [pc, #124]	; (404274 <nm_spi_init+0x104>)
  4041f6:	47a0      	blx	r4
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
  4041f8:	4669      	mov	r1, sp
  4041fa:	f64e 0024 	movw	r0, #59428	; 0xe824
  4041fe:	4b15      	ldr	r3, [pc, #84]	; (404254 <nm_spi_init+0xe4>)
  404200:	4798      	blx	r3
  404202:	4604      	mov	r4, r0
  404204:	2800      	cmp	r0, #0
  404206:	d1c0      	bne.n	40418a <nm_spi_init+0x1a>
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
  404208:	f44f 7232 	mov.w	r2, #712	; 0x2c8
  40420c:	4915      	ldr	r1, [pc, #84]	; (404264 <nm_spi_init+0xf4>)
  40420e:	4816      	ldr	r0, [pc, #88]	; (404268 <nm_spi_init+0xf8>)
  404210:	4d16      	ldr	r5, [pc, #88]	; (40426c <nm_spi_init+0xfc>)
  404212:	47a8      	blx	r5
  404214:	4818      	ldr	r0, [pc, #96]	; (404278 <nm_spi_init+0x108>)
  404216:	47a8      	blx	r5
  404218:	4816      	ldr	r0, [pc, #88]	; (404274 <nm_spi_init+0x104>)
  40421a:	47a8      	blx	r5
			return 0;
  40421c:	e7dc      	b.n	4041d8 <nm_spi_init+0x68>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
  40421e:	f240 22d2 	movw	r2, #722	; 0x2d2
  404222:	4910      	ldr	r1, [pc, #64]	; (404264 <nm_spi_init+0xf4>)
  404224:	4810      	ldr	r0, [pc, #64]	; (404268 <nm_spi_init+0xf8>)
  404226:	4d11      	ldr	r5, [pc, #68]	; (40426c <nm_spi_init+0xfc>)
  404228:	47a8      	blx	r5
  40422a:	4814      	ldr	r0, [pc, #80]	; (40427c <nm_spi_init+0x10c>)
  40422c:	47a8      	blx	r5
  40422e:	4811      	ldr	r0, [pc, #68]	; (404274 <nm_spi_init+0x104>)
  404230:	47a8      	blx	r5
			return 0;
  404232:	e7d1      	b.n	4041d8 <nm_spi_init+0x68>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
  404234:	f44f 7237 	mov.w	r2, #732	; 0x2dc
  404238:	490a      	ldr	r1, [pc, #40]	; (404264 <nm_spi_init+0xf4>)
  40423a:	480b      	ldr	r0, [pc, #44]	; (404268 <nm_spi_init+0xf8>)
  40423c:	4c0b      	ldr	r4, [pc, #44]	; (40426c <nm_spi_init+0xfc>)
  40423e:	47a0      	blx	r4
  404240:	480f      	ldr	r0, [pc, #60]	; (404280 <nm_spi_init+0x110>)
  404242:	47a0      	blx	r4
  404244:	480b      	ldr	r0, [pc, #44]	; (404274 <nm_spi_init+0x104>)
  404246:	47a0      	blx	r4
		return M2M_ERR_BUS_FAIL;
  404248:	f06f 0405 	mvn.w	r4, #5
  40424c:	e7c4      	b.n	4041d8 <nm_spi_init+0x68>
  40424e:	bf00      	nop
  404250:	2040c360 	.word	0x2040c360
  404254:	00404021 	.word	0x00404021
  404258:	00403f8d 	.word	0x00403f8d
  40425c:	00404129 	.word	0x00404129
  404260:	00404159 	.word	0x00404159
  404264:	0040d028 	.word	0x0040d028
  404268:	0040c9dc 	.word	0x0040c9dc
  40426c:	00406515 	.word	0x00406515
  404270:	0040d134 	.word	0x0040d134
  404274:	0040ca08 	.word	0x0040ca08
  404278:	0040d184 	.word	0x0040d184
  40427c:	0040d1b4 	.word	0x0040d1b4
  404280:	0040d1e8 	.word	0x0040d1e8

00404284 <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
  404284:	b5f0      	push	{r4, r5, r6, r7, lr}
  404286:	b083      	sub	sp, #12
  404288:	4604      	mov	r4, r0
  40428a:	460f      	mov	r7, r1
  40428c:	4615      	mov	r5, r2
	result = spi_cmd(cmd, addr, 0, size,0);
  40428e:	2200      	movs	r2, #0
  404290:	9200      	str	r2, [sp, #0]
  404292:	462b      	mov	r3, r5
  404294:	4601      	mov	r1, r0
  404296:	20c8      	movs	r0, #200	; 0xc8
  404298:	4e22      	ldr	r6, [pc, #136]	; (404324 <nm_spi_read_block+0xa0>)
  40429a:	47b0      	blx	r6
	if (result != N_OK) {
  40429c:	2801      	cmp	r0, #1
  40429e:	d00e      	beq.n	4042be <nm_spi_read_block+0x3a>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
  4042a0:	f44f 721d 	mov.w	r2, #628	; 0x274
  4042a4:	4920      	ldr	r1, [pc, #128]	; (404328 <nm_spi_read_block+0xa4>)
  4042a6:	4821      	ldr	r0, [pc, #132]	; (40432c <nm_spi_read_block+0xa8>)
  4042a8:	4d21      	ldr	r5, [pc, #132]	; (404330 <nm_spi_read_block+0xac>)
  4042aa:	47a8      	blx	r5
  4042ac:	4621      	mov	r1, r4
  4042ae:	4821      	ldr	r0, [pc, #132]	; (404334 <nm_spi_read_block+0xb0>)
  4042b0:	47a8      	blx	r5
  4042b2:	4821      	ldr	r0, [pc, #132]	; (404338 <nm_spi_read_block+0xb4>)
  4042b4:	47a8      	blx	r5
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
	else s8Ret = M2M_ERR_BUS_FAIL;
  4042b6:	f06f 0005 	mvn.w	r0, #5

	return s8Ret;
}
  4042ba:	b003      	add	sp, #12
  4042bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	result = spi_cmd_rsp(cmd);
  4042be:	20c8      	movs	r0, #200	; 0xc8
  4042c0:	4b1e      	ldr	r3, [pc, #120]	; (40433c <nm_spi_read_block+0xb8>)
  4042c2:	4798      	blx	r3
	if (result != N_OK) {
  4042c4:	2801      	cmp	r0, #1
  4042c6:	d012      	beq.n	4042ee <nm_spi_read_block+0x6a>
		M2M_ERR("[nmi spi]: Failed cmd response, read block (%08x)...\n", (unsigned int)addr);
  4042c8:	f240 227a 	movw	r2, #634	; 0x27a
  4042cc:	4916      	ldr	r1, [pc, #88]	; (404328 <nm_spi_read_block+0xa4>)
  4042ce:	4817      	ldr	r0, [pc, #92]	; (40432c <nm_spi_read_block+0xa8>)
  4042d0:	4d17      	ldr	r5, [pc, #92]	; (404330 <nm_spi_read_block+0xac>)
  4042d2:	47a8      	blx	r5
  4042d4:	4621      	mov	r1, r4
  4042d6:	481a      	ldr	r0, [pc, #104]	; (404340 <nm_spi_read_block+0xbc>)
  4042d8:	47a8      	blx	r5
  4042da:	4817      	ldr	r0, [pc, #92]	; (404338 <nm_spi_read_block+0xb4>)
  4042dc:	47a8      	blx	r5
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  4042de:	2100      	movs	r1, #0
  4042e0:	9100      	str	r1, [sp, #0]
  4042e2:	460b      	mov	r3, r1
  4042e4:	460a      	mov	r2, r1
  4042e6:	20cf      	movs	r0, #207	; 0xcf
  4042e8:	4c0e      	ldr	r4, [pc, #56]	; (404324 <nm_spi_read_block+0xa0>)
  4042ea:	47a0      	blx	r4
  4042ec:	e7e3      	b.n	4042b6 <nm_spi_read_block+0x32>
	result = spi_data_read(buf, size,0);
  4042ee:	2200      	movs	r2, #0
  4042f0:	4629      	mov	r1, r5
  4042f2:	4638      	mov	r0, r7
  4042f4:	4b13      	ldr	r3, [pc, #76]	; (404344 <nm_spi_read_block+0xc0>)
  4042f6:	4798      	blx	r3
	if (result != N_OK) {
  4042f8:	2801      	cmp	r0, #1
  4042fa:	d011      	beq.n	404320 <nm_spi_read_block+0x9c>
		M2M_ERR("[nmi spi]: Failed block data read...\n");
  4042fc:	f44f 7221 	mov.w	r2, #644	; 0x284
  404300:	4909      	ldr	r1, [pc, #36]	; (404328 <nm_spi_read_block+0xa4>)
  404302:	480a      	ldr	r0, [pc, #40]	; (40432c <nm_spi_read_block+0xa8>)
  404304:	4c0a      	ldr	r4, [pc, #40]	; (404330 <nm_spi_read_block+0xac>)
  404306:	47a0      	blx	r4
  404308:	480f      	ldr	r0, [pc, #60]	; (404348 <nm_spi_read_block+0xc4>)
  40430a:	47a0      	blx	r4
  40430c:	480a      	ldr	r0, [pc, #40]	; (404338 <nm_spi_read_block+0xb4>)
  40430e:	47a0      	blx	r4
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  404310:	2100      	movs	r1, #0
  404312:	9100      	str	r1, [sp, #0]
  404314:	460b      	mov	r3, r1
  404316:	460a      	mov	r2, r1
  404318:	20cf      	movs	r0, #207	; 0xcf
  40431a:	4c02      	ldr	r4, [pc, #8]	; (404324 <nm_spi_read_block+0xa0>)
  40431c:	47a0      	blx	r4
  40431e:	e7ca      	b.n	4042b6 <nm_spi_read_block+0x32>
	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
  404320:	2000      	movs	r0, #0
  404322:	e7ca      	b.n	4042ba <nm_spi_read_block+0x36>
  404324:	00403ddd 	.word	0x00403ddd
  404328:	0040d01c 	.word	0x0040d01c
  40432c:	0040c9dc 	.word	0x0040c9dc
  404330:	00406515 	.word	0x00406515
  404334:	0040d210 	.word	0x0040d210
  404338:	0040ca08 	.word	0x0040ca08
  40433c:	00403be1 	.word	0x00403be1
  404340:	0040d240 	.word	0x0040d240
  404344:	00403ca5 	.word	0x00403ca5
  404348:	0040d278 	.word	0x0040d278

0040434c <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
  40434c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  404350:	b085      	sub	sp, #20
  404352:	4604      	mov	r4, r0
  404354:	4688      	mov	r8, r1
  404356:	4615      	mov	r5, r2
	result = spi_cmd(cmd, addr, 0, size,0);
  404358:	2200      	movs	r2, #0
  40435a:	9200      	str	r2, [sp, #0]
  40435c:	462b      	mov	r3, r5
  40435e:	4601      	mov	r1, r0
  404360:	20c7      	movs	r0, #199	; 0xc7
  404362:	4e4d      	ldr	r6, [pc, #308]	; (404498 <nm_spi_write_block+0x14c>)
  404364:	47b0      	blx	r6
	if (result != N_OK) {
  404366:	2801      	cmp	r0, #1
  404368:	d00f      	beq.n	40438a <nm_spi_write_block+0x3e>
		M2M_ERR("[nmi spi]: Failed cmd, write block (%08x)...\n", (unsigned int)addr);
  40436a:	f240 220f 	movw	r2, #527	; 0x20f
  40436e:	494b      	ldr	r1, [pc, #300]	; (40449c <nm_spi_write_block+0x150>)
  404370:	484b      	ldr	r0, [pc, #300]	; (4044a0 <nm_spi_write_block+0x154>)
  404372:	4d4c      	ldr	r5, [pc, #304]	; (4044a4 <nm_spi_write_block+0x158>)
  404374:	47a8      	blx	r5
  404376:	4621      	mov	r1, r4
  404378:	484b      	ldr	r0, [pc, #300]	; (4044a8 <nm_spi_write_block+0x15c>)
  40437a:	47a8      	blx	r5
  40437c:	484b      	ldr	r0, [pc, #300]	; (4044ac <nm_spi_write_block+0x160>)
  40437e:	47a8      	blx	r5
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
	else s8Ret = M2M_ERR_BUS_FAIL;
  404380:	f06f 0005 	mvn.w	r0, #5

	return s8Ret;
}
  404384:	b005      	add	sp, #20
  404386:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	result = spi_cmd_rsp(cmd);
  40438a:	20c7      	movs	r0, #199	; 0xc7
  40438c:	4b48      	ldr	r3, [pc, #288]	; (4044b0 <nm_spi_write_block+0x164>)
  40438e:	4798      	blx	r3
	if (result != N_OK) {
  404390:	2801      	cmp	r0, #1
  404392:	d012      	beq.n	4043ba <nm_spi_write_block+0x6e>
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
  404394:	f240 2215 	movw	r2, #533	; 0x215
  404398:	4940      	ldr	r1, [pc, #256]	; (40449c <nm_spi_write_block+0x150>)
  40439a:	4841      	ldr	r0, [pc, #260]	; (4044a0 <nm_spi_write_block+0x154>)
  40439c:	4d41      	ldr	r5, [pc, #260]	; (4044a4 <nm_spi_write_block+0x158>)
  40439e:	47a8      	blx	r5
  4043a0:	4621      	mov	r1, r4
  4043a2:	4844      	ldr	r0, [pc, #272]	; (4044b4 <nm_spi_write_block+0x168>)
  4043a4:	47a8      	blx	r5
  4043a6:	4841      	ldr	r0, [pc, #260]	; (4044ac <nm_spi_write_block+0x160>)
  4043a8:	47a8      	blx	r5
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  4043aa:	2100      	movs	r1, #0
  4043ac:	9100      	str	r1, [sp, #0]
  4043ae:	460b      	mov	r3, r1
  4043b0:	460a      	mov	r2, r1
  4043b2:	20cf      	movs	r0, #207	; 0xcf
  4043b4:	4c38      	ldr	r4, [pc, #224]	; (404498 <nm_spi_write_block+0x14c>)
  4043b6:	47a0      	blx	r4
  4043b8:	e7e2      	b.n	404380 <nm_spi_write_block+0x34>
	uint8 cmd, order, crc[2] = {0};
  4043ba:	2400      	movs	r4, #0
  4043bc:	f8ad 400c 	strh.w	r4, [sp, #12]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
  4043c0:	4f3d      	ldr	r7, [pc, #244]	; (4044b8 <nm_spi_write_block+0x16c>)
		if (!gu8Crc_off) {
  4043c2:	f8df 910c 	ldr.w	r9, [pc, #268]	; 4044d0 <nm_spi_write_block+0x184>
  4043c6:	e01d      	b.n	404404 <nm_spi_write_block+0xb8>
				order = 0x2;
  4043c8:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
  4043cc:	bf94      	ite	ls
  4043ce:	2303      	movls	r3, #3
  4043d0:	2302      	movhi	r3, #2
		cmd |= order;
  4043d2:	f063 030f 	orn	r3, r3, #15
  4043d6:	f88d 300b 	strb.w	r3, [sp, #11]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
  4043da:	2101      	movs	r1, #1
  4043dc:	f10d 000b 	add.w	r0, sp, #11
  4043e0:	47b8      	blx	r7
  4043e2:	b9e8      	cbnz	r0, 404420 <nm_spi_write_block+0xd4>
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
  4043e4:	4631      	mov	r1, r6
  4043e6:	eb08 0004 	add.w	r0, r8, r4
  4043ea:	47b8      	blx	r7
  4043ec:	2800      	cmp	r0, #0
  4043ee:	d135      	bne.n	40445c <nm_spi_write_block+0x110>
		if (!gu8Crc_off) {
  4043f0:	f899 3000 	ldrb.w	r3, [r9]
  4043f4:	2b00      	cmp	r3, #0
  4043f6:	d03c      	beq.n	404472 <nm_spi_write_block+0x126>
		ix += nbytes;
  4043f8:	4434      	add	r4, r6
  4043fa:	b224      	sxth	r4, r4
		sz -= nbytes;
  4043fc:	1bad      	subs	r5, r5, r6
  4043fe:	b2ad      	uxth	r5, r5
	} while (sz);
  404400:	2d00      	cmp	r5, #0
  404402:	d046      	beq.n	404492 <nm_spi_write_block+0x146>
  404404:	462e      	mov	r6, r5
  404406:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
  40440a:	bf28      	it	cs
  40440c:	f44f 5600 	movcs.w	r6, #8192	; 0x2000
		if (ix == 0)  {
  404410:	2c00      	cmp	r4, #0
  404412:	d1d9      	bne.n	4043c8 <nm_spi_write_block+0x7c>
				order = 0x1;
  404414:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
  404418:	bf94      	ite	ls
  40441a:	2303      	movls	r3, #3
  40441c:	2301      	movhi	r3, #1
  40441e:	e7d8      	b.n	4043d2 <nm_spi_write_block+0x86>
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
  404420:	f44f 72d4 	mov.w	r2, #424	; 0x1a8
  404424:	4925      	ldr	r1, [pc, #148]	; (4044bc <nm_spi_write_block+0x170>)
  404426:	481e      	ldr	r0, [pc, #120]	; (4044a0 <nm_spi_write_block+0x154>)
  404428:	4c1e      	ldr	r4, [pc, #120]	; (4044a4 <nm_spi_write_block+0x158>)
  40442a:	47a0      	blx	r4
  40442c:	4824      	ldr	r0, [pc, #144]	; (4044c0 <nm_spi_write_block+0x174>)
  40442e:	47a0      	blx	r4
  404430:	481e      	ldr	r0, [pc, #120]	; (4044ac <nm_spi_write_block+0x160>)
  404432:	47a0      	blx	r4
		M2M_ERR("[nmi spi]: Failed block data write...\n");
  404434:	f240 2226 	movw	r2, #550	; 0x226
  404438:	4918      	ldr	r1, [pc, #96]	; (40449c <nm_spi_write_block+0x150>)
  40443a:	4819      	ldr	r0, [pc, #100]	; (4044a0 <nm_spi_write_block+0x154>)
  40443c:	4c19      	ldr	r4, [pc, #100]	; (4044a4 <nm_spi_write_block+0x158>)
  40443e:	47a0      	blx	r4
  404440:	4820      	ldr	r0, [pc, #128]	; (4044c4 <nm_spi_write_block+0x178>)
  404442:	47a0      	blx	r4
  404444:	4819      	ldr	r0, [pc, #100]	; (4044ac <nm_spi_write_block+0x160>)
  404446:	47a0      	blx	r4
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  404448:	2400      	movs	r4, #0
  40444a:	9400      	str	r4, [sp, #0]
  40444c:	4623      	mov	r3, r4
  40444e:	4622      	mov	r2, r4
  404450:	4621      	mov	r1, r4
  404452:	20cf      	movs	r0, #207	; 0xcf
  404454:	4d10      	ldr	r5, [pc, #64]	; (404498 <nm_spi_write_block+0x14c>)
  404456:	47a8      	blx	r5
	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
  404458:	4620      	mov	r0, r4
  40445a:	e793      	b.n	404384 <nm_spi_write_block+0x38>
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
  40445c:	f240 12b1 	movw	r2, #433	; 0x1b1
  404460:	4916      	ldr	r1, [pc, #88]	; (4044bc <nm_spi_write_block+0x170>)
  404462:	480f      	ldr	r0, [pc, #60]	; (4044a0 <nm_spi_write_block+0x154>)
  404464:	4c0f      	ldr	r4, [pc, #60]	; (4044a4 <nm_spi_write_block+0x158>)
  404466:	47a0      	blx	r4
  404468:	4817      	ldr	r0, [pc, #92]	; (4044c8 <nm_spi_write_block+0x17c>)
  40446a:	47a0      	blx	r4
  40446c:	480f      	ldr	r0, [pc, #60]	; (4044ac <nm_spi_write_block+0x160>)
  40446e:	47a0      	blx	r4
  404470:	e7e0      	b.n	404434 <nm_spi_write_block+0xe8>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
  404472:	2102      	movs	r1, #2
  404474:	a803      	add	r0, sp, #12
  404476:	47b8      	blx	r7
  404478:	2800      	cmp	r0, #0
  40447a:	d0bd      	beq.n	4043f8 <nm_spi_write_block+0xac>
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
  40447c:	f240 12bb 	movw	r2, #443	; 0x1bb
  404480:	490e      	ldr	r1, [pc, #56]	; (4044bc <nm_spi_write_block+0x170>)
  404482:	4807      	ldr	r0, [pc, #28]	; (4044a0 <nm_spi_write_block+0x154>)
  404484:	4c07      	ldr	r4, [pc, #28]	; (4044a4 <nm_spi_write_block+0x158>)
  404486:	47a0      	blx	r4
  404488:	4810      	ldr	r0, [pc, #64]	; (4044cc <nm_spi_write_block+0x180>)
  40448a:	47a0      	blx	r4
  40448c:	4807      	ldr	r0, [pc, #28]	; (4044ac <nm_spi_write_block+0x160>)
  40448e:	47a0      	blx	r4
  404490:	e7d0      	b.n	404434 <nm_spi_write_block+0xe8>
	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
  404492:	2000      	movs	r0, #0
  404494:	e776      	b.n	404384 <nm_spi_write_block+0x38>
  404496:	bf00      	nop
  404498:	00403ddd 	.word	0x00403ddd
  40449c:	0040cffc 	.word	0x0040cffc
  4044a0:	0040c9dc 	.word	0x0040c9dc
  4044a4:	00406515 	.word	0x00406515
  4044a8:	0040d2a0 	.word	0x0040d2a0
  4044ac:	0040ca08 	.word	0x0040ca08
  4044b0:	00403be1 	.word	0x00403be1
  4044b4:	0040d2d0 	.word	0x0040d2d0
  4044b8:	00403dbd 	.word	0x00403dbd
  4044bc:	0040cfdc 	.word	0x0040cfdc
  4044c0:	0040d308 	.word	0x0040d308
  4044c4:	0040d3ac 	.word	0x0040d3ac
  4044c8:	0040d340 	.word	0x0040d340
  4044cc:	0040d374 	.word	0x0040d374
  4044d0:	2040c360 	.word	0x2040c360

004044d4 <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
  4044d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4044d8:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
  4044dc:	b194      	cbz	r4, 404504 <Socket_ReadSocketData+0x30>
  4044de:	4681      	mov	r9, r0
  4044e0:	460e      	mov	r6, r1
  4044e2:	4692      	mov	sl, r2
  4044e4:	4698      	mov	r8, r3
  4044e6:	0103      	lsls	r3, r0, #4
  4044e8:	4922      	ldr	r1, [pc, #136]	; (404574 <Socket_ReadSocketData+0xa0>)
  4044ea:	58cb      	ldr	r3, [r1, r3]
  4044ec:	b153      	cbz	r3, 404504 <Socket_ReadSocketData+0x30>
  4044ee:	eb01 1300 	add.w	r3, r1, r0, lsl #4
  4044f2:	889b      	ldrh	r3, [r3, #4]
  4044f4:	b29b      	uxth	r3, r3
  4044f6:	b12b      	cbz	r3, 404504 <Socket_ReadSocketData+0x30>
  4044f8:	eb01 1300 	add.w	r3, r1, r0, lsl #4
  4044fc:	7a9b      	ldrb	r3, [r3, #10]
  4044fe:	b2db      	uxtb	r3, r3
  404500:	2b01      	cmp	r3, #1
  404502:	d001      	beq.n	404508 <Socket_ReadSocketData+0x34>
  404504:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint32	u32Address = u32StartAddress;
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
  404508:	80f4      	strh	r4, [r6, #6]
		do
		{
			u8SetRxDone = 1;
			u16Read = u16ReadCount;
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
  40450a:	eb01 1700 	add.w	r7, r1, r0, lsl #4
			if(s16Diff > 0)
			{
				u8SetRxDone = 0;
				u16Read		= gastrSockets[sock].u16UserBufferSize;
			}
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
  40450e:	f8df b07c 	ldr.w	fp, [pc, #124]	; 40458c <Socket_ReadSocketData+0xb8>
  404512:	e006      	b.n	404522 <Socket_ReadSocketData+0x4e>
  404514:	4625      	mov	r5, r4
			u8SetRxDone = 1;
  404516:	2301      	movs	r3, #1
  404518:	e00b      	b.n	404532 <Socket_ReadSocketData+0x5e>
				pstrRecv->u16RemainingSize	-= u16Read;

				if (gpfAppSocketCb)
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);

				u16ReadCount -= u16Read;
  40451a:	1b64      	subs	r4, r4, r5
  40451c:	b2a4      	uxth	r4, r4
				u32Address += u16Read;
  40451e:	44a8      	add	r8, r5
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
				break;
			}
		}while(u16ReadCount != 0);
  404520:	b1ec      	cbz	r4, 40455e <Socket_ReadSocketData+0x8a>
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
  404522:	88bb      	ldrh	r3, [r7, #4]
  404524:	1ae3      	subs	r3, r4, r3
			if(s16Diff > 0)
  404526:	b21b      	sxth	r3, r3
  404528:	2b00      	cmp	r3, #0
  40452a:	ddf3      	ble.n	404514 <Socket_ReadSocketData+0x40>
				u16Read		= gastrSockets[sock].u16UserBufferSize;
  40452c:	88bd      	ldrh	r5, [r7, #4]
  40452e:	b2ad      	uxth	r5, r5
				u8SetRxDone = 0;
  404530:	2300      	movs	r3, #0
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
  404532:	6839      	ldr	r1, [r7, #0]
  404534:	462a      	mov	r2, r5
  404536:	4640      	mov	r0, r8
  404538:	47d8      	blx	fp
  40453a:	b990      	cbnz	r0, 404562 <Socket_ReadSocketData+0x8e>
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
  40453c:	683b      	ldr	r3, [r7, #0]
  40453e:	6033      	str	r3, [r6, #0]
				pstrRecv->s16BufferSize		= u16Read;
  404540:	80b5      	strh	r5, [r6, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
  404542:	88f3      	ldrh	r3, [r6, #6]
  404544:	1b5b      	subs	r3, r3, r5
  404546:	80f3      	strh	r3, [r6, #6]
				if (gpfAppSocketCb)
  404548:	4b0b      	ldr	r3, [pc, #44]	; (404578 <Socket_ReadSocketData+0xa4>)
  40454a:	681b      	ldr	r3, [r3, #0]
  40454c:	2b00      	cmp	r3, #0
  40454e:	d0e4      	beq.n	40451a <Socket_ReadSocketData+0x46>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
  404550:	4b09      	ldr	r3, [pc, #36]	; (404578 <Socket_ReadSocketData+0xa4>)
  404552:	681b      	ldr	r3, [r3, #0]
  404554:	4632      	mov	r2, r6
  404556:	4651      	mov	r1, sl
  404558:	4648      	mov	r0, r9
  40455a:	4798      	blx	r3
  40455c:	e7dd      	b.n	40451a <Socket_ReadSocketData+0x46>
  40455e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
  404562:	4806      	ldr	r0, [pc, #24]	; (40457c <Socket_ReadSocketData+0xa8>)
  404564:	4d06      	ldr	r5, [pc, #24]	; (404580 <Socket_ReadSocketData+0xac>)
  404566:	47a8      	blx	r5
  404568:	4621      	mov	r1, r4
  40456a:	4806      	ldr	r0, [pc, #24]	; (404584 <Socket_ReadSocketData+0xb0>)
  40456c:	47a8      	blx	r5
  40456e:	4806      	ldr	r0, [pc, #24]	; (404588 <Socket_ReadSocketData+0xb4>)
  404570:	47a8      	blx	r5
	}
}
  404572:	e7c7      	b.n	404504 <Socket_ReadSocketData+0x30>
  404574:	2040ca64 	.word	0x2040ca64
  404578:	2040cb14 	.word	0x2040cb14
  40457c:	0040ccb0 	.word	0x0040ccb0
  404580:	00406515 	.word	0x00406515
  404584:	0040d5e8 	.word	0x0040d5e8
  404588:	0040ca08 	.word	0x0040ca08
  40458c:	00402c0d 	.word	0x00402c0d

00404590 <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{
  404590:	b5f0      	push	{r4, r5, r6, r7, lr}
  404592:	b099      	sub	sp, #100	; 0x64
  404594:	4614      	mov	r4, r2
	if(u8OpCode == SOCKET_CMD_BIND)
  404596:	2841      	cmp	r0, #65	; 0x41
  404598:	d049      	beq.n	40462e <m2m_ip_cb+0x9e>
  40459a:	460d      	mov	r5, r1
			strBind.status = strBindReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
  40459c:	2842      	cmp	r0, #66	; 0x42
  40459e:	d05f      	beq.n	404660 <m2m_ip_cb+0xd0>
			strListen.status = strListenReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
		}
	}
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
  4045a0:	2843      	cmp	r0, #67	; 0x43
  4045a2:	d075      	beq.n	404690 <m2m_ip_cb+0x100>
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
		}
	}
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
  4045a4:	2844      	cmp	r0, #68	; 0x44
  4045a6:	f000 80b0 	beq.w	40470a <m2m_ip_cb+0x17a>
  4045aa:	284b      	cmp	r0, #75	; 0x4b
  4045ac:	f000 80ad 	beq.w	40470a <m2m_ip_cb+0x17a>
			}
			if(gpfAppSocketCb)
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
		}
	}
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
  4045b0:	284a      	cmp	r0, #74	; 0x4a
  4045b2:	f000 80cc 	beq.w	40474e <m2m_ip_cb+0x1be>
			strDnsReply.u32HostIP = strDnsReply.u32HostIP;
			if(gpfAppResolveCb)
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
  4045b6:	f1a0 0346 	sub.w	r3, r0, #70	; 0x46
  4045ba:	b2db      	uxtb	r3, r3
  4045bc:	2b07      	cmp	r3, #7
  4045be:	f200 80f4 	bhi.w	4047aa <m2m_ip_cb+0x21a>
  4045c2:	2285      	movs	r2, #133	; 0x85
  4045c4:	fa22 f303 	lsr.w	r3, r2, r3
  4045c8:	f013 0f01 	tst.w	r3, #1
  4045cc:	f000 80ed 	beq.w	4047aa <m2m_ip_cb+0x21a>
		tstrSocketRecvMsg	strRecvMsg;
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
		uint16				u16DataOffset;

		if(u8OpCode == SOCKET_CMD_RECVFROM)
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
  4045d0:	2848      	cmp	r0, #72	; 0x48
  4045d2:	bf14      	ite	ne
  4045d4:	2706      	movne	r7, #6
  4045d6:	2709      	moveq	r7, #9

		/* Read RECV REPLY data structure.
		*/
		u16ReadSize = sizeof(tstrRecvReply);
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
  4045d8:	2300      	movs	r3, #0
  4045da:	2210      	movs	r2, #16
  4045dc:	a903      	add	r1, sp, #12
  4045de:	4620      	mov	r0, r4
  4045e0:	4e93      	ldr	r6, [pc, #588]	; (404830 <m2m_ip_cb+0x2a0>)
  4045e2:	47b0      	blx	r6
  4045e4:	2800      	cmp	r0, #0
  4045e6:	f040 80b0 	bne.w	40474a <m2m_ip_cb+0x1ba>
		{
			uint16 u16SessionID = 0;

			sock			= strRecvReply.sock;
  4045ea:	f99d 0018 	ldrsb.w	r0, [sp, #24]
			u16SessionID = strRecvReply.u16SessionID;
  4045ee:	f8bd 101a 	ldrh.w	r1, [sp, #26]
			M2M_DBG("recv callback session ID = %d\r\n",u16SessionID);
			
			/* Reset the Socket RX Pending Flag.
			*/
			gastrSockets[sock].bIsRecvPending = 0;
  4045f2:	4a90      	ldr	r2, [pc, #576]	; (404834 <m2m_ip_cb+0x2a4>)
  4045f4:	eb02 1200 	add.w	r2, r2, r0, lsl #4
  4045f8:	2300      	movs	r3, #0
  4045fa:	7313      	strb	r3, [r2, #12]

			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
  4045fc:	f9bd e014 	ldrsh.w	lr, [sp, #20]
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
  404600:	f8bd 3016 	ldrh.w	r3, [sp, #22]
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
  404604:	f8bd 600e 	ldrh.w	r6, [sp, #14]
  404608:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
  40460c:	9e04      	ldr	r6, [sp, #16]
  40460e:	960a      	str	r6, [sp, #40]	; 0x28

			if(u16SessionID == gastrSockets[sock].u16SessionID)
  404610:	88d2      	ldrh	r2, [r2, #6]
  404612:	b292      	uxth	r2, r2
  404614:	4291      	cmp	r1, r2
  404616:	f000 80ac 	beq.w	404772 <m2m_ip_cb+0x1e2>
				}
			}
			else
			{
				M2M_DBG("Discard recv callback %d %d \r\n",u16SessionID , gastrSockets[sock].u16SessionID);
				if(u16ReadSize < u16BufferSize)
  40461a:	2d10      	cmp	r5, #16
  40461c:	f240 8095 	bls.w	40474a <m2m_ip_cb+0x1ba>
					hif_receive(0, NULL, 0, 1);
  404620:	2301      	movs	r3, #1
  404622:	2200      	movs	r2, #0
  404624:	4611      	mov	r1, r2
  404626:	4610      	mov	r0, r2
  404628:	4c81      	ldr	r4, [pc, #516]	; (404830 <m2m_ip_cb+0x2a0>)
  40462a:	47a0      	blx	r4
	{
  40462c:	e08d      	b.n	40474a <m2m_ip_cb+0x1ba>
		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
  40462e:	2300      	movs	r3, #0
  404630:	2204      	movs	r2, #4
  404632:	a907      	add	r1, sp, #28
  404634:	4620      	mov	r0, r4
  404636:	4c7e      	ldr	r4, [pc, #504]	; (404830 <m2m_ip_cb+0x2a0>)
  404638:	47a0      	blx	r4
  40463a:	2800      	cmp	r0, #0
  40463c:	f040 8085 	bne.w	40474a <m2m_ip_cb+0x1ba>
			strBind.status = strBindReply.s8Status;
  404640:	f89d 301d 	ldrb.w	r3, [sp, #29]
  404644:	f88d 300c 	strb.w	r3, [sp, #12]
			if(gpfAppSocketCb)
  404648:	4b7b      	ldr	r3, [pc, #492]	; (404838 <m2m_ip_cb+0x2a8>)
  40464a:	681b      	ldr	r3, [r3, #0]
  40464c:	2b00      	cmp	r3, #0
  40464e:	d07c      	beq.n	40474a <m2m_ip_cb+0x1ba>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
  404650:	4b79      	ldr	r3, [pc, #484]	; (404838 <m2m_ip_cb+0x2a8>)
  404652:	681b      	ldr	r3, [r3, #0]
  404654:	aa03      	add	r2, sp, #12
  404656:	2101      	movs	r1, #1
  404658:	f99d 001c 	ldrsb.w	r0, [sp, #28]
  40465c:	4798      	blx	r3
  40465e:	e074      	b.n	40474a <m2m_ip_cb+0x1ba>
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
  404660:	2300      	movs	r3, #0
  404662:	2204      	movs	r2, #4
  404664:	a907      	add	r1, sp, #28
  404666:	4620      	mov	r0, r4
  404668:	4c71      	ldr	r4, [pc, #452]	; (404830 <m2m_ip_cb+0x2a0>)
  40466a:	47a0      	blx	r4
  40466c:	2800      	cmp	r0, #0
  40466e:	d16c      	bne.n	40474a <m2m_ip_cb+0x1ba>
			strListen.status = strListenReply.s8Status;
  404670:	f89d 301d 	ldrb.w	r3, [sp, #29]
  404674:	f88d 300c 	strb.w	r3, [sp, #12]
			if(gpfAppSocketCb)
  404678:	4b6f      	ldr	r3, [pc, #444]	; (404838 <m2m_ip_cb+0x2a8>)
  40467a:	681b      	ldr	r3, [r3, #0]
  40467c:	2b00      	cmp	r3, #0
  40467e:	d064      	beq.n	40474a <m2m_ip_cb+0x1ba>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
  404680:	4b6d      	ldr	r3, [pc, #436]	; (404838 <m2m_ip_cb+0x2a8>)
  404682:	681b      	ldr	r3, [r3, #0]
  404684:	aa03      	add	r2, sp, #12
  404686:	2102      	movs	r1, #2
  404688:	f99d 001c 	ldrsb.w	r0, [sp, #28]
  40468c:	4798      	blx	r3
  40468e:	e05c      	b.n	40474a <m2m_ip_cb+0x1ba>
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
  404690:	2300      	movs	r3, #0
  404692:	220c      	movs	r2, #12
  404694:	eb0d 0102 	add.w	r1, sp, r2
  404698:	4620      	mov	r0, r4
  40469a:	4c65      	ldr	r4, [pc, #404]	; (404830 <m2m_ip_cb+0x2a0>)
  40469c:	47a0      	blx	r4
  40469e:	2800      	cmp	r0, #0
  4046a0:	d153      	bne.n	40474a <m2m_ip_cb+0x1ba>
			if(strAcceptReply.sConnectedSock >= 0)
  4046a2:	f99d 3015 	ldrsb.w	r3, [sp, #21]
  4046a6:	2b00      	cmp	r3, #0
  4046a8:	db19      	blt.n	4046de <m2m_ip_cb+0x14e>
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 	= 0;
  4046aa:	4a62      	ldr	r2, [pc, #392]	; (404834 <m2m_ip_cb+0x2a4>)
  4046ac:	eb02 1203 	add.w	r2, r2, r3, lsl #4
  4046b0:	2100      	movs	r1, #0
  4046b2:	72d1      	strb	r1, [r2, #11]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 	= 1;
  4046b4:	2101      	movs	r1, #1
  4046b6:	7291      	strb	r1, [r2, #10]
				++gu16SessionID;
  4046b8:	4960      	ldr	r1, [pc, #384]	; (40483c <m2m_ip_cb+0x2ac>)
  4046ba:	880a      	ldrh	r2, [r1, #0]
  4046bc:	3201      	adds	r2, #1
  4046be:	b292      	uxth	r2, r2
  4046c0:	800a      	strh	r2, [r1, #0]
				if(gu16SessionID == 0)
  4046c2:	880a      	ldrh	r2, [r1, #0]
  4046c4:	b292      	uxth	r2, r2
  4046c6:	b91a      	cbnz	r2, 4046d0 <m2m_ip_cb+0x140>
					++gu16SessionID;
  4046c8:	880a      	ldrh	r2, [r1, #0]
  4046ca:	3201      	adds	r2, #1
  4046cc:	b292      	uxth	r2, r2
  4046ce:	800a      	strh	r2, [r1, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
  4046d0:	4a5a      	ldr	r2, [pc, #360]	; (40483c <m2m_ip_cb+0x2ac>)
  4046d2:	8811      	ldrh	r1, [r2, #0]
  4046d4:	b289      	uxth	r1, r1
  4046d6:	4a57      	ldr	r2, [pc, #348]	; (404834 <m2m_ip_cb+0x2a4>)
  4046d8:	eb02 1203 	add.w	r2, r2, r3, lsl #4
  4046dc:	80d1      	strh	r1, [r2, #6]
			strAccept.sock = strAcceptReply.sConnectedSock;
  4046de:	f88d 301c 	strb.w	r3, [sp, #28]
			strAccept.strAddr.sin_family		= AF_INET;
  4046e2:	2302      	movs	r3, #2
  4046e4:	f8ad 3020 	strh.w	r3, [sp, #32]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
  4046e8:	f8bd 300e 	ldrh.w	r3, [sp, #14]
  4046ec:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
  4046f0:	9b04      	ldr	r3, [sp, #16]
  4046f2:	9309      	str	r3, [sp, #36]	; 0x24
			if(gpfAppSocketCb)
  4046f4:	4b50      	ldr	r3, [pc, #320]	; (404838 <m2m_ip_cb+0x2a8>)
  4046f6:	681b      	ldr	r3, [r3, #0]
  4046f8:	b33b      	cbz	r3, 40474a <m2m_ip_cb+0x1ba>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
  4046fa:	4b4f      	ldr	r3, [pc, #316]	; (404838 <m2m_ip_cb+0x2a8>)
  4046fc:	681b      	ldr	r3, [r3, #0]
  4046fe:	aa07      	add	r2, sp, #28
  404700:	2104      	movs	r1, #4
  404702:	f99d 0014 	ldrsb.w	r0, [sp, #20]
  404706:	4798      	blx	r3
  404708:	e01f      	b.n	40474a <m2m_ip_cb+0x1ba>
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
  40470a:	2300      	movs	r3, #0
  40470c:	2204      	movs	r2, #4
  40470e:	a907      	add	r1, sp, #28
  404710:	4620      	mov	r0, r4
  404712:	4c47      	ldr	r4, [pc, #284]	; (404830 <m2m_ip_cb+0x2a0>)
  404714:	47a0      	blx	r4
  404716:	b9c0      	cbnz	r0, 40474a <m2m_ip_cb+0x1ba>
			strConnMsg.sock		= strConnectReply.sock;
  404718:	f99d 001c 	ldrsb.w	r0, [sp, #28]
  40471c:	f88d 000c 	strb.w	r0, [sp, #12]
			strConnMsg.s8Error	= strConnectReply.s8Error;
  404720:	f99d 301d 	ldrsb.w	r3, [sp, #29]
  404724:	f88d 300d 	strb.w	r3, [sp, #13]
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
  404728:	b93b      	cbnz	r3, 40473a <m2m_ip_cb+0x1aa>
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
  40472a:	f8bd 301e 	ldrh.w	r3, [sp, #30]
  40472e:	3b08      	subs	r3, #8
  404730:	b29b      	uxth	r3, r3
  404732:	4a40      	ldr	r2, [pc, #256]	; (404834 <m2m_ip_cb+0x2a4>)
  404734:	eb02 1200 	add.w	r2, r2, r0, lsl #4
  404738:	8113      	strh	r3, [r2, #8]
			if(gpfAppSocketCb)
  40473a:	4b3f      	ldr	r3, [pc, #252]	; (404838 <m2m_ip_cb+0x2a8>)
  40473c:	681b      	ldr	r3, [r3, #0]
  40473e:	b123      	cbz	r3, 40474a <m2m_ip_cb+0x1ba>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
  404740:	4b3d      	ldr	r3, [pc, #244]	; (404838 <m2m_ip_cb+0x2a8>)
  404742:	681b      	ldr	r3, [r3, #0]
  404744:	aa03      	add	r2, sp, #12
  404746:	2105      	movs	r1, #5
  404748:	4798      	blx	r3
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
			}
		}
	}
}
  40474a:	b019      	add	sp, #100	; 0x64
  40474c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
  40474e:	2300      	movs	r3, #0
  404750:	2244      	movs	r2, #68	; 0x44
  404752:	a907      	add	r1, sp, #28
  404754:	4620      	mov	r0, r4
  404756:	4c36      	ldr	r4, [pc, #216]	; (404830 <m2m_ip_cb+0x2a0>)
  404758:	47a0      	blx	r4
  40475a:	2800      	cmp	r0, #0
  40475c:	d1f5      	bne.n	40474a <m2m_ip_cb+0x1ba>
			if(gpfAppResolveCb)
  40475e:	4b38      	ldr	r3, [pc, #224]	; (404840 <m2m_ip_cb+0x2b0>)
  404760:	681b      	ldr	r3, [r3, #0]
  404762:	2b00      	cmp	r3, #0
  404764:	d0f1      	beq.n	40474a <m2m_ip_cb+0x1ba>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
  404766:	4b36      	ldr	r3, [pc, #216]	; (404840 <m2m_ip_cb+0x2b0>)
  404768:	681b      	ldr	r3, [r3, #0]
  40476a:	9917      	ldr	r1, [sp, #92]	; 0x5c
  40476c:	a807      	add	r0, sp, #28
  40476e:	4798      	blx	r3
  404770:	e7eb      	b.n	40474a <m2m_ip_cb+0x1ba>
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
  404772:	f1be 0f00 	cmp.w	lr, #0
  404776:	dd01      	ble.n	40477c <m2m_ip_cb+0x1ec>
  404778:	45ae      	cmp	lr, r5
  40477a:	db0d      	blt.n	404798 <m2m_ip_cb+0x208>
					strRecvMsg.s16BufferSize	= s16RecvStatus;
  40477c:	f8ad e020 	strh.w	lr, [sp, #32]
					strRecvMsg.pu8Buffer		= NULL;
  404780:	2300      	movs	r3, #0
  404782:	9307      	str	r3, [sp, #28]
					if(gpfAppSocketCb)
  404784:	4b2c      	ldr	r3, [pc, #176]	; (404838 <m2m_ip_cb+0x2a8>)
  404786:	681b      	ldr	r3, [r3, #0]
  404788:	2b00      	cmp	r3, #0
  40478a:	d0de      	beq.n	40474a <m2m_ip_cb+0x1ba>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
  40478c:	4b2a      	ldr	r3, [pc, #168]	; (404838 <m2m_ip_cb+0x2a8>)
  40478e:	681b      	ldr	r3, [r3, #0]
  404790:	aa07      	add	r2, sp, #28
  404792:	4639      	mov	r1, r7
  404794:	4798      	blx	r3
  404796:	e7d8      	b.n	40474a <m2m_ip_cb+0x1ba>
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
  404798:	fa1f f28e 	uxth.w	r2, lr
  40479c:	9200      	str	r2, [sp, #0]
  40479e:	4423      	add	r3, r4
  4047a0:	463a      	mov	r2, r7
  4047a2:	a907      	add	r1, sp, #28
  4047a4:	4c27      	ldr	r4, [pc, #156]	; (404844 <m2m_ip_cb+0x2b4>)
  4047a6:	47a0      	blx	r4
  4047a8:	e7cf      	b.n	40474a <m2m_ip_cb+0x1ba>
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
  4047aa:	f000 03fd 	and.w	r3, r0, #253	; 0xfd
  4047ae:	2b45      	cmp	r3, #69	; 0x45
  4047b0:	d019      	beq.n	4047e6 <m2m_ip_cb+0x256>
  4047b2:	284c      	cmp	r0, #76	; 0x4c
  4047b4:	d017      	beq.n	4047e6 <m2m_ip_cb+0x256>
	else if(u8OpCode == SOCKET_CMD_PING)
  4047b6:	2852      	cmp	r0, #82	; 0x52
  4047b8:	d1c7      	bne.n	40474a <m2m_ip_cb+0x1ba>
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
  4047ba:	2301      	movs	r3, #1
  4047bc:	2214      	movs	r2, #20
  4047be:	a907      	add	r1, sp, #28
  4047c0:	4620      	mov	r0, r4
  4047c2:	4c1b      	ldr	r4, [pc, #108]	; (404830 <m2m_ip_cb+0x2a0>)
  4047c4:	47a0      	blx	r4
  4047c6:	2800      	cmp	r0, #0
  4047c8:	d1bf      	bne.n	40474a <m2m_ip_cb+0x1ba>
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
  4047ca:	4b1f      	ldr	r3, [pc, #124]	; (404848 <m2m_ip_cb+0x2b8>)
  4047cc:	9a08      	ldr	r2, [sp, #32]
  4047ce:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
  4047d0:	681b      	ldr	r3, [r3, #0]
  4047d2:	2b00      	cmp	r3, #0
  4047d4:	d0b9      	beq.n	40474a <m2m_ip_cb+0x1ba>
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
  4047d6:	4b1c      	ldr	r3, [pc, #112]	; (404848 <m2m_ip_cb+0x2b8>)
  4047d8:	681b      	ldr	r3, [r3, #0]
  4047da:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
  4047de:	9909      	ldr	r1, [sp, #36]	; 0x24
  4047e0:	9807      	ldr	r0, [sp, #28]
  4047e2:	4798      	blx	r3
}
  4047e4:	e7b1      	b.n	40474a <m2m_ip_cb+0x1ba>
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
  4047e6:	2847      	cmp	r0, #71	; 0x47
  4047e8:	bf14      	ite	ne
  4047ea:	2507      	movne	r5, #7
  4047ec:	2508      	moveq	r5, #8
		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
  4047ee:	2300      	movs	r3, #0
  4047f0:	2208      	movs	r2, #8
  4047f2:	a907      	add	r1, sp, #28
  4047f4:	4620      	mov	r0, r4
  4047f6:	4c0e      	ldr	r4, [pc, #56]	; (404830 <m2m_ip_cb+0x2a0>)
  4047f8:	47a0      	blx	r4
  4047fa:	2800      	cmp	r0, #0
  4047fc:	d1a5      	bne.n	40474a <m2m_ip_cb+0x1ba>
			sock = strReply.sock;
  4047fe:	f99d 001c 	ldrsb.w	r0, [sp, #28]
			u16SessionID = strReply.u16SessionID;
  404802:	f8bd 2020 	ldrh.w	r2, [sp, #32]
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
  404806:	f8bd 301e 	ldrh.w	r3, [sp, #30]
  40480a:	f8ad 300c 	strh.w	r3, [sp, #12]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
  40480e:	4b09      	ldr	r3, [pc, #36]	; (404834 <m2m_ip_cb+0x2a4>)
  404810:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  404814:	88db      	ldrh	r3, [r3, #6]
  404816:	b29b      	uxth	r3, r3
  404818:	429a      	cmp	r2, r3
  40481a:	d196      	bne.n	40474a <m2m_ip_cb+0x1ba>
				if(gpfAppSocketCb)
  40481c:	4b06      	ldr	r3, [pc, #24]	; (404838 <m2m_ip_cb+0x2a8>)
  40481e:	681b      	ldr	r3, [r3, #0]
  404820:	2b00      	cmp	r3, #0
  404822:	d092      	beq.n	40474a <m2m_ip_cb+0x1ba>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
  404824:	4b04      	ldr	r3, [pc, #16]	; (404838 <m2m_ip_cb+0x2a8>)
  404826:	681b      	ldr	r3, [r3, #0]
  404828:	aa03      	add	r2, sp, #12
  40482a:	4629      	mov	r1, r5
  40482c:	4798      	blx	r3
	{
  40482e:	e78c      	b.n	40474a <m2m_ip_cb+0x1ba>
  404830:	00402c0d 	.word	0x00402c0d
  404834:	2040ca64 	.word	0x2040ca64
  404838:	2040cb14 	.word	0x2040cb14
  40483c:	2040c362 	.word	0x2040c362
  404840:	2040cb1c 	.word	0x2040cb1c
  404844:	004044d5 	.word	0x004044d5
  404848:	2040cb18 	.word	0x2040cb18

0040484c <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
  40484c:	b508      	push	{r3, lr}
	if(gbSocketInit==0)
  40484e:	4b0a      	ldr	r3, [pc, #40]	; (404878 <socketInit+0x2c>)
  404850:	781b      	ldrb	r3, [r3, #0]
  404852:	b103      	cbz	r3, 404856 <socketInit+0xa>
  404854:	bd08      	pop	{r3, pc}
	{
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
  404856:	22b0      	movs	r2, #176	; 0xb0
  404858:	2100      	movs	r1, #0
  40485a:	4808      	ldr	r0, [pc, #32]	; (40487c <socketInit+0x30>)
  40485c:	4b08      	ldr	r3, [pc, #32]	; (404880 <socketInit+0x34>)
  40485e:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
  404860:	4908      	ldr	r1, [pc, #32]	; (404884 <socketInit+0x38>)
  404862:	2002      	movs	r0, #2
  404864:	4b08      	ldr	r3, [pc, #32]	; (404888 <socketInit+0x3c>)
  404866:	4798      	blx	r3
		gbSocketInit=1;
  404868:	2201      	movs	r2, #1
  40486a:	4b03      	ldr	r3, [pc, #12]	; (404878 <socketInit+0x2c>)
  40486c:	701a      	strb	r2, [r3, #0]
		gu16SessionID = 0;
  40486e:	2200      	movs	r2, #0
  404870:	4b06      	ldr	r3, [pc, #24]	; (40488c <socketInit+0x40>)
  404872:	801a      	strh	r2, [r3, #0]
	}
}
  404874:	e7ee      	b.n	404854 <socketInit+0x8>
  404876:	bf00      	nop
  404878:	2040c361 	.word	0x2040c361
  40487c:	2040ca64 	.word	0x2040ca64
  404880:	004025b9 	.word	0x004025b9
  404884:	00404591 	.word	0x00404591
  404888:	00402d21 	.word	0x00402d21
  40488c:	2040c362 	.word	0x2040c362

00404890 <registerSocketCallback>:
Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
	gpfAppSocketCb = pfAppSocketCb;
  404890:	4b02      	ldr	r3, [pc, #8]	; (40489c <registerSocketCallback+0xc>)
  404892:	6018      	str	r0, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
  404894:	4b02      	ldr	r3, [pc, #8]	; (4048a0 <registerSocketCallback+0x10>)
  404896:	6019      	str	r1, [r3, #0]
  404898:	4770      	bx	lr
  40489a:	bf00      	nop
  40489c:	2040cb14 	.word	0x2040cb14
  4048a0:	2040cb1c 	.word	0x2040cb1c

004048a4 <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
  4048a4:	b5f0      	push	{r4, r5, r6, r7, lr}
  4048a6:	b087      	sub	sp, #28
	SOCKET		sock = -1;
	uint8		u8Count,u8SocketCount = MAX_SOCKET;
	volatile tstrSocket	*pstrSock;
	
	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
  4048a8:	2802      	cmp	r0, #2
  4048aa:	d158      	bne.n	40495e <socket+0xba>
	{
		if(u8Type == SOCK_STREAM)
  4048ac:	2901      	cmp	r1, #1
  4048ae:	d059      	beq.n	404964 <socket+0xc0>
		{
			u8SocketCount = TCP_SOCK_MAX;
			u8Count = 0;
		}
		else if(u8Type == SOCK_DGRAM)
  4048b0:	2902      	cmp	r1, #2
  4048b2:	d116      	bne.n	4048e2 <socket+0x3e>
		{
			/*--- UDP SOCKET ---*/
			u8SocketCount = MAX_SOCKET;
  4048b4:	260b      	movs	r6, #11
			u8Count = TCP_SOCK_MAX;
  4048b6:	2407      	movs	r4, #7
		else
			return sock;

		for(;u8Count < u8SocketCount; u8Count ++)
		{
			pstrSock = &gastrSockets[u8Count];
  4048b8:	4625      	mov	r5, r4
			if(pstrSock->bIsUsed == 0)
  4048ba:	4b2e      	ldr	r3, [pc, #184]	; (404974 <socket+0xd0>)
  4048bc:	eb03 1304 	add.w	r3, r3, r4, lsl #4
  4048c0:	7a9b      	ldrb	r3, [r3, #10]
  4048c2:	2b00      	cmp	r3, #0
  4048c4:	d051      	beq.n	40496a <socket+0xc6>
  4048c6:	1c63      	adds	r3, r4, #1
  4048c8:	b2db      	uxtb	r3, r3
  4048ca:	4f2a      	ldr	r7, [pc, #168]	; (404974 <socket+0xd0>)
		for(;u8Count < u8SocketCount; u8Count ++)
  4048cc:	b2dc      	uxtb	r4, r3
  4048ce:	42b4      	cmp	r4, r6
  4048d0:	d240      	bcs.n	404954 <socket+0xb0>
			pstrSock = &gastrSockets[u8Count];
  4048d2:	461d      	mov	r5, r3
			if(pstrSock->bIsUsed == 0)
  4048d4:	eb07 1103 	add.w	r1, r7, r3, lsl #4
  4048d8:	7a89      	ldrb	r1, [r1, #10]
  4048da:	1c58      	adds	r0, r3, #1
  4048dc:	b121      	cbz	r1, 4048e8 <socket+0x44>
  4048de:	4603      	mov	r3, r0
  4048e0:	e7f4      	b.n	4048cc <socket+0x28>
			return sock;
  4048e2:	f04f 34ff 	mov.w	r4, #4294967295
  4048e6:	e037      	b.n	404958 <socket+0xb4>
			pstrSock = &gastrSockets[u8Count];
  4048e8:	4822      	ldr	r0, [pc, #136]	; (404974 <socket+0xd0>)
  4048ea:	eb00 1003 	add.w	r0, r0, r3, lsl #4
  4048ee:	4616      	mov	r6, r2
			{
				m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
  4048f0:	2210      	movs	r2, #16
  4048f2:	2100      	movs	r1, #0
  4048f4:	4b20      	ldr	r3, [pc, #128]	; (404978 <socket+0xd4>)
  4048f6:	4798      	blx	r3

				pstrSock->bIsUsed = 1;
  4048f8:	4b1e      	ldr	r3, [pc, #120]	; (404974 <socket+0xd0>)
  4048fa:	eb03 1305 	add.w	r3, r3, r5, lsl #4
  4048fe:	2201      	movs	r2, #1
  404900:	729a      	strb	r2, [r3, #10]

				/* The session ID is used to distinguish different socket connections
					by comparing the assigned session ID to the one reported by the firmware*/
				++gu16SessionID;
  404902:	4a1e      	ldr	r2, [pc, #120]	; (40497c <socket+0xd8>)
  404904:	8813      	ldrh	r3, [r2, #0]
  404906:	3301      	adds	r3, #1
  404908:	b29b      	uxth	r3, r3
  40490a:	8013      	strh	r3, [r2, #0]
				if(gu16SessionID == 0)
  40490c:	8813      	ldrh	r3, [r2, #0]
  40490e:	b29b      	uxth	r3, r3
  404910:	b91b      	cbnz	r3, 40491a <socket+0x76>
					++gu16SessionID;
  404912:	8813      	ldrh	r3, [r2, #0]
  404914:	3301      	adds	r3, #1
  404916:	b29b      	uxth	r3, r3
  404918:	8013      	strh	r3, [r2, #0]
				
				pstrSock->u16SessionID = gu16SessionID;
  40491a:	4b18      	ldr	r3, [pc, #96]	; (40497c <socket+0xd8>)
  40491c:	881a      	ldrh	r2, [r3, #0]
  40491e:	b292      	uxth	r2, r2
  404920:	4b14      	ldr	r3, [pc, #80]	; (404974 <socket+0xd0>)
  404922:	eb03 1305 	add.w	r3, r3, r5, lsl #4
  404926:	80da      	strh	r2, [r3, #6]
				M2M_DBG("1 Socket %d session ID = %d\r\n",u8Count, gu16SessionID );
				sock = (SOCKET)u8Count;
  404928:	b264      	sxtb	r4, r4

				if(u8Flags & SOCKET_FLAGS_SSL)
  40492a:	f016 0f01 	tst.w	r6, #1
  40492e:	d013      	beq.n	404958 <socket+0xb4>
				{
					tstrSSLSocketCreateCmd	strSSLCreate;
					strSSLCreate.sslSock = sock;
  404930:	aa06      	add	r2, sp, #24
  404932:	f802 4d04 	strb.w	r4, [r2, #-4]!
					pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
  404936:	4b0f      	ldr	r3, [pc, #60]	; (404974 <socket+0xd0>)
  404938:	eb03 1505 	add.w	r5, r3, r5, lsl #4
  40493c:	2321      	movs	r3, #33	; 0x21
  40493e:	72eb      	strb	r3, [r5, #11]
					SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
  404940:	2300      	movs	r3, #0
  404942:	9302      	str	r3, [sp, #8]
  404944:	9301      	str	r3, [sp, #4]
  404946:	9300      	str	r3, [sp, #0]
  404948:	2304      	movs	r3, #4
  40494a:	2150      	movs	r1, #80	; 0x50
  40494c:	2002      	movs	r0, #2
  40494e:	4d0c      	ldr	r5, [pc, #48]	; (404980 <socket+0xdc>)
  404950:	47a8      	blx	r5
  404952:	e001      	b.n	404958 <socket+0xb4>
	SOCKET		sock = -1;
  404954:	f04f 34ff 	mov.w	r4, #4294967295
				break;
			}
		}
	}
	return sock;
}
  404958:	4620      	mov	r0, r4
  40495a:	b007      	add	sp, #28
  40495c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	SOCKET		sock = -1;
  40495e:	f04f 34ff 	mov.w	r4, #4294967295
  404962:	e7f9      	b.n	404958 <socket+0xb4>
			u8SocketCount = TCP_SOCK_MAX;
  404964:	2607      	movs	r6, #7
			u8Count = 0;
  404966:	2400      	movs	r4, #0
  404968:	e7a6      	b.n	4048b8 <socket+0x14>
			pstrSock = &gastrSockets[u8Count];
  40496a:	4802      	ldr	r0, [pc, #8]	; (404974 <socket+0xd0>)
  40496c:	eb00 1004 	add.w	r0, r0, r4, lsl #4
  404970:	e7bd      	b.n	4048ee <socket+0x4a>
  404972:	bf00      	nop
  404974:	2040ca64 	.word	0x2040ca64
  404978:	004025b9 	.word	0x004025b9
  40497c:	2040c362 	.word	0x2040c362
  404980:	0040271d 	.word	0x0040271d

00404984 <connect>:

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
  404984:	b530      	push	{r4, r5, lr}
  404986:	b089      	sub	sp, #36	; 0x24
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
  404988:	1e04      	subs	r4, r0, #0
  40498a:	db36      	blt.n	4049fa <connect+0x76>
  40498c:	2900      	cmp	r1, #0
  40498e:	d034      	beq.n	4049fa <connect+0x76>
  404990:	4b1d      	ldr	r3, [pc, #116]	; (404a08 <connect+0x84>)
  404992:	eb03 1304 	add.w	r3, r3, r4, lsl #4
  404996:	7a9b      	ldrb	r3, [r3, #10]
  404998:	b2db      	uxtb	r3, r3
  40499a:	2a00      	cmp	r2, #0
  40499c:	d030      	beq.n	404a00 <connect+0x7c>
  40499e:	2b01      	cmp	r3, #1
  4049a0:	d12e      	bne.n	404a00 <connect+0x7c>
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
  4049a2:	4b19      	ldr	r3, [pc, #100]	; (404a08 <connect+0x84>)
  4049a4:	eb03 1304 	add.w	r3, r3, r4, lsl #4
  4049a8:	7adb      	ldrb	r3, [r3, #11]
  4049aa:	f013 0f01 	tst.w	r3, #1
  4049ae:	d022      	beq.n	4049f6 <connect+0x72>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
  4049b0:	4b15      	ldr	r3, [pc, #84]	; (404a08 <connect+0x84>)
  4049b2:	eb03 1304 	add.w	r3, r3, r4, lsl #4
  4049b6:	7adb      	ldrb	r3, [r3, #11]
  4049b8:	f88d 301d 	strb.w	r3, [sp, #29]
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
  4049bc:	254b      	movs	r5, #75	; 0x4b
		}
		strConnect.sock = sock;
  4049be:	f88d 401c 	strb.w	r4, [sp, #28]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
  4049c2:	2208      	movs	r2, #8
  4049c4:	a805      	add	r0, sp, #20
  4049c6:	4b11      	ldr	r3, [pc, #68]	; (404a0c <connect+0x88>)
  4049c8:	4798      	blx	r3

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
  4049ca:	480f      	ldr	r0, [pc, #60]	; (404a08 <connect+0x84>)
  4049cc:	eb00 1004 	add.w	r0, r0, r4, lsl #4
  4049d0:	88c3      	ldrh	r3, [r0, #6]
  4049d2:	f8ad 301e 	strh.w	r3, [sp, #30]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
  4049d6:	2300      	movs	r3, #0
  4049d8:	9302      	str	r3, [sp, #8]
  4049da:	9301      	str	r3, [sp, #4]
  4049dc:	9300      	str	r3, [sp, #0]
  4049de:	230c      	movs	r3, #12
  4049e0:	aa05      	add	r2, sp, #20
  4049e2:	4629      	mov	r1, r5
  4049e4:	2002      	movs	r0, #2
  4049e6:	4c0a      	ldr	r4, [pc, #40]	; (404a10 <connect+0x8c>)
  4049e8:	47a0      	blx	r4
		if(s8Ret != SOCK_ERR_NO_ERROR)
  4049ea:	2800      	cmp	r0, #0
		{
			s8Ret = SOCK_ERR_INVALID;
  4049ec:	bf18      	it	ne
  4049ee:	f06f 0008 	mvnne.w	r0, #8
		}
	}
	return s8Ret;
}
  4049f2:	b009      	add	sp, #36	; 0x24
  4049f4:	bd30      	pop	{r4, r5, pc}
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
  4049f6:	2544      	movs	r5, #68	; 0x44
  4049f8:	e7e1      	b.n	4049be <connect+0x3a>
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
  4049fa:	f06f 0005 	mvn.w	r0, #5
  4049fe:	e7f8      	b.n	4049f2 <connect+0x6e>
  404a00:	f06f 0005 	mvn.w	r0, #5
  404a04:	e7f5      	b.n	4049f2 <connect+0x6e>
  404a06:	bf00      	nop
  404a08:	2040ca64 	.word	0x2040ca64
  404a0c:	004025a5 	.word	0x004025a5
  404a10:	0040271d 	.word	0x0040271d

00404a14 <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
  404a14:	b530      	push	{r4, r5, lr}
  404a16:	b089      	sub	sp, #36	; 0x24
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
  404a18:	460c      	mov	r4, r1
  404a1a:	3100      	adds	r1, #0
  404a1c:	bf18      	it	ne
  404a1e:	2101      	movne	r1, #1
  404a20:	f5b2 6faf 	cmp.w	r2, #1400	; 0x578
  404a24:	bf88      	it	hi
  404a26:	2100      	movhi	r1, #0
  404a28:	2900      	cmp	r1, #0
  404a2a:	d037      	beq.n	404a9c <send+0x88>
  404a2c:	2800      	cmp	r0, #0
  404a2e:	db35      	blt.n	404a9c <send+0x88>
  404a30:	4b1d      	ldr	r3, [pc, #116]	; (404aa8 <send+0x94>)
  404a32:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  404a36:	7a9b      	ldrb	r3, [r3, #10]
  404a38:	b2db      	uxtb	r3, r3
  404a3a:	2b01      	cmp	r3, #1
  404a3c:	d131      	bne.n	404aa2 <send+0x8e>
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
		u16DataOffset	= TCP_TX_PACKET_OFFSET;

		strSend.sock			= sock;
  404a3e:	f88d 0010 	strb.w	r0, [sp, #16]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
  404a42:	f8ad 2012 	strh.w	r2, [sp, #18]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
  404a46:	4b18      	ldr	r3, [pc, #96]	; (404aa8 <send+0x94>)
  404a48:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  404a4c:	88db      	ldrh	r3, [r3, #6]
  404a4e:	f8ad 301c 	strh.w	r3, [sp, #28]

		if(sock >= TCP_SOCK_MAX)
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
  404a52:	2807      	cmp	r0, #7
  404a54:	bfb4      	ite	lt
  404a56:	2550      	movlt	r5, #80	; 0x50
  404a58:	2544      	movge	r5, #68	; 0x44
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
  404a5a:	4b13      	ldr	r3, [pc, #76]	; (404aa8 <send+0x94>)
  404a5c:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  404a60:	7adb      	ldrb	r3, [r3, #11]
  404a62:	f013 0f01 	tst.w	r3, #1
  404a66:	d017      	beq.n	404a98 <send+0x84>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
  404a68:	4b0f      	ldr	r3, [pc, #60]	; (404aa8 <send+0x94>)
  404a6a:	eb03 1000 	add.w	r0, r3, r0, lsl #4
  404a6e:	8905      	ldrh	r5, [r0, #8]
  404a70:	b2ad      	uxth	r5, r5
			u8Cmd			= SOCKET_CMD_SSL_SEND;
  404a72:	214c      	movs	r1, #76	; 0x4c
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
  404a74:	9502      	str	r5, [sp, #8]
  404a76:	9201      	str	r2, [sp, #4]
  404a78:	9400      	str	r4, [sp, #0]
  404a7a:	2310      	movs	r3, #16
  404a7c:	eb0d 0203 	add.w	r2, sp, r3
  404a80:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  404a84:	2002      	movs	r0, #2
  404a86:	4c09      	ldr	r4, [pc, #36]	; (404aac <send+0x98>)
  404a88:	47a0      	blx	r4
		if(s16Ret != SOCK_ERR_NO_ERROR)
  404a8a:	2800      	cmp	r0, #0
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
  404a8c:	bf0c      	ite	eq
  404a8e:	2000      	moveq	r0, #0
  404a90:	f06f 000d 	mvnne.w	r0, #13
		}
	}
	return s16Ret;
}
  404a94:	b009      	add	sp, #36	; 0x24
  404a96:	bd30      	pop	{r4, r5, pc}
		u8Cmd			= SOCKET_CMD_SEND;
  404a98:	2145      	movs	r1, #69	; 0x45
  404a9a:	e7eb      	b.n	404a74 <send+0x60>
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
  404a9c:	f06f 0005 	mvn.w	r0, #5
  404aa0:	e7f8      	b.n	404a94 <send+0x80>
  404aa2:	f06f 0005 	mvn.w	r0, #5
  404aa6:	e7f5      	b.n	404a94 <send+0x80>
  404aa8:	2040ca64 	.word	0x2040ca64
  404aac:	0040271d 	.word	0x0040271d

00404ab0 <recv>:
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
  404ab0:	2900      	cmp	r1, #0
  404ab2:	bf18      	it	ne
  404ab4:	2a00      	cmpne	r2, #0
  404ab6:	d044      	beq.n	404b42 <recv+0x92>
{
  404ab8:	b570      	push	{r4, r5, r6, lr}
  404aba:	b086      	sub	sp, #24
  404abc:	460e      	mov	r6, r1
  404abe:	4615      	mov	r5, r2
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
  404ac0:	2800      	cmp	r0, #0
  404ac2:	db36      	blt.n	404b32 <recv+0x82>
  404ac4:	4a20      	ldr	r2, [pc, #128]	; (404b48 <recv+0x98>)
  404ac6:	eb02 1200 	add.w	r2, r2, r0, lsl #4
  404aca:	7a92      	ldrb	r2, [r2, #10]
  404acc:	b2d2      	uxtb	r2, r2
  404ace:	2a01      	cmp	r2, #1
  404ad0:	d132      	bne.n	404b38 <recv+0x88>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
  404ad2:	4c1d      	ldr	r4, [pc, #116]	; (404b48 <recv+0x98>)
  404ad4:	0101      	lsls	r1, r0, #4
  404ad6:	1862      	adds	r2, r4, r1
  404ad8:	5066      	str	r6, [r4, r1]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
  404ada:	8095      	strh	r5, [r2, #4]

		if(!gastrSockets[sock].bIsRecvPending)
  404adc:	7b12      	ldrb	r2, [r2, #12]
  404ade:	2a00      	cmp	r2, #0
  404ae0:	d12d      	bne.n	404b3e <recv+0x8e>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;

			gastrSockets[sock].bIsRecvPending = 1;
  404ae2:	eb04 1200 	add.w	r2, r4, r0, lsl #4
  404ae6:	2101      	movs	r1, #1
  404ae8:	7311      	strb	r1, [r2, #12]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
  404aea:	7ad2      	ldrb	r2, [r2, #11]
  404aec:	400a      	ands	r2, r1
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
  404aee:	2a00      	cmp	r2, #0
  404af0:	bf0c      	ite	eq
  404af2:	2146      	moveq	r1, #70	; 0x46
  404af4:	214d      	movne	r1, #77	; 0x4d
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
  404af6:	b9d3      	cbnz	r3, 404b2e <recv+0x7e>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
  404af8:	f04f 33ff 	mov.w	r3, #4294967295
  404afc:	9304      	str	r3, [sp, #16]
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
			strRecv.sock = sock;
  404afe:	f88d 0014 	strb.w	r0, [sp, #20]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
  404b02:	4b11      	ldr	r3, [pc, #68]	; (404b48 <recv+0x98>)
  404b04:	eb03 1000 	add.w	r0, r3, r0, lsl #4
  404b08:	88c3      	ldrh	r3, [r0, #6]
  404b0a:	f8ad 3016 	strh.w	r3, [sp, #22]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
  404b0e:	2300      	movs	r3, #0
  404b10:	9302      	str	r3, [sp, #8]
  404b12:	9301      	str	r3, [sp, #4]
  404b14:	9300      	str	r3, [sp, #0]
  404b16:	2308      	movs	r3, #8
  404b18:	aa04      	add	r2, sp, #16
  404b1a:	2002      	movs	r0, #2
  404b1c:	4c0b      	ldr	r4, [pc, #44]	; (404b4c <recv+0x9c>)
  404b1e:	47a0      	blx	r4
			if(s16Ret != SOCK_ERR_NO_ERROR)
  404b20:	2800      	cmp	r0, #0
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
  404b22:	bf0c      	ite	eq
  404b24:	2000      	moveq	r0, #0
  404b26:	f06f 000d 	mvnne.w	r0, #13
			}
		}
	}
	return s16Ret;
}
  404b2a:	b006      	add	sp, #24
  404b2c:	bd70      	pop	{r4, r5, r6, pc}
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
  404b2e:	9304      	str	r3, [sp, #16]
  404b30:	e7e5      	b.n	404afe <recv+0x4e>
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
  404b32:	f06f 0005 	mvn.w	r0, #5
  404b36:	e7f8      	b.n	404b2a <recv+0x7a>
  404b38:	f06f 0005 	mvn.w	r0, #5
  404b3c:	e7f5      	b.n	404b2a <recv+0x7a>
		s16Ret = SOCK_ERR_NO_ERROR;
  404b3e:	2000      	movs	r0, #0
  404b40:	e7f3      	b.n	404b2a <recv+0x7a>
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
  404b42:	f06f 0005 	mvn.w	r0, #5
}
  404b46:	4770      	bx	lr
  404b48:	2040ca64 	.word	0x2040ca64
  404b4c:	0040271d 	.word	0x0040271d

00404b50 <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
  404b50:	b530      	push	{r4, r5, lr}
  404b52:	b087      	sub	sp, #28
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
  404b54:	1e04      	subs	r4, r0, #0
  404b56:	db2f      	blt.n	404bb8 <close+0x68>
  404b58:	4b1a      	ldr	r3, [pc, #104]	; (404bc4 <close+0x74>)
  404b5a:	eb03 1304 	add.w	r3, r3, r4, lsl #4
  404b5e:	7a9b      	ldrb	r3, [r3, #10]
  404b60:	b2db      	uxtb	r3, r3
  404b62:	2b01      	cmp	r3, #1
  404b64:	d12b      	bne.n	404bbe <close+0x6e>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
		tstrCloseCmd strclose;
		strclose.sock = sock; 
  404b66:	f88d 4014 	strb.w	r4, [sp, #20]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
  404b6a:	4b16      	ldr	r3, [pc, #88]	; (404bc4 <close+0x74>)
  404b6c:	eb03 1304 	add.w	r3, r3, r4, lsl #4
  404b70:	88da      	ldrh	r2, [r3, #6]
  404b72:	f8ad 2016 	strh.w	r2, [sp, #22]
		
		gastrSockets[sock].bIsUsed = 0;
  404b76:	2200      	movs	r2, #0
  404b78:	729a      	strb	r2, [r3, #10]
		gastrSockets[sock].u16SessionID =0;
  404b7a:	80da      	strh	r2, [r3, #6]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
  404b7c:	7adb      	ldrb	r3, [r3, #11]
  404b7e:	f003 0301 	and.w	r3, r3, #1
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
  404b82:	4293      	cmp	r3, r2
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
  404b84:	9202      	str	r2, [sp, #8]
  404b86:	9201      	str	r2, [sp, #4]
  404b88:	9200      	str	r2, [sp, #0]
  404b8a:	f04f 0304 	mov.w	r3, #4
  404b8e:	aa05      	add	r2, sp, #20
  404b90:	bf0c      	ite	eq
  404b92:	2149      	moveq	r1, #73	; 0x49
  404b94:	214e      	movne	r1, #78	; 0x4e
  404b96:	2002      	movs	r0, #2
  404b98:	4d0b      	ldr	r5, [pc, #44]	; (404bc8 <close+0x78>)
  404b9a:	47a8      	blx	r5
		if(s8Ret != SOCK_ERR_NO_ERROR)
  404b9c:	1e05      	subs	r5, r0, #0
		{
			s8Ret = SOCK_ERR_INVALID;
  404b9e:	bf18      	it	ne
  404ba0:	f06f 0508 	mvnne.w	r5, #8
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
  404ba4:	2210      	movs	r2, #16
  404ba6:	2100      	movs	r1, #0
  404ba8:	4806      	ldr	r0, [pc, #24]	; (404bc4 <close+0x74>)
  404baa:	eb00 1004 	add.w	r0, r0, r4, lsl #4
  404bae:	4b07      	ldr	r3, [pc, #28]	; (404bcc <close+0x7c>)
  404bb0:	4798      	blx	r3
	}
	return s8Ret;
}
  404bb2:	4628      	mov	r0, r5
  404bb4:	b007      	add	sp, #28
  404bb6:	bd30      	pop	{r4, r5, pc}
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
  404bb8:	f06f 0505 	mvn.w	r5, #5
  404bbc:	e7f9      	b.n	404bb2 <close+0x62>
  404bbe:	f06f 0505 	mvn.w	r5, #5
  404bc2:	e7f6      	b.n	404bb2 <close+0x62>
  404bc4:	2040ca64 	.word	0x2040ca64
  404bc8:	0040271d 	.word	0x0040271d
  404bcc:	004025b9 	.word	0x004025b9

00404bd0 <spi_flash_enable>:
/**
 *	@fn		spi_flash_enable
 *	@brief	Enable spi flash operations
 */
sint8 spi_flash_enable(uint8 enable)
{
  404bd0:	b570      	push	{r4, r5, r6, lr}
  404bd2:	b082      	sub	sp, #8
  404bd4:	4605      	mov	r5, r0
	sint8 s8Ret = M2M_SUCCESS;
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
  404bd6:	4b2b      	ldr	r3, [pc, #172]	; (404c84 <spi_flash_enable+0xb4>)
  404bd8:	4798      	blx	r3
  404bda:	f3c0 000b 	ubfx	r0, r0, #0, #12
  404bde:	f5b0 7f68 	cmp.w	r0, #928	; 0x3a0
  404be2:	d203      	bcs.n	404bec <spi_flash_enable+0x1c>
	sint8 s8Ret = M2M_SUCCESS;
  404be4:	2400      	movs	r4, #0
		u32Val |= ((0x0010ul) << 12);
		nm_write_reg(0x1410, u32Val);
	}
ERR1:
	return s8Ret;
}
  404be6:	4620      	mov	r0, r4
  404be8:	b002      	add	sp, #8
  404bea:	bd70      	pop	{r4, r5, r6, pc}
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
  404bec:	a901      	add	r1, sp, #4
  404bee:	f241 4010 	movw	r0, #5136	; 0x1410
  404bf2:	4b25      	ldr	r3, [pc, #148]	; (404c88 <spi_flash_enable+0xb8>)
  404bf4:	4798      	blx	r3
		if(s8Ret != M2M_SUCCESS) {
  404bf6:	4604      	mov	r4, r0
  404bf8:	2800      	cmp	r0, #0
  404bfa:	d1f4      	bne.n	404be6 <spi_flash_enable+0x16>
		u32Val &= ~((0x7777ul) << 12);
  404bfc:	4b23      	ldr	r3, [pc, #140]	; (404c8c <spi_flash_enable+0xbc>)
  404bfe:	9a01      	ldr	r2, [sp, #4]
  404c00:	4013      	ands	r3, r2
		u32Val |= ((0x1111ul) << 12);
  404c02:	4923      	ldr	r1, [pc, #140]	; (404c90 <spi_flash_enable+0xc0>)
  404c04:	4319      	orrs	r1, r3
  404c06:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
  404c08:	f241 4010 	movw	r0, #5136	; 0x1410
  404c0c:	4b21      	ldr	r3, [pc, #132]	; (404c94 <spi_flash_enable+0xc4>)
  404c0e:	4798      	blx	r3
		if(enable) {
  404c10:	b305      	cbz	r5, 404c54 <spi_flash_enable+0x84>
	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
  404c12:	2100      	movs	r1, #0
  404c14:	4820      	ldr	r0, [pc, #128]	; (404c98 <spi_flash_enable+0xc8>)
  404c16:	4d1f      	ldr	r5, [pc, #124]	; (404c94 <spi_flash_enable+0xc4>)
  404c18:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
  404c1a:	21ab      	movs	r1, #171	; 0xab
  404c1c:	481f      	ldr	r0, [pc, #124]	; (404c9c <spi_flash_enable+0xcc>)
  404c1e:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
  404c20:	2101      	movs	r1, #1
  404c22:	481f      	ldr	r0, [pc, #124]	; (404ca0 <spi_flash_enable+0xd0>)
  404c24:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
  404c26:	2100      	movs	r1, #0
  404c28:	481e      	ldr	r0, [pc, #120]	; (404ca4 <spi_flash_enable+0xd4>)
  404c2a:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
  404c2c:	2181      	movs	r1, #129	; 0x81
  404c2e:	481e      	ldr	r0, [pc, #120]	; (404ca8 <spi_flash_enable+0xd8>)
  404c30:	47a8      	blx	r5
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
  404c32:	4e1e      	ldr	r6, [pc, #120]	; (404cac <spi_flash_enable+0xdc>)
  404c34:	4d1e      	ldr	r5, [pc, #120]	; (404cb0 <spi_flash_enable+0xe0>)
  404c36:	4630      	mov	r0, r6
  404c38:	47a8      	blx	r5
  404c3a:	2801      	cmp	r0, #1
  404c3c:	d1fb      	bne.n	404c36 <spi_flash_enable+0x66>
		u32Val &= ~((0x7777ul) << 12);
  404c3e:	4913      	ldr	r1, [pc, #76]	; (404c8c <spi_flash_enable+0xbc>)
  404c40:	9b01      	ldr	r3, [sp, #4]
  404c42:	4019      	ands	r1, r3
		u32Val |= ((0x0010ul) << 12);
  404c44:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
  404c48:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
  404c4a:	f241 4010 	movw	r0, #5136	; 0x1410
  404c4e:	4b11      	ldr	r3, [pc, #68]	; (404c94 <spi_flash_enable+0xc4>)
  404c50:	4798      	blx	r3
  404c52:	e7c8      	b.n	404be6 <spi_flash_enable+0x16>
	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
  404c54:	2100      	movs	r1, #0
  404c56:	4810      	ldr	r0, [pc, #64]	; (404c98 <spi_flash_enable+0xc8>)
  404c58:	4d0e      	ldr	r5, [pc, #56]	; (404c94 <spi_flash_enable+0xc4>)
  404c5a:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
  404c5c:	21b9      	movs	r1, #185	; 0xb9
  404c5e:	480f      	ldr	r0, [pc, #60]	; (404c9c <spi_flash_enable+0xcc>)
  404c60:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
  404c62:	2101      	movs	r1, #1
  404c64:	480e      	ldr	r0, [pc, #56]	; (404ca0 <spi_flash_enable+0xd0>)
  404c66:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
  404c68:	2100      	movs	r1, #0
  404c6a:	480e      	ldr	r0, [pc, #56]	; (404ca4 <spi_flash_enable+0xd4>)
  404c6c:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
  404c6e:	2181      	movs	r1, #129	; 0x81
  404c70:	480d      	ldr	r0, [pc, #52]	; (404ca8 <spi_flash_enable+0xd8>)
  404c72:	47a8      	blx	r5
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
  404c74:	4e0d      	ldr	r6, [pc, #52]	; (404cac <spi_flash_enable+0xdc>)
  404c76:	4d0e      	ldr	r5, [pc, #56]	; (404cb0 <spi_flash_enable+0xe0>)
  404c78:	4630      	mov	r0, r6
  404c7a:	47a8      	blx	r5
  404c7c:	2801      	cmp	r0, #1
  404c7e:	d1fb      	bne.n	404c78 <spi_flash_enable+0xa8>
  404c80:	e7dd      	b.n	404c3e <spi_flash_enable+0x6e>
  404c82:	bf00      	nop
  404c84:	004035e5 	.word	0x004035e5
  404c88:	004038e1 	.word	0x004038e1
  404c8c:	f8888fff 	.word	0xf8888fff
  404c90:	01111000 	.word	0x01111000
  404c94:	004038ed 	.word	0x004038ed
  404c98:	00010208 	.word	0x00010208
  404c9c:	0001020c 	.word	0x0001020c
  404ca0:	00010214 	.word	0x00010214
  404ca4:	0001021c 	.word	0x0001021c
  404ca8:	00010204 	.word	0x00010204
  404cac:	00010218 	.word	0x00010218
  404cb0:	004038d5 	.word	0x004038d5

00404cb4 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  404cb4:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  404cb6:	4810      	ldr	r0, [pc, #64]	; (404cf8 <sysclk_init+0x44>)
  404cb8:	4b10      	ldr	r3, [pc, #64]	; (404cfc <sysclk_init+0x48>)
  404cba:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  404cbc:	213e      	movs	r1, #62	; 0x3e
  404cbe:	2000      	movs	r0, #0
  404cc0:	4b0f      	ldr	r3, [pc, #60]	; (404d00 <sysclk_init+0x4c>)
  404cc2:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  404cc4:	4c0f      	ldr	r4, [pc, #60]	; (404d04 <sysclk_init+0x50>)
  404cc6:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  404cc8:	2800      	cmp	r0, #0
  404cca:	d0fc      	beq.n	404cc6 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  404ccc:	4b0e      	ldr	r3, [pc, #56]	; (404d08 <sysclk_init+0x54>)
  404cce:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  404cd0:	4a0e      	ldr	r2, [pc, #56]	; (404d0c <sysclk_init+0x58>)
  404cd2:	4b0f      	ldr	r3, [pc, #60]	; (404d10 <sysclk_init+0x5c>)
  404cd4:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  404cd6:	4c0f      	ldr	r4, [pc, #60]	; (404d14 <sysclk_init+0x60>)
  404cd8:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  404cda:	2800      	cmp	r0, #0
  404cdc:	d0fc      	beq.n	404cd8 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  404cde:	2002      	movs	r0, #2
  404ce0:	4b0d      	ldr	r3, [pc, #52]	; (404d18 <sysclk_init+0x64>)
  404ce2:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  404ce4:	2000      	movs	r0, #0
  404ce6:	4b0d      	ldr	r3, [pc, #52]	; (404d1c <sysclk_init+0x68>)
  404ce8:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  404cea:	4b0d      	ldr	r3, [pc, #52]	; (404d20 <sysclk_init+0x6c>)
  404cec:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  404cee:	4802      	ldr	r0, [pc, #8]	; (404cf8 <sysclk_init+0x44>)
  404cf0:	4b02      	ldr	r3, [pc, #8]	; (404cfc <sysclk_init+0x48>)
  404cf2:	4798      	blx	r3
  404cf4:	bd10      	pop	{r4, pc}
  404cf6:	bf00      	nop
  404cf8:	11e1a300 	.word	0x11e1a300
  404cfc:	004059c5 	.word	0x004059c5
  404d00:	0040548d 	.word	0x0040548d
  404d04:	004054e1 	.word	0x004054e1
  404d08:	004054f1 	.word	0x004054f1
  404d0c:	20183f01 	.word	0x20183f01
  404d10:	400e0600 	.word	0x400e0600
  404d14:	00405501 	.word	0x00405501
  404d18:	004053f1 	.word	0x004053f1
  404d1c:	00405429 	.word	0x00405429
  404d20:	004058b9 	.word	0x004058b9

00404d24 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  404d24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  404d28:	b980      	cbnz	r0, 404d4c <_read+0x28>
  404d2a:	460c      	mov	r4, r1
  404d2c:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  404d2e:	2a00      	cmp	r2, #0
  404d30:	dd0f      	ble.n	404d52 <_read+0x2e>
  404d32:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  404d34:	4e08      	ldr	r6, [pc, #32]	; (404d58 <_read+0x34>)
  404d36:	4d09      	ldr	r5, [pc, #36]	; (404d5c <_read+0x38>)
  404d38:	6830      	ldr	r0, [r6, #0]
  404d3a:	4621      	mov	r1, r4
  404d3c:	682b      	ldr	r3, [r5, #0]
  404d3e:	4798      	blx	r3
		ptr++;
  404d40:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  404d42:	42bc      	cmp	r4, r7
  404d44:	d1f8      	bne.n	404d38 <_read+0x14>
		nChars++;
	}
	return nChars;
}
  404d46:	4640      	mov	r0, r8
  404d48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  404d4c:	f04f 38ff 	mov.w	r8, #4294967295
  404d50:	e7f9      	b.n	404d46 <_read+0x22>
	for (; len > 0; --len) {
  404d52:	4680      	mov	r8, r0
  404d54:	e7f7      	b.n	404d46 <_read+0x22>
  404d56:	bf00      	nop
  404d58:	2040cb28 	.word	0x2040cb28
  404d5c:	2040cb20 	.word	0x2040cb20

00404d60 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  404d60:	3801      	subs	r0, #1
  404d62:	2802      	cmp	r0, #2
  404d64:	d815      	bhi.n	404d92 <_write+0x32>
{
  404d66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404d6a:	460e      	mov	r6, r1
  404d6c:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  404d6e:	b19a      	cbz	r2, 404d98 <_write+0x38>
  404d70:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  404d72:	f8df 8038 	ldr.w	r8, [pc, #56]	; 404dac <_write+0x4c>
  404d76:	4f0c      	ldr	r7, [pc, #48]	; (404da8 <_write+0x48>)
  404d78:	f8d8 0000 	ldr.w	r0, [r8]
  404d7c:	f815 1b01 	ldrb.w	r1, [r5], #1
  404d80:	683b      	ldr	r3, [r7, #0]
  404d82:	4798      	blx	r3
  404d84:	2800      	cmp	r0, #0
  404d86:	db0a      	blt.n	404d9e <_write+0x3e>
  404d88:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  404d8a:	3c01      	subs	r4, #1
  404d8c:	d1f4      	bne.n	404d78 <_write+0x18>
  404d8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  404d92:	f04f 30ff 	mov.w	r0, #4294967295
  404d96:	4770      	bx	lr
	for (; len != 0; --len) {
  404d98:	4610      	mov	r0, r2
  404d9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  404d9e:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  404da2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404da6:	bf00      	nop
  404da8:	2040cb24 	.word	0x2040cb24
  404dac:	2040cb28 	.word	0x2040cb28

00404db0 <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  404db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  404db2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  404db6:	4b5c      	ldr	r3, [pc, #368]	; (404f28 <board_init+0x178>)
  404db8:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb");
  404dba:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  404dbe:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  404dc2:	4b5a      	ldr	r3, [pc, #360]	; (404f2c <board_init+0x17c>)
  404dc4:	2200      	movs	r2, #0
  404dc6:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  404dca:	695a      	ldr	r2, [r3, #20]
  404dcc:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  404dd0:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb");
  404dd2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  404dd6:	f3bf 8f6f 	isb	sy
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  404dda:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  404dde:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  404de2:	f007 0007 	and.w	r0, r7, #7
  404de6:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  404de8:	f3c7 07c9 	ubfx	r7, r7, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  404dec:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  404df0:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  404df4:	f3bf 8f4f 	dsb	sy
  404df8:	f04f 34ff 	mov.w	r4, #4294967295
  404dfc:	fa04 fc00 	lsl.w	ip, r4, r0
  404e00:	fa06 f000 	lsl.w	r0, r6, r0
  404e04:	fa04 f40e 	lsl.w	r4, r4, lr
  404e08:	fa07 fe0e 	lsl.w	lr, r7, lr

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCISW = sw;
  404e0c:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  404e0e:	463a      	mov	r2, r7
  404e10:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  404e12:	ea40 0103 	orr.w	r1, r0, r3
              SCB->DCISW = sw;
  404e16:	f8c5 1260 	str.w	r1, [r5, #608]	; 0x260
            } while(tmpways--);
  404e1a:	3a01      	subs	r2, #1
  404e1c:	4423      	add	r3, r4
  404e1e:	f1b2 3fff 	cmp.w	r2, #4294967295
  404e22:	d1f6      	bne.n	404e12 <board_init+0x62>
        } while(sets--);
  404e24:	3e01      	subs	r6, #1
  404e26:	4460      	add	r0, ip
  404e28:	f1b6 3fff 	cmp.w	r6, #4294967295
  404e2c:	d1ef      	bne.n	404e0e <board_init+0x5e>
  404e2e:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  404e32:	4b3e      	ldr	r3, [pc, #248]	; (404f2c <board_init+0x17c>)
  404e34:	695a      	ldr	r2, [r3, #20]
  404e36:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  404e3a:	615a      	str	r2, [r3, #20]
  404e3c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  404e40:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  404e44:	4a3a      	ldr	r2, [pc, #232]	; (404f30 <board_init+0x180>)
  404e46:	493b      	ldr	r1, [pc, #236]	; (404f34 <board_init+0x184>)
  404e48:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  404e4a:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  404e4e:	6051      	str	r1, [r2, #4]
  __ASM volatile ("dsb");
  404e50:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  404e54:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  404e58:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  404e5c:	f022 0201 	bic.w	r2, r2, #1
  404e60:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  404e64:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  404e68:	f022 0201 	bic.w	r2, r2, #1
  404e6c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb");
  404e70:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  404e74:	f3bf 8f6f 	isb	sy
  404e78:	200a      	movs	r0, #10
  404e7a:	4c2f      	ldr	r4, [pc, #188]	; (404f38 <board_init+0x188>)
  404e7c:	47a0      	blx	r4
  404e7e:	200b      	movs	r0, #11
  404e80:	47a0      	blx	r4
  404e82:	200c      	movs	r0, #12
  404e84:	47a0      	blx	r4
  404e86:	2010      	movs	r0, #16
  404e88:	47a0      	blx	r4
  404e8a:	2011      	movs	r0, #17
  404e8c:	47a0      	blx	r4
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  404e8e:	4b2b      	ldr	r3, [pc, #172]	; (404f3c <board_init+0x18c>)
  404e90:	f44f 7280 	mov.w	r2, #256	; 0x100
  404e94:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  404e96:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  404e9a:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  404e9c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  404ea0:	f44f 6200 	mov.w	r2, #2048	; 0x800
  404ea4:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  404ea6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  404eaa:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  404eac:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  404eb0:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  404eb2:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  404eb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  404eb8:	6f19      	ldr	r1, [r3, #112]	; 0x70
  404eba:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  404ebe:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  404ec0:	6f59      	ldr	r1, [r3, #116]	; 0x74
  404ec2:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  404ec6:	6759      	str	r1, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  404ec8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  404ecc:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  404ed0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		base->PIO_PUDR = mask;
  404ed4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  404ed8:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  404eda:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  404ede:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  404ee0:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  404ee2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  404ee6:	6f19      	ldr	r1, [r3, #112]	; 0x70
  404ee8:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  404eec:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  404eee:	6f59      	ldr	r1, [r3, #116]	; 0x74
  404ef0:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  404ef4:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  404ef6:	605a      	str	r2, [r3, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  404ef8:	4a11      	ldr	r2, [pc, #68]	; (404f40 <board_init+0x190>)
  404efa:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  404efe:	f043 0310 	orr.w	r3, r3, #16
  404f02:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
		base->PIO_PUDR = mask;
  404f06:	4b0f      	ldr	r3, [pc, #60]	; (404f44 <board_init+0x194>)
  404f08:	2210      	movs	r2, #16
  404f0a:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  404f0c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  404f10:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  404f12:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  404f14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  404f18:	6f19      	ldr	r1, [r3, #112]	; 0x70
  404f1a:	4311      	orrs	r1, r2
  404f1c:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  404f1e:	6f59      	ldr	r1, [r3, #116]	; 0x74
  404f20:	4311      	orrs	r1, r2
  404f22:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  404f24:	605a      	str	r2, [r3, #4]
  404f26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404f28:	400e1850 	.word	0x400e1850
  404f2c:	e000ed00 	.word	0xe000ed00
  404f30:	400e0c00 	.word	0x400e0c00
  404f34:	5a00080c 	.word	0x5a00080c
  404f38:	00405511 	.word	0x00405511
  404f3c:	400e1200 	.word	0x400e1200
  404f40:	40088000 	.word	0x40088000
  404f44:	400e1000 	.word	0x400e1000

00404f48 <pio_pull_up>:
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  404f48:	b90a      	cbnz	r2, 404f4e <pio_pull_up+0x6>
		p_pio->PIO_PUER = ul_mask;
	} else {
		p_pio->PIO_PUDR = ul_mask;
  404f4a:	6601      	str	r1, [r0, #96]	; 0x60
  404f4c:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  404f4e:	6641      	str	r1, [r0, #100]	; 0x64
  404f50:	4770      	bx	lr

00404f52 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  404f52:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  404f54:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  404f58:	d03a      	beq.n	404fd0 <pio_set_peripheral+0x7e>
  404f5a:	d813      	bhi.n	404f84 <pio_set_peripheral+0x32>
  404f5c:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  404f60:	d025      	beq.n	404fae <pio_set_peripheral+0x5c>
  404f62:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  404f66:	d10a      	bne.n	404f7e <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  404f68:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  404f6a:	4313      	orrs	r3, r2
  404f6c:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  404f6e:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  404f70:	6f41      	ldr	r1, [r0, #116]	; 0x74
  404f72:	400b      	ands	r3, r1
  404f74:	ea23 0302 	bic.w	r3, r3, r2
  404f78:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  404f7a:	6042      	str	r2, [r0, #4]
  404f7c:	4770      	bx	lr
	switch (ul_type) {
  404f7e:	2900      	cmp	r1, #0
  404f80:	d1fb      	bne.n	404f7a <pio_set_peripheral+0x28>
  404f82:	4770      	bx	lr
  404f84:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  404f88:	d021      	beq.n	404fce <pio_set_peripheral+0x7c>
  404f8a:	d809      	bhi.n	404fa0 <pio_set_peripheral+0x4e>
  404f8c:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  404f90:	d1f3      	bne.n	404f7a <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  404f92:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  404f94:	4313      	orrs	r3, r2
  404f96:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  404f98:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  404f9a:	4313      	orrs	r3, r2
  404f9c:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  404f9e:	e7ec      	b.n	404f7a <pio_set_peripheral+0x28>
	switch (ul_type) {
  404fa0:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  404fa4:	d013      	beq.n	404fce <pio_set_peripheral+0x7c>
  404fa6:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  404faa:	d010      	beq.n	404fce <pio_set_peripheral+0x7c>
  404fac:	e7e5      	b.n	404f7a <pio_set_peripheral+0x28>
{
  404fae:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  404fb0:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  404fb2:	6f04      	ldr	r4, [r0, #112]	; 0x70
  404fb4:	43d3      	mvns	r3, r2
  404fb6:	4021      	ands	r1, r4
  404fb8:	461c      	mov	r4, r3
  404fba:	4019      	ands	r1, r3
  404fbc:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  404fbe:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  404fc0:	6f41      	ldr	r1, [r0, #116]	; 0x74
  404fc2:	400b      	ands	r3, r1
  404fc4:	4023      	ands	r3, r4
  404fc6:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  404fc8:	6042      	str	r2, [r0, #4]
}
  404fca:	f85d 4b04 	ldr.w	r4, [sp], #4
  404fce:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  404fd0:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  404fd2:	6f01      	ldr	r1, [r0, #112]	; 0x70
  404fd4:	400b      	ands	r3, r1
  404fd6:	ea23 0302 	bic.w	r3, r3, r2
  404fda:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  404fdc:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  404fde:	4313      	orrs	r3, r2
  404fe0:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  404fe2:	e7ca      	b.n	404f7a <pio_set_peripheral+0x28>

00404fe4 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  404fe4:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  404fe6:	f012 0f01 	tst.w	r2, #1
  404fea:	d10d      	bne.n	405008 <pio_set_input+0x24>
		p_pio->PIO_PUDR = ul_mask;
  404fec:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  404fee:	f012 0f0a 	tst.w	r2, #10
  404ff2:	d00b      	beq.n	40500c <pio_set_input+0x28>
		p_pio->PIO_IFER = ul_mask;
  404ff4:	6201      	str	r1, [r0, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  404ff6:	f012 0f02 	tst.w	r2, #2
  404ffa:	d109      	bne.n	405010 <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  404ffc:	f012 0f08 	tst.w	r2, #8
  405000:	d008      	beq.n	405014 <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  405002:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
  405006:	e005      	b.n	405014 <pio_set_input+0x30>
		p_pio->PIO_PUER = ul_mask;
  405008:	6641      	str	r1, [r0, #100]	; 0x64
  40500a:	e7f0      	b.n	404fee <pio_set_input+0xa>
		p_pio->PIO_IFDR = ul_mask;
  40500c:	6241      	str	r1, [r0, #36]	; 0x24
  40500e:	e7f2      	b.n	404ff6 <pio_set_input+0x12>
		p_pio->PIO_IFSCDR = ul_mask;
  405010:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  405014:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  405016:	6001      	str	r1, [r0, #0]
  405018:	4770      	bx	lr

0040501a <pio_set_output>:
{
  40501a:	b410      	push	{r4}
  40501c:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  40501e:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  405020:	b94c      	cbnz	r4, 405036 <pio_set_output+0x1c>
		p_pio->PIO_PUDR = ul_mask;
  405022:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  405024:	b14b      	cbz	r3, 40503a <pio_set_output+0x20>
		p_pio->PIO_MDER = ul_mask;
  405026:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  405028:	b94a      	cbnz	r2, 40503e <pio_set_output+0x24>
		p_pio->PIO_CODR = ul_mask;
  40502a:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  40502c:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  40502e:	6001      	str	r1, [r0, #0]
}
  405030:	f85d 4b04 	ldr.w	r4, [sp], #4
  405034:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  405036:	6641      	str	r1, [r0, #100]	; 0x64
  405038:	e7f4      	b.n	405024 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  40503a:	6541      	str	r1, [r0, #84]	; 0x54
  40503c:	e7f4      	b.n	405028 <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  40503e:	6301      	str	r1, [r0, #48]	; 0x30
  405040:	e7f4      	b.n	40502c <pio_set_output+0x12>
	...

00405044 <pio_configure>:
{
  405044:	b570      	push	{r4, r5, r6, lr}
  405046:	b082      	sub	sp, #8
  405048:	4605      	mov	r5, r0
  40504a:	4616      	mov	r6, r2
  40504c:	461c      	mov	r4, r3
	switch (ul_type) {
  40504e:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  405052:	d014      	beq.n	40507e <pio_configure+0x3a>
  405054:	d90a      	bls.n	40506c <pio_configure+0x28>
  405056:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  40505a:	d024      	beq.n	4050a6 <pio_configure+0x62>
  40505c:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  405060:	d021      	beq.n	4050a6 <pio_configure+0x62>
  405062:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  405066:	d017      	beq.n	405098 <pio_configure+0x54>
		return 0;
  405068:	2000      	movs	r0, #0
  40506a:	e01a      	b.n	4050a2 <pio_configure+0x5e>
	switch (ul_type) {
  40506c:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  405070:	d005      	beq.n	40507e <pio_configure+0x3a>
  405072:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  405076:	d002      	beq.n	40507e <pio_configure+0x3a>
  405078:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  40507c:	d1f4      	bne.n	405068 <pio_configure+0x24>
		pio_set_peripheral(p_pio, ul_type, ul_mask);
  40507e:	4632      	mov	r2, r6
  405080:	4628      	mov	r0, r5
  405082:	4b11      	ldr	r3, [pc, #68]	; (4050c8 <pio_configure+0x84>)
  405084:	4798      	blx	r3
	if (ul_pull_up_enable) {
  405086:	f014 0f01 	tst.w	r4, #1
  40508a:	d102      	bne.n	405092 <pio_configure+0x4e>
		p_pio->PIO_PUDR = ul_mask;
  40508c:	662e      	str	r6, [r5, #96]	; 0x60
	return 1;
  40508e:	2001      	movs	r0, #1
  405090:	e007      	b.n	4050a2 <pio_configure+0x5e>
		p_pio->PIO_PUER = ul_mask;
  405092:	666e      	str	r6, [r5, #100]	; 0x64
	return 1;
  405094:	2001      	movs	r0, #1
  405096:	e004      	b.n	4050a2 <pio_configure+0x5e>
		pio_set_input(p_pio, ul_mask, ul_attribute);
  405098:	461a      	mov	r2, r3
  40509a:	4631      	mov	r1, r6
  40509c:	4b0b      	ldr	r3, [pc, #44]	; (4050cc <pio_configure+0x88>)
  40509e:	4798      	blx	r3
	return 1;
  4050a0:	2001      	movs	r0, #1
}
  4050a2:	b002      	add	sp, #8
  4050a4:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  4050a6:	f004 0301 	and.w	r3, r4, #1
  4050aa:	9300      	str	r3, [sp, #0]
  4050ac:	f3c4 0380 	ubfx	r3, r4, #2, #1
  4050b0:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  4050b4:	bf14      	ite	ne
  4050b6:	2200      	movne	r2, #0
  4050b8:	2201      	moveq	r2, #1
  4050ba:	4631      	mov	r1, r6
  4050bc:	4628      	mov	r0, r5
  4050be:	4c04      	ldr	r4, [pc, #16]	; (4050d0 <pio_configure+0x8c>)
  4050c0:	47a0      	blx	r4
	return 1;
  4050c2:	2001      	movs	r0, #1
		break;
  4050c4:	e7ed      	b.n	4050a2 <pio_configure+0x5e>
  4050c6:	bf00      	nop
  4050c8:	00404f53 	.word	0x00404f53
  4050cc:	00404fe5 	.word	0x00404fe5
  4050d0:	0040501b 	.word	0x0040501b

004050d4 <pio_configure_interrupt>:
	if (ul_attr & PIO_IT_AIME) {
  4050d4:	f012 0f10 	tst.w	r2, #16
  4050d8:	d012      	beq.n	405100 <pio_configure_interrupt+0x2c>
		p_pio->PIO_AIMER = ul_mask;
  4050da:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
		if (ul_attr & PIO_IT_RE_OR_HL) {
  4050de:	f012 0f20 	tst.w	r2, #32
  4050e2:	d007      	beq.n	4050f4 <pio_configure_interrupt+0x20>
			p_pio->PIO_REHLSR = ul_mask;
  4050e4:	f8c0 10d4 	str.w	r1, [r0, #212]	; 0xd4
		if (ul_attr & PIO_IT_EDGE) {
  4050e8:	f012 0f40 	tst.w	r2, #64	; 0x40
  4050ec:	d005      	beq.n	4050fa <pio_configure_interrupt+0x26>
			p_pio->PIO_ESR = ul_mask;
  4050ee:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
  4050f2:	4770      	bx	lr
			p_pio->PIO_FELLSR = ul_mask;
  4050f4:	f8c0 10d0 	str.w	r1, [r0, #208]	; 0xd0
  4050f8:	e7f6      	b.n	4050e8 <pio_configure_interrupt+0x14>
			p_pio->PIO_LSR = ul_mask;
  4050fa:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
  4050fe:	4770      	bx	lr
		p_pio->PIO_AIMDR = ul_mask;
  405100:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  405104:	4770      	bx	lr

00405106 <pio_enable_interrupt>:
	p_pio->PIO_IER = ul_mask;
  405106:	6401      	str	r1, [r0, #64]	; 0x40
  405108:	4770      	bx	lr

0040510a <pio_disable_interrupt>:
	p_pio->PIO_IDR = ul_mask;
  40510a:	6441      	str	r1, [r0, #68]	; 0x44
  40510c:	4770      	bx	lr

0040510e <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  40510e:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  405110:	4770      	bx	lr

00405112 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  405112:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  405114:	4770      	bx	lr
	...

00405118 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  405118:	b570      	push	{r4, r5, r6, lr}
  40511a:	b082      	sub	sp, #8
  40511c:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  40511e:	4c46      	ldr	r4, [pc, #280]	; (405238 <pio_configure_pin+0x120>)
  405120:	eb04 1450 	add.w	r4, r4, r0, lsr #5
  405124:	0264      	lsls	r4, r4, #9
	switch (ul_flags & PIO_TYPE_Msk) {
  405126:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
  40512a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  40512e:	d059      	beq.n	4051e4 <pio_configure_pin+0xcc>
  405130:	d80a      	bhi.n	405148 <pio_configure_pin+0x30>
  405132:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  405136:	d02f      	beq.n	405198 <pio_configure_pin+0x80>
  405138:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  40513c:	d03f      	beq.n	4051be <pio_configure_pin+0xa6>
  40513e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  405142:	d016      	beq.n	405172 <pio_configure_pin+0x5a>
		return 0;
  405144:	2000      	movs	r0, #0
  405146:	e012      	b.n	40516e <pio_configure_pin+0x56>
	switch (ul_flags & PIO_TYPE_Msk) {
  405148:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  40514c:	d05d      	beq.n	40520a <pio_configure_pin+0xf2>
  40514e:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  405152:	d05a      	beq.n	40520a <pio_configure_pin+0xf2>
  405154:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  405158:	d1f4      	bne.n	405144 <pio_configure_pin+0x2c>
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  40515a:	f000 011f 	and.w	r1, r0, #31
  40515e:	2601      	movs	r6, #1
  405160:	462a      	mov	r2, r5
  405162:	fa06 f101 	lsl.w	r1, r6, r1
  405166:	4620      	mov	r0, r4
  405168:	4b34      	ldr	r3, [pc, #208]	; (40523c <pio_configure_pin+0x124>)
  40516a:	4798      	blx	r3
	return 1;
  40516c:	4630      	mov	r0, r6
}
  40516e:	b002      	add	sp, #8
  405170:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  405172:	f000 001f 	and.w	r0, r0, #31
  405176:	2601      	movs	r6, #1
  405178:	4086      	lsls	r6, r0
  40517a:	4632      	mov	r2, r6
  40517c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  405180:	4620      	mov	r0, r4
  405182:	4b2f      	ldr	r3, [pc, #188]	; (405240 <pio_configure_pin+0x128>)
  405184:	4798      	blx	r3
	if (ul_pull_up_enable) {
  405186:	f015 0f01 	tst.w	r5, #1
  40518a:	d102      	bne.n	405192 <pio_configure_pin+0x7a>
		p_pio->PIO_PUDR = ul_mask;
  40518c:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  40518e:	2001      	movs	r0, #1
  405190:	e7ed      	b.n	40516e <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  405192:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  405194:	2001      	movs	r0, #1
  405196:	e7ea      	b.n	40516e <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  405198:	f000 001f 	and.w	r0, r0, #31
  40519c:	2601      	movs	r6, #1
  40519e:	4086      	lsls	r6, r0
  4051a0:	4632      	mov	r2, r6
  4051a2:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4051a6:	4620      	mov	r0, r4
  4051a8:	4b25      	ldr	r3, [pc, #148]	; (405240 <pio_configure_pin+0x128>)
  4051aa:	4798      	blx	r3
	if (ul_pull_up_enable) {
  4051ac:	f015 0f01 	tst.w	r5, #1
  4051b0:	d102      	bne.n	4051b8 <pio_configure_pin+0xa0>
		p_pio->PIO_PUDR = ul_mask;
  4051b2:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  4051b4:	2001      	movs	r0, #1
  4051b6:	e7da      	b.n	40516e <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  4051b8:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  4051ba:	2001      	movs	r0, #1
  4051bc:	e7d7      	b.n	40516e <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  4051be:	f000 001f 	and.w	r0, r0, #31
  4051c2:	2601      	movs	r6, #1
  4051c4:	4086      	lsls	r6, r0
  4051c6:	4632      	mov	r2, r6
  4051c8:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4051cc:	4620      	mov	r0, r4
  4051ce:	4b1c      	ldr	r3, [pc, #112]	; (405240 <pio_configure_pin+0x128>)
  4051d0:	4798      	blx	r3
	if (ul_pull_up_enable) {
  4051d2:	f015 0f01 	tst.w	r5, #1
  4051d6:	d102      	bne.n	4051de <pio_configure_pin+0xc6>
		p_pio->PIO_PUDR = ul_mask;
  4051d8:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  4051da:	2001      	movs	r0, #1
  4051dc:	e7c7      	b.n	40516e <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  4051de:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  4051e0:	2001      	movs	r0, #1
  4051e2:	e7c4      	b.n	40516e <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  4051e4:	f000 001f 	and.w	r0, r0, #31
  4051e8:	2601      	movs	r6, #1
  4051ea:	4086      	lsls	r6, r0
  4051ec:	4632      	mov	r2, r6
  4051ee:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  4051f2:	4620      	mov	r0, r4
  4051f4:	4b12      	ldr	r3, [pc, #72]	; (405240 <pio_configure_pin+0x128>)
  4051f6:	4798      	blx	r3
	if (ul_pull_up_enable) {
  4051f8:	f015 0f01 	tst.w	r5, #1
  4051fc:	d102      	bne.n	405204 <pio_configure_pin+0xec>
		p_pio->PIO_PUDR = ul_mask;
  4051fe:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  405200:	2001      	movs	r0, #1
  405202:	e7b4      	b.n	40516e <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  405204:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  405206:	2001      	movs	r0, #1
  405208:	e7b1      	b.n	40516e <pio_configure_pin+0x56>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  40520a:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  40520e:	f000 011f 	and.w	r1, r0, #31
  405212:	2601      	movs	r6, #1
  405214:	ea05 0306 	and.w	r3, r5, r6
  405218:	9300      	str	r3, [sp, #0]
  40521a:	f3c5 0380 	ubfx	r3, r5, #2, #1
  40521e:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  405222:	bf14      	ite	ne
  405224:	2200      	movne	r2, #0
  405226:	2201      	moveq	r2, #1
  405228:	fa06 f101 	lsl.w	r1, r6, r1
  40522c:	4620      	mov	r0, r4
  40522e:	4c05      	ldr	r4, [pc, #20]	; (405244 <pio_configure_pin+0x12c>)
  405230:	47a0      	blx	r4
	return 1;
  405232:	4630      	mov	r0, r6
		break;
  405234:	e79b      	b.n	40516e <pio_configure_pin+0x56>
  405236:	bf00      	nop
  405238:	00200707 	.word	0x00200707
  40523c:	00404fe5 	.word	0x00404fe5
  405240:	00404f53 	.word	0x00404f53
  405244:	0040501b 	.word	0x0040501b

00405248 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  405248:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40524c:	4604      	mov	r4, r0
  40524e:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  405250:	4b0e      	ldr	r3, [pc, #56]	; (40528c <pio_handler_process+0x44>)
  405252:	4798      	blx	r3
  405254:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  405256:	4620      	mov	r0, r4
  405258:	4b0d      	ldr	r3, [pc, #52]	; (405290 <pio_handler_process+0x48>)
  40525a:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  40525c:	4005      	ands	r5, r0
  40525e:	d013      	beq.n	405288 <pio_handler_process+0x40>
  405260:	4c0c      	ldr	r4, [pc, #48]	; (405294 <pio_handler_process+0x4c>)
  405262:	f104 0660 	add.w	r6, r4, #96	; 0x60
  405266:	e003      	b.n	405270 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  405268:	42b4      	cmp	r4, r6
  40526a:	d00d      	beq.n	405288 <pio_handler_process+0x40>
  40526c:	3410      	adds	r4, #16
		while (status != 0) {
  40526e:	b15d      	cbz	r5, 405288 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  405270:	6820      	ldr	r0, [r4, #0]
  405272:	4540      	cmp	r0, r8
  405274:	d1f8      	bne.n	405268 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  405276:	6861      	ldr	r1, [r4, #4]
  405278:	4229      	tst	r1, r5
  40527a:	d0f5      	beq.n	405268 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  40527c:	68e3      	ldr	r3, [r4, #12]
  40527e:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  405280:	6863      	ldr	r3, [r4, #4]
  405282:	ea25 0503 	bic.w	r5, r5, r3
  405286:	e7ef      	b.n	405268 <pio_handler_process+0x20>
  405288:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40528c:	0040510f 	.word	0x0040510f
  405290:	00405113 	.word	0x00405113
  405294:	2040c364 	.word	0x2040c364

00405298 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  405298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  40529a:	4c18      	ldr	r4, [pc, #96]	; (4052fc <pio_handler_set+0x64>)
  40529c:	6826      	ldr	r6, [r4, #0]
  40529e:	2e06      	cmp	r6, #6
  4052a0:	d82a      	bhi.n	4052f8 <pio_handler_set+0x60>
  4052a2:	f04f 0c00 	mov.w	ip, #0
  4052a6:	4664      	mov	r4, ip
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  4052a8:	4f15      	ldr	r7, [pc, #84]	; (405300 <pio_handler_set+0x68>)
  4052aa:	e004      	b.n	4052b6 <pio_handler_set+0x1e>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  4052ac:	3401      	adds	r4, #1
  4052ae:	b2e4      	uxtb	r4, r4
  4052b0:	46a4      	mov	ip, r4
  4052b2:	42a6      	cmp	r6, r4
  4052b4:	d309      	bcc.n	4052ca <pio_handler_set+0x32>
		pSource = &(gs_interrupt_sources[i]);
  4052b6:	46a6      	mov	lr, r4
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  4052b8:	0125      	lsls	r5, r4, #4
  4052ba:	597d      	ldr	r5, [r7, r5]
  4052bc:	428d      	cmp	r5, r1
  4052be:	d1f5      	bne.n	4052ac <pio_handler_set+0x14>
  4052c0:	eb07 1504 	add.w	r5, r7, r4, lsl #4
  4052c4:	686d      	ldr	r5, [r5, #4]
  4052c6:	4295      	cmp	r5, r2
  4052c8:	d1f0      	bne.n	4052ac <pio_handler_set+0x14>
			break;
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  4052ca:	4d0d      	ldr	r5, [pc, #52]	; (405300 <pio_handler_set+0x68>)
  4052cc:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
  4052d0:	eb05 040e 	add.w	r4, r5, lr
  4052d4:	f845 100e 	str.w	r1, [r5, lr]
	pSource->mask = ul_mask;
  4052d8:	6062      	str	r2, [r4, #4]
	pSource->attr = ul_attr;
  4052da:	60a3      	str	r3, [r4, #8]
	pSource->handler = p_handler;
  4052dc:	9906      	ldr	r1, [sp, #24]
  4052de:	60e1      	str	r1, [r4, #12]
	if (i == gs_ul_nb_sources + 1) {
  4052e0:	3601      	adds	r6, #1
  4052e2:	4566      	cmp	r6, ip
  4052e4:	d005      	beq.n	4052f2 <pio_handler_set+0x5a>
  4052e6:	4611      	mov	r1, r2
		gs_ul_nb_sources++;
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  4052e8:	461a      	mov	r2, r3
  4052ea:	4b06      	ldr	r3, [pc, #24]	; (405304 <pio_handler_set+0x6c>)
  4052ec:	4798      	blx	r3

	return 0;
  4052ee:	2000      	movs	r0, #0
  4052f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		gs_ul_nb_sources++;
  4052f2:	4902      	ldr	r1, [pc, #8]	; (4052fc <pio_handler_set+0x64>)
  4052f4:	600e      	str	r6, [r1, #0]
  4052f6:	e7f6      	b.n	4052e6 <pio_handler_set+0x4e>
		return 1;
  4052f8:	2001      	movs	r0, #1
}
  4052fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4052fc:	2040c3d4 	.word	0x2040c3d4
  405300:	2040c364 	.word	0x2040c364
  405304:	004050d5 	.word	0x004050d5

00405308 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  405308:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  40530a:	210a      	movs	r1, #10
  40530c:	4801      	ldr	r0, [pc, #4]	; (405314 <PIOA_Handler+0xc>)
  40530e:	4b02      	ldr	r3, [pc, #8]	; (405318 <PIOA_Handler+0x10>)
  405310:	4798      	blx	r3
  405312:	bd08      	pop	{r3, pc}
  405314:	400e0e00 	.word	0x400e0e00
  405318:	00405249 	.word	0x00405249

0040531c <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  40531c:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  40531e:	210b      	movs	r1, #11
  405320:	4801      	ldr	r0, [pc, #4]	; (405328 <PIOB_Handler+0xc>)
  405322:	4b02      	ldr	r3, [pc, #8]	; (40532c <PIOB_Handler+0x10>)
  405324:	4798      	blx	r3
  405326:	bd08      	pop	{r3, pc}
  405328:	400e1000 	.word	0x400e1000
  40532c:	00405249 	.word	0x00405249

00405330 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  405330:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  405332:	210c      	movs	r1, #12
  405334:	4801      	ldr	r0, [pc, #4]	; (40533c <PIOC_Handler+0xc>)
  405336:	4b02      	ldr	r3, [pc, #8]	; (405340 <PIOC_Handler+0x10>)
  405338:	4798      	blx	r3
  40533a:	bd08      	pop	{r3, pc}
  40533c:	400e1200 	.word	0x400e1200
  405340:	00405249 	.word	0x00405249

00405344 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  405344:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  405346:	2110      	movs	r1, #16
  405348:	4801      	ldr	r0, [pc, #4]	; (405350 <PIOD_Handler+0xc>)
  40534a:	4b02      	ldr	r3, [pc, #8]	; (405354 <PIOD_Handler+0x10>)
  40534c:	4798      	blx	r3
  40534e:	bd08      	pop	{r3, pc}
  405350:	400e1400 	.word	0x400e1400
  405354:	00405249 	.word	0x00405249

00405358 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  405358:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  40535a:	2111      	movs	r1, #17
  40535c:	4801      	ldr	r0, [pc, #4]	; (405364 <PIOE_Handler+0xc>)
  40535e:	4b02      	ldr	r3, [pc, #8]	; (405368 <PIOE_Handler+0x10>)
  405360:	4798      	blx	r3
  405362:	bd08      	pop	{r3, pc}
  405364:	400e1600 	.word	0x400e1600
  405368:	00405249 	.word	0x00405249

0040536c <pio_handler_set_priority>:
 * \param p_pio PIO controller base address.
 * \param ul_irqn NVIC line number.
 * \param ul_priority PIO controller interrupts priority.
 */
void pio_handler_set_priority(Pio *p_pio, IRQn_Type ul_irqn, uint32_t ul_priority)
{
  40536c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40536e:	4606      	mov	r6, r0
  405370:	460d      	mov	r5, r1
  405372:	4614      	mov	r4, r2
	uint32_t bitmask = 0;

	bitmask = pio_get_interrupt_mask(p_pio);
  405374:	4b17      	ldr	r3, [pc, #92]	; (4053d4 <pio_handler_set_priority+0x68>)
  405376:	4798      	blx	r3
  405378:	4607      	mov	r7, r0
	pio_disable_interrupt(p_pio, 0xFFFFFFFF);
  40537a:	f04f 31ff 	mov.w	r1, #4294967295
  40537e:	4630      	mov	r0, r6
  405380:	4b15      	ldr	r3, [pc, #84]	; (4053d8 <pio_handler_set_priority+0x6c>)
  405382:	4798      	blx	r3
	pio_get_interrupt_status(p_pio);
  405384:	4630      	mov	r0, r6
  405386:	4b15      	ldr	r3, [pc, #84]	; (4053dc <pio_handler_set_priority+0x70>)
  405388:	4798      	blx	r3
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  40538a:	fa5f fe85 	uxtb.w	lr, r5
  40538e:	f00e 031f 	and.w	r3, lr, #31
  405392:	2201      	movs	r2, #1
  405394:	fa02 f303 	lsl.w	r3, r2, r3
  405398:	0968      	lsrs	r0, r5, #5
  40539a:	4911      	ldr	r1, [pc, #68]	; (4053e0 <pio_handler_set_priority+0x74>)
  40539c:	eb01 0280 	add.w	r2, r1, r0, lsl #2
  4053a0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  4053a4:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
  if(IRQn < 0) {
  4053a8:	2d00      	cmp	r5, #0
  4053aa:	db0a      	blt.n	4053c2 <pio_handler_set_priority+0x56>
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  4053ac:	0164      	lsls	r4, r4, #5
  4053ae:	b2e4      	uxtb	r4, r4
  4053b0:	4a0c      	ldr	r2, [pc, #48]	; (4053e4 <pio_handler_set_priority+0x78>)
  4053b2:	5554      	strb	r4, [r2, r5]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4053b4:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
	NVIC_DisableIRQ(ul_irqn);
	NVIC_ClearPendingIRQ(ul_irqn);
	NVIC_SetPriority(ul_irqn, ul_priority);
	NVIC_EnableIRQ(ul_irqn);
	pio_enable_interrupt(p_pio, bitmask);
  4053b8:	4639      	mov	r1, r7
  4053ba:	4630      	mov	r0, r6
  4053bc:	4b0a      	ldr	r3, [pc, #40]	; (4053e8 <pio_handler_set_priority+0x7c>)
  4053be:	4798      	blx	r3
  4053c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  4053c2:	f00e 0e0f 	and.w	lr, lr, #15
  4053c6:	0164      	lsls	r4, r4, #5
  4053c8:	b2e4      	uxtb	r4, r4
  4053ca:	4a08      	ldr	r2, [pc, #32]	; (4053ec <pio_handler_set_priority+0x80>)
  4053cc:	f802 400e 	strb.w	r4, [r2, lr]
  4053d0:	e7f0      	b.n	4053b4 <pio_handler_set_priority+0x48>
  4053d2:	bf00      	nop
  4053d4:	00405113 	.word	0x00405113
  4053d8:	0040510b 	.word	0x0040510b
  4053dc:	0040510f 	.word	0x0040510f
  4053e0:	e000e100 	.word	0xe000e100
  4053e4:	e000e400 	.word	0xe000e400
  4053e8:	00405107 	.word	0x00405107
  4053ec:	e000ed14 	.word	0xe000ed14

004053f0 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  4053f0:	2803      	cmp	r0, #3
  4053f2:	d011      	beq.n	405418 <pmc_mck_set_division+0x28>
  4053f4:	2804      	cmp	r0, #4
  4053f6:	d012      	beq.n	40541e <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  4053f8:	2802      	cmp	r0, #2
  4053fa:	bf0c      	ite	eq
  4053fc:	f44f 7180 	moveq.w	r1, #256	; 0x100
  405400:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  405402:	4a08      	ldr	r2, [pc, #32]	; (405424 <pmc_mck_set_division+0x34>)
  405404:	6b13      	ldr	r3, [r2, #48]	; 0x30
  405406:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  40540a:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  40540c:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  40540e:	6e93      	ldr	r3, [r2, #104]	; 0x68
  405410:	f013 0f08 	tst.w	r3, #8
  405414:	d0fb      	beq.n	40540e <pmc_mck_set_division+0x1e>
}
  405416:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  405418:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  40541c:	e7f1      	b.n	405402 <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  40541e:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  405422:	e7ee      	b.n	405402 <pmc_mck_set_division+0x12>
  405424:	400e0600 	.word	0x400e0600

00405428 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  405428:	4a17      	ldr	r2, [pc, #92]	; (405488 <pmc_switch_mck_to_pllack+0x60>)
  40542a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40542c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  405430:	4318      	orrs	r0, r3
  405432:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  405434:	6e93      	ldr	r3, [r2, #104]	; 0x68
  405436:	f013 0f08 	tst.w	r3, #8
  40543a:	d10a      	bne.n	405452 <pmc_switch_mck_to_pllack+0x2a>
  40543c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  405440:	4911      	ldr	r1, [pc, #68]	; (405488 <pmc_switch_mck_to_pllack+0x60>)
  405442:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  405444:	f012 0f08 	tst.w	r2, #8
  405448:	d103      	bne.n	405452 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40544a:	3b01      	subs	r3, #1
  40544c:	d1f9      	bne.n	405442 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  40544e:	2001      	movs	r0, #1
  405450:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  405452:	4a0d      	ldr	r2, [pc, #52]	; (405488 <pmc_switch_mck_to_pllack+0x60>)
  405454:	6b13      	ldr	r3, [r2, #48]	; 0x30
  405456:	f023 0303 	bic.w	r3, r3, #3
  40545a:	f043 0302 	orr.w	r3, r3, #2
  40545e:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  405460:	6e93      	ldr	r3, [r2, #104]	; 0x68
  405462:	f013 0f08 	tst.w	r3, #8
  405466:	d10a      	bne.n	40547e <pmc_switch_mck_to_pllack+0x56>
  405468:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  40546c:	4906      	ldr	r1, [pc, #24]	; (405488 <pmc_switch_mck_to_pllack+0x60>)
  40546e:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  405470:	f012 0f08 	tst.w	r2, #8
  405474:	d105      	bne.n	405482 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  405476:	3b01      	subs	r3, #1
  405478:	d1f9      	bne.n	40546e <pmc_switch_mck_to_pllack+0x46>
			return 1;
  40547a:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  40547c:	4770      	bx	lr
	return 0;
  40547e:	2000      	movs	r0, #0
  405480:	4770      	bx	lr
  405482:	2000      	movs	r0, #0
  405484:	4770      	bx	lr
  405486:	bf00      	nop
  405488:	400e0600 	.word	0x400e0600

0040548c <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  40548c:	b9a0      	cbnz	r0, 4054b8 <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40548e:	480e      	ldr	r0, [pc, #56]	; (4054c8 <pmc_switch_mainck_to_xtal+0x3c>)
  405490:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  405492:	0209      	lsls	r1, r1, #8
  405494:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  405496:	4a0d      	ldr	r2, [pc, #52]	; (4054cc <pmc_switch_mainck_to_xtal+0x40>)
  405498:	401a      	ands	r2, r3
  40549a:	4b0d      	ldr	r3, [pc, #52]	; (4054d0 <pmc_switch_mainck_to_xtal+0x44>)
  40549c:	4313      	orrs	r3, r2
  40549e:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4054a0:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4054a2:	4602      	mov	r2, r0
  4054a4:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4054a6:	f013 0f01 	tst.w	r3, #1
  4054aa:	d0fb      	beq.n	4054a4 <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4054ac:	4a06      	ldr	r2, [pc, #24]	; (4054c8 <pmc_switch_mainck_to_xtal+0x3c>)
  4054ae:	6a11      	ldr	r1, [r2, #32]
  4054b0:	4b08      	ldr	r3, [pc, #32]	; (4054d4 <pmc_switch_mainck_to_xtal+0x48>)
  4054b2:	430b      	orrs	r3, r1
  4054b4:	6213      	str	r3, [r2, #32]
  4054b6:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4054b8:	4903      	ldr	r1, [pc, #12]	; (4054c8 <pmc_switch_mainck_to_xtal+0x3c>)
  4054ba:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  4054bc:	4a06      	ldr	r2, [pc, #24]	; (4054d8 <pmc_switch_mainck_to_xtal+0x4c>)
  4054be:	401a      	ands	r2, r3
  4054c0:	4b06      	ldr	r3, [pc, #24]	; (4054dc <pmc_switch_mainck_to_xtal+0x50>)
  4054c2:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4054c4:	620b      	str	r3, [r1, #32]
  4054c6:	4770      	bx	lr
  4054c8:	400e0600 	.word	0x400e0600
  4054cc:	ffc8fffc 	.word	0xffc8fffc
  4054d0:	00370001 	.word	0x00370001
  4054d4:	01370000 	.word	0x01370000
  4054d8:	fec8fffc 	.word	0xfec8fffc
  4054dc:	01370002 	.word	0x01370002

004054e0 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  4054e0:	4b02      	ldr	r3, [pc, #8]	; (4054ec <pmc_osc_is_ready_mainck+0xc>)
  4054e2:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4054e4:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  4054e8:	4770      	bx	lr
  4054ea:	bf00      	nop
  4054ec:	400e0600 	.word	0x400e0600

004054f0 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  4054f0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4054f4:	4b01      	ldr	r3, [pc, #4]	; (4054fc <pmc_disable_pllack+0xc>)
  4054f6:	629a      	str	r2, [r3, #40]	; 0x28
  4054f8:	4770      	bx	lr
  4054fa:	bf00      	nop
  4054fc:	400e0600 	.word	0x400e0600

00405500 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  405500:	4b02      	ldr	r3, [pc, #8]	; (40550c <pmc_is_locked_pllack+0xc>)
  405502:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  405504:	f000 0002 	and.w	r0, r0, #2
  405508:	4770      	bx	lr
  40550a:	bf00      	nop
  40550c:	400e0600 	.word	0x400e0600

00405510 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  405510:	283f      	cmp	r0, #63	; 0x3f
  405512:	d81e      	bhi.n	405552 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  405514:	281f      	cmp	r0, #31
  405516:	d80c      	bhi.n	405532 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  405518:	4b11      	ldr	r3, [pc, #68]	; (405560 <pmc_enable_periph_clk+0x50>)
  40551a:	699a      	ldr	r2, [r3, #24]
  40551c:	2301      	movs	r3, #1
  40551e:	4083      	lsls	r3, r0
  405520:	4393      	bics	r3, r2
  405522:	d018      	beq.n	405556 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  405524:	2301      	movs	r3, #1
  405526:	fa03 f000 	lsl.w	r0, r3, r0
  40552a:	4b0d      	ldr	r3, [pc, #52]	; (405560 <pmc_enable_periph_clk+0x50>)
  40552c:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  40552e:	2000      	movs	r0, #0
  405530:	4770      	bx	lr
		ul_id -= 32;
  405532:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  405534:	4b0a      	ldr	r3, [pc, #40]	; (405560 <pmc_enable_periph_clk+0x50>)
  405536:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  40553a:	2301      	movs	r3, #1
  40553c:	4083      	lsls	r3, r0
  40553e:	4393      	bics	r3, r2
  405540:	d00b      	beq.n	40555a <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  405542:	2301      	movs	r3, #1
  405544:	fa03 f000 	lsl.w	r0, r3, r0
  405548:	4b05      	ldr	r3, [pc, #20]	; (405560 <pmc_enable_periph_clk+0x50>)
  40554a:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  40554e:	2000      	movs	r0, #0
  405550:	4770      	bx	lr
		return 1;
  405552:	2001      	movs	r0, #1
  405554:	4770      	bx	lr
	return 0;
  405556:	2000      	movs	r0, #0
  405558:	4770      	bx	lr
  40555a:	2000      	movs	r0, #0
}
  40555c:	4770      	bx	lr
  40555e:	bf00      	nop
  405560:	400e0600 	.word	0x400e0600

00405564 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  405564:	b508      	push	{r3, lr}
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG51|| SAMG53|| SAMG54)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	if (p_spi == SPI0) {
  405566:	4b07      	ldr	r3, [pc, #28]	; (405584 <spi_enable_clock+0x20>)
  405568:	4298      	cmp	r0, r3
  40556a:	d003      	beq.n	405574 <spi_enable_clock+0x10>
		sysclk_enable_peripheral_clock(ID_SPI0);
	}
	#ifdef SPI1
	else if (p_spi == SPI1) {
  40556c:	4b06      	ldr	r3, [pc, #24]	; (405588 <spi_enable_clock+0x24>)
  40556e:	4298      	cmp	r0, r3
  405570:	d004      	beq.n	40557c <spi_enable_clock+0x18>
  405572:	bd08      	pop	{r3, pc}
  405574:	2015      	movs	r0, #21
  405576:	4b05      	ldr	r3, [pc, #20]	; (40558c <spi_enable_clock+0x28>)
  405578:	4798      	blx	r3
  40557a:	bd08      	pop	{r3, pc}
  40557c:	202a      	movs	r0, #42	; 0x2a
  40557e:	4b03      	ldr	r3, [pc, #12]	; (40558c <spi_enable_clock+0x28>)
  405580:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
  405582:	e7f6      	b.n	405572 <spi_enable_clock+0xe>
  405584:	40008000 	.word	0x40008000
  405588:	40058000 	.word	0x40058000
  40558c:	00405511 	.word	0x00405511

00405590 <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  405590:	6843      	ldr	r3, [r0, #4]
  405592:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  405596:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  405598:	6843      	ldr	r3, [r0, #4]
  40559a:	0409      	lsls	r1, r1, #16
  40559c:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
  4055a0:	4319      	orrs	r1, r3
  4055a2:	6041      	str	r1, [r0, #4]
  4055a4:	4770      	bx	lr

004055a6 <spi_read>:
 *
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_read(Spi *p_spi, uint16_t *us_data, uint8_t *p_pcs)
{
  4055a6:	b410      	push	{r4}
	uint32_t timeout = SPI_TIMEOUT;
	static uint32_t reg_value;

	while (!(p_spi->SPI_SR & SPI_SR_RDRF)) {
  4055a8:	f643 2399 	movw	r3, #15001	; 0x3a99
  4055ac:	6904      	ldr	r4, [r0, #16]
  4055ae:	f014 0f01 	tst.w	r4, #1
  4055b2:	d103      	bne.n	4055bc <spi_read+0x16>
		if (!timeout--) {
  4055b4:	3b01      	subs	r3, #1
  4055b6:	d1f9      	bne.n	4055ac <spi_read+0x6>
			return SPI_ERROR_TIMEOUT;
  4055b8:	2001      	movs	r0, #1
  4055ba:	e009      	b.n	4055d0 <spi_read+0x2a>
		}
	}

	reg_value = p_spi->SPI_RDR;
  4055bc:	6883      	ldr	r3, [r0, #8]
	if (p_spi->SPI_MR & SPI_MR_PS) {
  4055be:	6840      	ldr	r0, [r0, #4]
	if (spi_get_peripheral_select_mode(p_spi)) {
  4055c0:	f010 0f02 	tst.w	r0, #2
  4055c4:	d002      	beq.n	4055cc <spi_read+0x26>
		*p_pcs = (uint8_t) ((reg_value & SPI_RDR_PCS_Msk) >> SPI_RDR_PCS_Pos);
  4055c6:	f3c3 4003 	ubfx	r0, r3, #16, #4
  4055ca:	7010      	strb	r0, [r2, #0]
	}
	*us_data = (uint16_t) (reg_value & SPI_RDR_RD_Msk);
  4055cc:	800b      	strh	r3, [r1, #0]

	return SPI_OK;
  4055ce:	2000      	movs	r0, #0
}
  4055d0:	f85d 4b04 	ldr.w	r4, [sp], #4
  4055d4:	4770      	bx	lr

004055d6 <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
  4055d6:	b430      	push	{r4, r5}
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  4055d8:	f643 2499 	movw	r4, #15001	; 0x3a99
  4055dc:	6905      	ldr	r5, [r0, #16]
  4055de:	f015 0f02 	tst.w	r5, #2
  4055e2:	d103      	bne.n	4055ec <spi_write+0x16>
		if (!timeout--) {
  4055e4:	3c01      	subs	r4, #1
  4055e6:	d1f9      	bne.n	4055dc <spi_write+0x6>
			return SPI_ERROR_TIMEOUT;
  4055e8:	2001      	movs	r0, #1
  4055ea:	e00c      	b.n	405606 <spi_write+0x30>
  4055ec:	6844      	ldr	r4, [r0, #4]
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
  4055ee:	f014 0f02 	tst.w	r4, #2
  4055f2:	d006      	beq.n	405602 <spi_write+0x2c>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
  4055f4:	0412      	lsls	r2, r2, #16
  4055f6:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
  4055fa:	4311      	orrs	r1, r2
		if (uc_last) {
  4055fc:	b10b      	cbz	r3, 405602 <spi_write+0x2c>
			value |= SPI_TDR_LASTXFER;
  4055fe:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
		}
	} else {
		value = SPI_TDR_TD(us_data);
	}

	p_spi->SPI_TDR = value;
  405602:	60c1      	str	r1, [r0, #12]

	return SPI_OK;
  405604:	2000      	movs	r0, #0
}
  405606:	bc30      	pop	{r4, r5}
  405608:	4770      	bx	lr

0040560a <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
  40560a:	b932      	cbnz	r2, 40561a <spi_set_clock_polarity+0x10>
  40560c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  405610:	6b03      	ldr	r3, [r0, #48]	; 0x30
  405612:	f023 0301 	bic.w	r3, r3, #1
  405616:	6303      	str	r3, [r0, #48]	; 0x30
  405618:	4770      	bx	lr
  40561a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  40561e:	6b03      	ldr	r3, [r0, #48]	; 0x30
  405620:	f043 0301 	orr.w	r3, r3, #1
  405624:	6303      	str	r3, [r0, #48]	; 0x30
  405626:	4770      	bx	lr

00405628 <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
  405628:	b932      	cbnz	r2, 405638 <spi_set_clock_phase+0x10>
  40562a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  40562e:	6b03      	ldr	r3, [r0, #48]	; 0x30
  405630:	f023 0302 	bic.w	r3, r3, #2
  405634:	6303      	str	r3, [r0, #48]	; 0x30
  405636:	4770      	bx	lr
  405638:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  40563c:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40563e:	f043 0302 	orr.w	r3, r3, #2
  405642:	6303      	str	r3, [r0, #48]	; 0x30
  405644:	4770      	bx	lr

00405646 <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  405646:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  40564a:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  40564c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  405650:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  405652:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  405654:	431a      	orrs	r2, r3
  405656:	630a      	str	r2, [r1, #48]	; 0x30
  405658:	4770      	bx	lr

0040565a <spi_calc_baudrate_div>:
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
	int baud_div = div_ceil(mck, baudrate);
  40565a:	1e43      	subs	r3, r0, #1
  40565c:	4419      	add	r1, r3
  40565e:	fbb1 f0f0 	udiv	r0, r1, r0

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
  405662:	1e43      	subs	r3, r0, #1
  405664:	2bfe      	cmp	r3, #254	; 0xfe
		return -1;
	}

	return baud_div;
  405666:	bf94      	ite	ls
  405668:	b200      	sxthls	r0, r0
		return -1;
  40566a:	f04f 30ff 	movhi.w	r0, #4294967295
}
  40566e:	4770      	bx	lr

00405670 <spi_set_baudrate_div>:
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider)
  405670:	b17a      	cbz	r2, 405692 <spi_set_baudrate_div+0x22>
{
  405672:	b410      	push	{r4}
  405674:	4614      	mov	r4, r2
  405676:	eb00 0181 	add.w	r1, r0, r1, lsl #2
        return -1;

	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  40567a:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  40567c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
  405680:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  405682:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  405684:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  405688:	630a      	str	r2, [r1, #48]	; 0x30
    return 0;
  40568a:	2000      	movs	r0, #0
}
  40568c:	f85d 4b04 	ldr.w	r4, [sp], #4
  405690:	4770      	bx	lr
        return -1;
  405692:	f04f 30ff 	mov.w	r0, #4294967295
  405696:	4770      	bx	lr

00405698 <spi_set_transfer_delay>:
 * \param uc_dlybs Delay before SPCK (in number of MCK clocks).
 * \param uc_dlybct Delay between consecutive transfers (in number of MCK clocks).
 */
void spi_set_transfer_delay(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_dlybs, uint8_t uc_dlybct)
{
  405698:	b410      	push	{r4}
  40569a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
  40569e:	6b08      	ldr	r0, [r1, #48]	; 0x30
  4056a0:	b280      	uxth	r0, r0
  4056a2:	6308      	str	r0, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
  4056a4:	6b0c      	ldr	r4, [r1, #48]	; 0x30
  4056a6:	ea44 6303 	orr.w	r3, r4, r3, lsl #24
  4056aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  4056ae:	630b      	str	r3, [r1, #48]	; 0x30
			| SPI_CSR_DLYBCT(uc_dlybct);
}
  4056b0:	f85d 4b04 	ldr.w	r4, [sp], #4
  4056b4:	4770      	bx	lr

004056b6 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  4056b6:	6943      	ldr	r3, [r0, #20]
  4056b8:	f013 0f02 	tst.w	r3, #2
  4056bc:	d002      	beq.n	4056c4 <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  4056be:	61c1      	str	r1, [r0, #28]
	return 0;
  4056c0:	2000      	movs	r0, #0
  4056c2:	4770      	bx	lr
		return 1;
  4056c4:	2001      	movs	r0, #1
}
  4056c6:	4770      	bx	lr

004056c8 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  4056c8:	6943      	ldr	r3, [r0, #20]
  4056ca:	f013 0f01 	tst.w	r3, #1
  4056ce:	d003      	beq.n	4056d8 <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  4056d0:	6983      	ldr	r3, [r0, #24]
  4056d2:	700b      	strb	r3, [r1, #0]
	return 0;
  4056d4:	2000      	movs	r0, #0
  4056d6:	4770      	bx	lr
		return 1;
  4056d8:	2001      	movs	r0, #1
}
  4056da:	4770      	bx	lr

004056dc <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  4056dc:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  4056de:	010b      	lsls	r3, r1, #4
  4056e0:	4293      	cmp	r3, r2
  4056e2:	d914      	bls.n	40570e <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  4056e4:	00c9      	lsls	r1, r1, #3
  4056e6:	084b      	lsrs	r3, r1, #1
  4056e8:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  4056ec:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  4056f0:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  4056f2:	1e5c      	subs	r4, r3, #1
  4056f4:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  4056f8:	428c      	cmp	r4, r1
  4056fa:	d901      	bls.n	405700 <usart_set_async_baudrate+0x24>
		return 1;
  4056fc:	2001      	movs	r0, #1
  4056fe:	e017      	b.n	405730 <usart_set_async_baudrate+0x54>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  405700:	6841      	ldr	r1, [r0, #4]
  405702:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  405706:	6041      	str	r1, [r0, #4]
  405708:	e00c      	b.n	405724 <usart_set_async_baudrate+0x48>
		return 1;
  40570a:	2001      	movs	r0, #1
  40570c:	e010      	b.n	405730 <usart_set_async_baudrate+0x54>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  40570e:	0859      	lsrs	r1, r3, #1
  405710:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  405714:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
  405718:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  40571a:	1e5c      	subs	r4, r3, #1
  40571c:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  405720:	428c      	cmp	r4, r1
  405722:	d8f2      	bhi.n	40570a <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  405724:	0412      	lsls	r2, r2, #16
  405726:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  40572a:	431a      	orrs	r2, r3
  40572c:	6202      	str	r2, [r0, #32]

	return 0;
  40572e:	2000      	movs	r0, #0
}
  405730:	f85d 4b04 	ldr.w	r4, [sp], #4
  405734:	4770      	bx	lr
	...

00405738 <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  405738:	4b08      	ldr	r3, [pc, #32]	; (40575c <usart_reset+0x24>)
  40573a:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
  40573e:	2300      	movs	r3, #0
  405740:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  405742:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  405744:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  405746:	2388      	movs	r3, #136	; 0x88
  405748:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  40574a:	2324      	movs	r3, #36	; 0x24
  40574c:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
  40574e:	f44f 7380 	mov.w	r3, #256	; 0x100
  405752:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
  405754:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  405758:	6003      	str	r3, [r0, #0]
  40575a:	4770      	bx	lr
  40575c:	55534100 	.word	0x55534100

00405760 <usart_init_rs232>:
{
  405760:	b570      	push	{r4, r5, r6, lr}
  405762:	4605      	mov	r5, r0
  405764:	460c      	mov	r4, r1
  405766:	4616      	mov	r6, r2
	usart_reset(p_usart);
  405768:	4b0f      	ldr	r3, [pc, #60]	; (4057a8 <usart_init_rs232+0x48>)
  40576a:	4798      	blx	r3
	ul_reg_val = 0;
  40576c:	2200      	movs	r2, #0
  40576e:	4b0f      	ldr	r3, [pc, #60]	; (4057ac <usart_init_rs232+0x4c>)
  405770:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  405772:	b1a4      	cbz	r4, 40579e <usart_init_rs232+0x3e>
  405774:	4632      	mov	r2, r6
  405776:	6821      	ldr	r1, [r4, #0]
  405778:	4628      	mov	r0, r5
  40577a:	4b0d      	ldr	r3, [pc, #52]	; (4057b0 <usart_init_rs232+0x50>)
  40577c:	4798      	blx	r3
  40577e:	4602      	mov	r2, r0
  405780:	b978      	cbnz	r0, 4057a2 <usart_init_rs232+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  405782:	6863      	ldr	r3, [r4, #4]
  405784:	68a1      	ldr	r1, [r4, #8]
  405786:	430b      	orrs	r3, r1
  405788:	6921      	ldr	r1, [r4, #16]
  40578a:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  40578c:	68e1      	ldr	r1, [r4, #12]
  40578e:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  405790:	4906      	ldr	r1, [pc, #24]	; (4057ac <usart_init_rs232+0x4c>)
  405792:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
  405794:	6869      	ldr	r1, [r5, #4]
  405796:	430b      	orrs	r3, r1
  405798:	606b      	str	r3, [r5, #4]
}
  40579a:	4610      	mov	r0, r2
  40579c:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
  40579e:	2201      	movs	r2, #1
  4057a0:	e7fb      	b.n	40579a <usart_init_rs232+0x3a>
  4057a2:	2201      	movs	r2, #1
  4057a4:	e7f9      	b.n	40579a <usart_init_rs232+0x3a>
  4057a6:	bf00      	nop
  4057a8:	00405739 	.word	0x00405739
  4057ac:	2040c3d8 	.word	0x2040c3d8
  4057b0:	004056dd 	.word	0x004056dd

004057b4 <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
  4057b4:	2340      	movs	r3, #64	; 0x40
  4057b6:	6003      	str	r3, [r0, #0]
  4057b8:	4770      	bx	lr

004057ba <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
  4057ba:	2310      	movs	r3, #16
  4057bc:	6003      	str	r3, [r0, #0]
  4057be:	4770      	bx	lr

004057c0 <usart_write>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  4057c0:	6943      	ldr	r3, [r0, #20]
  4057c2:	f013 0f02 	tst.w	r3, #2
  4057c6:	d004      	beq.n	4057d2 <usart_write+0x12>
	p_usart->US_THR = US_THR_TXCHR(c);
  4057c8:	f3c1 0108 	ubfx	r1, r1, #0, #9
  4057cc:	61c1      	str	r1, [r0, #28]
	return 0;
  4057ce:	2000      	movs	r0, #0
  4057d0:	4770      	bx	lr
		return 1;
  4057d2:	2001      	movs	r0, #1
}
  4057d4:	4770      	bx	lr

004057d6 <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  4057d6:	6943      	ldr	r3, [r0, #20]
  4057d8:	f013 0f01 	tst.w	r3, #1
  4057dc:	d005      	beq.n	4057ea <usart_read+0x14>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  4057de:	6983      	ldr	r3, [r0, #24]
  4057e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
  4057e4:	600b      	str	r3, [r1, #0]
	return 0;
  4057e6:	2000      	movs	r0, #0
  4057e8:	4770      	bx	lr
		return 1;
  4057ea:	2001      	movs	r0, #1
}
  4057ec:	4770      	bx	lr

004057ee <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4057ee:	e7fe      	b.n	4057ee <Dummy_Handler>

004057f0 <Reset_Handler>:
{
  4057f0:	b500      	push	{lr}
  4057f2:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  4057f4:	4b25      	ldr	r3, [pc, #148]	; (40588c <Reset_Handler+0x9c>)
  4057f6:	4a26      	ldr	r2, [pc, #152]	; (405890 <Reset_Handler+0xa0>)
  4057f8:	429a      	cmp	r2, r3
  4057fa:	d010      	beq.n	40581e <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  4057fc:	4b25      	ldr	r3, [pc, #148]	; (405894 <Reset_Handler+0xa4>)
  4057fe:	4a23      	ldr	r2, [pc, #140]	; (40588c <Reset_Handler+0x9c>)
  405800:	429a      	cmp	r2, r3
  405802:	d20c      	bcs.n	40581e <Reset_Handler+0x2e>
  405804:	3b01      	subs	r3, #1
  405806:	1a9b      	subs	r3, r3, r2
  405808:	f023 0303 	bic.w	r3, r3, #3
  40580c:	3304      	adds	r3, #4
  40580e:	4413      	add	r3, r2
  405810:	491f      	ldr	r1, [pc, #124]	; (405890 <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  405812:	f851 0b04 	ldr.w	r0, [r1], #4
  405816:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  40581a:	429a      	cmp	r2, r3
  40581c:	d1f9      	bne.n	405812 <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  40581e:	4b1e      	ldr	r3, [pc, #120]	; (405898 <Reset_Handler+0xa8>)
  405820:	4a1e      	ldr	r2, [pc, #120]	; (40589c <Reset_Handler+0xac>)
  405822:	429a      	cmp	r2, r3
  405824:	d20a      	bcs.n	40583c <Reset_Handler+0x4c>
  405826:	3b01      	subs	r3, #1
  405828:	1a9b      	subs	r3, r3, r2
  40582a:	f023 0303 	bic.w	r3, r3, #3
  40582e:	3304      	adds	r3, #4
  405830:	4413      	add	r3, r2
                *pDest++ = 0;
  405832:	2100      	movs	r1, #0
  405834:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  405838:	4293      	cmp	r3, r2
  40583a:	d1fb      	bne.n	405834 <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  40583c:	4a18      	ldr	r2, [pc, #96]	; (4058a0 <Reset_Handler+0xb0>)
  40583e:	4b19      	ldr	r3, [pc, #100]	; (4058a4 <Reset_Handler+0xb4>)
  405840:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  405844:	6093      	str	r3, [r2, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  405846:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  40584a:	fab3 f383 	clz	r3, r3
  40584e:	095b      	lsrs	r3, r3, #5
  405850:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  405852:	b672      	cpsid	i
  __ASM volatile ("dmb");
  405854:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  405858:	2200      	movs	r2, #0
  40585a:	4b13      	ldr	r3, [pc, #76]	; (4058a8 <Reset_Handler+0xb8>)
  40585c:	701a      	strb	r2, [r3, #0]
	return flags;
  40585e:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  405860:	4a12      	ldr	r2, [pc, #72]	; (4058ac <Reset_Handler+0xbc>)
  405862:	6813      	ldr	r3, [r2, #0]
  405864:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  405868:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  40586a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40586e:	f3bf 8f6f 	isb	sy
	if (cpu_irq_is_enabled_flags(flags))
  405872:	b129      	cbz	r1, 405880 <Reset_Handler+0x90>
		cpu_irq_enable();
  405874:	2201      	movs	r2, #1
  405876:	4b0c      	ldr	r3, [pc, #48]	; (4058a8 <Reset_Handler+0xb8>)
  405878:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  40587a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  40587e:	b662      	cpsie	i
        __libc_init_array();
  405880:	4b0b      	ldr	r3, [pc, #44]	; (4058b0 <Reset_Handler+0xc0>)
  405882:	4798      	blx	r3
        main();
  405884:	4b0b      	ldr	r3, [pc, #44]	; (4058b4 <Reset_Handler+0xc4>)
  405886:	4798      	blx	r3
  405888:	e7fe      	b.n	405888 <Reset_Handler+0x98>
  40588a:	bf00      	nop
  40588c:	20400000 	.word	0x20400000
  405890:	0040dc5c 	.word	0x0040dc5c
  405894:	204009d0 	.word	0x204009d0
  405898:	2040cb84 	.word	0x2040cb84
  40589c:	204009d0 	.word	0x204009d0
  4058a0:	e000ed00 	.word	0xe000ed00
  4058a4:	00400000 	.word	0x00400000
  4058a8:	20400018 	.word	0x20400018
  4058ac:	e000ed88 	.word	0xe000ed88
  4058b0:	004064c5 	.word	0x004064c5
  4058b4:	0040635d 	.word	0x0040635d

004058b8 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  4058b8:	4b3b      	ldr	r3, [pc, #236]	; (4059a8 <SystemCoreClockUpdate+0xf0>)
  4058ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4058bc:	f003 0303 	and.w	r3, r3, #3
  4058c0:	2b01      	cmp	r3, #1
  4058c2:	d01d      	beq.n	405900 <SystemCoreClockUpdate+0x48>
  4058c4:	b183      	cbz	r3, 4058e8 <SystemCoreClockUpdate+0x30>
  4058c6:	2b02      	cmp	r3, #2
  4058c8:	d036      	beq.n	405938 <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  4058ca:	4b37      	ldr	r3, [pc, #220]	; (4059a8 <SystemCoreClockUpdate+0xf0>)
  4058cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4058ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4058d2:	2b70      	cmp	r3, #112	; 0x70
  4058d4:	d05f      	beq.n	405996 <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  4058d6:	4b34      	ldr	r3, [pc, #208]	; (4059a8 <SystemCoreClockUpdate+0xf0>)
  4058d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4058da:	4934      	ldr	r1, [pc, #208]	; (4059ac <SystemCoreClockUpdate+0xf4>)
  4058dc:	f3c2 1202 	ubfx	r2, r2, #4, #3
  4058e0:	680b      	ldr	r3, [r1, #0]
  4058e2:	40d3      	lsrs	r3, r2
  4058e4:	600b      	str	r3, [r1, #0]
  4058e6:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  4058e8:	4b31      	ldr	r3, [pc, #196]	; (4059b0 <SystemCoreClockUpdate+0xf8>)
  4058ea:	695b      	ldr	r3, [r3, #20]
  4058ec:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  4058f0:	bf14      	ite	ne
  4058f2:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  4058f6:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  4058fa:	4b2c      	ldr	r3, [pc, #176]	; (4059ac <SystemCoreClockUpdate+0xf4>)
  4058fc:	601a      	str	r2, [r3, #0]
  4058fe:	e7e4      	b.n	4058ca <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  405900:	4b29      	ldr	r3, [pc, #164]	; (4059a8 <SystemCoreClockUpdate+0xf0>)
  405902:	6a1b      	ldr	r3, [r3, #32]
  405904:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  405908:	d003      	beq.n	405912 <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  40590a:	4a2a      	ldr	r2, [pc, #168]	; (4059b4 <SystemCoreClockUpdate+0xfc>)
  40590c:	4b27      	ldr	r3, [pc, #156]	; (4059ac <SystemCoreClockUpdate+0xf4>)
  40590e:	601a      	str	r2, [r3, #0]
  405910:	e7db      	b.n	4058ca <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  405912:	4a29      	ldr	r2, [pc, #164]	; (4059b8 <SystemCoreClockUpdate+0x100>)
  405914:	4b25      	ldr	r3, [pc, #148]	; (4059ac <SystemCoreClockUpdate+0xf4>)
  405916:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  405918:	4b23      	ldr	r3, [pc, #140]	; (4059a8 <SystemCoreClockUpdate+0xf0>)
  40591a:	6a1b      	ldr	r3, [r3, #32]
  40591c:	f003 0370 	and.w	r3, r3, #112	; 0x70
  405920:	2b10      	cmp	r3, #16
  405922:	d005      	beq.n	405930 <SystemCoreClockUpdate+0x78>
  405924:	2b20      	cmp	r3, #32
  405926:	d1d0      	bne.n	4058ca <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  405928:	4a22      	ldr	r2, [pc, #136]	; (4059b4 <SystemCoreClockUpdate+0xfc>)
  40592a:	4b20      	ldr	r3, [pc, #128]	; (4059ac <SystemCoreClockUpdate+0xf4>)
  40592c:	601a      	str	r2, [r3, #0]
          break;
  40592e:	e7cc      	b.n	4058ca <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  405930:	4a22      	ldr	r2, [pc, #136]	; (4059bc <SystemCoreClockUpdate+0x104>)
  405932:	4b1e      	ldr	r3, [pc, #120]	; (4059ac <SystemCoreClockUpdate+0xf4>)
  405934:	601a      	str	r2, [r3, #0]
          break;
  405936:	e7c8      	b.n	4058ca <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  405938:	4b1b      	ldr	r3, [pc, #108]	; (4059a8 <SystemCoreClockUpdate+0xf0>)
  40593a:	6a1b      	ldr	r3, [r3, #32]
  40593c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  405940:	d016      	beq.n	405970 <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  405942:	4a1c      	ldr	r2, [pc, #112]	; (4059b4 <SystemCoreClockUpdate+0xfc>)
  405944:	4b19      	ldr	r3, [pc, #100]	; (4059ac <SystemCoreClockUpdate+0xf4>)
  405946:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  405948:	4b17      	ldr	r3, [pc, #92]	; (4059a8 <SystemCoreClockUpdate+0xf0>)
  40594a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40594c:	f003 0303 	and.w	r3, r3, #3
  405950:	2b02      	cmp	r3, #2
  405952:	d1ba      	bne.n	4058ca <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  405954:	4a14      	ldr	r2, [pc, #80]	; (4059a8 <SystemCoreClockUpdate+0xf0>)
  405956:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  405958:	6a92      	ldr	r2, [r2, #40]	; 0x28
  40595a:	4814      	ldr	r0, [pc, #80]	; (4059ac <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  40595c:	f3c1 410a 	ubfx	r1, r1, #16, #11
  405960:	6803      	ldr	r3, [r0, #0]
  405962:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  405966:	b2d2      	uxtb	r2, r2
  405968:	fbb3 f3f2 	udiv	r3, r3, r2
  40596c:	6003      	str	r3, [r0, #0]
  40596e:	e7ac      	b.n	4058ca <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  405970:	4a11      	ldr	r2, [pc, #68]	; (4059b8 <SystemCoreClockUpdate+0x100>)
  405972:	4b0e      	ldr	r3, [pc, #56]	; (4059ac <SystemCoreClockUpdate+0xf4>)
  405974:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  405976:	4b0c      	ldr	r3, [pc, #48]	; (4059a8 <SystemCoreClockUpdate+0xf0>)
  405978:	6a1b      	ldr	r3, [r3, #32]
  40597a:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40597e:	2b10      	cmp	r3, #16
  405980:	d005      	beq.n	40598e <SystemCoreClockUpdate+0xd6>
  405982:	2b20      	cmp	r3, #32
  405984:	d1e0      	bne.n	405948 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  405986:	4a0b      	ldr	r2, [pc, #44]	; (4059b4 <SystemCoreClockUpdate+0xfc>)
  405988:	4b08      	ldr	r3, [pc, #32]	; (4059ac <SystemCoreClockUpdate+0xf4>)
  40598a:	601a      	str	r2, [r3, #0]
          break;
  40598c:	e7dc      	b.n	405948 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  40598e:	4a0b      	ldr	r2, [pc, #44]	; (4059bc <SystemCoreClockUpdate+0x104>)
  405990:	4b06      	ldr	r3, [pc, #24]	; (4059ac <SystemCoreClockUpdate+0xf4>)
  405992:	601a      	str	r2, [r3, #0]
          break;
  405994:	e7d8      	b.n	405948 <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  405996:	4a05      	ldr	r2, [pc, #20]	; (4059ac <SystemCoreClockUpdate+0xf4>)
  405998:	6813      	ldr	r3, [r2, #0]
  40599a:	4909      	ldr	r1, [pc, #36]	; (4059c0 <SystemCoreClockUpdate+0x108>)
  40599c:	fba1 1303 	umull	r1, r3, r1, r3
  4059a0:	085b      	lsrs	r3, r3, #1
  4059a2:	6013      	str	r3, [r2, #0]
  4059a4:	4770      	bx	lr
  4059a6:	bf00      	nop
  4059a8:	400e0600 	.word	0x400e0600
  4059ac:	2040001c 	.word	0x2040001c
  4059b0:	400e1810 	.word	0x400e1810
  4059b4:	00b71b00 	.word	0x00b71b00
  4059b8:	003d0900 	.word	0x003d0900
  4059bc:	007a1200 	.word	0x007a1200
  4059c0:	aaaaaaab 	.word	0xaaaaaaab

004059c4 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  4059c4:	4b12      	ldr	r3, [pc, #72]	; (405a10 <system_init_flash+0x4c>)
  4059c6:	4298      	cmp	r0, r3
  4059c8:	d911      	bls.n	4059ee <system_init_flash+0x2a>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  4059ca:	4b12      	ldr	r3, [pc, #72]	; (405a14 <system_init_flash+0x50>)
  4059cc:	4298      	cmp	r0, r3
  4059ce:	d913      	bls.n	4059f8 <system_init_flash+0x34>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  4059d0:	4b11      	ldr	r3, [pc, #68]	; (405a18 <system_init_flash+0x54>)
  4059d2:	4298      	cmp	r0, r3
  4059d4:	d914      	bls.n	405a00 <system_init_flash+0x3c>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  4059d6:	4b11      	ldr	r3, [pc, #68]	; (405a1c <system_init_flash+0x58>)
  4059d8:	4298      	cmp	r0, r3
  4059da:	d915      	bls.n	405a08 <system_init_flash+0x44>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  4059dc:	4b10      	ldr	r3, [pc, #64]	; (405a20 <system_init_flash+0x5c>)
  4059de:	4298      	cmp	r0, r3
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  4059e0:	bf94      	ite	ls
  4059e2:	f04f 2204 	movls.w	r2, #67109888	; 0x4000400
          }
          else
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  4059e6:	4a0f      	ldrhi	r2, [pc, #60]	; (405a24 <system_init_flash+0x60>)
  4059e8:	4b0f      	ldr	r3, [pc, #60]	; (405a28 <system_init_flash+0x64>)
  4059ea:	601a      	str	r2, [r3, #0]
  4059ec:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  4059ee:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  4059f2:	4b0d      	ldr	r3, [pc, #52]	; (405a28 <system_init_flash+0x64>)
  4059f4:	601a      	str	r2, [r3, #0]
  4059f6:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  4059f8:	4a0c      	ldr	r2, [pc, #48]	; (405a2c <system_init_flash+0x68>)
  4059fa:	4b0b      	ldr	r3, [pc, #44]	; (405a28 <system_init_flash+0x64>)
  4059fc:	601a      	str	r2, [r3, #0]
  4059fe:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  405a00:	4a0b      	ldr	r2, [pc, #44]	; (405a30 <system_init_flash+0x6c>)
  405a02:	4b09      	ldr	r3, [pc, #36]	; (405a28 <system_init_flash+0x64>)
  405a04:	601a      	str	r2, [r3, #0]
  405a06:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  405a08:	4a0a      	ldr	r2, [pc, #40]	; (405a34 <system_init_flash+0x70>)
  405a0a:	4b07      	ldr	r3, [pc, #28]	; (405a28 <system_init_flash+0x64>)
  405a0c:	601a      	str	r2, [r3, #0]
  405a0e:	4770      	bx	lr
  405a10:	01312cff 	.word	0x01312cff
  405a14:	026259ff 	.word	0x026259ff
  405a18:	039386ff 	.word	0x039386ff
  405a1c:	04c4b3ff 	.word	0x04c4b3ff
  405a20:	05f5e0ff 	.word	0x05f5e0ff
  405a24:	04000500 	.word	0x04000500
  405a28:	400e0c00 	.word	0x400e0c00
  405a2c:	04000100 	.word	0x04000100
  405a30:	04000200 	.word	0x04000200
  405a34:	04000300 	.word	0x04000300

00405a38 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  405a38:	4b0a      	ldr	r3, [pc, #40]	; (405a64 <_sbrk+0x2c>)
  405a3a:	681b      	ldr	r3, [r3, #0]
  405a3c:	b153      	cbz	r3, 405a54 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  405a3e:	4b09      	ldr	r3, [pc, #36]	; (405a64 <_sbrk+0x2c>)
  405a40:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  405a42:	181a      	adds	r2, r3, r0
  405a44:	4908      	ldr	r1, [pc, #32]	; (405a68 <_sbrk+0x30>)
  405a46:	4291      	cmp	r1, r2
  405a48:	db08      	blt.n	405a5c <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  405a4a:	4610      	mov	r0, r2
  405a4c:	4a05      	ldr	r2, [pc, #20]	; (405a64 <_sbrk+0x2c>)
  405a4e:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  405a50:	4618      	mov	r0, r3
  405a52:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  405a54:	4a05      	ldr	r2, [pc, #20]	; (405a6c <_sbrk+0x34>)
  405a56:	4b03      	ldr	r3, [pc, #12]	; (405a64 <_sbrk+0x2c>)
  405a58:	601a      	str	r2, [r3, #0]
  405a5a:	e7f0      	b.n	405a3e <_sbrk+0x6>
		return (caddr_t) -1;	
  405a5c:	f04f 30ff 	mov.w	r0, #4294967295
}
  405a60:	4770      	bx	lr
  405a62:	bf00      	nop
  405a64:	2040c3dc 	.word	0x2040c3dc
  405a68:	2045fffc 	.word	0x2045fffc
  405a6c:	2040ed88 	.word	0x2040ed88

00405a70 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  405a70:	f04f 30ff 	mov.w	r0, #4294967295
  405a74:	4770      	bx	lr

00405a76 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  405a76:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  405a7a:	604b      	str	r3, [r1, #4]

	return 0;
}
  405a7c:	2000      	movs	r0, #0
  405a7e:	4770      	bx	lr

00405a80 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  405a80:	2001      	movs	r0, #1
  405a82:	4770      	bx	lr

00405a84 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  405a84:	2000      	movs	r0, #0
  405a86:	4770      	bx	lr

00405a88 <but1_callback>:
	xQueueSendFromISR( xQueueAfec, &analog_value, 0);
	//temp_value = afec_channel_get_value(AFEC0, AFEC_CHANNEL);
	
}

void but1_callback(void){
  405a88:	b510      	push	{r4, lr}
  405a8a:	b082      	sub	sp, #8
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
  405a8c:	2300      	movs	r3, #0
  405a8e:	aa02      	add	r2, sp, #8
  405a90:	f842 3d04 	str.w	r3, [r2, #-4]!
	int32_t digital_value;
	xQueueSendFromISR(xQueueBut,&digital_value, &xHigherPriorityTaskWoken);
  405a94:	4669      	mov	r1, sp
  405a96:	4803      	ldr	r0, [pc, #12]	; (405aa4 <but1_callback+0x1c>)
  405a98:	6800      	ldr	r0, [r0, #0]
  405a9a:	4c03      	ldr	r4, [pc, #12]	; (405aa8 <but1_callback+0x20>)
  405a9c:	47a0      	blx	r4
}
  405a9e:	b002      	add	sp, #8
  405aa0:	bd10      	pop	{r4, pc}
  405aa2:	bf00      	nop
  405aa4:	2040cb2c 	.word	0x2040cb2c
  405aa8:	00400e5d 	.word	0x00400e5d

00405aac <AFEC_callback>:
{
  405aac:	b510      	push	{r4, lr}
  405aae:	b082      	sub	sp, #8
	afec->AFEC_CSELR = afec_ch;
  405ab0:	4b06      	ldr	r3, [pc, #24]	; (405acc <AFEC_callback+0x20>)
  405ab2:	2200      	movs	r2, #0
  405ab4:	665a      	str	r2, [r3, #100]	; 0x64
	return afec->AFEC_CDR;
  405ab6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	analog_value = afec_channel_get_value(AFEC0, AFEC_CHANNEL_RES_PIN);
  405ab8:	a902      	add	r1, sp, #8
  405aba:	f841 3d04 	str.w	r3, [r1, #-4]!
	xQueueSendFromISR( xQueueAfec, &analog_value, 0);
  405abe:	4613      	mov	r3, r2
  405ac0:	4803      	ldr	r0, [pc, #12]	; (405ad0 <AFEC_callback+0x24>)
  405ac2:	6800      	ldr	r0, [r0, #0]
  405ac4:	4c03      	ldr	r4, [pc, #12]	; (405ad4 <AFEC_callback+0x28>)
  405ac6:	47a0      	blx	r4
}
  405ac8:	b002      	add	sp, #8
  405aca:	bd10      	pop	{r4, pc}
  405acc:	4003c000 	.word	0x4003c000
  405ad0:	2040cb50 	.word	0x2040cb50
  405ad4:	00400e5d 	.word	0x00400e5d

00405ad8 <resolve_cb>:
 * \param[in] hostIp Server IP.
 *
 * \return None.
 */
static void resolve_cb(uint8_t *hostName, uint32_t hostIp)
{	
  405ad8:	b510      	push	{r4, lr}
  405ada:	b082      	sub	sp, #8
	
	gu32HostIp = hostIp;
  405adc:	4b07      	ldr	r3, [pc, #28]	; (405afc <resolve_cb+0x24>)
  405ade:	6019      	str	r1, [r3, #0]
	gbHostIpByName = true;
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", hostName,
			(int)IPV4_BYTE(hostIp, 0), (int)IPV4_BYTE(hostIp, 1),
			(int)IPV4_BYTE(hostIp, 2), (int)IPV4_BYTE(hostIp, 3));
  405ae0:	0e0b      	lsrs	r3, r1, #24
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", hostName,
  405ae2:	9301      	str	r3, [sp, #4]
  405ae4:	f3c1 4307 	ubfx	r3, r1, #16, #8
  405ae8:	9300      	str	r3, [sp, #0]
  405aea:	f3c1 2307 	ubfx	r3, r1, #8, #8
  405aee:	b2ca      	uxtb	r2, r1
  405af0:	4601      	mov	r1, r0
  405af2:	4803      	ldr	r0, [pc, #12]	; (405b00 <resolve_cb+0x28>)
  405af4:	4c03      	ldr	r4, [pc, #12]	; (405b04 <resolve_cb+0x2c>)
  405af6:	47a0      	blx	r4
}
  405af8:	b002      	add	sp, #8
  405afa:	bd10      	pop	{r4, pc}
  405afc:	2040c95c 	.word	0x2040c95c
  405b00:	0040d6f8 	.word	0x0040d6f8
  405b04:	00406515 	.word	0x00406515

00405b08 <socket_cb>:
static void socket_cb(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
	sensorData sensor;
	char buffer[256];
	/* Check for socket event on TCP socket. */
	if (sock == tcp_client_socket) {
  405b08:	4b49      	ldr	r3, [pc, #292]	; (405c30 <socket_cb+0x128>)
  405b0a:	f993 3000 	ldrsb.w	r3, [r3]
  405b0e:	4283      	cmp	r3, r0
  405b10:	d000      	beq.n	405b14 <socket_cb+0xc>
  405b12:	4770      	bx	lr
{
  405b14:	b570      	push	{r4, r5, r6, lr}
  405b16:	b0d2      	sub	sp, #328	; 0x148
  405b18:	4614      	mov	r4, r2
    
		switch (u8Msg) {
  405b1a:	2905      	cmp	r1, #5
  405b1c:	d003      	beq.n	405b26 <socket_cb+0x1e>
  405b1e:	2906      	cmp	r1, #6
  405b20:	d062      	beq.n	405be8 <socket_cb+0xe0>

		default:
			break;
		}
	}
}
  405b22:	b052      	add	sp, #328	; 0x148
  405b24:	bd70      	pop	{r4, r5, r6, pc}
      printf("socket_msg_connect\n"); 
  405b26:	4843      	ldr	r0, [pc, #268]	; (405c34 <socket_cb+0x12c>)
  405b28:	4b43      	ldr	r3, [pc, #268]	; (405c38 <socket_cb+0x130>)
  405b2a:	4798      	blx	r3
			if (gbTcpConnection) {
  405b2c:	4b43      	ldr	r3, [pc, #268]	; (405c3c <socket_cb+0x134>)
  405b2e:	781b      	ldrb	r3, [r3, #0]
  405b30:	2b00      	cmp	r3, #0
  405b32:	d0f6      	beq.n	405b22 <socket_cb+0x1a>
				memset(gau8ReceivedBuffer, 0, sizeof(gau8ReceivedBuffer));
  405b34:	f44f 62af 	mov.w	r2, #1400	; 0x578
  405b38:	2100      	movs	r1, #0
  405b3a:	4841      	ldr	r0, [pc, #260]	; (405c40 <socket_cb+0x138>)
  405b3c:	4b41      	ldr	r3, [pc, #260]	; (405c44 <socket_cb+0x13c>)
  405b3e:	4798      	blx	r3
				if(xQueueReceive(xQueueWifi, &sensor, 0)) {
  405b40:	2300      	movs	r3, #0
  405b42:	461a      	mov	r2, r3
  405b44:	a940      	add	r1, sp, #256	; 0x100
  405b46:	4840      	ldr	r0, [pc, #256]	; (405c48 <socket_cb+0x140>)
  405b48:	6800      	ldr	r0, [r0, #0]
  405b4a:	4d40      	ldr	r5, [pc, #256]	; (405c4c <socket_cb+0x144>)
  405b4c:	47a8      	blx	r5
  405b4e:	2800      	cmp	r0, #0
  405b50:	d134      	bne.n	405bbc <socket_cb+0xb4>
				sprintf(buffer, "valor=%d&timestamp=%s",sensor.value, sensor.timestamp);
  405b52:	ab42      	add	r3, sp, #264	; 0x108
  405b54:	9a41      	ldr	r2, [sp, #260]	; 0x104
  405b56:	493e      	ldr	r1, [pc, #248]	; (405c50 <socket_cb+0x148>)
  405b58:	4668      	mov	r0, sp
  405b5a:	4e3e      	ldr	r6, [pc, #248]	; (405c54 <socket_cb+0x14c>)
  405b5c:	47b0      	blx	r6
				sprintf(gau8ReceivedBuffer, "POST / HTTP/1.1\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %d\r\n\r\n%s", strlen(buffer), buffer);
  405b5e:	4668      	mov	r0, sp
  405b60:	4b3d      	ldr	r3, [pc, #244]	; (405c58 <socket_cb+0x150>)
  405b62:	4798      	blx	r3
  405b64:	4d36      	ldr	r5, [pc, #216]	; (405c40 <socket_cb+0x138>)
  405b66:	466b      	mov	r3, sp
  405b68:	4602      	mov	r2, r0
  405b6a:	493c      	ldr	r1, [pc, #240]	; (405c5c <socket_cb+0x154>)
  405b6c:	4628      	mov	r0, r5
  405b6e:	47b0      	blx	r6
				printf(gau8ReceivedBuffer);
  405b70:	4628      	mov	r0, r5
  405b72:	4b31      	ldr	r3, [pc, #196]	; (405c38 <socket_cb+0x130>)
  405b74:	4798      	blx	r3
				if (pstrConnect && pstrConnect->s8Error >= SOCK_ERR_NO_ERROR) {
  405b76:	b34c      	cbz	r4, 405bcc <socket_cb+0xc4>
  405b78:	f994 3001 	ldrsb.w	r3, [r4, #1]
  405b7c:	2b00      	cmp	r3, #0
  405b7e:	db25      	blt.n	405bcc <socket_cb+0xc4>
          printf("send \n");
  405b80:	4837      	ldr	r0, [pc, #220]	; (405c60 <socket_cb+0x158>)
  405b82:	4b2d      	ldr	r3, [pc, #180]	; (405c38 <socket_cb+0x130>)
  405b84:	4798      	blx	r3
					send(tcp_client_socket, gau8ReceivedBuffer, strlen((char *)gau8ReceivedBuffer), 0);
  405b86:	462c      	mov	r4, r5
  405b88:	4628      	mov	r0, r5
  405b8a:	4b33      	ldr	r3, [pc, #204]	; (405c58 <socket_cb+0x150>)
  405b8c:	4798      	blx	r3
  405b8e:	4d28      	ldr	r5, [pc, #160]	; (405c30 <socket_cb+0x128>)
  405b90:	2300      	movs	r3, #0
  405b92:	b282      	uxth	r2, r0
  405b94:	4621      	mov	r1, r4
  405b96:	f995 0000 	ldrsb.w	r0, [r5]
  405b9a:	4e32      	ldr	r6, [pc, #200]	; (405c64 <socket_cb+0x15c>)
  405b9c:	47b0      	blx	r6
					memset(gau8ReceivedBuffer, 0, MAIN_WIFI_M2M_BUFFER_SIZE);
  405b9e:	f44f 66af 	mov.w	r6, #1400	; 0x578
  405ba2:	4632      	mov	r2, r6
  405ba4:	2100      	movs	r1, #0
  405ba6:	4620      	mov	r0, r4
  405ba8:	4b26      	ldr	r3, [pc, #152]	; (405c44 <socket_cb+0x13c>)
  405baa:	4798      	blx	r3
					recv(tcp_client_socket, &gau8ReceivedBuffer[0], MAIN_WIFI_M2M_BUFFER_SIZE, 0);
  405bac:	2300      	movs	r3, #0
  405bae:	4632      	mov	r2, r6
  405bb0:	4621      	mov	r1, r4
  405bb2:	f995 0000 	ldrsb.w	r0, [r5]
  405bb6:	4c2c      	ldr	r4, [pc, #176]	; (405c68 <socket_cb+0x160>)
  405bb8:	47a0      	blx	r4
  405bba:	e7b2      	b.n	405b22 <socket_cb+0x1a>
					printf("valor: %d\n", sensor.value);
  405bbc:	9941      	ldr	r1, [sp, #260]	; 0x104
  405bbe:	482b      	ldr	r0, [pc, #172]	; (405c6c <socket_cb+0x164>)
  405bc0:	4d1d      	ldr	r5, [pc, #116]	; (405c38 <socket_cb+0x130>)
  405bc2:	47a8      	blx	r5
					printf("timestamp: %d\n", sensor.value);
  405bc4:	9941      	ldr	r1, [sp, #260]	; 0x104
  405bc6:	482a      	ldr	r0, [pc, #168]	; (405c70 <socket_cb+0x168>)
  405bc8:	47a8      	blx	r5
  405bca:	e7c2      	b.n	405b52 <socket_cb+0x4a>
					printf("socket_cb: connect error!\r\n");
  405bcc:	4829      	ldr	r0, [pc, #164]	; (405c74 <socket_cb+0x16c>)
  405bce:	4b1a      	ldr	r3, [pc, #104]	; (405c38 <socket_cb+0x130>)
  405bd0:	4798      	blx	r3
					gbTcpConnection = false;
  405bd2:	2200      	movs	r2, #0
  405bd4:	4b19      	ldr	r3, [pc, #100]	; (405c3c <socket_cb+0x134>)
  405bd6:	701a      	strb	r2, [r3, #0]
					close(tcp_client_socket);
  405bd8:	4c15      	ldr	r4, [pc, #84]	; (405c30 <socket_cb+0x128>)
  405bda:	f994 0000 	ldrsb.w	r0, [r4]
  405bde:	4b26      	ldr	r3, [pc, #152]	; (405c78 <socket_cb+0x170>)
  405be0:	4798      	blx	r3
					tcp_client_socket = -1;
  405be2:	23ff      	movs	r3, #255	; 0xff
  405be4:	7023      	strb	r3, [r4, #0]
  405be6:	e79c      	b.n	405b22 <socket_cb+0x1a>
			if (pstrRecv && pstrRecv->s16BufferSize > 0) {
  405be8:	b11a      	cbz	r2, 405bf2 <socket_cb+0xea>
  405bea:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
  405bee:	2b00      	cmp	r3, #0
  405bf0:	dc0a      	bgt.n	405c08 <socket_cb+0x100>
				printf("socket_cb: recv error!\r\n");
  405bf2:	4822      	ldr	r0, [pc, #136]	; (405c7c <socket_cb+0x174>)
  405bf4:	4b10      	ldr	r3, [pc, #64]	; (405c38 <socket_cb+0x130>)
  405bf6:	4798      	blx	r3
				close(tcp_client_socket);
  405bf8:	4c0d      	ldr	r4, [pc, #52]	; (405c30 <socket_cb+0x128>)
  405bfa:	f994 0000 	ldrsb.w	r0, [r4]
  405bfe:	4b1e      	ldr	r3, [pc, #120]	; (405c78 <socket_cb+0x170>)
  405c00:	4798      	blx	r3
				tcp_client_socket = -1;
  405c02:	23ff      	movs	r3, #255	; 0xff
  405c04:	7023      	strb	r3, [r4, #0]
}
  405c06:	e78c      	b.n	405b22 <socket_cb+0x1a>
        printf(pstrRecv->pu8Buffer);
  405c08:	6810      	ldr	r0, [r2, #0]
  405c0a:	4b0b      	ldr	r3, [pc, #44]	; (405c38 <socket_cb+0x130>)
  405c0c:	4798      	blx	r3
				memset(gau8ReceivedBuffer, 0, sizeof(gau8ReceivedBuffer));
  405c0e:	4c0c      	ldr	r4, [pc, #48]	; (405c40 <socket_cb+0x138>)
  405c10:	f44f 65af 	mov.w	r5, #1400	; 0x578
  405c14:	462a      	mov	r2, r5
  405c16:	2100      	movs	r1, #0
  405c18:	4620      	mov	r0, r4
  405c1a:	4b0a      	ldr	r3, [pc, #40]	; (405c44 <socket_cb+0x13c>)
  405c1c:	4798      	blx	r3
				recv(tcp_client_socket, &gau8ReceivedBuffer[0], MAIN_WIFI_M2M_BUFFER_SIZE, 0);
  405c1e:	2300      	movs	r3, #0
  405c20:	462a      	mov	r2, r5
  405c22:	4621      	mov	r1, r4
  405c24:	4802      	ldr	r0, [pc, #8]	; (405c30 <socket_cb+0x128>)
  405c26:	f990 0000 	ldrsb.w	r0, [r0]
  405c2a:	4c0f      	ldr	r4, [pc, #60]	; (405c68 <socket_cb+0x160>)
  405c2c:	47a0      	blx	r4
  405c2e:	e778      	b.n	405b22 <socket_cb+0x1a>
  405c30:	20400020 	.word	0x20400020
  405c34:	0040d728 	.word	0x0040d728
  405c38:	00406515 	.word	0x00406515
  405c3c:	2040c958 	.word	0x2040c958
  405c40:	2040c3e0 	.word	0x2040c3e0
  405c44:	00406671 	.word	0x00406671
  405c48:	2040cb34 	.word	0x2040cb34
  405c4c:	00400f5d 	.word	0x00400f5d
  405c50:	0040d758 	.word	0x0040d758
  405c54:	004068ad 	.word	0x004068ad
  405c58:	004069c1 	.word	0x004069c1
  405c5c:	0040d770 	.word	0x0040d770
  405c60:	0040d7cc 	.word	0x0040d7cc
  405c64:	00404a15 	.word	0x00404a15
  405c68:	00404ab1 	.word	0x00404ab1
  405c6c:	0040d73c 	.word	0x0040d73c
  405c70:	0040d748 	.word	0x0040d748
  405c74:	0040d7d4 	.word	0x0040d7d4
  405c78:	00404b51 	.word	0x00404b51
  405c7c:	0040d7f0 	.word	0x0040d7f0

00405c80 <wifi_cb>:
 * \param[in] pvMsg A pointer to a buffer containing the notification parameters.
 *
 * \return None.
 */
static void wifi_cb(uint8_t u8MsgType, void *pvMsg)
{
  405c80:	b510      	push	{r4, lr}
  405c82:	b082      	sub	sp, #8
	switch (u8MsgType) {
  405c84:	282c      	cmp	r0, #44	; 0x2c
  405c86:	d003      	beq.n	405c90 <wifi_cb+0x10>
  405c88:	2832      	cmp	r0, #50	; 0x32
  405c8a:	d013      	beq.n	405cb4 <wifi_cb+0x34>
	default:
	{
		break;
	}
	}
}
  405c8c:	b002      	add	sp, #8
  405c8e:	bd10      	pop	{r4, pc}
		if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
  405c90:	780b      	ldrb	r3, [r1, #0]
  405c92:	2b01      	cmp	r3, #1
  405c94:	d008      	beq.n	405ca8 <wifi_cb+0x28>
		} else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
  405c96:	2b00      	cmp	r3, #0
  405c98:	d1f8      	bne.n	405c8c <wifi_cb+0xc>
			printf("wifi_cb: M2M_WIFI_DISCONNECTED\r\n");
  405c9a:	480d      	ldr	r0, [pc, #52]	; (405cd0 <wifi_cb+0x50>)
  405c9c:	4b0d      	ldr	r3, [pc, #52]	; (405cd4 <wifi_cb+0x54>)
  405c9e:	4798      	blx	r3
 			wifi_connected = 0;
  405ca0:	2200      	movs	r2, #0
  405ca2:	4b0d      	ldr	r3, [pc, #52]	; (405cd8 <wifi_cb+0x58>)
  405ca4:	701a      	strb	r2, [r3, #0]
  405ca6:	e7f1      	b.n	405c8c <wifi_cb+0xc>
			printf("wifi_cb: M2M_WIFI_CONNECTED\r\n");
  405ca8:	480c      	ldr	r0, [pc, #48]	; (405cdc <wifi_cb+0x5c>)
  405caa:	4b0a      	ldr	r3, [pc, #40]	; (405cd4 <wifi_cb+0x54>)
  405cac:	4798      	blx	r3
			m2m_wifi_request_dhcp_client();
  405cae:	4b0c      	ldr	r3, [pc, #48]	; (405ce0 <wifi_cb+0x60>)
  405cb0:	4798      	blx	r3
  405cb2:	e7eb      	b.n	405c8c <wifi_cb+0xc>
		printf("wifi_cb: IP address is %u.%u.%u.%u\r\n",
  405cb4:	788b      	ldrb	r3, [r1, #2]
  405cb6:	784a      	ldrb	r2, [r1, #1]
  405cb8:	7808      	ldrb	r0, [r1, #0]
  405cba:	78c9      	ldrb	r1, [r1, #3]
  405cbc:	9100      	str	r1, [sp, #0]
  405cbe:	4601      	mov	r1, r0
  405cc0:	4808      	ldr	r0, [pc, #32]	; (405ce4 <wifi_cb+0x64>)
  405cc2:	4c04      	ldr	r4, [pc, #16]	; (405cd4 <wifi_cb+0x54>)
  405cc4:	47a0      	blx	r4
		wifi_connected = M2M_WIFI_CONNECTED;
  405cc6:	2201      	movs	r2, #1
  405cc8:	4b03      	ldr	r3, [pc, #12]	; (405cd8 <wifi_cb+0x58>)
  405cca:	701a      	strb	r2, [r3, #0]
}
  405ccc:	e7de      	b.n	405c8c <wifi_cb+0xc>
  405cce:	bf00      	nop
  405cd0:	0040d93c 	.word	0x0040d93c
  405cd4:	00406515 	.word	0x00406515
  405cd8:	2040c960 	.word	0x2040c960
  405cdc:	0040d91c 	.word	0x0040d91c
  405ce0:	00403411 	.word	0x00403411
  405ce4:	0040d960 	.word	0x0040d960

00405ce8 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  405ce8:	b5f0      	push	{r4, r5, r6, r7, lr}
  405cea:	b083      	sub	sp, #12
  405cec:	4605      	mov	r5, r0
  405cee:	460c      	mov	r4, r1
	uint32_t val = 0;
  405cf0:	2300      	movs	r3, #0
  405cf2:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  405cf4:	4b2a      	ldr	r3, [pc, #168]	; (405da0 <usart_serial_getchar+0xb8>)
  405cf6:	4298      	cmp	r0, r3
  405cf8:	d013      	beq.n	405d22 <usart_serial_getchar+0x3a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  405cfa:	4b2a      	ldr	r3, [pc, #168]	; (405da4 <usart_serial_getchar+0xbc>)
  405cfc:	4298      	cmp	r0, r3
  405cfe:	d018      	beq.n	405d32 <usart_serial_getchar+0x4a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  405d00:	4b29      	ldr	r3, [pc, #164]	; (405da8 <usart_serial_getchar+0xc0>)
  405d02:	4298      	cmp	r0, r3
  405d04:	d01d      	beq.n	405d42 <usart_serial_getchar+0x5a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  405d06:	4b29      	ldr	r3, [pc, #164]	; (405dac <usart_serial_getchar+0xc4>)
  405d08:	429d      	cmp	r5, r3
  405d0a:	d022      	beq.n	405d52 <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  405d0c:	4b28      	ldr	r3, [pc, #160]	; (405db0 <usart_serial_getchar+0xc8>)
  405d0e:	429d      	cmp	r5, r3
  405d10:	d027      	beq.n	405d62 <usart_serial_getchar+0x7a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  405d12:	4b28      	ldr	r3, [pc, #160]	; (405db4 <usart_serial_getchar+0xcc>)
  405d14:	429d      	cmp	r5, r3
  405d16:	d02e      	beq.n	405d76 <usart_serial_getchar+0x8e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  405d18:	4b27      	ldr	r3, [pc, #156]	; (405db8 <usart_serial_getchar+0xd0>)
  405d1a:	429d      	cmp	r5, r3
  405d1c:	d035      	beq.n	405d8a <usart_serial_getchar+0xa2>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  405d1e:	b003      	add	sp, #12
  405d20:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  405d22:	461f      	mov	r7, r3
  405d24:	4e25      	ldr	r6, [pc, #148]	; (405dbc <usart_serial_getchar+0xd4>)
  405d26:	4621      	mov	r1, r4
  405d28:	4638      	mov	r0, r7
  405d2a:	47b0      	blx	r6
  405d2c:	2800      	cmp	r0, #0
  405d2e:	d1fa      	bne.n	405d26 <usart_serial_getchar+0x3e>
  405d30:	e7e9      	b.n	405d06 <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  405d32:	461f      	mov	r7, r3
  405d34:	4e21      	ldr	r6, [pc, #132]	; (405dbc <usart_serial_getchar+0xd4>)
  405d36:	4621      	mov	r1, r4
  405d38:	4638      	mov	r0, r7
  405d3a:	47b0      	blx	r6
  405d3c:	2800      	cmp	r0, #0
  405d3e:	d1fa      	bne.n	405d36 <usart_serial_getchar+0x4e>
  405d40:	e7e4      	b.n	405d0c <usart_serial_getchar+0x24>
		while (uart_read((Uart*)p_usart, data));
  405d42:	461f      	mov	r7, r3
  405d44:	4e1d      	ldr	r6, [pc, #116]	; (405dbc <usart_serial_getchar+0xd4>)
  405d46:	4621      	mov	r1, r4
  405d48:	4638      	mov	r0, r7
  405d4a:	47b0      	blx	r6
  405d4c:	2800      	cmp	r0, #0
  405d4e:	d1fa      	bne.n	405d46 <usart_serial_getchar+0x5e>
  405d50:	e7df      	b.n	405d12 <usart_serial_getchar+0x2a>
		while (uart_read((Uart*)p_usart, data));
  405d52:	461f      	mov	r7, r3
  405d54:	4e19      	ldr	r6, [pc, #100]	; (405dbc <usart_serial_getchar+0xd4>)
  405d56:	4621      	mov	r1, r4
  405d58:	4638      	mov	r0, r7
  405d5a:	47b0      	blx	r6
  405d5c:	2800      	cmp	r0, #0
  405d5e:	d1fa      	bne.n	405d56 <usart_serial_getchar+0x6e>
  405d60:	e7da      	b.n	405d18 <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
  405d62:	461e      	mov	r6, r3
  405d64:	4d16      	ldr	r5, [pc, #88]	; (405dc0 <usart_serial_getchar+0xd8>)
  405d66:	a901      	add	r1, sp, #4
  405d68:	4630      	mov	r0, r6
  405d6a:	47a8      	blx	r5
  405d6c:	2800      	cmp	r0, #0
  405d6e:	d1fa      	bne.n	405d66 <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
  405d70:	9b01      	ldr	r3, [sp, #4]
  405d72:	7023      	strb	r3, [r4, #0]
  405d74:	e7d3      	b.n	405d1e <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  405d76:	461e      	mov	r6, r3
  405d78:	4d11      	ldr	r5, [pc, #68]	; (405dc0 <usart_serial_getchar+0xd8>)
  405d7a:	a901      	add	r1, sp, #4
  405d7c:	4630      	mov	r0, r6
  405d7e:	47a8      	blx	r5
  405d80:	2800      	cmp	r0, #0
  405d82:	d1fa      	bne.n	405d7a <usart_serial_getchar+0x92>
		*data = (uint8_t)(val & 0xFF);
  405d84:	9b01      	ldr	r3, [sp, #4]
  405d86:	7023      	strb	r3, [r4, #0]
  405d88:	e7c9      	b.n	405d1e <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  405d8a:	461e      	mov	r6, r3
  405d8c:	4d0c      	ldr	r5, [pc, #48]	; (405dc0 <usart_serial_getchar+0xd8>)
  405d8e:	a901      	add	r1, sp, #4
  405d90:	4630      	mov	r0, r6
  405d92:	47a8      	blx	r5
  405d94:	2800      	cmp	r0, #0
  405d96:	d1fa      	bne.n	405d8e <usart_serial_getchar+0xa6>
		*data = (uint8_t)(val & 0xFF);
  405d98:	9b01      	ldr	r3, [sp, #4]
  405d9a:	7023      	strb	r3, [r4, #0]
}
  405d9c:	e7bf      	b.n	405d1e <usart_serial_getchar+0x36>
  405d9e:	bf00      	nop
  405da0:	400e0800 	.word	0x400e0800
  405da4:	400e0a00 	.word	0x400e0a00
  405da8:	400e1a00 	.word	0x400e1a00
  405dac:	400e1c00 	.word	0x400e1c00
  405db0:	40024000 	.word	0x40024000
  405db4:	40028000 	.word	0x40028000
  405db8:	4002c000 	.word	0x4002c000
  405dbc:	004056c9 	.word	0x004056c9
  405dc0:	004057d7 	.word	0x004057d7

00405dc4 <usart_serial_putchar>:
{
  405dc4:	b570      	push	{r4, r5, r6, lr}
  405dc6:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  405dc8:	4b2a      	ldr	r3, [pc, #168]	; (405e74 <usart_serial_putchar+0xb0>)
  405dca:	4298      	cmp	r0, r3
  405dcc:	d013      	beq.n	405df6 <usart_serial_putchar+0x32>
	if (UART1 == (Uart*)p_usart) {
  405dce:	4b2a      	ldr	r3, [pc, #168]	; (405e78 <usart_serial_putchar+0xb4>)
  405dd0:	4298      	cmp	r0, r3
  405dd2:	d019      	beq.n	405e08 <usart_serial_putchar+0x44>
	if (UART2 == (Uart*)p_usart) {
  405dd4:	4b29      	ldr	r3, [pc, #164]	; (405e7c <usart_serial_putchar+0xb8>)
  405dd6:	4298      	cmp	r0, r3
  405dd8:	d01f      	beq.n	405e1a <usart_serial_putchar+0x56>
	if (UART3 == (Uart*)p_usart) {
  405dda:	4b29      	ldr	r3, [pc, #164]	; (405e80 <usart_serial_putchar+0xbc>)
  405ddc:	4298      	cmp	r0, r3
  405dde:	d025      	beq.n	405e2c <usart_serial_putchar+0x68>
	if (USART0 == p_usart) {
  405de0:	4b28      	ldr	r3, [pc, #160]	; (405e84 <usart_serial_putchar+0xc0>)
  405de2:	4298      	cmp	r0, r3
  405de4:	d02b      	beq.n	405e3e <usart_serial_putchar+0x7a>
	if (USART1 == p_usart) {
  405de6:	4b28      	ldr	r3, [pc, #160]	; (405e88 <usart_serial_putchar+0xc4>)
  405de8:	4298      	cmp	r0, r3
  405dea:	d031      	beq.n	405e50 <usart_serial_putchar+0x8c>
	if (USART2 == p_usart) {
  405dec:	4b27      	ldr	r3, [pc, #156]	; (405e8c <usart_serial_putchar+0xc8>)
  405dee:	4298      	cmp	r0, r3
  405df0:	d037      	beq.n	405e62 <usart_serial_putchar+0x9e>
	return 0;
  405df2:	2000      	movs	r0, #0
}
  405df4:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  405df6:	461e      	mov	r6, r3
  405df8:	4d25      	ldr	r5, [pc, #148]	; (405e90 <usart_serial_putchar+0xcc>)
  405dfa:	4621      	mov	r1, r4
  405dfc:	4630      	mov	r0, r6
  405dfe:	47a8      	blx	r5
  405e00:	2800      	cmp	r0, #0
  405e02:	d1fa      	bne.n	405dfa <usart_serial_putchar+0x36>
		return 1;
  405e04:	2001      	movs	r0, #1
  405e06:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  405e08:	461e      	mov	r6, r3
  405e0a:	4d21      	ldr	r5, [pc, #132]	; (405e90 <usart_serial_putchar+0xcc>)
  405e0c:	4621      	mov	r1, r4
  405e0e:	4630      	mov	r0, r6
  405e10:	47a8      	blx	r5
  405e12:	2800      	cmp	r0, #0
  405e14:	d1fa      	bne.n	405e0c <usart_serial_putchar+0x48>
		return 1;
  405e16:	2001      	movs	r0, #1
  405e18:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  405e1a:	461e      	mov	r6, r3
  405e1c:	4d1c      	ldr	r5, [pc, #112]	; (405e90 <usart_serial_putchar+0xcc>)
  405e1e:	4621      	mov	r1, r4
  405e20:	4630      	mov	r0, r6
  405e22:	47a8      	blx	r5
  405e24:	2800      	cmp	r0, #0
  405e26:	d1fa      	bne.n	405e1e <usart_serial_putchar+0x5a>
		return 1;
  405e28:	2001      	movs	r0, #1
  405e2a:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  405e2c:	461e      	mov	r6, r3
  405e2e:	4d18      	ldr	r5, [pc, #96]	; (405e90 <usart_serial_putchar+0xcc>)
  405e30:	4621      	mov	r1, r4
  405e32:	4630      	mov	r0, r6
  405e34:	47a8      	blx	r5
  405e36:	2800      	cmp	r0, #0
  405e38:	d1fa      	bne.n	405e30 <usart_serial_putchar+0x6c>
		return 1;
  405e3a:	2001      	movs	r0, #1
  405e3c:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  405e3e:	461e      	mov	r6, r3
  405e40:	4d14      	ldr	r5, [pc, #80]	; (405e94 <usart_serial_putchar+0xd0>)
  405e42:	4621      	mov	r1, r4
  405e44:	4630      	mov	r0, r6
  405e46:	47a8      	blx	r5
  405e48:	2800      	cmp	r0, #0
  405e4a:	d1fa      	bne.n	405e42 <usart_serial_putchar+0x7e>
		return 1;
  405e4c:	2001      	movs	r0, #1
  405e4e:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  405e50:	461e      	mov	r6, r3
  405e52:	4d10      	ldr	r5, [pc, #64]	; (405e94 <usart_serial_putchar+0xd0>)
  405e54:	4621      	mov	r1, r4
  405e56:	4630      	mov	r0, r6
  405e58:	47a8      	blx	r5
  405e5a:	2800      	cmp	r0, #0
  405e5c:	d1fa      	bne.n	405e54 <usart_serial_putchar+0x90>
		return 1;
  405e5e:	2001      	movs	r0, #1
  405e60:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  405e62:	461e      	mov	r6, r3
  405e64:	4d0b      	ldr	r5, [pc, #44]	; (405e94 <usart_serial_putchar+0xd0>)
  405e66:	4621      	mov	r1, r4
  405e68:	4630      	mov	r0, r6
  405e6a:	47a8      	blx	r5
  405e6c:	2800      	cmp	r0, #0
  405e6e:	d1fa      	bne.n	405e66 <usart_serial_putchar+0xa2>
		return 1;
  405e70:	2001      	movs	r0, #1
  405e72:	bd70      	pop	{r4, r5, r6, pc}
  405e74:	400e0800 	.word	0x400e0800
  405e78:	400e0a00 	.word	0x400e0a00
  405e7c:	400e1a00 	.word	0x400e1a00
  405e80:	400e1c00 	.word	0x400e1c00
  405e84:	40024000 	.word	0x40024000
  405e88:	40028000 	.word	0x40028000
  405e8c:	4002c000 	.word	0x4002c000
  405e90:	004056b7 	.word	0x004056b7
  405e94:	004057c1 	.word	0x004057c1

00405e98 <get_time>:
void get_time(char *timestamp){
  405e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405e9c:	b085      	sub	sp, #20
  405e9e:	4683      	mov	fp, r0
	rtc_get_date(RTC, &year, &month, &day, &week);
  405ea0:	f8df 8074 	ldr.w	r8, [pc, #116]	; 405f18 <get_time+0x80>
  405ea4:	f8df 9074 	ldr.w	r9, [pc, #116]	; 405f1c <get_time+0x84>
  405ea8:	4c13      	ldr	r4, [pc, #76]	; (405ef8 <get_time+0x60>)
  405eaa:	f8df a074 	ldr.w	sl, [pc, #116]	; 405f20 <get_time+0x88>
  405eae:	4b13      	ldr	r3, [pc, #76]	; (405efc <get_time+0x64>)
  405eb0:	9300      	str	r3, [sp, #0]
  405eb2:	4643      	mov	r3, r8
  405eb4:	464a      	mov	r2, r9
  405eb6:	4621      	mov	r1, r4
  405eb8:	4650      	mov	r0, sl
  405eba:	4d11      	ldr	r5, [pc, #68]	; (405f00 <get_time+0x68>)
  405ebc:	47a8      	blx	r5
	rtc_get_time(RTC, &hour, &minute, &second);
  405ebe:	4f11      	ldr	r7, [pc, #68]	; (405f04 <get_time+0x6c>)
  405ec0:	4e11      	ldr	r6, [pc, #68]	; (405f08 <get_time+0x70>)
  405ec2:	4d12      	ldr	r5, [pc, #72]	; (405f0c <get_time+0x74>)
  405ec4:	463b      	mov	r3, r7
  405ec6:	4632      	mov	r2, r6
  405ec8:	4629      	mov	r1, r5
  405eca:	4650      	mov	r0, sl
  405ecc:	f8df a054 	ldr.w	sl, [pc, #84]	; 405f24 <get_time+0x8c>
  405ed0:	47d0      	blx	sl
	sprintf(timestamp, "%d/%d/%d - %02d:%02d:%02d", day, month, year, hour, minute, second);
  405ed2:	f8d9 3000 	ldr.w	r3, [r9]
  405ed6:	f8d8 2000 	ldr.w	r2, [r8]
  405eda:	6839      	ldr	r1, [r7, #0]
  405edc:	9103      	str	r1, [sp, #12]
  405ede:	6831      	ldr	r1, [r6, #0]
  405ee0:	9102      	str	r1, [sp, #8]
  405ee2:	6829      	ldr	r1, [r5, #0]
  405ee4:	9101      	str	r1, [sp, #4]
  405ee6:	6821      	ldr	r1, [r4, #0]
  405ee8:	9100      	str	r1, [sp, #0]
  405eea:	4909      	ldr	r1, [pc, #36]	; (405f10 <get_time+0x78>)
  405eec:	4658      	mov	r0, fp
  405eee:	4c09      	ldr	r4, [pc, #36]	; (405f14 <get_time+0x7c>)
  405ef0:	47a0      	blx	r4
}
  405ef2:	b005      	add	sp, #20
  405ef4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405ef8:	2040cb54 	.word	0x2040cb54
  405efc:	2040cb30 	.word	0x2040cb30
  405f00:	004004df 	.word	0x004004df
  405f04:	2040cb3c 	.word	0x2040cb3c
  405f08:	2040cb48 	.word	0x2040cb48
  405f0c:	2040cb4c 	.word	0x2040cb4c
  405f10:	0040d5fc 	.word	0x0040d5fc
  405f14:	004068ad 	.word	0x004068ad
  405f18:	2040cb58 	.word	0x2040cb58
  405f1c:	2040cb38 	.word	0x2040cb38
  405f20:	400e1860 	.word	0x400e1860
  405f24:	00400485 	.word	0x00400485

00405f28 <task_afec>:
void task_afec(void){
  405f28:	b580      	push	{r7, lr}
  405f2a:	b0aa      	sub	sp, #168	; 0xa8
	xQueueAfec = xQueueCreate( 10, sizeof( int32_t ) );
  405f2c:	2200      	movs	r2, #0
  405f2e:	2104      	movs	r1, #4
  405f30:	200a      	movs	r0, #10
  405f32:	4b28      	ldr	r3, [pc, #160]	; (405fd4 <task_afec+0xac>)
  405f34:	4798      	blx	r3
  405f36:	4b28      	ldr	r3, [pc, #160]	; (405fd8 <task_afec+0xb0>)
  405f38:	6018      	str	r0, [r3, #0]
	afec_enable(AFEC0);
  405f3a:	4c28      	ldr	r4, [pc, #160]	; (405fdc <task_afec+0xb4>)
  405f3c:	4620      	mov	r0, r4
  405f3e:	4b28      	ldr	r3, [pc, #160]	; (405fe0 <task_afec+0xb8>)
  405f40:	4798      	blx	r3
	afec_get_config_defaults(&afec_cfg);
  405f42:	a801      	add	r0, sp, #4
  405f44:	4b27      	ldr	r3, [pc, #156]	; (405fe4 <task_afec+0xbc>)
  405f46:	4798      	blx	r3
	afec_init(AFEC0, &afec_cfg);
  405f48:	a901      	add	r1, sp, #4
  405f4a:	4620      	mov	r0, r4
  405f4c:	4b26      	ldr	r3, [pc, #152]	; (405fe8 <task_afec+0xc0>)
  405f4e:	4798      	blx	r3
	reg = afec->AFEC_MR;
  405f50:	6863      	ldr	r3, [r4, #4]
		reg &= ~(AFEC_MR_TRGSEL_Msk | AFEC_MR_TRGEN | AFEC_MR_FREERUN_ON);
  405f52:	f023 038f 	bic.w	r3, r3, #143	; 0x8f
	afec->AFEC_MR = reg;
  405f56:	6063      	str	r3, [r4, #4]
	afec_set_callback(AFEC0, AFEC_INTERRUPT_EOC_0,	AFEC_callback, 5);
  405f58:	2305      	movs	r3, #5
  405f5a:	4a24      	ldr	r2, [pc, #144]	; (405fec <task_afec+0xc4>)
  405f5c:	2100      	movs	r1, #0
  405f5e:	4620      	mov	r0, r4
  405f60:	4d23      	ldr	r5, [pc, #140]	; (405ff0 <task_afec+0xc8>)
  405f62:	47a8      	blx	r5
	afec_ch_get_config_defaults(&afec_ch_cfg);
  405f64:	4668      	mov	r0, sp
  405f66:	4b23      	ldr	r3, [pc, #140]	; (405ff4 <task_afec+0xcc>)
  405f68:	4798      	blx	r3
	afec_ch_cfg.gain = AFEC_GAINVALUE_0;
  405f6a:	2500      	movs	r5, #0
  405f6c:	f88d 5001 	strb.w	r5, [sp, #1]
	afec_ch_set_config(AFEC0, AFEC_CHANNEL_RES_PIN, &afec_ch_cfg);
  405f70:	466a      	mov	r2, sp
  405f72:	4629      	mov	r1, r5
  405f74:	4620      	mov	r0, r4
  405f76:	4b20      	ldr	r3, [pc, #128]	; (405ff8 <task_afec+0xd0>)
  405f78:	4798      	blx	r3
	afec->AFEC_CSELR = afec_ch;
  405f7a:	6665      	str	r5, [r4, #100]	; 0x64
	afec->AFEC_COCR = (aoffset & AFEC_COCR_AOFF_Msk);
  405f7c:	f44f 7300 	mov.w	r3, #512	; 0x200
  405f80:	66e3      	str	r3, [r4, #108]	; 0x6c
	afec->AFEC_CHER = (afec_ch == AFEC_CHANNEL_ALL) ?
  405f82:	2301      	movs	r3, #1
  405f84:	6163      	str	r3, [r4, #20]
	afec->AFEC_CR = AFEC_CR_START;
  405f86:	2302      	movs	r3, #2
  405f88:	6023      	str	r3, [r4, #0]
		if (xQueueReceive( xQueueAfec, &(adc_value), ( TickType_t )  10 / portTICK_PERIOD_MS)) {
  405f8a:	4d13      	ldr	r5, [pc, #76]	; (405fd8 <task_afec+0xb0>)
  405f8c:	4c1b      	ldr	r4, [pc, #108]	; (405ffc <task_afec+0xd4>)
  405f8e:	4f13      	ldr	r7, [pc, #76]	; (405fdc <task_afec+0xb4>)
  405f90:	e003      	b.n	405f9a <task_afec+0x72>
		vTaskDelay(1000);
  405f92:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  405f96:	4b1a      	ldr	r3, [pc, #104]	; (406000 <task_afec+0xd8>)
  405f98:	4798      	blx	r3
		if (xQueueReceive( xQueueAfec, &(adc_value), ( TickType_t )  10 / portTICK_PERIOD_MS)) {
  405f9a:	2300      	movs	r3, #0
  405f9c:	220a      	movs	r2, #10
  405f9e:	a929      	add	r1, sp, #164	; 0xa4
  405fa0:	6828      	ldr	r0, [r5, #0]
  405fa2:	47a0      	blx	r4
  405fa4:	2800      	cmp	r0, #0
  405fa6:	d0f4      	beq.n	405f92 <task_afec+0x6a>
  405fa8:	2302      	movs	r3, #2
  405faa:	603b      	str	r3, [r7, #0]
			get_time(&timestamp);
  405fac:	a807      	add	r0, sp, #28
  405fae:	4b15      	ldr	r3, [pc, #84]	; (406004 <task_afec+0xdc>)
  405fb0:	4798      	blx	r3
			data.id = 1;
  405fb2:	2301      	movs	r3, #1
  405fb4:	9317      	str	r3, [sp, #92]	; 0x5c
			data.value = adc_value;
  405fb6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
  405fb8:	9318      	str	r3, [sp, #96]	; 0x60
			strcpy(data.timestamp, timestamp);
  405fba:	a907      	add	r1, sp, #28
  405fbc:	a819      	add	r0, sp, #100	; 0x64
  405fbe:	4b12      	ldr	r3, [pc, #72]	; (406008 <task_afec+0xe0>)
  405fc0:	4798      	blx	r3
			xQueueSend(xQueueWifi, &data, 0);
  405fc2:	2300      	movs	r3, #0
  405fc4:	461a      	mov	r2, r3
  405fc6:	a917      	add	r1, sp, #92	; 0x5c
  405fc8:	4810      	ldr	r0, [pc, #64]	; (40600c <task_afec+0xe4>)
  405fca:	6800      	ldr	r0, [r0, #0]
  405fcc:	4e10      	ldr	r6, [pc, #64]	; (406010 <task_afec+0xe8>)
  405fce:	47b0      	blx	r6
  405fd0:	e7df      	b.n	405f92 <task_afec+0x6a>
  405fd2:	bf00      	nop
  405fd4:	00400bfd 	.word	0x00400bfd
  405fd8:	2040cb50 	.word	0x2040cb50
  405fdc:	4003c000 	.word	0x4003c000
  405fe0:	00400421 	.word	0x00400421
  405fe4:	00400265 	.word	0x00400265
  405fe8:	004002a1 	.word	0x004002a1
  405fec:	00405aad 	.word	0x00405aad
  405ff0:	004003a1 	.word	0x004003a1
  405ff4:	00400295 	.word	0x00400295
  405ff8:	00400235 	.word	0x00400235
  405ffc:	00400f5d 	.word	0x00400f5d
  406000:	00401785 	.word	0x00401785
  406004:	00405e99 	.word	0x00405e99
  406008:	004068f9 	.word	0x004068f9
  40600c:	2040cb34 	.word	0x2040cb34
  406010:	00400c79 	.word	0x00400c79

00406014 <RTC_Handler>:
{
  406014:	b538      	push	{r3, r4, r5, lr}
	uint32_t ul_status = rtc_get_status(RTC);
  406016:	4811      	ldr	r0, [pc, #68]	; (40605c <RTC_Handler+0x48>)
  406018:	4b11      	ldr	r3, [pc, #68]	; (406060 <RTC_Handler+0x4c>)
  40601a:	4798      	blx	r3
  40601c:	4604      	mov	r4, r0
	if ((ul_status & RTC_SR_SEC) == RTC_SR_SEC) {
  40601e:	f010 0f04 	tst.w	r0, #4
  406022:	d111      	bne.n	406048 <RTC_Handler+0x34>
	if ((ul_status & RTC_SR_ALARM) == RTC_SR_ALARM) {
  406024:	f014 0f02 	tst.w	r4, #2
  406028:	d113      	bne.n	406052 <RTC_Handler+0x3e>
	rtc_clear_status(RTC, RTC_SCCR_ACKCLR);
  40602a:	4d0c      	ldr	r5, [pc, #48]	; (40605c <RTC_Handler+0x48>)
  40602c:	2101      	movs	r1, #1
  40602e:	4628      	mov	r0, r5
  406030:	4c0c      	ldr	r4, [pc, #48]	; (406064 <RTC_Handler+0x50>)
  406032:	47a0      	blx	r4
	rtc_clear_status(RTC, RTC_SCCR_TIMCLR);
  406034:	2108      	movs	r1, #8
  406036:	4628      	mov	r0, r5
  406038:	47a0      	blx	r4
	rtc_clear_status(RTC, RTC_SCCR_CALCLR);
  40603a:	2110      	movs	r1, #16
  40603c:	4628      	mov	r0, r5
  40603e:	47a0      	blx	r4
	rtc_clear_status(RTC, RTC_SCCR_TDERRCLR);
  406040:	2120      	movs	r1, #32
  406042:	4628      	mov	r0, r5
  406044:	47a0      	blx	r4
  406046:	bd38      	pop	{r3, r4, r5, pc}
		rtc_clear_status(RTC, RTC_SCCR_SECCLR);
  406048:	2104      	movs	r1, #4
  40604a:	4804      	ldr	r0, [pc, #16]	; (40605c <RTC_Handler+0x48>)
  40604c:	4b05      	ldr	r3, [pc, #20]	; (406064 <RTC_Handler+0x50>)
  40604e:	4798      	blx	r3
  406050:	e7e8      	b.n	406024 <RTC_Handler+0x10>
			rtc_clear_status(RTC, RTC_SCCR_ALRCLR);
  406052:	2102      	movs	r1, #2
  406054:	4801      	ldr	r0, [pc, #4]	; (40605c <RTC_Handler+0x48>)
  406056:	4b03      	ldr	r3, [pc, #12]	; (406064 <RTC_Handler+0x50>)
  406058:	4798      	blx	r3
  40605a:	e7e6      	b.n	40602a <RTC_Handler+0x16>
  40605c:	400e1860 	.word	0x400e1860
  406060:	00400551 	.word	0x00400551
  406064:	00400555 	.word	0x00400555

00406068 <io_init>:
{
  406068:	b530      	push	{r4, r5, lr}
  40606a:	b083      	sub	sp, #12
	pmc_enable_periph_clk(BUT1_PIO_ID);
  40606c:	200a      	movs	r0, #10
  40606e:	4b0f      	ldr	r3, [pc, #60]	; (4060ac <io_init+0x44>)
  406070:	4798      	blx	r3
	pio_configure(BUT1_PIO, PIO_INPUT, BUT1_IDX_MASK, PIO_PULLUP | PIO_DEBOUNCE);
  406072:	4c0f      	ldr	r4, [pc, #60]	; (4060b0 <io_init+0x48>)
  406074:	2309      	movs	r3, #9
  406076:	2240      	movs	r2, #64	; 0x40
  406078:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  40607c:	4620      	mov	r0, r4
  40607e:	4d0d      	ldr	r5, [pc, #52]	; (4060b4 <io_init+0x4c>)
  406080:	47a8      	blx	r5
	pio_handler_set(BUT1_PIO,
  406082:	4b0d      	ldr	r3, [pc, #52]	; (4060b8 <io_init+0x50>)
  406084:	9300      	str	r3, [sp, #0]
  406086:	2350      	movs	r3, #80	; 0x50
  406088:	2240      	movs	r2, #64	; 0x40
  40608a:	210a      	movs	r1, #10
  40608c:	4620      	mov	r0, r4
  40608e:	4d0b      	ldr	r5, [pc, #44]	; (4060bc <io_init+0x54>)
  406090:	47a8      	blx	r5
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  406092:	4b0b      	ldr	r3, [pc, #44]	; (4060c0 <io_init+0x58>)
  406094:	f44f 6280 	mov.w	r2, #1024	; 0x400
  406098:	601a      	str	r2, [r3, #0]
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  40609a:	22a0      	movs	r2, #160	; 0xa0
  40609c:	f883 230a 	strb.w	r2, [r3, #778]	; 0x30a
	pio_enable_interrupt(BUT1_PIO, BUT1_IDX_MASK);
  4060a0:	2140      	movs	r1, #64	; 0x40
  4060a2:	4620      	mov	r0, r4
  4060a4:	4b07      	ldr	r3, [pc, #28]	; (4060c4 <io_init+0x5c>)
  4060a6:	4798      	blx	r3
}
  4060a8:	b003      	add	sp, #12
  4060aa:	bd30      	pop	{r4, r5, pc}
  4060ac:	00405511 	.word	0x00405511
  4060b0:	400e0e00 	.word	0x400e0e00
  4060b4:	00405045 	.word	0x00405045
  4060b8:	00405a89 	.word	0x00405a89
  4060bc:	00405299 	.word	0x00405299
  4060c0:	e000e100 	.word	0xe000e100
  4060c4:	00405107 	.word	0x00405107

004060c8 <task_but>:
{
  4060c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4060cc:	b0a4      	sub	sp, #144	; 0x90
	xQueueBut = xQueueCreate( 10, sizeof( int32_t ) );
  4060ce:	2200      	movs	r2, #0
  4060d0:	2104      	movs	r1, #4
  4060d2:	200a      	movs	r0, #10
  4060d4:	4b16      	ldr	r3, [pc, #88]	; (406130 <task_but+0x68>)
  4060d6:	4798      	blx	r3
  4060d8:	4b16      	ldr	r3, [pc, #88]	; (406134 <task_but+0x6c>)
  4060da:	6018      	str	r0, [r3, #0]
	io_init();
  4060dc:	4b16      	ldr	r3, [pc, #88]	; (406138 <task_but+0x70>)
  4060de:	4798      	blx	r3
		if (xQueueReceive( xQueueBut, &(adc_value), ( TickType_t )  10 / portTICK_PERIOD_MS)) {
  4060e0:	4e14      	ldr	r6, [pc, #80]	; (406134 <task_but+0x6c>)
  4060e2:	4d16      	ldr	r5, [pc, #88]	; (40613c <task_but+0x74>)
			get_time(&timestamp);
  4060e4:	f8df 8070 	ldr.w	r8, [pc, #112]	; 406158 <task_but+0x90>
  4060e8:	e003      	b.n	4060f2 <task_but+0x2a>
		vTaskDelay(1000);
  4060ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  4060ee:	4b14      	ldr	r3, [pc, #80]	; (406140 <task_but+0x78>)
  4060f0:	4798      	blx	r3
		if (xQueueReceive( xQueueBut, &(adc_value), ( TickType_t )  10 / portTICK_PERIOD_MS)) {
  4060f2:	2300      	movs	r3, #0
  4060f4:	220a      	movs	r2, #10
  4060f6:	a901      	add	r1, sp, #4
  4060f8:	6830      	ldr	r0, [r6, #0]
  4060fa:	47a8      	blx	r5
  4060fc:	2800      	cmp	r0, #0
  4060fe:	d0f4      	beq.n	4060ea <task_but+0x22>
			if (status) {
  406100:	fab4 f484 	clz	r4, r4
  406104:	0964      	lsrs	r4, r4, #5
			get_time(&timestamp);
  406106:	a802      	add	r0, sp, #8
  406108:	47c0      	blx	r8
			data.id = 2;
  40610a:	2302      	movs	r3, #2
  40610c:	9312      	str	r3, [sp, #72]	; 0x48
			data.value = status;
  40610e:	9413      	str	r4, [sp, #76]	; 0x4c
			printf("status : %d\n", data.value);
  406110:	4621      	mov	r1, r4
  406112:	480c      	ldr	r0, [pc, #48]	; (406144 <task_but+0x7c>)
  406114:	4b0c      	ldr	r3, [pc, #48]	; (406148 <task_but+0x80>)
  406116:	4798      	blx	r3
			strcpy(data.timestamp, timestamp);
  406118:	a902      	add	r1, sp, #8
  40611a:	a814      	add	r0, sp, #80	; 0x50
  40611c:	4b0b      	ldr	r3, [pc, #44]	; (40614c <task_but+0x84>)
  40611e:	4798      	blx	r3
			xQueueSend(xQueueWifi, &data, 0);
  406120:	2300      	movs	r3, #0
  406122:	461a      	mov	r2, r3
  406124:	a912      	add	r1, sp, #72	; 0x48
  406126:	480a      	ldr	r0, [pc, #40]	; (406150 <task_but+0x88>)
  406128:	6800      	ldr	r0, [r0, #0]
  40612a:	4f0a      	ldr	r7, [pc, #40]	; (406154 <task_but+0x8c>)
  40612c:	47b8      	blx	r7
  40612e:	e7dc      	b.n	4060ea <task_but+0x22>
  406130:	00400bfd 	.word	0x00400bfd
  406134:	2040cb2c 	.word	0x2040cb2c
  406138:	00406069 	.word	0x00406069
  40613c:	00400f5d 	.word	0x00400f5d
  406140:	00401785 	.word	0x00401785
  406144:	0040d80c 	.word	0x0040d80c
  406148:	00406515 	.word	0x00406515
  40614c:	004068f9 	.word	0x004068f9
  406150:	2040cb34 	.word	0x2040cb34
  406154:	00400c79 	.word	0x00400c79
  406158:	00405e99 	.word	0x00405e99

0040615c <vApplicationStackOverflowHook>:
{
  40615c:	b508      	push	{r3, lr}
	printf("stack overflow %x %s\r\n", pxTask, (portCHAR *)pcTaskName);
  40615e:	460a      	mov	r2, r1
  406160:	4601      	mov	r1, r0
  406162:	4802      	ldr	r0, [pc, #8]	; (40616c <vApplicationStackOverflowHook+0x10>)
  406164:	4b02      	ldr	r3, [pc, #8]	; (406170 <vApplicationStackOverflowHook+0x14>)
  406166:	4798      	blx	r3
  406168:	e7fe      	b.n	406168 <vApplicationStackOverflowHook+0xc>
  40616a:	bf00      	nop
  40616c:	0040d904 	.word	0x0040d904
  406170:	00406515 	.word	0x00406515

00406174 <vApplicationTickHook>:
{
  406174:	4770      	bx	lr

00406176 <vApplicationMallocFailedHook>:
  406176:	f04f 0380 	mov.w	r3, #128	; 0x80
  40617a:	b672      	cpsid	i
  40617c:	f383 8811 	msr	BASEPRI, r3
  406180:	f3bf 8f6f 	isb	sy
  406184:	f3bf 8f4f 	dsb	sy
  406188:	b662      	cpsie	i
  40618a:	e7fe      	b.n	40618a <vApplicationMallocFailedHook+0x14>

0040618c <inet_aton>:
{
  40618c:	b4f0      	push	{r4, r5, r6, r7}
  40618e:	3801      	subs	r0, #1
  register u_long acc = 0, addr = 0;
  406190:	2400      	movs	r4, #0
  406192:	4622      	mov	r2, r4
  int dots = 0;
  406194:	4625      	mov	r5, r4
	        acc = 0;
  406196:	4626      	mov	r6, r4
  406198:	e011      	b.n	4061be <inet_aton+0x32>
	  switch (cc) {
  40619a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
  40619e:	2f09      	cmp	r7, #9
  4061a0:	d814      	bhi.n	4061cc <inet_aton+0x40>
	        acc = acc * 10 + (cc - '0');
  4061a2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  4061a6:	eb07 0242 	add.w	r2, r7, r2, lsl #1
	        break;
  4061aa:	e007      	b.n	4061bc <inet_aton+0x30>
	        if (++dots > 3) {
  4061ac:	3501      	adds	r5, #1
  4061ae:	2d03      	cmp	r5, #3
  4061b0:	dc24      	bgt.n	4061fc <inet_aton+0x70>
	        if (acc > 255) {
  4061b2:	2aff      	cmp	r2, #255	; 0xff
  4061b4:	d824      	bhi.n	406200 <inet_aton+0x74>
	        addr = addr << 8 | acc;
  4061b6:	ea42 2404 	orr.w	r4, r2, r4, lsl #8
	        acc = 0;
  4061ba:	4632      	mov	r2, r6
  } while (*cp++) ;
  4061bc:	b14b      	cbz	r3, 4061d2 <inet_aton+0x46>
	  register char cc = *cp;
  4061be:	f810 3f01 	ldrb.w	r3, [r0, #1]!
	  switch (cc) {
  4061c2:	2b2e      	cmp	r3, #46	; 0x2e
  4061c4:	d0f2      	beq.n	4061ac <inet_aton+0x20>
  4061c6:	d8e8      	bhi.n	40619a <inet_aton+0xe>
  4061c8:	2b00      	cmp	r3, #0
  4061ca:	d0f2      	beq.n	4061b2 <inet_aton+0x26>
	        return 0;
  4061cc:	2000      	movs	r0, #0
}
  4061ce:	bcf0      	pop	{r4, r5, r6, r7}
  4061d0:	4770      	bx	lr
  if (dots < 3) {
  4061d2:	2d02      	cmp	r5, #2
  4061d4:	dc03      	bgt.n	4061de <inet_aton+0x52>
	  addr <<= 8 * (3 - dots) ;
  4061d6:	f1c5 0303 	rsb	r3, r5, #3
  4061da:	00db      	lsls	r3, r3, #3
  4061dc:	409c      	lsls	r4, r3
  if (ap) {
  4061de:	b189      	cbz	r1, 406204 <inet_aton+0x78>
	  ap->s_addr = _htonl(addr);
  4061e0:	0e23      	lsrs	r3, r4, #24
  4061e2:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
  4061e6:	0222      	lsls	r2, r4, #8
  4061e8:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
  4061ec:	431a      	orrs	r2, r3
  4061ee:	0a23      	lsrs	r3, r4, #8
  4061f0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
  4061f4:	4313      	orrs	r3, r2
  4061f6:	600b      	str	r3, [r1, #0]
  return 1;    
  4061f8:	2001      	movs	r0, #1
  4061fa:	e7e8      	b.n	4061ce <inet_aton+0x42>
		    return 0;
  4061fc:	2000      	movs	r0, #0
  4061fe:	e7e6      	b.n	4061ce <inet_aton+0x42>
		    return 0;
  406200:	2000      	movs	r0, #0
  406202:	e7e4      	b.n	4061ce <inet_aton+0x42>
  return 1;    
  406204:	2001      	movs	r0, #1
  406206:	e7e2      	b.n	4061ce <inet_aton+0x42>

00406208 <task_wifi>:
		}
		vTaskDelay(300);
	}
}

static void task_wifi(void *pvParameters) {
  406208:	b5f0      	push	{r4, r5, r6, r7, lr}
  40620a:	b08d      	sub	sp, #52	; 0x34
	struct sockaddr_in addr_in;
	
	
	
	/* Initialize the BSP. */
	nm_bsp_init();
  40620c:	4b37      	ldr	r3, [pc, #220]	; (4062ec <task_wifi+0xe4>)
  40620e:	4798      	blx	r3
	
	/* Initialize Wi-Fi parameters structure. */
	memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
  406210:	2300      	movs	r3, #0
  406212:	9307      	str	r3, [sp, #28]
  406214:	9308      	str	r3, [sp, #32]
  406216:	9309      	str	r3, [sp, #36]	; 0x24
  406218:	930a      	str	r3, [sp, #40]	; 0x28
  40621a:	930b      	str	r3, [sp, #44]	; 0x2c

	/* Initialize Wi-Fi driver with data and status callbacks. */
	param.pfAppWifiCb = wifi_cb;
  40621c:	4b34      	ldr	r3, [pc, #208]	; (4062f0 <task_wifi+0xe8>)
  40621e:	9306      	str	r3, [sp, #24]
	ret = m2m_wifi_init(&param);
  406220:	a806      	add	r0, sp, #24
  406222:	4b34      	ldr	r3, [pc, #208]	; (4062f4 <task_wifi+0xec>)
  406224:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  406226:	b120      	cbz	r0, 406232 <task_wifi+0x2a>
  406228:	4601      	mov	r1, r0
		printf("main: m2m_wifi_init call error!(%d)\r\n", ret);
  40622a:	4833      	ldr	r0, [pc, #204]	; (4062f8 <task_wifi+0xf0>)
  40622c:	4b33      	ldr	r3, [pc, #204]	; (4062fc <task_wifi+0xf4>)
  40622e:	4798      	blx	r3
  406230:	e7fe      	b.n	406230 <task_wifi+0x28>
		while (1) {
		}
	}
	
	/* Initialize socket module. */
	socketInit();
  406232:	4b33      	ldr	r3, [pc, #204]	; (406300 <task_wifi+0xf8>)
  406234:	4798      	blx	r3

	/* Register socket callback function. */
	registerSocketCallback(socket_cb, resolve_cb);
  406236:	4933      	ldr	r1, [pc, #204]	; (406304 <task_wifi+0xfc>)
  406238:	4833      	ldr	r0, [pc, #204]	; (406308 <task_wifi+0x100>)
  40623a:	4b34      	ldr	r3, [pc, #208]	; (40630c <task_wifi+0x104>)
  40623c:	4798      	blx	r3

	/* Connect to router. */
	printf("main: connecting to WiFi AP %s...\r\n", (char *)MAIN_WLAN_SSID);
  40623e:	4d34      	ldr	r5, [pc, #208]	; (406310 <task_wifi+0x108>)
  406240:	4629      	mov	r1, r5
  406242:	4834      	ldr	r0, [pc, #208]	; (406314 <task_wifi+0x10c>)
  406244:	4c2d      	ldr	r4, [pc, #180]	; (4062fc <task_wifi+0xf4>)
  406246:	47a0      	blx	r4
	m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
  406248:	23ff      	movs	r3, #255	; 0xff
  40624a:	9300      	str	r3, [sp, #0]
  40624c:	4b32      	ldr	r3, [pc, #200]	; (406318 <task_wifi+0x110>)
  40624e:	2202      	movs	r2, #2
  406250:	2111      	movs	r1, #17
  406252:	4628      	mov	r0, r5
  406254:	4d31      	ldr	r5, [pc, #196]	; (40631c <task_wifi+0x114>)
  406256:	47a8      	blx	r5

	addr_in.sin_family = AF_INET;
  406258:	2302      	movs	r3, #2
  40625a:	f8ad 3008 	strh.w	r3, [sp, #8]
	addr_in.sin_port = _htons(MAIN_SERVER_PORT);
  40625e:	f648 0313 	movw	r3, #34835	; 0x8813
  406262:	f8ad 300a 	strh.w	r3, [sp, #10]
	
	printf("Inet aton : %d", addr_in.sin_addr);
  406266:	9903      	ldr	r1, [sp, #12]
  406268:	482d      	ldr	r0, [pc, #180]	; (406320 <task_wifi+0x118>)
  40626a:	47a0      	blx	r4
	
  while(1){
	  m2m_wifi_handle_events(NULL);
  40626c:	4d2d      	ldr	r5, [pc, #180]	; (406324 <task_wifi+0x11c>)

	  if (wifi_connected == M2M_WIFI_CONNECTED) {
  40626e:	4c2e      	ldr	r4, [pc, #184]	; (406328 <task_wifi+0x120>)
				  gbTcpConnection = true;
			  }
		  }
		  
	  }
		vTaskDelay(1000/portTICK_PERIOD_MS);
  406270:	4e2e      	ldr	r6, [pc, #184]	; (40632c <task_wifi+0x124>)
  406272:	e010      	b.n	406296 <task_wifi+0x8e>
				  printf("main: failed to create TCP client socket error!\r\n");
  406274:	482e      	ldr	r0, [pc, #184]	; (406330 <task_wifi+0x128>)
  406276:	4b21      	ldr	r3, [pc, #132]	; (4062fc <task_wifi+0xf4>)
  406278:	4798      	blx	r3
				  continue;
  40627a:	e00c      	b.n	406296 <task_wifi+0x8e>
				  close(tcp_client_socket);
  40627c:	4f2d      	ldr	r7, [pc, #180]	; (406334 <task_wifi+0x12c>)
  40627e:	f997 0000 	ldrsb.w	r0, [r7]
  406282:	4b2d      	ldr	r3, [pc, #180]	; (406338 <task_wifi+0x130>)
  406284:	4798      	blx	r3
				  tcp_client_socket = -1;
  406286:	23ff      	movs	r3, #255	; 0xff
  406288:	703b      	strb	r3, [r7, #0]
				  printf("error\n");
  40628a:	482c      	ldr	r0, [pc, #176]	; (40633c <task_wifi+0x134>)
  40628c:	4b1b      	ldr	r3, [pc, #108]	; (4062fc <task_wifi+0xf4>)
  40628e:	4798      	blx	r3
		vTaskDelay(1000/portTICK_PERIOD_MS);
  406290:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  406294:	47b0      	blx	r6
	  m2m_wifi_handle_events(NULL);
  406296:	2000      	movs	r0, #0
  406298:	47a8      	blx	r5
	  if (wifi_connected == M2M_WIFI_CONNECTED) {
  40629a:	7823      	ldrb	r3, [r4, #0]
  40629c:	2b01      	cmp	r3, #1
  40629e:	d1f7      	bne.n	406290 <task_wifi+0x88>
		  if (tcp_client_socket < 0) {
  4062a0:	4b24      	ldr	r3, [pc, #144]	; (406334 <task_wifi+0x12c>)
  4062a2:	f993 3000 	ldrsb.w	r3, [r3]
  4062a6:	2b00      	cmp	r3, #0
  4062a8:	daf2      	bge.n	406290 <task_wifi+0x88>
			  printf("socket init \n");
  4062aa:	4825      	ldr	r0, [pc, #148]	; (406340 <task_wifi+0x138>)
  4062ac:	4b13      	ldr	r3, [pc, #76]	; (4062fc <task_wifi+0xf4>)
  4062ae:	4798      	blx	r3
			  if ((tcp_client_socket = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
  4062b0:	2200      	movs	r2, #0
  4062b2:	2101      	movs	r1, #1
  4062b4:	2002      	movs	r0, #2
  4062b6:	4b23      	ldr	r3, [pc, #140]	; (406344 <task_wifi+0x13c>)
  4062b8:	4798      	blx	r3
  4062ba:	4b1e      	ldr	r3, [pc, #120]	; (406334 <task_wifi+0x12c>)
  4062bc:	7018      	strb	r0, [r3, #0]
  4062be:	2800      	cmp	r0, #0
  4062c0:	dbd8      	blt.n	406274 <task_wifi+0x6c>
			  printf("socket connecting\n");
  4062c2:	4821      	ldr	r0, [pc, #132]	; (406348 <task_wifi+0x140>)
  4062c4:	4b0d      	ldr	r3, [pc, #52]	; (4062fc <task_wifi+0xf4>)
  4062c6:	4798      	blx	r3
			  inet_aton(MAIN_SERVER_NAME, &addr_in.sin_addr);
  4062c8:	a903      	add	r1, sp, #12
  4062ca:	4820      	ldr	r0, [pc, #128]	; (40634c <task_wifi+0x144>)
  4062cc:	4b20      	ldr	r3, [pc, #128]	; (406350 <task_wifi+0x148>)
  4062ce:	4798      	blx	r3
			  if (connect(tcp_client_socket, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in)) != SOCK_ERR_NO_ERROR) {
  4062d0:	2210      	movs	r2, #16
  4062d2:	a902      	add	r1, sp, #8
  4062d4:	4b17      	ldr	r3, [pc, #92]	; (406334 <task_wifi+0x12c>)
  4062d6:	f993 0000 	ldrsb.w	r0, [r3]
  4062da:	4b1e      	ldr	r3, [pc, #120]	; (406354 <task_wifi+0x14c>)
  4062dc:	4798      	blx	r3
  4062de:	2800      	cmp	r0, #0
  4062e0:	d1cc      	bne.n	40627c <task_wifi+0x74>
				  gbTcpConnection = true;
  4062e2:	2201      	movs	r2, #1
  4062e4:	4b1c      	ldr	r3, [pc, #112]	; (406358 <task_wifi+0x150>)
  4062e6:	701a      	strb	r2, [r3, #0]
  4062e8:	e7d2      	b.n	406290 <task_wifi+0x88>
  4062ea:	bf00      	nop
  4062ec:	0040225d 	.word	0x0040225d
  4062f0:	00405c81 	.word	0x00405c81
  4062f4:	0040309d 	.word	0x0040309d
  4062f8:	0040d81c 	.word	0x0040d81c
  4062fc:	00406515 	.word	0x00406515
  406300:	0040484d 	.word	0x0040484d
  406304:	00405ad9 	.word	0x00405ad9
  406308:	00405b09 	.word	0x00405b09
  40630c:	00404891 	.word	0x00404891
  406310:	0040d844 	.word	0x0040d844
  406314:	0040d858 	.word	0x0040d858
  406318:	0040d87c 	.word	0x0040d87c
  40631c:	004033f5 	.word	0x004033f5
  406320:	0040d888 	.word	0x0040d888
  406324:	00403199 	.word	0x00403199
  406328:	2040c960 	.word	0x2040c960
  40632c:	00401785 	.word	0x00401785
  406330:	0040d8a8 	.word	0x0040d8a8
  406334:	20400020 	.word	0x20400020
  406338:	00404b51 	.word	0x00404b51
  40633c:	0040d8fc 	.word	0x0040d8fc
  406340:	0040d898 	.word	0x0040d898
  406344:	004048a5 	.word	0x004048a5
  406348:	0040d8dc 	.word	0x0040d8dc
  40634c:	0040d8f0 	.word	0x0040d8f0
  406350:	0040618d 	.word	0x0040618d
  406354:	00404985 	.word	0x00404985
  406358:	2040c958 	.word	0x2040c958

0040635c <main>:
 * Initialize system, UART console, network then start weather client.
 *
 * \return Program return value.
 */
int main(void)
{
  40635c:	b500      	push	{lr}
  40635e:	b08b      	sub	sp, #44	; 0x2c
	/* Initialize the board. */
	sysclk_init();
  406360:	4b3a      	ldr	r3, [pc, #232]	; (40644c <main+0xf0>)
  406362:	4798      	blx	r3
	board_init();
  406364:	4b3a      	ldr	r3, [pc, #232]	; (406450 <main+0xf4>)
  406366:	4798      	blx	r3
  406368:	200e      	movs	r0, #14
  40636a:	4e3a      	ldr	r6, [pc, #232]	; (406454 <main+0xf8>)
  40636c:	47b0      	blx	r6
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  40636e:	4d3a      	ldr	r5, [pc, #232]	; (406458 <main+0xfc>)
  406370:	4b3a      	ldr	r3, [pc, #232]	; (40645c <main+0x100>)
  406372:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  406374:	4a3a      	ldr	r2, [pc, #232]	; (406460 <main+0x104>)
  406376:	4b3b      	ldr	r3, [pc, #236]	; (406464 <main+0x108>)
  406378:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  40637a:	4a3b      	ldr	r2, [pc, #236]	; (406468 <main+0x10c>)
  40637c:	4b3b      	ldr	r3, [pc, #236]	; (40646c <main+0x110>)
  40637e:	601a      	str	r2, [r3, #0]
	usart_settings.baudrate = opt->baudrate;
  406380:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  406384:	9304      	str	r3, [sp, #16]
	usart_settings.char_length = opt->charlength;
  406386:	23c0      	movs	r3, #192	; 0xc0
  406388:	9305      	str	r3, [sp, #20]
	usart_settings.parity_type = opt->paritytype;
  40638a:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40638e:	9306      	str	r3, [sp, #24]
	usart_settings.stop_bits= opt->stopbits;
  406390:	2400      	movs	r4, #0
  406392:	9407      	str	r4, [sp, #28]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  406394:	9408      	str	r4, [sp, #32]
  406396:	200e      	movs	r0, #14
  406398:	47b0      	blx	r6
		usart_init_rs232(p_usart, &usart_settings,
  40639a:	4a35      	ldr	r2, [pc, #212]	; (406470 <main+0x114>)
  40639c:	a904      	add	r1, sp, #16
  40639e:	4628      	mov	r0, r5
  4063a0:	4b34      	ldr	r3, [pc, #208]	; (406474 <main+0x118>)
  4063a2:	4798      	blx	r3
		usart_enable_tx(p_usart);
  4063a4:	4628      	mov	r0, r5
  4063a6:	4b34      	ldr	r3, [pc, #208]	; (406478 <main+0x11c>)
  4063a8:	4798      	blx	r3
		usart_enable_rx(p_usart);
  4063aa:	4628      	mov	r0, r5
  4063ac:	4b33      	ldr	r3, [pc, #204]	; (40647c <main+0x120>)
  4063ae:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  4063b0:	4e33      	ldr	r6, [pc, #204]	; (406480 <main+0x124>)
  4063b2:	6833      	ldr	r3, [r6, #0]
  4063b4:	4621      	mov	r1, r4
  4063b6:	6898      	ldr	r0, [r3, #8]
  4063b8:	4d32      	ldr	r5, [pc, #200]	; (406484 <main+0x128>)
  4063ba:	47a8      	blx	r5
	setbuf(stdin, NULL);
  4063bc:	6833      	ldr	r3, [r6, #0]
  4063be:	4621      	mov	r1, r4
  4063c0:	6858      	ldr	r0, [r3, #4]
  4063c2:	47a8      	blx	r5
	//RTC_init();

	/* Initialize the UART console. */
	configure_console();
	printf(STRING_HEADER);
  4063c4:	4830      	ldr	r0, [pc, #192]	; (406488 <main+0x12c>)
  4063c6:	4b31      	ldr	r3, [pc, #196]	; (40648c <main+0x130>)
  4063c8:	4798      	blx	r3
	
	xQueueWifi = xQueueCreate( 10, sizeof( sensorData ) );
  4063ca:	4622      	mov	r2, r4
  4063cc:	2148      	movs	r1, #72	; 0x48
  4063ce:	200a      	movs	r0, #10
  4063d0:	4b2f      	ldr	r3, [pc, #188]	; (406490 <main+0x134>)
  4063d2:	4798      	blx	r3
  4063d4:	4b2f      	ldr	r3, [pc, #188]	; (406494 <main+0x138>)
  4063d6:	6018      	str	r0, [r3, #0]
	if(xQueueWifi == pdFAIL) {
  4063d8:	2800      	cmp	r0, #0
  4063da:	d032      	beq.n	406442 <main+0xe6>
		printf("Failed to create SENSOR DATA task\r\n");
	}
	if (xTaskCreate(task_wifi, "Wifi", TASK_WIFI_STACK_SIZE, NULL,
  4063dc:	2300      	movs	r3, #0
  4063de:	9303      	str	r3, [sp, #12]
  4063e0:	9302      	str	r3, [sp, #8]
  4063e2:	9301      	str	r3, [sp, #4]
  4063e4:	9300      	str	r3, [sp, #0]
  4063e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
  4063ea:	492b      	ldr	r1, [pc, #172]	; (406498 <main+0x13c>)
  4063ec:	482b      	ldr	r0, [pc, #172]	; (40649c <main+0x140>)
  4063ee:	4c2c      	ldr	r4, [pc, #176]	; (4064a0 <main+0x144>)
  4063f0:	47a0      	blx	r4
  4063f2:	2801      	cmp	r0, #1
  4063f4:	d002      	beq.n	4063fc <main+0xa0>
	TASK_WIFI_STACK_PRIORITY, NULL) != pdPASS) {
		printf("Failed to create Wifi task\r\n");
  4063f6:	482b      	ldr	r0, [pc, #172]	; (4064a4 <main+0x148>)
  4063f8:	4b24      	ldr	r3, [pc, #144]	; (40648c <main+0x130>)
  4063fa:	4798      	blx	r3
	}
	
	/* Create task to AFEC converter */
	if (xTaskCreate(task_afec, "afec", TASK_AFEC_STACK_SIZE, NULL, TASK_AFEC_STACK_PRIORITY, NULL) != pdPASS) {
  4063fc:	2300      	movs	r3, #0
  4063fe:	9303      	str	r3, [sp, #12]
  406400:	9302      	str	r3, [sp, #8]
  406402:	9301      	str	r3, [sp, #4]
  406404:	9300      	str	r3, [sp, #0]
  406406:	f44f 7200 	mov.w	r2, #512	; 0x200
  40640a:	4927      	ldr	r1, [pc, #156]	; (4064a8 <main+0x14c>)
  40640c:	4827      	ldr	r0, [pc, #156]	; (4064ac <main+0x150>)
  40640e:	4c24      	ldr	r4, [pc, #144]	; (4064a0 <main+0x144>)
  406410:	47a0      	blx	r4
  406412:	2801      	cmp	r0, #1
  406414:	d002      	beq.n	40641c <main+0xc0>
		printf("Failed to create test led task\r\n");
  406416:	4826      	ldr	r0, [pc, #152]	; (4064b0 <main+0x154>)
  406418:	4b1c      	ldr	r3, [pc, #112]	; (40648c <main+0x130>)
  40641a:	4798      	blx	r3
	}
	
	if (xTaskCreate(task_but, "but", TASK_AFEC_STACK_SIZE, NULL, TASK_AFEC_STACK_PRIORITY, NULL) != pdPASS) {
  40641c:	2300      	movs	r3, #0
  40641e:	9303      	str	r3, [sp, #12]
  406420:	9302      	str	r3, [sp, #8]
  406422:	9301      	str	r3, [sp, #4]
  406424:	9300      	str	r3, [sp, #0]
  406426:	f44f 7200 	mov.w	r2, #512	; 0x200
  40642a:	4922      	ldr	r1, [pc, #136]	; (4064b4 <main+0x158>)
  40642c:	4822      	ldr	r0, [pc, #136]	; (4064b8 <main+0x15c>)
  40642e:	4c1c      	ldr	r4, [pc, #112]	; (4064a0 <main+0x144>)
  406430:	47a0      	blx	r4
  406432:	2801      	cmp	r0, #1
  406434:	d002      	beq.n	40643c <main+0xe0>
		printf("Failed to create test led task\r\n");
  406436:	481e      	ldr	r0, [pc, #120]	; (4064b0 <main+0x154>)
  406438:	4b14      	ldr	r3, [pc, #80]	; (40648c <main+0x130>)
  40643a:	4798      	blx	r3
	}

	vTaskStartScheduler();
  40643c:	4b1f      	ldr	r3, [pc, #124]	; (4064bc <main+0x160>)
  40643e:	4798      	blx	r3
  406440:	e7fe      	b.n	406440 <main+0xe4>
		printf("Failed to create SENSOR DATA task\r\n");
  406442:	481f      	ldr	r0, [pc, #124]	; (4064c0 <main+0x164>)
  406444:	4b11      	ldr	r3, [pc, #68]	; (40648c <main+0x130>)
  406446:	4798      	blx	r3
  406448:	e7c8      	b.n	4063dc <main+0x80>
  40644a:	bf00      	nop
  40644c:	00404cb5 	.word	0x00404cb5
  406450:	00404db1 	.word	0x00404db1
  406454:	00405511 	.word	0x00405511
  406458:	40028000 	.word	0x40028000
  40645c:	2040cb28 	.word	0x2040cb28
  406460:	00405dc5 	.word	0x00405dc5
  406464:	2040cb24 	.word	0x2040cb24
  406468:	00405ce9 	.word	0x00405ce9
  40646c:	2040cb20 	.word	0x2040cb20
  406470:	08f0d180 	.word	0x08f0d180
  406474:	00405761 	.word	0x00405761
  406478:	004057b5 	.word	0x004057b5
  40647c:	004057bb 	.word	0x004057bb
  406480:	20400024 	.word	0x20400024
  406484:	0040670d 	.word	0x0040670d
  406488:	0040d618 	.word	0x0040d618
  40648c:	00406515 	.word	0x00406515
  406490:	00400bfd 	.word	0x00400bfd
  406494:	2040cb34 	.word	0x2040cb34
  406498:	0040d6a0 	.word	0x0040d6a0
  40649c:	00406209 	.word	0x00406209
  4064a0:	0040123d 	.word	0x0040123d
  4064a4:	0040d6a8 	.word	0x0040d6a8
  4064a8:	0040d6c8 	.word	0x0040d6c8
  4064ac:	00405f29 	.word	0x00405f29
  4064b0:	0040d6d0 	.word	0x0040d6d0
  4064b4:	0040d6f4 	.word	0x0040d6f4
  4064b8:	004060c9 	.word	0x004060c9
  4064bc:	00401471 	.word	0x00401471
  4064c0:	0040d67c 	.word	0x0040d67c

004064c4 <__libc_init_array>:
  4064c4:	b570      	push	{r4, r5, r6, lr}
  4064c6:	4e0f      	ldr	r6, [pc, #60]	; (406504 <__libc_init_array+0x40>)
  4064c8:	4d0f      	ldr	r5, [pc, #60]	; (406508 <__libc_init_array+0x44>)
  4064ca:	1b76      	subs	r6, r6, r5
  4064cc:	10b6      	asrs	r6, r6, #2
  4064ce:	bf18      	it	ne
  4064d0:	2400      	movne	r4, #0
  4064d2:	d005      	beq.n	4064e0 <__libc_init_array+0x1c>
  4064d4:	3401      	adds	r4, #1
  4064d6:	f855 3b04 	ldr.w	r3, [r5], #4
  4064da:	4798      	blx	r3
  4064dc:	42a6      	cmp	r6, r4
  4064de:	d1f9      	bne.n	4064d4 <__libc_init_array+0x10>
  4064e0:	4e0a      	ldr	r6, [pc, #40]	; (40650c <__libc_init_array+0x48>)
  4064e2:	4d0b      	ldr	r5, [pc, #44]	; (406510 <__libc_init_array+0x4c>)
  4064e4:	1b76      	subs	r6, r6, r5
  4064e6:	f007 fba3 	bl	40dc30 <_init>
  4064ea:	10b6      	asrs	r6, r6, #2
  4064ec:	bf18      	it	ne
  4064ee:	2400      	movne	r4, #0
  4064f0:	d006      	beq.n	406500 <__libc_init_array+0x3c>
  4064f2:	3401      	adds	r4, #1
  4064f4:	f855 3b04 	ldr.w	r3, [r5], #4
  4064f8:	4798      	blx	r3
  4064fa:	42a6      	cmp	r6, r4
  4064fc:	d1f9      	bne.n	4064f2 <__libc_init_array+0x2e>
  4064fe:	bd70      	pop	{r4, r5, r6, pc}
  406500:	bd70      	pop	{r4, r5, r6, pc}
  406502:	bf00      	nop
  406504:	0040dc3c 	.word	0x0040dc3c
  406508:	0040dc3c 	.word	0x0040dc3c
  40650c:	0040dc44 	.word	0x0040dc44
  406510:	0040dc3c 	.word	0x0040dc3c

00406514 <iprintf>:
  406514:	b40f      	push	{r0, r1, r2, r3}
  406516:	b500      	push	{lr}
  406518:	4907      	ldr	r1, [pc, #28]	; (406538 <iprintf+0x24>)
  40651a:	b083      	sub	sp, #12
  40651c:	ab04      	add	r3, sp, #16
  40651e:	6808      	ldr	r0, [r1, #0]
  406520:	f853 2b04 	ldr.w	r2, [r3], #4
  406524:	6881      	ldr	r1, [r0, #8]
  406526:	9301      	str	r3, [sp, #4]
  406528:	f001 fd26 	bl	407f78 <_vfiprintf_r>
  40652c:	b003      	add	sp, #12
  40652e:	f85d eb04 	ldr.w	lr, [sp], #4
  406532:	b004      	add	sp, #16
  406534:	4770      	bx	lr
  406536:	bf00      	nop
  406538:	20400024 	.word	0x20400024

0040653c <memcpy>:
  40653c:	4684      	mov	ip, r0
  40653e:	ea41 0300 	orr.w	r3, r1, r0
  406542:	f013 0303 	ands.w	r3, r3, #3
  406546:	d16d      	bne.n	406624 <memcpy+0xe8>
  406548:	3a40      	subs	r2, #64	; 0x40
  40654a:	d341      	bcc.n	4065d0 <memcpy+0x94>
  40654c:	f851 3b04 	ldr.w	r3, [r1], #4
  406550:	f840 3b04 	str.w	r3, [r0], #4
  406554:	f851 3b04 	ldr.w	r3, [r1], #4
  406558:	f840 3b04 	str.w	r3, [r0], #4
  40655c:	f851 3b04 	ldr.w	r3, [r1], #4
  406560:	f840 3b04 	str.w	r3, [r0], #4
  406564:	f851 3b04 	ldr.w	r3, [r1], #4
  406568:	f840 3b04 	str.w	r3, [r0], #4
  40656c:	f851 3b04 	ldr.w	r3, [r1], #4
  406570:	f840 3b04 	str.w	r3, [r0], #4
  406574:	f851 3b04 	ldr.w	r3, [r1], #4
  406578:	f840 3b04 	str.w	r3, [r0], #4
  40657c:	f851 3b04 	ldr.w	r3, [r1], #4
  406580:	f840 3b04 	str.w	r3, [r0], #4
  406584:	f851 3b04 	ldr.w	r3, [r1], #4
  406588:	f840 3b04 	str.w	r3, [r0], #4
  40658c:	f851 3b04 	ldr.w	r3, [r1], #4
  406590:	f840 3b04 	str.w	r3, [r0], #4
  406594:	f851 3b04 	ldr.w	r3, [r1], #4
  406598:	f840 3b04 	str.w	r3, [r0], #4
  40659c:	f851 3b04 	ldr.w	r3, [r1], #4
  4065a0:	f840 3b04 	str.w	r3, [r0], #4
  4065a4:	f851 3b04 	ldr.w	r3, [r1], #4
  4065a8:	f840 3b04 	str.w	r3, [r0], #4
  4065ac:	f851 3b04 	ldr.w	r3, [r1], #4
  4065b0:	f840 3b04 	str.w	r3, [r0], #4
  4065b4:	f851 3b04 	ldr.w	r3, [r1], #4
  4065b8:	f840 3b04 	str.w	r3, [r0], #4
  4065bc:	f851 3b04 	ldr.w	r3, [r1], #4
  4065c0:	f840 3b04 	str.w	r3, [r0], #4
  4065c4:	f851 3b04 	ldr.w	r3, [r1], #4
  4065c8:	f840 3b04 	str.w	r3, [r0], #4
  4065cc:	3a40      	subs	r2, #64	; 0x40
  4065ce:	d2bd      	bcs.n	40654c <memcpy+0x10>
  4065d0:	3230      	adds	r2, #48	; 0x30
  4065d2:	d311      	bcc.n	4065f8 <memcpy+0xbc>
  4065d4:	f851 3b04 	ldr.w	r3, [r1], #4
  4065d8:	f840 3b04 	str.w	r3, [r0], #4
  4065dc:	f851 3b04 	ldr.w	r3, [r1], #4
  4065e0:	f840 3b04 	str.w	r3, [r0], #4
  4065e4:	f851 3b04 	ldr.w	r3, [r1], #4
  4065e8:	f840 3b04 	str.w	r3, [r0], #4
  4065ec:	f851 3b04 	ldr.w	r3, [r1], #4
  4065f0:	f840 3b04 	str.w	r3, [r0], #4
  4065f4:	3a10      	subs	r2, #16
  4065f6:	d2ed      	bcs.n	4065d4 <memcpy+0x98>
  4065f8:	320c      	adds	r2, #12
  4065fa:	d305      	bcc.n	406608 <memcpy+0xcc>
  4065fc:	f851 3b04 	ldr.w	r3, [r1], #4
  406600:	f840 3b04 	str.w	r3, [r0], #4
  406604:	3a04      	subs	r2, #4
  406606:	d2f9      	bcs.n	4065fc <memcpy+0xc0>
  406608:	3204      	adds	r2, #4
  40660a:	d008      	beq.n	40661e <memcpy+0xe2>
  40660c:	07d2      	lsls	r2, r2, #31
  40660e:	bf1c      	itt	ne
  406610:	f811 3b01 	ldrbne.w	r3, [r1], #1
  406614:	f800 3b01 	strbne.w	r3, [r0], #1
  406618:	d301      	bcc.n	40661e <memcpy+0xe2>
  40661a:	880b      	ldrh	r3, [r1, #0]
  40661c:	8003      	strh	r3, [r0, #0]
  40661e:	4660      	mov	r0, ip
  406620:	4770      	bx	lr
  406622:	bf00      	nop
  406624:	2a08      	cmp	r2, #8
  406626:	d313      	bcc.n	406650 <memcpy+0x114>
  406628:	078b      	lsls	r3, r1, #30
  40662a:	d08d      	beq.n	406548 <memcpy+0xc>
  40662c:	f010 0303 	ands.w	r3, r0, #3
  406630:	d08a      	beq.n	406548 <memcpy+0xc>
  406632:	f1c3 0304 	rsb	r3, r3, #4
  406636:	1ad2      	subs	r2, r2, r3
  406638:	07db      	lsls	r3, r3, #31
  40663a:	bf1c      	itt	ne
  40663c:	f811 3b01 	ldrbne.w	r3, [r1], #1
  406640:	f800 3b01 	strbne.w	r3, [r0], #1
  406644:	d380      	bcc.n	406548 <memcpy+0xc>
  406646:	f831 3b02 	ldrh.w	r3, [r1], #2
  40664a:	f820 3b02 	strh.w	r3, [r0], #2
  40664e:	e77b      	b.n	406548 <memcpy+0xc>
  406650:	3a04      	subs	r2, #4
  406652:	d3d9      	bcc.n	406608 <memcpy+0xcc>
  406654:	3a01      	subs	r2, #1
  406656:	f811 3b01 	ldrb.w	r3, [r1], #1
  40665a:	f800 3b01 	strb.w	r3, [r0], #1
  40665e:	d2f9      	bcs.n	406654 <memcpy+0x118>
  406660:	780b      	ldrb	r3, [r1, #0]
  406662:	7003      	strb	r3, [r0, #0]
  406664:	784b      	ldrb	r3, [r1, #1]
  406666:	7043      	strb	r3, [r0, #1]
  406668:	788b      	ldrb	r3, [r1, #2]
  40666a:	7083      	strb	r3, [r0, #2]
  40666c:	4660      	mov	r0, ip
  40666e:	4770      	bx	lr

00406670 <memset>:
  406670:	b470      	push	{r4, r5, r6}
  406672:	0786      	lsls	r6, r0, #30
  406674:	d046      	beq.n	406704 <memset+0x94>
  406676:	1e54      	subs	r4, r2, #1
  406678:	2a00      	cmp	r2, #0
  40667a:	d041      	beq.n	406700 <memset+0x90>
  40667c:	b2ca      	uxtb	r2, r1
  40667e:	4603      	mov	r3, r0
  406680:	e002      	b.n	406688 <memset+0x18>
  406682:	f114 34ff 	adds.w	r4, r4, #4294967295
  406686:	d33b      	bcc.n	406700 <memset+0x90>
  406688:	f803 2b01 	strb.w	r2, [r3], #1
  40668c:	079d      	lsls	r5, r3, #30
  40668e:	d1f8      	bne.n	406682 <memset+0x12>
  406690:	2c03      	cmp	r4, #3
  406692:	d92e      	bls.n	4066f2 <memset+0x82>
  406694:	b2cd      	uxtb	r5, r1
  406696:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  40669a:	2c0f      	cmp	r4, #15
  40669c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  4066a0:	d919      	bls.n	4066d6 <memset+0x66>
  4066a2:	f103 0210 	add.w	r2, r3, #16
  4066a6:	4626      	mov	r6, r4
  4066a8:	3e10      	subs	r6, #16
  4066aa:	2e0f      	cmp	r6, #15
  4066ac:	f842 5c10 	str.w	r5, [r2, #-16]
  4066b0:	f842 5c0c 	str.w	r5, [r2, #-12]
  4066b4:	f842 5c08 	str.w	r5, [r2, #-8]
  4066b8:	f842 5c04 	str.w	r5, [r2, #-4]
  4066bc:	f102 0210 	add.w	r2, r2, #16
  4066c0:	d8f2      	bhi.n	4066a8 <memset+0x38>
  4066c2:	f1a4 0210 	sub.w	r2, r4, #16
  4066c6:	f022 020f 	bic.w	r2, r2, #15
  4066ca:	f004 040f 	and.w	r4, r4, #15
  4066ce:	3210      	adds	r2, #16
  4066d0:	2c03      	cmp	r4, #3
  4066d2:	4413      	add	r3, r2
  4066d4:	d90d      	bls.n	4066f2 <memset+0x82>
  4066d6:	461e      	mov	r6, r3
  4066d8:	4622      	mov	r2, r4
  4066da:	3a04      	subs	r2, #4
  4066dc:	2a03      	cmp	r2, #3
  4066de:	f846 5b04 	str.w	r5, [r6], #4
  4066e2:	d8fa      	bhi.n	4066da <memset+0x6a>
  4066e4:	1f22      	subs	r2, r4, #4
  4066e6:	f022 0203 	bic.w	r2, r2, #3
  4066ea:	3204      	adds	r2, #4
  4066ec:	4413      	add	r3, r2
  4066ee:	f004 0403 	and.w	r4, r4, #3
  4066f2:	b12c      	cbz	r4, 406700 <memset+0x90>
  4066f4:	b2c9      	uxtb	r1, r1
  4066f6:	441c      	add	r4, r3
  4066f8:	f803 1b01 	strb.w	r1, [r3], #1
  4066fc:	429c      	cmp	r4, r3
  4066fe:	d1fb      	bne.n	4066f8 <memset+0x88>
  406700:	bc70      	pop	{r4, r5, r6}
  406702:	4770      	bx	lr
  406704:	4614      	mov	r4, r2
  406706:	4603      	mov	r3, r0
  406708:	e7c2      	b.n	406690 <memset+0x20>
  40670a:	bf00      	nop

0040670c <setbuf>:
  40670c:	2900      	cmp	r1, #0
  40670e:	bf0c      	ite	eq
  406710:	2202      	moveq	r2, #2
  406712:	2200      	movne	r2, #0
  406714:	f44f 6380 	mov.w	r3, #1024	; 0x400
  406718:	f000 b800 	b.w	40671c <setvbuf>

0040671c <setvbuf>:
  40671c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  406720:	4c61      	ldr	r4, [pc, #388]	; (4068a8 <setvbuf+0x18c>)
  406722:	6825      	ldr	r5, [r4, #0]
  406724:	b083      	sub	sp, #12
  406726:	4604      	mov	r4, r0
  406728:	460f      	mov	r7, r1
  40672a:	4690      	mov	r8, r2
  40672c:	461e      	mov	r6, r3
  40672e:	b115      	cbz	r5, 406736 <setvbuf+0x1a>
  406730:	6bab      	ldr	r3, [r5, #56]	; 0x38
  406732:	2b00      	cmp	r3, #0
  406734:	d064      	beq.n	406800 <setvbuf+0xe4>
  406736:	f1b8 0f02 	cmp.w	r8, #2
  40673a:	d006      	beq.n	40674a <setvbuf+0x2e>
  40673c:	f1b8 0f01 	cmp.w	r8, #1
  406740:	f200 809f 	bhi.w	406882 <setvbuf+0x166>
  406744:	2e00      	cmp	r6, #0
  406746:	f2c0 809c 	blt.w	406882 <setvbuf+0x166>
  40674a:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40674c:	07d8      	lsls	r0, r3, #31
  40674e:	d534      	bpl.n	4067ba <setvbuf+0x9e>
  406750:	4621      	mov	r1, r4
  406752:	4628      	mov	r0, r5
  406754:	f003 fb6e 	bl	409e34 <_fflush_r>
  406758:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40675a:	b141      	cbz	r1, 40676e <setvbuf+0x52>
  40675c:	f104 0340 	add.w	r3, r4, #64	; 0x40
  406760:	4299      	cmp	r1, r3
  406762:	d002      	beq.n	40676a <setvbuf+0x4e>
  406764:	4628      	mov	r0, r5
  406766:	f003 fce3 	bl	40a130 <_free_r>
  40676a:	2300      	movs	r3, #0
  40676c:	6323      	str	r3, [r4, #48]	; 0x30
  40676e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406772:	2200      	movs	r2, #0
  406774:	61a2      	str	r2, [r4, #24]
  406776:	6062      	str	r2, [r4, #4]
  406778:	061a      	lsls	r2, r3, #24
  40677a:	d43a      	bmi.n	4067f2 <setvbuf+0xd6>
  40677c:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  406780:	f023 0303 	bic.w	r3, r3, #3
  406784:	f1b8 0f02 	cmp.w	r8, #2
  406788:	81a3      	strh	r3, [r4, #12]
  40678a:	d01d      	beq.n	4067c8 <setvbuf+0xac>
  40678c:	ab01      	add	r3, sp, #4
  40678e:	466a      	mov	r2, sp
  406790:	4621      	mov	r1, r4
  406792:	4628      	mov	r0, r5
  406794:	f003 ff78 	bl	40a688 <__swhatbuf_r>
  406798:	89a3      	ldrh	r3, [r4, #12]
  40679a:	4318      	orrs	r0, r3
  40679c:	81a0      	strh	r0, [r4, #12]
  40679e:	2e00      	cmp	r6, #0
  4067a0:	d132      	bne.n	406808 <setvbuf+0xec>
  4067a2:	9e00      	ldr	r6, [sp, #0]
  4067a4:	4630      	mov	r0, r6
  4067a6:	f003 ffe7 	bl	40a778 <malloc>
  4067aa:	4607      	mov	r7, r0
  4067ac:	2800      	cmp	r0, #0
  4067ae:	d06b      	beq.n	406888 <setvbuf+0x16c>
  4067b0:	89a3      	ldrh	r3, [r4, #12]
  4067b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4067b6:	81a3      	strh	r3, [r4, #12]
  4067b8:	e028      	b.n	40680c <setvbuf+0xf0>
  4067ba:	89a3      	ldrh	r3, [r4, #12]
  4067bc:	0599      	lsls	r1, r3, #22
  4067be:	d4c7      	bmi.n	406750 <setvbuf+0x34>
  4067c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4067c2:	f003 ff5d 	bl	40a680 <__retarget_lock_acquire_recursive>
  4067c6:	e7c3      	b.n	406750 <setvbuf+0x34>
  4067c8:	2500      	movs	r5, #0
  4067ca:	6e61      	ldr	r1, [r4, #100]	; 0x64
  4067cc:	2600      	movs	r6, #0
  4067ce:	f104 0243 	add.w	r2, r4, #67	; 0x43
  4067d2:	f043 0302 	orr.w	r3, r3, #2
  4067d6:	2001      	movs	r0, #1
  4067d8:	60a6      	str	r6, [r4, #8]
  4067da:	07ce      	lsls	r6, r1, #31
  4067dc:	81a3      	strh	r3, [r4, #12]
  4067de:	6022      	str	r2, [r4, #0]
  4067e0:	6122      	str	r2, [r4, #16]
  4067e2:	6160      	str	r0, [r4, #20]
  4067e4:	d401      	bmi.n	4067ea <setvbuf+0xce>
  4067e6:	0598      	lsls	r0, r3, #22
  4067e8:	d53e      	bpl.n	406868 <setvbuf+0x14c>
  4067ea:	4628      	mov	r0, r5
  4067ec:	b003      	add	sp, #12
  4067ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4067f2:	6921      	ldr	r1, [r4, #16]
  4067f4:	4628      	mov	r0, r5
  4067f6:	f003 fc9b 	bl	40a130 <_free_r>
  4067fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4067fe:	e7bd      	b.n	40677c <setvbuf+0x60>
  406800:	4628      	mov	r0, r5
  406802:	f003 fb6f 	bl	409ee4 <__sinit>
  406806:	e796      	b.n	406736 <setvbuf+0x1a>
  406808:	2f00      	cmp	r7, #0
  40680a:	d0cb      	beq.n	4067a4 <setvbuf+0x88>
  40680c:	6bab      	ldr	r3, [r5, #56]	; 0x38
  40680e:	2b00      	cmp	r3, #0
  406810:	d033      	beq.n	40687a <setvbuf+0x15e>
  406812:	9b00      	ldr	r3, [sp, #0]
  406814:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  406818:	6027      	str	r7, [r4, #0]
  40681a:	429e      	cmp	r6, r3
  40681c:	bf1c      	itt	ne
  40681e:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  406822:	81a2      	strhne	r2, [r4, #12]
  406824:	f1b8 0f01 	cmp.w	r8, #1
  406828:	bf04      	itt	eq
  40682a:	f042 0201 	orreq.w	r2, r2, #1
  40682e:	81a2      	strheq	r2, [r4, #12]
  406830:	b292      	uxth	r2, r2
  406832:	f012 0308 	ands.w	r3, r2, #8
  406836:	6127      	str	r7, [r4, #16]
  406838:	6166      	str	r6, [r4, #20]
  40683a:	d00e      	beq.n	40685a <setvbuf+0x13e>
  40683c:	07d1      	lsls	r1, r2, #31
  40683e:	d51a      	bpl.n	406876 <setvbuf+0x15a>
  406840:	6e65      	ldr	r5, [r4, #100]	; 0x64
  406842:	4276      	negs	r6, r6
  406844:	2300      	movs	r3, #0
  406846:	f015 0501 	ands.w	r5, r5, #1
  40684a:	61a6      	str	r6, [r4, #24]
  40684c:	60a3      	str	r3, [r4, #8]
  40684e:	d009      	beq.n	406864 <setvbuf+0x148>
  406850:	2500      	movs	r5, #0
  406852:	4628      	mov	r0, r5
  406854:	b003      	add	sp, #12
  406856:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40685a:	60a3      	str	r3, [r4, #8]
  40685c:	6e65      	ldr	r5, [r4, #100]	; 0x64
  40685e:	f015 0501 	ands.w	r5, r5, #1
  406862:	d1f5      	bne.n	406850 <setvbuf+0x134>
  406864:	0593      	lsls	r3, r2, #22
  406866:	d4c0      	bmi.n	4067ea <setvbuf+0xce>
  406868:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40686a:	f003 ff0b 	bl	40a684 <__retarget_lock_release_recursive>
  40686e:	4628      	mov	r0, r5
  406870:	b003      	add	sp, #12
  406872:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  406876:	60a6      	str	r6, [r4, #8]
  406878:	e7f0      	b.n	40685c <setvbuf+0x140>
  40687a:	4628      	mov	r0, r5
  40687c:	f003 fb32 	bl	409ee4 <__sinit>
  406880:	e7c7      	b.n	406812 <setvbuf+0xf6>
  406882:	f04f 35ff 	mov.w	r5, #4294967295
  406886:	e7b0      	b.n	4067ea <setvbuf+0xce>
  406888:	f8dd 9000 	ldr.w	r9, [sp]
  40688c:	45b1      	cmp	r9, r6
  40688e:	d004      	beq.n	40689a <setvbuf+0x17e>
  406890:	4648      	mov	r0, r9
  406892:	f003 ff71 	bl	40a778 <malloc>
  406896:	4607      	mov	r7, r0
  406898:	b920      	cbnz	r0, 4068a4 <setvbuf+0x188>
  40689a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40689e:	f04f 35ff 	mov.w	r5, #4294967295
  4068a2:	e792      	b.n	4067ca <setvbuf+0xae>
  4068a4:	464e      	mov	r6, r9
  4068a6:	e783      	b.n	4067b0 <setvbuf+0x94>
  4068a8:	20400024 	.word	0x20400024

004068ac <sprintf>:
  4068ac:	b40e      	push	{r1, r2, r3}
  4068ae:	b5f0      	push	{r4, r5, r6, r7, lr}
  4068b0:	b09c      	sub	sp, #112	; 0x70
  4068b2:	ab21      	add	r3, sp, #132	; 0x84
  4068b4:	490f      	ldr	r1, [pc, #60]	; (4068f4 <sprintf+0x48>)
  4068b6:	f853 2b04 	ldr.w	r2, [r3], #4
  4068ba:	9301      	str	r3, [sp, #4]
  4068bc:	4605      	mov	r5, r0
  4068be:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
  4068c2:	6808      	ldr	r0, [r1, #0]
  4068c4:	9502      	str	r5, [sp, #8]
  4068c6:	f44f 7702 	mov.w	r7, #520	; 0x208
  4068ca:	f64f 76ff 	movw	r6, #65535	; 0xffff
  4068ce:	a902      	add	r1, sp, #8
  4068d0:	9506      	str	r5, [sp, #24]
  4068d2:	f8ad 7014 	strh.w	r7, [sp, #20]
  4068d6:	9404      	str	r4, [sp, #16]
  4068d8:	9407      	str	r4, [sp, #28]
  4068da:	f8ad 6016 	strh.w	r6, [sp, #22]
  4068de:	f000 f8dd 	bl	406a9c <_svfprintf_r>
  4068e2:	9b02      	ldr	r3, [sp, #8]
  4068e4:	2200      	movs	r2, #0
  4068e6:	701a      	strb	r2, [r3, #0]
  4068e8:	b01c      	add	sp, #112	; 0x70
  4068ea:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  4068ee:	b003      	add	sp, #12
  4068f0:	4770      	bx	lr
  4068f2:	bf00      	nop
  4068f4:	20400024 	.word	0x20400024

004068f8 <strcpy>:
  4068f8:	ea80 0201 	eor.w	r2, r0, r1
  4068fc:	4684      	mov	ip, r0
  4068fe:	f012 0f03 	tst.w	r2, #3
  406902:	d14f      	bne.n	4069a4 <strcpy+0xac>
  406904:	f011 0f03 	tst.w	r1, #3
  406908:	d132      	bne.n	406970 <strcpy+0x78>
  40690a:	f84d 4d04 	str.w	r4, [sp, #-4]!
  40690e:	f011 0f04 	tst.w	r1, #4
  406912:	f851 3b04 	ldr.w	r3, [r1], #4
  406916:	d00b      	beq.n	406930 <strcpy+0x38>
  406918:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
  40691c:	439a      	bics	r2, r3
  40691e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  406922:	bf04      	itt	eq
  406924:	f84c 3b04 	streq.w	r3, [ip], #4
  406928:	f851 3b04 	ldreq.w	r3, [r1], #4
  40692c:	d116      	bne.n	40695c <strcpy+0x64>
  40692e:	bf00      	nop
  406930:	f851 4b04 	ldr.w	r4, [r1], #4
  406934:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
  406938:	439a      	bics	r2, r3
  40693a:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  40693e:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
  406942:	d10b      	bne.n	40695c <strcpy+0x64>
  406944:	f84c 3b04 	str.w	r3, [ip], #4
  406948:	43a2      	bics	r2, r4
  40694a:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  40694e:	bf04      	itt	eq
  406950:	f851 3b04 	ldreq.w	r3, [r1], #4
  406954:	f84c 4b04 	streq.w	r4, [ip], #4
  406958:	d0ea      	beq.n	406930 <strcpy+0x38>
  40695a:	4623      	mov	r3, r4
  40695c:	f80c 3b01 	strb.w	r3, [ip], #1
  406960:	f013 0fff 	tst.w	r3, #255	; 0xff
  406964:	ea4f 2333 	mov.w	r3, r3, ror #8
  406968:	d1f8      	bne.n	40695c <strcpy+0x64>
  40696a:	f85d 4b04 	ldr.w	r4, [sp], #4
  40696e:	4770      	bx	lr
  406970:	f011 0f01 	tst.w	r1, #1
  406974:	d006      	beq.n	406984 <strcpy+0x8c>
  406976:	f811 2b01 	ldrb.w	r2, [r1], #1
  40697a:	f80c 2b01 	strb.w	r2, [ip], #1
  40697e:	2a00      	cmp	r2, #0
  406980:	bf08      	it	eq
  406982:	4770      	bxeq	lr
  406984:	f011 0f02 	tst.w	r1, #2
  406988:	d0bf      	beq.n	40690a <strcpy+0x12>
  40698a:	f831 2b02 	ldrh.w	r2, [r1], #2
  40698e:	f012 0fff 	tst.w	r2, #255	; 0xff
  406992:	bf16      	itet	ne
  406994:	f82c 2b02 	strhne.w	r2, [ip], #2
  406998:	f88c 2000 	strbeq.w	r2, [ip]
  40699c:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
  4069a0:	d1b3      	bne.n	40690a <strcpy+0x12>
  4069a2:	4770      	bx	lr
  4069a4:	f811 2b01 	ldrb.w	r2, [r1], #1
  4069a8:	f80c 2b01 	strb.w	r2, [ip], #1
  4069ac:	2a00      	cmp	r2, #0
  4069ae:	d1f9      	bne.n	4069a4 <strcpy+0xac>
  4069b0:	4770      	bx	lr
  4069b2:	bf00      	nop
	...

004069c0 <strlen>:
  4069c0:	f890 f000 	pld	[r0]
  4069c4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  4069c8:	f020 0107 	bic.w	r1, r0, #7
  4069cc:	f06f 0c00 	mvn.w	ip, #0
  4069d0:	f010 0407 	ands.w	r4, r0, #7
  4069d4:	f891 f020 	pld	[r1, #32]
  4069d8:	f040 8049 	bne.w	406a6e <strlen+0xae>
  4069dc:	f04f 0400 	mov.w	r4, #0
  4069e0:	f06f 0007 	mvn.w	r0, #7
  4069e4:	e9d1 2300 	ldrd	r2, r3, [r1]
  4069e8:	f891 f040 	pld	[r1, #64]	; 0x40
  4069ec:	f100 0008 	add.w	r0, r0, #8
  4069f0:	fa82 f24c 	uadd8	r2, r2, ip
  4069f4:	faa4 f28c 	sel	r2, r4, ip
  4069f8:	fa83 f34c 	uadd8	r3, r3, ip
  4069fc:	faa2 f38c 	sel	r3, r2, ip
  406a00:	bb4b      	cbnz	r3, 406a56 <strlen+0x96>
  406a02:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  406a06:	fa82 f24c 	uadd8	r2, r2, ip
  406a0a:	f100 0008 	add.w	r0, r0, #8
  406a0e:	faa4 f28c 	sel	r2, r4, ip
  406a12:	fa83 f34c 	uadd8	r3, r3, ip
  406a16:	faa2 f38c 	sel	r3, r2, ip
  406a1a:	b9e3      	cbnz	r3, 406a56 <strlen+0x96>
  406a1c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  406a20:	fa82 f24c 	uadd8	r2, r2, ip
  406a24:	f100 0008 	add.w	r0, r0, #8
  406a28:	faa4 f28c 	sel	r2, r4, ip
  406a2c:	fa83 f34c 	uadd8	r3, r3, ip
  406a30:	faa2 f38c 	sel	r3, r2, ip
  406a34:	b97b      	cbnz	r3, 406a56 <strlen+0x96>
  406a36:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  406a3a:	f101 0120 	add.w	r1, r1, #32
  406a3e:	fa82 f24c 	uadd8	r2, r2, ip
  406a42:	f100 0008 	add.w	r0, r0, #8
  406a46:	faa4 f28c 	sel	r2, r4, ip
  406a4a:	fa83 f34c 	uadd8	r3, r3, ip
  406a4e:	faa2 f38c 	sel	r3, r2, ip
  406a52:	2b00      	cmp	r3, #0
  406a54:	d0c6      	beq.n	4069e4 <strlen+0x24>
  406a56:	2a00      	cmp	r2, #0
  406a58:	bf04      	itt	eq
  406a5a:	3004      	addeq	r0, #4
  406a5c:	461a      	moveq	r2, r3
  406a5e:	ba12      	rev	r2, r2
  406a60:	fab2 f282 	clz	r2, r2
  406a64:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  406a68:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  406a6c:	4770      	bx	lr
  406a6e:	e9d1 2300 	ldrd	r2, r3, [r1]
  406a72:	f004 0503 	and.w	r5, r4, #3
  406a76:	f1c4 0000 	rsb	r0, r4, #0
  406a7a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  406a7e:	f014 0f04 	tst.w	r4, #4
  406a82:	f891 f040 	pld	[r1, #64]	; 0x40
  406a86:	fa0c f505 	lsl.w	r5, ip, r5
  406a8a:	ea62 0205 	orn	r2, r2, r5
  406a8e:	bf1c      	itt	ne
  406a90:	ea63 0305 	ornne	r3, r3, r5
  406a94:	4662      	movne	r2, ip
  406a96:	f04f 0400 	mov.w	r4, #0
  406a9a:	e7a9      	b.n	4069f0 <strlen+0x30>

00406a9c <_svfprintf_r>:
  406a9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406aa0:	b0c3      	sub	sp, #268	; 0x10c
  406aa2:	460c      	mov	r4, r1
  406aa4:	910b      	str	r1, [sp, #44]	; 0x2c
  406aa6:	4692      	mov	sl, r2
  406aa8:	930f      	str	r3, [sp, #60]	; 0x3c
  406aaa:	900c      	str	r0, [sp, #48]	; 0x30
  406aac:	f003 fdd6 	bl	40a65c <_localeconv_r>
  406ab0:	6803      	ldr	r3, [r0, #0]
  406ab2:	931a      	str	r3, [sp, #104]	; 0x68
  406ab4:	4618      	mov	r0, r3
  406ab6:	f7ff ff83 	bl	4069c0 <strlen>
  406aba:	89a3      	ldrh	r3, [r4, #12]
  406abc:	9019      	str	r0, [sp, #100]	; 0x64
  406abe:	0619      	lsls	r1, r3, #24
  406ac0:	d503      	bpl.n	406aca <_svfprintf_r+0x2e>
  406ac2:	6923      	ldr	r3, [r4, #16]
  406ac4:	2b00      	cmp	r3, #0
  406ac6:	f001 8003 	beq.w	407ad0 <_svfprintf_r+0x1034>
  406aca:	2300      	movs	r3, #0
  406acc:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
  406ad0:	9313      	str	r3, [sp, #76]	; 0x4c
  406ad2:	9315      	str	r3, [sp, #84]	; 0x54
  406ad4:	9314      	str	r3, [sp, #80]	; 0x50
  406ad6:	9327      	str	r3, [sp, #156]	; 0x9c
  406ad8:	9326      	str	r3, [sp, #152]	; 0x98
  406ada:	9318      	str	r3, [sp, #96]	; 0x60
  406adc:	931b      	str	r3, [sp, #108]	; 0x6c
  406ade:	9309      	str	r3, [sp, #36]	; 0x24
  406ae0:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
  406ae4:	46c8      	mov	r8, r9
  406ae6:	9316      	str	r3, [sp, #88]	; 0x58
  406ae8:	9317      	str	r3, [sp, #92]	; 0x5c
  406aea:	f89a 3000 	ldrb.w	r3, [sl]
  406aee:	4654      	mov	r4, sl
  406af0:	b1e3      	cbz	r3, 406b2c <_svfprintf_r+0x90>
  406af2:	2b25      	cmp	r3, #37	; 0x25
  406af4:	d102      	bne.n	406afc <_svfprintf_r+0x60>
  406af6:	e019      	b.n	406b2c <_svfprintf_r+0x90>
  406af8:	2b25      	cmp	r3, #37	; 0x25
  406afa:	d003      	beq.n	406b04 <_svfprintf_r+0x68>
  406afc:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  406b00:	2b00      	cmp	r3, #0
  406b02:	d1f9      	bne.n	406af8 <_svfprintf_r+0x5c>
  406b04:	eba4 050a 	sub.w	r5, r4, sl
  406b08:	b185      	cbz	r5, 406b2c <_svfprintf_r+0x90>
  406b0a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  406b0c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  406b0e:	f8c8 a000 	str.w	sl, [r8]
  406b12:	3301      	adds	r3, #1
  406b14:	442a      	add	r2, r5
  406b16:	2b07      	cmp	r3, #7
  406b18:	f8c8 5004 	str.w	r5, [r8, #4]
  406b1c:	9227      	str	r2, [sp, #156]	; 0x9c
  406b1e:	9326      	str	r3, [sp, #152]	; 0x98
  406b20:	dc7f      	bgt.n	406c22 <_svfprintf_r+0x186>
  406b22:	f108 0808 	add.w	r8, r8, #8
  406b26:	9b09      	ldr	r3, [sp, #36]	; 0x24
  406b28:	442b      	add	r3, r5
  406b2a:	9309      	str	r3, [sp, #36]	; 0x24
  406b2c:	7823      	ldrb	r3, [r4, #0]
  406b2e:	2b00      	cmp	r3, #0
  406b30:	d07f      	beq.n	406c32 <_svfprintf_r+0x196>
  406b32:	2300      	movs	r3, #0
  406b34:	461a      	mov	r2, r3
  406b36:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  406b3a:	4619      	mov	r1, r3
  406b3c:	930d      	str	r3, [sp, #52]	; 0x34
  406b3e:	469b      	mov	fp, r3
  406b40:	f04f 30ff 	mov.w	r0, #4294967295
  406b44:	7863      	ldrb	r3, [r4, #1]
  406b46:	900a      	str	r0, [sp, #40]	; 0x28
  406b48:	f104 0a01 	add.w	sl, r4, #1
  406b4c:	f10a 0a01 	add.w	sl, sl, #1
  406b50:	f1a3 0020 	sub.w	r0, r3, #32
  406b54:	2858      	cmp	r0, #88	; 0x58
  406b56:	f200 83c1 	bhi.w	4072dc <_svfprintf_r+0x840>
  406b5a:	e8df f010 	tbh	[pc, r0, lsl #1]
  406b5e:	0238      	.short	0x0238
  406b60:	03bf03bf 	.word	0x03bf03bf
  406b64:	03bf0240 	.word	0x03bf0240
  406b68:	03bf03bf 	.word	0x03bf03bf
  406b6c:	03bf03bf 	.word	0x03bf03bf
  406b70:	024503bf 	.word	0x024503bf
  406b74:	03bf0203 	.word	0x03bf0203
  406b78:	026b005d 	.word	0x026b005d
  406b7c:	028603bf 	.word	0x028603bf
  406b80:	039d039d 	.word	0x039d039d
  406b84:	039d039d 	.word	0x039d039d
  406b88:	039d039d 	.word	0x039d039d
  406b8c:	039d039d 	.word	0x039d039d
  406b90:	03bf039d 	.word	0x03bf039d
  406b94:	03bf03bf 	.word	0x03bf03bf
  406b98:	03bf03bf 	.word	0x03bf03bf
  406b9c:	03bf03bf 	.word	0x03bf03bf
  406ba0:	03bf03bf 	.word	0x03bf03bf
  406ba4:	033703bf 	.word	0x033703bf
  406ba8:	03bf0357 	.word	0x03bf0357
  406bac:	03bf0357 	.word	0x03bf0357
  406bb0:	03bf03bf 	.word	0x03bf03bf
  406bb4:	039803bf 	.word	0x039803bf
  406bb8:	03bf03bf 	.word	0x03bf03bf
  406bbc:	03bf03ad 	.word	0x03bf03ad
  406bc0:	03bf03bf 	.word	0x03bf03bf
  406bc4:	03bf03bf 	.word	0x03bf03bf
  406bc8:	03bf0259 	.word	0x03bf0259
  406bcc:	031e03bf 	.word	0x031e03bf
  406bd0:	03bf03bf 	.word	0x03bf03bf
  406bd4:	03bf03bf 	.word	0x03bf03bf
  406bd8:	03bf03bf 	.word	0x03bf03bf
  406bdc:	03bf03bf 	.word	0x03bf03bf
  406be0:	03bf03bf 	.word	0x03bf03bf
  406be4:	02db02c6 	.word	0x02db02c6
  406be8:	03570357 	.word	0x03570357
  406bec:	028b0357 	.word	0x028b0357
  406bf0:	03bf02db 	.word	0x03bf02db
  406bf4:	029003bf 	.word	0x029003bf
  406bf8:	029d03bf 	.word	0x029d03bf
  406bfc:	02b401cc 	.word	0x02b401cc
  406c00:	03bf0208 	.word	0x03bf0208
  406c04:	03bf01e1 	.word	0x03bf01e1
  406c08:	03bf007e 	.word	0x03bf007e
  406c0c:	020d03bf 	.word	0x020d03bf
  406c10:	980d      	ldr	r0, [sp, #52]	; 0x34
  406c12:	930f      	str	r3, [sp, #60]	; 0x3c
  406c14:	4240      	negs	r0, r0
  406c16:	900d      	str	r0, [sp, #52]	; 0x34
  406c18:	f04b 0b04 	orr.w	fp, fp, #4
  406c1c:	f89a 3000 	ldrb.w	r3, [sl]
  406c20:	e794      	b.n	406b4c <_svfprintf_r+0xb0>
  406c22:	aa25      	add	r2, sp, #148	; 0x94
  406c24:	990b      	ldr	r1, [sp, #44]	; 0x2c
  406c26:	980c      	ldr	r0, [sp, #48]	; 0x30
  406c28:	f004 fe30 	bl	40b88c <__ssprint_r>
  406c2c:	b940      	cbnz	r0, 406c40 <_svfprintf_r+0x1a4>
  406c2e:	46c8      	mov	r8, r9
  406c30:	e779      	b.n	406b26 <_svfprintf_r+0x8a>
  406c32:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  406c34:	b123      	cbz	r3, 406c40 <_svfprintf_r+0x1a4>
  406c36:	980c      	ldr	r0, [sp, #48]	; 0x30
  406c38:	990b      	ldr	r1, [sp, #44]	; 0x2c
  406c3a:	aa25      	add	r2, sp, #148	; 0x94
  406c3c:	f004 fe26 	bl	40b88c <__ssprint_r>
  406c40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  406c42:	899b      	ldrh	r3, [r3, #12]
  406c44:	f013 0f40 	tst.w	r3, #64	; 0x40
  406c48:	9b09      	ldr	r3, [sp, #36]	; 0x24
  406c4a:	bf18      	it	ne
  406c4c:	f04f 33ff 	movne.w	r3, #4294967295
  406c50:	9309      	str	r3, [sp, #36]	; 0x24
  406c52:	9809      	ldr	r0, [sp, #36]	; 0x24
  406c54:	b043      	add	sp, #268	; 0x10c
  406c56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406c5a:	f01b 0f20 	tst.w	fp, #32
  406c5e:	9311      	str	r3, [sp, #68]	; 0x44
  406c60:	f040 81dd 	bne.w	40701e <_svfprintf_r+0x582>
  406c64:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  406c66:	f01b 0f10 	tst.w	fp, #16
  406c6a:	4613      	mov	r3, r2
  406c6c:	f040 856e 	bne.w	40774c <_svfprintf_r+0xcb0>
  406c70:	f01b 0f40 	tst.w	fp, #64	; 0x40
  406c74:	f000 856a 	beq.w	40774c <_svfprintf_r+0xcb0>
  406c78:	8814      	ldrh	r4, [r2, #0]
  406c7a:	3204      	adds	r2, #4
  406c7c:	2500      	movs	r5, #0
  406c7e:	2301      	movs	r3, #1
  406c80:	920f      	str	r2, [sp, #60]	; 0x3c
  406c82:	2700      	movs	r7, #0
  406c84:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  406c88:	990a      	ldr	r1, [sp, #40]	; 0x28
  406c8a:	1c4a      	adds	r2, r1, #1
  406c8c:	f000 8265 	beq.w	40715a <_svfprintf_r+0x6be>
  406c90:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
  406c94:	9207      	str	r2, [sp, #28]
  406c96:	ea54 0205 	orrs.w	r2, r4, r5
  406c9a:	f040 8264 	bne.w	407166 <_svfprintf_r+0x6ca>
  406c9e:	2900      	cmp	r1, #0
  406ca0:	f040 843c 	bne.w	40751c <_svfprintf_r+0xa80>
  406ca4:	2b00      	cmp	r3, #0
  406ca6:	f040 84d7 	bne.w	407658 <_svfprintf_r+0xbbc>
  406caa:	f01b 0301 	ands.w	r3, fp, #1
  406cae:	930e      	str	r3, [sp, #56]	; 0x38
  406cb0:	f000 8604 	beq.w	4078bc <_svfprintf_r+0xe20>
  406cb4:	ae42      	add	r6, sp, #264	; 0x108
  406cb6:	2330      	movs	r3, #48	; 0x30
  406cb8:	f806 3d41 	strb.w	r3, [r6, #-65]!
  406cbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406cbe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  406cc0:	4293      	cmp	r3, r2
  406cc2:	bfb8      	it	lt
  406cc4:	4613      	movlt	r3, r2
  406cc6:	9308      	str	r3, [sp, #32]
  406cc8:	2300      	movs	r3, #0
  406cca:	9312      	str	r3, [sp, #72]	; 0x48
  406ccc:	b117      	cbz	r7, 406cd4 <_svfprintf_r+0x238>
  406cce:	9b08      	ldr	r3, [sp, #32]
  406cd0:	3301      	adds	r3, #1
  406cd2:	9308      	str	r3, [sp, #32]
  406cd4:	9b07      	ldr	r3, [sp, #28]
  406cd6:	f013 0302 	ands.w	r3, r3, #2
  406cda:	9310      	str	r3, [sp, #64]	; 0x40
  406cdc:	d002      	beq.n	406ce4 <_svfprintf_r+0x248>
  406cde:	9b08      	ldr	r3, [sp, #32]
  406ce0:	3302      	adds	r3, #2
  406ce2:	9308      	str	r3, [sp, #32]
  406ce4:	9b07      	ldr	r3, [sp, #28]
  406ce6:	f013 0584 	ands.w	r5, r3, #132	; 0x84
  406cea:	f040 830e 	bne.w	40730a <_svfprintf_r+0x86e>
  406cee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  406cf0:	9a08      	ldr	r2, [sp, #32]
  406cf2:	eba3 0b02 	sub.w	fp, r3, r2
  406cf6:	f1bb 0f00 	cmp.w	fp, #0
  406cfa:	f340 8306 	ble.w	40730a <_svfprintf_r+0x86e>
  406cfe:	f1bb 0f10 	cmp.w	fp, #16
  406d02:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  406d04:	9a26      	ldr	r2, [sp, #152]	; 0x98
  406d06:	dd29      	ble.n	406d5c <_svfprintf_r+0x2c0>
  406d08:	4643      	mov	r3, r8
  406d0a:	4621      	mov	r1, r4
  406d0c:	46a8      	mov	r8, r5
  406d0e:	2710      	movs	r7, #16
  406d10:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  406d12:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  406d14:	e006      	b.n	406d24 <_svfprintf_r+0x288>
  406d16:	f1ab 0b10 	sub.w	fp, fp, #16
  406d1a:	f1bb 0f10 	cmp.w	fp, #16
  406d1e:	f103 0308 	add.w	r3, r3, #8
  406d22:	dd18      	ble.n	406d56 <_svfprintf_r+0x2ba>
  406d24:	3201      	adds	r2, #1
  406d26:	48b7      	ldr	r0, [pc, #732]	; (407004 <_svfprintf_r+0x568>)
  406d28:	9226      	str	r2, [sp, #152]	; 0x98
  406d2a:	3110      	adds	r1, #16
  406d2c:	2a07      	cmp	r2, #7
  406d2e:	9127      	str	r1, [sp, #156]	; 0x9c
  406d30:	e883 0081 	stmia.w	r3, {r0, r7}
  406d34:	ddef      	ble.n	406d16 <_svfprintf_r+0x27a>
  406d36:	aa25      	add	r2, sp, #148	; 0x94
  406d38:	4629      	mov	r1, r5
  406d3a:	4620      	mov	r0, r4
  406d3c:	f004 fda6 	bl	40b88c <__ssprint_r>
  406d40:	2800      	cmp	r0, #0
  406d42:	f47f af7d 	bne.w	406c40 <_svfprintf_r+0x1a4>
  406d46:	f1ab 0b10 	sub.w	fp, fp, #16
  406d4a:	f1bb 0f10 	cmp.w	fp, #16
  406d4e:	9927      	ldr	r1, [sp, #156]	; 0x9c
  406d50:	9a26      	ldr	r2, [sp, #152]	; 0x98
  406d52:	464b      	mov	r3, r9
  406d54:	dce6      	bgt.n	406d24 <_svfprintf_r+0x288>
  406d56:	4645      	mov	r5, r8
  406d58:	460c      	mov	r4, r1
  406d5a:	4698      	mov	r8, r3
  406d5c:	3201      	adds	r2, #1
  406d5e:	4ba9      	ldr	r3, [pc, #676]	; (407004 <_svfprintf_r+0x568>)
  406d60:	9226      	str	r2, [sp, #152]	; 0x98
  406d62:	445c      	add	r4, fp
  406d64:	2a07      	cmp	r2, #7
  406d66:	9427      	str	r4, [sp, #156]	; 0x9c
  406d68:	e888 0808 	stmia.w	r8, {r3, fp}
  406d6c:	f300 8498 	bgt.w	4076a0 <_svfprintf_r+0xc04>
  406d70:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  406d74:	f108 0808 	add.w	r8, r8, #8
  406d78:	b177      	cbz	r7, 406d98 <_svfprintf_r+0x2fc>
  406d7a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  406d7c:	3301      	adds	r3, #1
  406d7e:	3401      	adds	r4, #1
  406d80:	f10d 0177 	add.w	r1, sp, #119	; 0x77
  406d84:	2201      	movs	r2, #1
  406d86:	2b07      	cmp	r3, #7
  406d88:	9427      	str	r4, [sp, #156]	; 0x9c
  406d8a:	9326      	str	r3, [sp, #152]	; 0x98
  406d8c:	e888 0006 	stmia.w	r8, {r1, r2}
  406d90:	f300 83db 	bgt.w	40754a <_svfprintf_r+0xaae>
  406d94:	f108 0808 	add.w	r8, r8, #8
  406d98:	9b10      	ldr	r3, [sp, #64]	; 0x40
  406d9a:	b16b      	cbz	r3, 406db8 <_svfprintf_r+0x31c>
  406d9c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  406d9e:	3301      	adds	r3, #1
  406da0:	3402      	adds	r4, #2
  406da2:	a91e      	add	r1, sp, #120	; 0x78
  406da4:	2202      	movs	r2, #2
  406da6:	2b07      	cmp	r3, #7
  406da8:	9427      	str	r4, [sp, #156]	; 0x9c
  406daa:	9326      	str	r3, [sp, #152]	; 0x98
  406dac:	e888 0006 	stmia.w	r8, {r1, r2}
  406db0:	f300 83d6 	bgt.w	407560 <_svfprintf_r+0xac4>
  406db4:	f108 0808 	add.w	r8, r8, #8
  406db8:	2d80      	cmp	r5, #128	; 0x80
  406dba:	f000 8315 	beq.w	4073e8 <_svfprintf_r+0x94c>
  406dbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406dc0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  406dc2:	1a9f      	subs	r7, r3, r2
  406dc4:	2f00      	cmp	r7, #0
  406dc6:	dd36      	ble.n	406e36 <_svfprintf_r+0x39a>
  406dc8:	2f10      	cmp	r7, #16
  406dca:	9b26      	ldr	r3, [sp, #152]	; 0x98
  406dcc:	4d8e      	ldr	r5, [pc, #568]	; (407008 <_svfprintf_r+0x56c>)
  406dce:	dd27      	ble.n	406e20 <_svfprintf_r+0x384>
  406dd0:	4642      	mov	r2, r8
  406dd2:	4621      	mov	r1, r4
  406dd4:	46b0      	mov	r8, r6
  406dd6:	f04f 0b10 	mov.w	fp, #16
  406dda:	462e      	mov	r6, r5
  406ddc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  406dde:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  406de0:	e004      	b.n	406dec <_svfprintf_r+0x350>
  406de2:	3f10      	subs	r7, #16
  406de4:	2f10      	cmp	r7, #16
  406de6:	f102 0208 	add.w	r2, r2, #8
  406dea:	dd15      	ble.n	406e18 <_svfprintf_r+0x37c>
  406dec:	3301      	adds	r3, #1
  406dee:	3110      	adds	r1, #16
  406df0:	2b07      	cmp	r3, #7
  406df2:	9127      	str	r1, [sp, #156]	; 0x9c
  406df4:	9326      	str	r3, [sp, #152]	; 0x98
  406df6:	e882 0840 	stmia.w	r2, {r6, fp}
  406dfa:	ddf2      	ble.n	406de2 <_svfprintf_r+0x346>
  406dfc:	aa25      	add	r2, sp, #148	; 0x94
  406dfe:	4629      	mov	r1, r5
  406e00:	4620      	mov	r0, r4
  406e02:	f004 fd43 	bl	40b88c <__ssprint_r>
  406e06:	2800      	cmp	r0, #0
  406e08:	f47f af1a 	bne.w	406c40 <_svfprintf_r+0x1a4>
  406e0c:	3f10      	subs	r7, #16
  406e0e:	2f10      	cmp	r7, #16
  406e10:	9927      	ldr	r1, [sp, #156]	; 0x9c
  406e12:	9b26      	ldr	r3, [sp, #152]	; 0x98
  406e14:	464a      	mov	r2, r9
  406e16:	dce9      	bgt.n	406dec <_svfprintf_r+0x350>
  406e18:	4635      	mov	r5, r6
  406e1a:	460c      	mov	r4, r1
  406e1c:	4646      	mov	r6, r8
  406e1e:	4690      	mov	r8, r2
  406e20:	3301      	adds	r3, #1
  406e22:	443c      	add	r4, r7
  406e24:	2b07      	cmp	r3, #7
  406e26:	9427      	str	r4, [sp, #156]	; 0x9c
  406e28:	9326      	str	r3, [sp, #152]	; 0x98
  406e2a:	e888 00a0 	stmia.w	r8, {r5, r7}
  406e2e:	f300 8381 	bgt.w	407534 <_svfprintf_r+0xa98>
  406e32:	f108 0808 	add.w	r8, r8, #8
  406e36:	9b07      	ldr	r3, [sp, #28]
  406e38:	05df      	lsls	r7, r3, #23
  406e3a:	f100 8268 	bmi.w	40730e <_svfprintf_r+0x872>
  406e3e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  406e40:	990e      	ldr	r1, [sp, #56]	; 0x38
  406e42:	f8c8 6000 	str.w	r6, [r8]
  406e46:	3301      	adds	r3, #1
  406e48:	440c      	add	r4, r1
  406e4a:	2b07      	cmp	r3, #7
  406e4c:	9427      	str	r4, [sp, #156]	; 0x9c
  406e4e:	f8c8 1004 	str.w	r1, [r8, #4]
  406e52:	9326      	str	r3, [sp, #152]	; 0x98
  406e54:	f300 834d 	bgt.w	4074f2 <_svfprintf_r+0xa56>
  406e58:	f108 0808 	add.w	r8, r8, #8
  406e5c:	9b07      	ldr	r3, [sp, #28]
  406e5e:	075b      	lsls	r3, r3, #29
  406e60:	d53a      	bpl.n	406ed8 <_svfprintf_r+0x43c>
  406e62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  406e64:	9a08      	ldr	r2, [sp, #32]
  406e66:	1a9d      	subs	r5, r3, r2
  406e68:	2d00      	cmp	r5, #0
  406e6a:	dd35      	ble.n	406ed8 <_svfprintf_r+0x43c>
  406e6c:	2d10      	cmp	r5, #16
  406e6e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  406e70:	dd20      	ble.n	406eb4 <_svfprintf_r+0x418>
  406e72:	2610      	movs	r6, #16
  406e74:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  406e76:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
  406e7a:	e004      	b.n	406e86 <_svfprintf_r+0x3ea>
  406e7c:	3d10      	subs	r5, #16
  406e7e:	2d10      	cmp	r5, #16
  406e80:	f108 0808 	add.w	r8, r8, #8
  406e84:	dd16      	ble.n	406eb4 <_svfprintf_r+0x418>
  406e86:	3301      	adds	r3, #1
  406e88:	4a5e      	ldr	r2, [pc, #376]	; (407004 <_svfprintf_r+0x568>)
  406e8a:	9326      	str	r3, [sp, #152]	; 0x98
  406e8c:	3410      	adds	r4, #16
  406e8e:	2b07      	cmp	r3, #7
  406e90:	9427      	str	r4, [sp, #156]	; 0x9c
  406e92:	e888 0044 	stmia.w	r8, {r2, r6}
  406e96:	ddf1      	ble.n	406e7c <_svfprintf_r+0x3e0>
  406e98:	aa25      	add	r2, sp, #148	; 0x94
  406e9a:	4659      	mov	r1, fp
  406e9c:	4638      	mov	r0, r7
  406e9e:	f004 fcf5 	bl	40b88c <__ssprint_r>
  406ea2:	2800      	cmp	r0, #0
  406ea4:	f47f aecc 	bne.w	406c40 <_svfprintf_r+0x1a4>
  406ea8:	3d10      	subs	r5, #16
  406eaa:	2d10      	cmp	r5, #16
  406eac:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  406eae:	9b26      	ldr	r3, [sp, #152]	; 0x98
  406eb0:	46c8      	mov	r8, r9
  406eb2:	dce8      	bgt.n	406e86 <_svfprintf_r+0x3ea>
  406eb4:	3301      	adds	r3, #1
  406eb6:	4a53      	ldr	r2, [pc, #332]	; (407004 <_svfprintf_r+0x568>)
  406eb8:	9326      	str	r3, [sp, #152]	; 0x98
  406eba:	442c      	add	r4, r5
  406ebc:	2b07      	cmp	r3, #7
  406ebe:	9427      	str	r4, [sp, #156]	; 0x9c
  406ec0:	e888 0024 	stmia.w	r8, {r2, r5}
  406ec4:	dd08      	ble.n	406ed8 <_svfprintf_r+0x43c>
  406ec6:	aa25      	add	r2, sp, #148	; 0x94
  406ec8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  406eca:	980c      	ldr	r0, [sp, #48]	; 0x30
  406ecc:	f004 fcde 	bl	40b88c <__ssprint_r>
  406ed0:	2800      	cmp	r0, #0
  406ed2:	f47f aeb5 	bne.w	406c40 <_svfprintf_r+0x1a4>
  406ed6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  406ed8:	9b09      	ldr	r3, [sp, #36]	; 0x24
  406eda:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  406edc:	9908      	ldr	r1, [sp, #32]
  406ede:	428a      	cmp	r2, r1
  406ee0:	bfac      	ite	ge
  406ee2:	189b      	addge	r3, r3, r2
  406ee4:	185b      	addlt	r3, r3, r1
  406ee6:	9309      	str	r3, [sp, #36]	; 0x24
  406ee8:	2c00      	cmp	r4, #0
  406eea:	f040 830d 	bne.w	407508 <_svfprintf_r+0xa6c>
  406eee:	2300      	movs	r3, #0
  406ef0:	9326      	str	r3, [sp, #152]	; 0x98
  406ef2:	46c8      	mov	r8, r9
  406ef4:	e5f9      	b.n	406aea <_svfprintf_r+0x4e>
  406ef6:	9311      	str	r3, [sp, #68]	; 0x44
  406ef8:	f01b 0320 	ands.w	r3, fp, #32
  406efc:	f040 81e3 	bne.w	4072c6 <_svfprintf_r+0x82a>
  406f00:	f01b 0210 	ands.w	r2, fp, #16
  406f04:	f040 842e 	bne.w	407764 <_svfprintf_r+0xcc8>
  406f08:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
  406f0c:	f000 842a 	beq.w	407764 <_svfprintf_r+0xcc8>
  406f10:	990f      	ldr	r1, [sp, #60]	; 0x3c
  406f12:	4613      	mov	r3, r2
  406f14:	460a      	mov	r2, r1
  406f16:	3204      	adds	r2, #4
  406f18:	880c      	ldrh	r4, [r1, #0]
  406f1a:	920f      	str	r2, [sp, #60]	; 0x3c
  406f1c:	2500      	movs	r5, #0
  406f1e:	e6b0      	b.n	406c82 <_svfprintf_r+0x1e6>
  406f20:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  406f22:	9311      	str	r3, [sp, #68]	; 0x44
  406f24:	6816      	ldr	r6, [r2, #0]
  406f26:	2400      	movs	r4, #0
  406f28:	f88d 4077 	strb.w	r4, [sp, #119]	; 0x77
  406f2c:	1d15      	adds	r5, r2, #4
  406f2e:	2e00      	cmp	r6, #0
  406f30:	f000 86a7 	beq.w	407c82 <_svfprintf_r+0x11e6>
  406f34:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  406f36:	1c53      	adds	r3, r2, #1
  406f38:	f000 8609 	beq.w	407b4e <_svfprintf_r+0x10b2>
  406f3c:	4621      	mov	r1, r4
  406f3e:	4630      	mov	r0, r6
  406f40:	f003 feee 	bl	40ad20 <memchr>
  406f44:	2800      	cmp	r0, #0
  406f46:	f000 86e1 	beq.w	407d0c <_svfprintf_r+0x1270>
  406f4a:	1b83      	subs	r3, r0, r6
  406f4c:	930e      	str	r3, [sp, #56]	; 0x38
  406f4e:	940a      	str	r4, [sp, #40]	; 0x28
  406f50:	950f      	str	r5, [sp, #60]	; 0x3c
  406f52:	f8cd b01c 	str.w	fp, [sp, #28]
  406f56:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  406f5a:	9308      	str	r3, [sp, #32]
  406f5c:	9412      	str	r4, [sp, #72]	; 0x48
  406f5e:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  406f62:	e6b3      	b.n	406ccc <_svfprintf_r+0x230>
  406f64:	f89a 3000 	ldrb.w	r3, [sl]
  406f68:	2201      	movs	r2, #1
  406f6a:	212b      	movs	r1, #43	; 0x2b
  406f6c:	e5ee      	b.n	406b4c <_svfprintf_r+0xb0>
  406f6e:	f04b 0b20 	orr.w	fp, fp, #32
  406f72:	f89a 3000 	ldrb.w	r3, [sl]
  406f76:	e5e9      	b.n	406b4c <_svfprintf_r+0xb0>
  406f78:	9311      	str	r3, [sp, #68]	; 0x44
  406f7a:	2a00      	cmp	r2, #0
  406f7c:	f040 8795 	bne.w	407eaa <_svfprintf_r+0x140e>
  406f80:	4b22      	ldr	r3, [pc, #136]	; (40700c <_svfprintf_r+0x570>)
  406f82:	9318      	str	r3, [sp, #96]	; 0x60
  406f84:	f01b 0f20 	tst.w	fp, #32
  406f88:	f040 8111 	bne.w	4071ae <_svfprintf_r+0x712>
  406f8c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  406f8e:	f01b 0f10 	tst.w	fp, #16
  406f92:	4613      	mov	r3, r2
  406f94:	f040 83e1 	bne.w	40775a <_svfprintf_r+0xcbe>
  406f98:	f01b 0f40 	tst.w	fp, #64	; 0x40
  406f9c:	f000 83dd 	beq.w	40775a <_svfprintf_r+0xcbe>
  406fa0:	3304      	adds	r3, #4
  406fa2:	8814      	ldrh	r4, [r2, #0]
  406fa4:	930f      	str	r3, [sp, #60]	; 0x3c
  406fa6:	2500      	movs	r5, #0
  406fa8:	f01b 0f01 	tst.w	fp, #1
  406fac:	f000 810c 	beq.w	4071c8 <_svfprintf_r+0x72c>
  406fb0:	ea54 0305 	orrs.w	r3, r4, r5
  406fb4:	f000 8108 	beq.w	4071c8 <_svfprintf_r+0x72c>
  406fb8:	2330      	movs	r3, #48	; 0x30
  406fba:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
  406fbe:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
  406fc2:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
  406fc6:	f04b 0b02 	orr.w	fp, fp, #2
  406fca:	2302      	movs	r3, #2
  406fcc:	e659      	b.n	406c82 <_svfprintf_r+0x1e6>
  406fce:	f89a 3000 	ldrb.w	r3, [sl]
  406fd2:	2900      	cmp	r1, #0
  406fd4:	f47f adba 	bne.w	406b4c <_svfprintf_r+0xb0>
  406fd8:	2201      	movs	r2, #1
  406fda:	2120      	movs	r1, #32
  406fdc:	e5b6      	b.n	406b4c <_svfprintf_r+0xb0>
  406fde:	f04b 0b01 	orr.w	fp, fp, #1
  406fe2:	f89a 3000 	ldrb.w	r3, [sl]
  406fe6:	e5b1      	b.n	406b4c <_svfprintf_r+0xb0>
  406fe8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  406fea:	6823      	ldr	r3, [r4, #0]
  406fec:	930d      	str	r3, [sp, #52]	; 0x34
  406fee:	4618      	mov	r0, r3
  406ff0:	2800      	cmp	r0, #0
  406ff2:	4623      	mov	r3, r4
  406ff4:	f103 0304 	add.w	r3, r3, #4
  406ff8:	f6ff ae0a 	blt.w	406c10 <_svfprintf_r+0x174>
  406ffc:	930f      	str	r3, [sp, #60]	; 0x3c
  406ffe:	f89a 3000 	ldrb.w	r3, [sl]
  407002:	e5a3      	b.n	406b4c <_svfprintf_r+0xb0>
  407004:	0040d9d0 	.word	0x0040d9d0
  407008:	0040d9e0 	.word	0x0040d9e0
  40700c:	0040d9b0 	.word	0x0040d9b0
  407010:	f04b 0b10 	orr.w	fp, fp, #16
  407014:	f01b 0f20 	tst.w	fp, #32
  407018:	9311      	str	r3, [sp, #68]	; 0x44
  40701a:	f43f ae23 	beq.w	406c64 <_svfprintf_r+0x1c8>
  40701e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  407020:	3507      	adds	r5, #7
  407022:	f025 0307 	bic.w	r3, r5, #7
  407026:	f103 0208 	add.w	r2, r3, #8
  40702a:	e9d3 4500 	ldrd	r4, r5, [r3]
  40702e:	920f      	str	r2, [sp, #60]	; 0x3c
  407030:	2301      	movs	r3, #1
  407032:	e626      	b.n	406c82 <_svfprintf_r+0x1e6>
  407034:	f89a 3000 	ldrb.w	r3, [sl]
  407038:	2b2a      	cmp	r3, #42	; 0x2a
  40703a:	f10a 0401 	add.w	r4, sl, #1
  40703e:	f000 8727 	beq.w	407e90 <_svfprintf_r+0x13f4>
  407042:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  407046:	2809      	cmp	r0, #9
  407048:	46a2      	mov	sl, r4
  40704a:	f200 86ad 	bhi.w	407da8 <_svfprintf_r+0x130c>
  40704e:	2300      	movs	r3, #0
  407050:	461c      	mov	r4, r3
  407052:	f81a 3b01 	ldrb.w	r3, [sl], #1
  407056:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  40705a:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  40705e:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  407062:	2809      	cmp	r0, #9
  407064:	d9f5      	bls.n	407052 <_svfprintf_r+0x5b6>
  407066:	940a      	str	r4, [sp, #40]	; 0x28
  407068:	e572      	b.n	406b50 <_svfprintf_r+0xb4>
  40706a:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
  40706e:	f89a 3000 	ldrb.w	r3, [sl]
  407072:	e56b      	b.n	406b4c <_svfprintf_r+0xb0>
  407074:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
  407078:	f89a 3000 	ldrb.w	r3, [sl]
  40707c:	e566      	b.n	406b4c <_svfprintf_r+0xb0>
  40707e:	f89a 3000 	ldrb.w	r3, [sl]
  407082:	2b6c      	cmp	r3, #108	; 0x6c
  407084:	bf03      	ittte	eq
  407086:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
  40708a:	f04b 0b20 	orreq.w	fp, fp, #32
  40708e:	f10a 0a01 	addeq.w	sl, sl, #1
  407092:	f04b 0b10 	orrne.w	fp, fp, #16
  407096:	e559      	b.n	406b4c <_svfprintf_r+0xb0>
  407098:	2a00      	cmp	r2, #0
  40709a:	f040 8711 	bne.w	407ec0 <_svfprintf_r+0x1424>
  40709e:	f01b 0f20 	tst.w	fp, #32
  4070a2:	f040 84f9 	bne.w	407a98 <_svfprintf_r+0xffc>
  4070a6:	f01b 0f10 	tst.w	fp, #16
  4070aa:	f040 84ac 	bne.w	407a06 <_svfprintf_r+0xf6a>
  4070ae:	f01b 0f40 	tst.w	fp, #64	; 0x40
  4070b2:	f000 84a8 	beq.w	407a06 <_svfprintf_r+0xf6a>
  4070b6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4070b8:	6813      	ldr	r3, [r2, #0]
  4070ba:	3204      	adds	r2, #4
  4070bc:	920f      	str	r2, [sp, #60]	; 0x3c
  4070be:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
  4070c2:	801a      	strh	r2, [r3, #0]
  4070c4:	e511      	b.n	406aea <_svfprintf_r+0x4e>
  4070c6:	990f      	ldr	r1, [sp, #60]	; 0x3c
  4070c8:	4bb3      	ldr	r3, [pc, #716]	; (407398 <_svfprintf_r+0x8fc>)
  4070ca:	680c      	ldr	r4, [r1, #0]
  4070cc:	9318      	str	r3, [sp, #96]	; 0x60
  4070ce:	2230      	movs	r2, #48	; 0x30
  4070d0:	2378      	movs	r3, #120	; 0x78
  4070d2:	3104      	adds	r1, #4
  4070d4:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
  4070d8:	9311      	str	r3, [sp, #68]	; 0x44
  4070da:	f04b 0b02 	orr.w	fp, fp, #2
  4070de:	910f      	str	r1, [sp, #60]	; 0x3c
  4070e0:	2500      	movs	r5, #0
  4070e2:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
  4070e6:	2302      	movs	r3, #2
  4070e8:	e5cb      	b.n	406c82 <_svfprintf_r+0x1e6>
  4070ea:	990f      	ldr	r1, [sp, #60]	; 0x3c
  4070ec:	9311      	str	r3, [sp, #68]	; 0x44
  4070ee:	680a      	ldr	r2, [r1, #0]
  4070f0:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  4070f4:	2300      	movs	r3, #0
  4070f6:	460a      	mov	r2, r1
  4070f8:	461f      	mov	r7, r3
  4070fa:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  4070fe:	3204      	adds	r2, #4
  407100:	2301      	movs	r3, #1
  407102:	9308      	str	r3, [sp, #32]
  407104:	f8cd b01c 	str.w	fp, [sp, #28]
  407108:	970a      	str	r7, [sp, #40]	; 0x28
  40710a:	9712      	str	r7, [sp, #72]	; 0x48
  40710c:	920f      	str	r2, [sp, #60]	; 0x3c
  40710e:	930e      	str	r3, [sp, #56]	; 0x38
  407110:	ae28      	add	r6, sp, #160	; 0xa0
  407112:	e5df      	b.n	406cd4 <_svfprintf_r+0x238>
  407114:	9311      	str	r3, [sp, #68]	; 0x44
  407116:	2a00      	cmp	r2, #0
  407118:	f040 86ea 	bne.w	407ef0 <_svfprintf_r+0x1454>
  40711c:	f01b 0f20 	tst.w	fp, #32
  407120:	d15d      	bne.n	4071de <_svfprintf_r+0x742>
  407122:	f01b 0f10 	tst.w	fp, #16
  407126:	f040 8308 	bne.w	40773a <_svfprintf_r+0xc9e>
  40712a:	f01b 0f40 	tst.w	fp, #64	; 0x40
  40712e:	f000 8304 	beq.w	40773a <_svfprintf_r+0xc9e>
  407132:	990f      	ldr	r1, [sp, #60]	; 0x3c
  407134:	f9b1 4000 	ldrsh.w	r4, [r1]
  407138:	3104      	adds	r1, #4
  40713a:	17e5      	asrs	r5, r4, #31
  40713c:	4622      	mov	r2, r4
  40713e:	462b      	mov	r3, r5
  407140:	910f      	str	r1, [sp, #60]	; 0x3c
  407142:	2a00      	cmp	r2, #0
  407144:	f173 0300 	sbcs.w	r3, r3, #0
  407148:	db58      	blt.n	4071fc <_svfprintf_r+0x760>
  40714a:	990a      	ldr	r1, [sp, #40]	; 0x28
  40714c:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  407150:	1c4a      	adds	r2, r1, #1
  407152:	f04f 0301 	mov.w	r3, #1
  407156:	f47f ad9b 	bne.w	406c90 <_svfprintf_r+0x1f4>
  40715a:	ea54 0205 	orrs.w	r2, r4, r5
  40715e:	f000 81df 	beq.w	407520 <_svfprintf_r+0xa84>
  407162:	f8cd b01c 	str.w	fp, [sp, #28]
  407166:	2b01      	cmp	r3, #1
  407168:	f000 827b 	beq.w	407662 <_svfprintf_r+0xbc6>
  40716c:	2b02      	cmp	r3, #2
  40716e:	f040 8206 	bne.w	40757e <_svfprintf_r+0xae2>
  407172:	9818      	ldr	r0, [sp, #96]	; 0x60
  407174:	464e      	mov	r6, r9
  407176:	0923      	lsrs	r3, r4, #4
  407178:	f004 010f 	and.w	r1, r4, #15
  40717c:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  407180:	092a      	lsrs	r2, r5, #4
  407182:	461c      	mov	r4, r3
  407184:	4615      	mov	r5, r2
  407186:	5c43      	ldrb	r3, [r0, r1]
  407188:	f806 3d01 	strb.w	r3, [r6, #-1]!
  40718c:	ea54 0305 	orrs.w	r3, r4, r5
  407190:	d1f1      	bne.n	407176 <_svfprintf_r+0x6da>
  407192:	eba9 0306 	sub.w	r3, r9, r6
  407196:	930e      	str	r3, [sp, #56]	; 0x38
  407198:	e590      	b.n	406cbc <_svfprintf_r+0x220>
  40719a:	9311      	str	r3, [sp, #68]	; 0x44
  40719c:	2a00      	cmp	r2, #0
  40719e:	f040 86a3 	bne.w	407ee8 <_svfprintf_r+0x144c>
  4071a2:	4b7e      	ldr	r3, [pc, #504]	; (40739c <_svfprintf_r+0x900>)
  4071a4:	9318      	str	r3, [sp, #96]	; 0x60
  4071a6:	f01b 0f20 	tst.w	fp, #32
  4071aa:	f43f aeef 	beq.w	406f8c <_svfprintf_r+0x4f0>
  4071ae:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  4071b0:	3507      	adds	r5, #7
  4071b2:	f025 0307 	bic.w	r3, r5, #7
  4071b6:	f103 0208 	add.w	r2, r3, #8
  4071ba:	f01b 0f01 	tst.w	fp, #1
  4071be:	920f      	str	r2, [sp, #60]	; 0x3c
  4071c0:	e9d3 4500 	ldrd	r4, r5, [r3]
  4071c4:	f47f aef4 	bne.w	406fb0 <_svfprintf_r+0x514>
  4071c8:	2302      	movs	r3, #2
  4071ca:	e55a      	b.n	406c82 <_svfprintf_r+0x1e6>
  4071cc:	9311      	str	r3, [sp, #68]	; 0x44
  4071ce:	2a00      	cmp	r2, #0
  4071d0:	f040 8686 	bne.w	407ee0 <_svfprintf_r+0x1444>
  4071d4:	f04b 0b10 	orr.w	fp, fp, #16
  4071d8:	f01b 0f20 	tst.w	fp, #32
  4071dc:	d0a1      	beq.n	407122 <_svfprintf_r+0x686>
  4071de:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  4071e0:	3507      	adds	r5, #7
  4071e2:	f025 0507 	bic.w	r5, r5, #7
  4071e6:	e9d5 2300 	ldrd	r2, r3, [r5]
  4071ea:	2a00      	cmp	r2, #0
  4071ec:	f105 0108 	add.w	r1, r5, #8
  4071f0:	461d      	mov	r5, r3
  4071f2:	f173 0300 	sbcs.w	r3, r3, #0
  4071f6:	910f      	str	r1, [sp, #60]	; 0x3c
  4071f8:	4614      	mov	r4, r2
  4071fa:	daa6      	bge.n	40714a <_svfprintf_r+0x6ae>
  4071fc:	272d      	movs	r7, #45	; 0x2d
  4071fe:	4264      	negs	r4, r4
  407200:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  407204:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  407208:	2301      	movs	r3, #1
  40720a:	e53d      	b.n	406c88 <_svfprintf_r+0x1ec>
  40720c:	9311      	str	r3, [sp, #68]	; 0x44
  40720e:	2a00      	cmp	r2, #0
  407210:	f040 8662 	bne.w	407ed8 <_svfprintf_r+0x143c>
  407214:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  407216:	3507      	adds	r5, #7
  407218:	f025 0307 	bic.w	r3, r5, #7
  40721c:	f103 0208 	add.w	r2, r3, #8
  407220:	920f      	str	r2, [sp, #60]	; 0x3c
  407222:	681a      	ldr	r2, [r3, #0]
  407224:	9215      	str	r2, [sp, #84]	; 0x54
  407226:	685b      	ldr	r3, [r3, #4]
  407228:	9314      	str	r3, [sp, #80]	; 0x50
  40722a:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40722c:	9d15      	ldr	r5, [sp, #84]	; 0x54
  40722e:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
  407232:	4628      	mov	r0, r5
  407234:	4621      	mov	r1, r4
  407236:	f04f 32ff 	mov.w	r2, #4294967295
  40723a:	4b59      	ldr	r3, [pc, #356]	; (4073a0 <_svfprintf_r+0x904>)
  40723c:	f005 f9f4 	bl	40c628 <__aeabi_dcmpun>
  407240:	2800      	cmp	r0, #0
  407242:	f040 834a 	bne.w	4078da <_svfprintf_r+0xe3e>
  407246:	4628      	mov	r0, r5
  407248:	4621      	mov	r1, r4
  40724a:	f04f 32ff 	mov.w	r2, #4294967295
  40724e:	4b54      	ldr	r3, [pc, #336]	; (4073a0 <_svfprintf_r+0x904>)
  407250:	f005 f9cc 	bl	40c5ec <__aeabi_dcmple>
  407254:	2800      	cmp	r0, #0
  407256:	f040 8340 	bne.w	4078da <_svfprintf_r+0xe3e>
  40725a:	a815      	add	r0, sp, #84	; 0x54
  40725c:	c80d      	ldmia	r0, {r0, r2, r3}
  40725e:	9914      	ldr	r1, [sp, #80]	; 0x50
  407260:	f005 f9ba 	bl	40c5d8 <__aeabi_dcmplt>
  407264:	2800      	cmp	r0, #0
  407266:	f040 8530 	bne.w	407cca <_svfprintf_r+0x122e>
  40726a:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  40726e:	4e4d      	ldr	r6, [pc, #308]	; (4073a4 <_svfprintf_r+0x908>)
  407270:	4b4d      	ldr	r3, [pc, #308]	; (4073a8 <_svfprintf_r+0x90c>)
  407272:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
  407276:	9007      	str	r0, [sp, #28]
  407278:	9811      	ldr	r0, [sp, #68]	; 0x44
  40727a:	2203      	movs	r2, #3
  40727c:	2100      	movs	r1, #0
  40727e:	9208      	str	r2, [sp, #32]
  407280:	910a      	str	r1, [sp, #40]	; 0x28
  407282:	2847      	cmp	r0, #71	; 0x47
  407284:	bfd8      	it	le
  407286:	461e      	movle	r6, r3
  407288:	920e      	str	r2, [sp, #56]	; 0x38
  40728a:	9112      	str	r1, [sp, #72]	; 0x48
  40728c:	e51e      	b.n	406ccc <_svfprintf_r+0x230>
  40728e:	f04b 0b08 	orr.w	fp, fp, #8
  407292:	f89a 3000 	ldrb.w	r3, [sl]
  407296:	e459      	b.n	406b4c <_svfprintf_r+0xb0>
  407298:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  40729c:	2300      	movs	r3, #0
  40729e:	461c      	mov	r4, r3
  4072a0:	f81a 3b01 	ldrb.w	r3, [sl], #1
  4072a4:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  4072a8:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  4072ac:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  4072b0:	2809      	cmp	r0, #9
  4072b2:	d9f5      	bls.n	4072a0 <_svfprintf_r+0x804>
  4072b4:	940d      	str	r4, [sp, #52]	; 0x34
  4072b6:	e44b      	b.n	406b50 <_svfprintf_r+0xb4>
  4072b8:	f04b 0b10 	orr.w	fp, fp, #16
  4072bc:	9311      	str	r3, [sp, #68]	; 0x44
  4072be:	f01b 0320 	ands.w	r3, fp, #32
  4072c2:	f43f ae1d 	beq.w	406f00 <_svfprintf_r+0x464>
  4072c6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  4072c8:	3507      	adds	r5, #7
  4072ca:	f025 0307 	bic.w	r3, r5, #7
  4072ce:	f103 0208 	add.w	r2, r3, #8
  4072d2:	e9d3 4500 	ldrd	r4, r5, [r3]
  4072d6:	920f      	str	r2, [sp, #60]	; 0x3c
  4072d8:	2300      	movs	r3, #0
  4072da:	e4d2      	b.n	406c82 <_svfprintf_r+0x1e6>
  4072dc:	9311      	str	r3, [sp, #68]	; 0x44
  4072de:	2a00      	cmp	r2, #0
  4072e0:	f040 85e7 	bne.w	407eb2 <_svfprintf_r+0x1416>
  4072e4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4072e6:	2a00      	cmp	r2, #0
  4072e8:	f43f aca3 	beq.w	406c32 <_svfprintf_r+0x196>
  4072ec:	2300      	movs	r3, #0
  4072ee:	2101      	movs	r1, #1
  4072f0:	461f      	mov	r7, r3
  4072f2:	9108      	str	r1, [sp, #32]
  4072f4:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  4072f8:	f8cd b01c 	str.w	fp, [sp, #28]
  4072fc:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  407300:	930a      	str	r3, [sp, #40]	; 0x28
  407302:	9312      	str	r3, [sp, #72]	; 0x48
  407304:	910e      	str	r1, [sp, #56]	; 0x38
  407306:	ae28      	add	r6, sp, #160	; 0xa0
  407308:	e4e4      	b.n	406cd4 <_svfprintf_r+0x238>
  40730a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40730c:	e534      	b.n	406d78 <_svfprintf_r+0x2dc>
  40730e:	9b11      	ldr	r3, [sp, #68]	; 0x44
  407310:	2b65      	cmp	r3, #101	; 0x65
  407312:	f340 80a7 	ble.w	407464 <_svfprintf_r+0x9c8>
  407316:	a815      	add	r0, sp, #84	; 0x54
  407318:	c80d      	ldmia	r0, {r0, r2, r3}
  40731a:	9914      	ldr	r1, [sp, #80]	; 0x50
  40731c:	f005 f952 	bl	40c5c4 <__aeabi_dcmpeq>
  407320:	2800      	cmp	r0, #0
  407322:	f000 8150 	beq.w	4075c6 <_svfprintf_r+0xb2a>
  407326:	9b26      	ldr	r3, [sp, #152]	; 0x98
  407328:	4a20      	ldr	r2, [pc, #128]	; (4073ac <_svfprintf_r+0x910>)
  40732a:	f8c8 2000 	str.w	r2, [r8]
  40732e:	3301      	adds	r3, #1
  407330:	3401      	adds	r4, #1
  407332:	2201      	movs	r2, #1
  407334:	2b07      	cmp	r3, #7
  407336:	9427      	str	r4, [sp, #156]	; 0x9c
  407338:	9326      	str	r3, [sp, #152]	; 0x98
  40733a:	f8c8 2004 	str.w	r2, [r8, #4]
  40733e:	f300 836a 	bgt.w	407a16 <_svfprintf_r+0xf7a>
  407342:	f108 0808 	add.w	r8, r8, #8
  407346:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  407348:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  40734a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40734c:	4293      	cmp	r3, r2
  40734e:	db03      	blt.n	407358 <_svfprintf_r+0x8bc>
  407350:	9b07      	ldr	r3, [sp, #28]
  407352:	07dd      	lsls	r5, r3, #31
  407354:	f57f ad82 	bpl.w	406e5c <_svfprintf_r+0x3c0>
  407358:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40735a:	9919      	ldr	r1, [sp, #100]	; 0x64
  40735c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  40735e:	f8c8 2000 	str.w	r2, [r8]
  407362:	3301      	adds	r3, #1
  407364:	440c      	add	r4, r1
  407366:	2b07      	cmp	r3, #7
  407368:	f8c8 1004 	str.w	r1, [r8, #4]
  40736c:	9427      	str	r4, [sp, #156]	; 0x9c
  40736e:	9326      	str	r3, [sp, #152]	; 0x98
  407370:	f300 839e 	bgt.w	407ab0 <_svfprintf_r+0x1014>
  407374:	f108 0808 	add.w	r8, r8, #8
  407378:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40737a:	1e5e      	subs	r6, r3, #1
  40737c:	2e00      	cmp	r6, #0
  40737e:	f77f ad6d 	ble.w	406e5c <_svfprintf_r+0x3c0>
  407382:	2e10      	cmp	r6, #16
  407384:	9b26      	ldr	r3, [sp, #152]	; 0x98
  407386:	4d0a      	ldr	r5, [pc, #40]	; (4073b0 <_svfprintf_r+0x914>)
  407388:	f340 81f5 	ble.w	407776 <_svfprintf_r+0xcda>
  40738c:	4622      	mov	r2, r4
  40738e:	2710      	movs	r7, #16
  407390:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  407394:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  407396:	e013      	b.n	4073c0 <_svfprintf_r+0x924>
  407398:	0040d9b0 	.word	0x0040d9b0
  40739c:	0040d99c 	.word	0x0040d99c
  4073a0:	7fefffff 	.word	0x7fefffff
  4073a4:	0040d990 	.word	0x0040d990
  4073a8:	0040d98c 	.word	0x0040d98c
  4073ac:	0040d9cc 	.word	0x0040d9cc
  4073b0:	0040d9e0 	.word	0x0040d9e0
  4073b4:	f108 0808 	add.w	r8, r8, #8
  4073b8:	3e10      	subs	r6, #16
  4073ba:	2e10      	cmp	r6, #16
  4073bc:	f340 81da 	ble.w	407774 <_svfprintf_r+0xcd8>
  4073c0:	3301      	adds	r3, #1
  4073c2:	3210      	adds	r2, #16
  4073c4:	2b07      	cmp	r3, #7
  4073c6:	9227      	str	r2, [sp, #156]	; 0x9c
  4073c8:	9326      	str	r3, [sp, #152]	; 0x98
  4073ca:	e888 00a0 	stmia.w	r8, {r5, r7}
  4073ce:	ddf1      	ble.n	4073b4 <_svfprintf_r+0x918>
  4073d0:	aa25      	add	r2, sp, #148	; 0x94
  4073d2:	4621      	mov	r1, r4
  4073d4:	4658      	mov	r0, fp
  4073d6:	f004 fa59 	bl	40b88c <__ssprint_r>
  4073da:	2800      	cmp	r0, #0
  4073dc:	f47f ac30 	bne.w	406c40 <_svfprintf_r+0x1a4>
  4073e0:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  4073e2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4073e4:	46c8      	mov	r8, r9
  4073e6:	e7e7      	b.n	4073b8 <_svfprintf_r+0x91c>
  4073e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4073ea:	9a08      	ldr	r2, [sp, #32]
  4073ec:	1a9f      	subs	r7, r3, r2
  4073ee:	2f00      	cmp	r7, #0
  4073f0:	f77f ace5 	ble.w	406dbe <_svfprintf_r+0x322>
  4073f4:	2f10      	cmp	r7, #16
  4073f6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4073f8:	4db6      	ldr	r5, [pc, #728]	; (4076d4 <_svfprintf_r+0xc38>)
  4073fa:	dd27      	ble.n	40744c <_svfprintf_r+0x9b0>
  4073fc:	4642      	mov	r2, r8
  4073fe:	4621      	mov	r1, r4
  407400:	46b0      	mov	r8, r6
  407402:	f04f 0b10 	mov.w	fp, #16
  407406:	462e      	mov	r6, r5
  407408:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40740a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  40740c:	e004      	b.n	407418 <_svfprintf_r+0x97c>
  40740e:	3f10      	subs	r7, #16
  407410:	2f10      	cmp	r7, #16
  407412:	f102 0208 	add.w	r2, r2, #8
  407416:	dd15      	ble.n	407444 <_svfprintf_r+0x9a8>
  407418:	3301      	adds	r3, #1
  40741a:	3110      	adds	r1, #16
  40741c:	2b07      	cmp	r3, #7
  40741e:	9127      	str	r1, [sp, #156]	; 0x9c
  407420:	9326      	str	r3, [sp, #152]	; 0x98
  407422:	e882 0840 	stmia.w	r2, {r6, fp}
  407426:	ddf2      	ble.n	40740e <_svfprintf_r+0x972>
  407428:	aa25      	add	r2, sp, #148	; 0x94
  40742a:	4629      	mov	r1, r5
  40742c:	4620      	mov	r0, r4
  40742e:	f004 fa2d 	bl	40b88c <__ssprint_r>
  407432:	2800      	cmp	r0, #0
  407434:	f47f ac04 	bne.w	406c40 <_svfprintf_r+0x1a4>
  407438:	3f10      	subs	r7, #16
  40743a:	2f10      	cmp	r7, #16
  40743c:	9927      	ldr	r1, [sp, #156]	; 0x9c
  40743e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  407440:	464a      	mov	r2, r9
  407442:	dce9      	bgt.n	407418 <_svfprintf_r+0x97c>
  407444:	4635      	mov	r5, r6
  407446:	460c      	mov	r4, r1
  407448:	4646      	mov	r6, r8
  40744a:	4690      	mov	r8, r2
  40744c:	3301      	adds	r3, #1
  40744e:	443c      	add	r4, r7
  407450:	2b07      	cmp	r3, #7
  407452:	9427      	str	r4, [sp, #156]	; 0x9c
  407454:	9326      	str	r3, [sp, #152]	; 0x98
  407456:	e888 00a0 	stmia.w	r8, {r5, r7}
  40745a:	f300 8232 	bgt.w	4078c2 <_svfprintf_r+0xe26>
  40745e:	f108 0808 	add.w	r8, r8, #8
  407462:	e4ac      	b.n	406dbe <_svfprintf_r+0x322>
  407464:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  407466:	9f26      	ldr	r7, [sp, #152]	; 0x98
  407468:	2b01      	cmp	r3, #1
  40746a:	f340 81fe 	ble.w	40786a <_svfprintf_r+0xdce>
  40746e:	3701      	adds	r7, #1
  407470:	3401      	adds	r4, #1
  407472:	2301      	movs	r3, #1
  407474:	2f07      	cmp	r7, #7
  407476:	9427      	str	r4, [sp, #156]	; 0x9c
  407478:	9726      	str	r7, [sp, #152]	; 0x98
  40747a:	f8c8 6000 	str.w	r6, [r8]
  40747e:	f8c8 3004 	str.w	r3, [r8, #4]
  407482:	f300 8203 	bgt.w	40788c <_svfprintf_r+0xdf0>
  407486:	f108 0808 	add.w	r8, r8, #8
  40748a:	9a19      	ldr	r2, [sp, #100]	; 0x64
  40748c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  40748e:	f8c8 3000 	str.w	r3, [r8]
  407492:	3701      	adds	r7, #1
  407494:	4414      	add	r4, r2
  407496:	2f07      	cmp	r7, #7
  407498:	9427      	str	r4, [sp, #156]	; 0x9c
  40749a:	9726      	str	r7, [sp, #152]	; 0x98
  40749c:	f8c8 2004 	str.w	r2, [r8, #4]
  4074a0:	f300 8200 	bgt.w	4078a4 <_svfprintf_r+0xe08>
  4074a4:	f108 0808 	add.w	r8, r8, #8
  4074a8:	a815      	add	r0, sp, #84	; 0x54
  4074aa:	c80d      	ldmia	r0, {r0, r2, r3}
  4074ac:	9914      	ldr	r1, [sp, #80]	; 0x50
  4074ae:	f005 f889 	bl	40c5c4 <__aeabi_dcmpeq>
  4074b2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4074b4:	2800      	cmp	r0, #0
  4074b6:	f040 8101 	bne.w	4076bc <_svfprintf_r+0xc20>
  4074ba:	3b01      	subs	r3, #1
  4074bc:	3701      	adds	r7, #1
  4074be:	3601      	adds	r6, #1
  4074c0:	441c      	add	r4, r3
  4074c2:	2f07      	cmp	r7, #7
  4074c4:	9726      	str	r7, [sp, #152]	; 0x98
  4074c6:	9427      	str	r4, [sp, #156]	; 0x9c
  4074c8:	f8c8 6000 	str.w	r6, [r8]
  4074cc:	f8c8 3004 	str.w	r3, [r8, #4]
  4074d0:	f300 8127 	bgt.w	407722 <_svfprintf_r+0xc86>
  4074d4:	f108 0808 	add.w	r8, r8, #8
  4074d8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
  4074da:	f8c8 2004 	str.w	r2, [r8, #4]
  4074de:	3701      	adds	r7, #1
  4074e0:	4414      	add	r4, r2
  4074e2:	ab21      	add	r3, sp, #132	; 0x84
  4074e4:	2f07      	cmp	r7, #7
  4074e6:	9427      	str	r4, [sp, #156]	; 0x9c
  4074e8:	9726      	str	r7, [sp, #152]	; 0x98
  4074ea:	f8c8 3000 	str.w	r3, [r8]
  4074ee:	f77f acb3 	ble.w	406e58 <_svfprintf_r+0x3bc>
  4074f2:	aa25      	add	r2, sp, #148	; 0x94
  4074f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4074f6:	980c      	ldr	r0, [sp, #48]	; 0x30
  4074f8:	f004 f9c8 	bl	40b88c <__ssprint_r>
  4074fc:	2800      	cmp	r0, #0
  4074fe:	f47f ab9f 	bne.w	406c40 <_svfprintf_r+0x1a4>
  407502:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  407504:	46c8      	mov	r8, r9
  407506:	e4a9      	b.n	406e5c <_svfprintf_r+0x3c0>
  407508:	aa25      	add	r2, sp, #148	; 0x94
  40750a:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40750c:	980c      	ldr	r0, [sp, #48]	; 0x30
  40750e:	f004 f9bd 	bl	40b88c <__ssprint_r>
  407512:	2800      	cmp	r0, #0
  407514:	f43f aceb 	beq.w	406eee <_svfprintf_r+0x452>
  407518:	f7ff bb92 	b.w	406c40 <_svfprintf_r+0x1a4>
  40751c:	f8dd b01c 	ldr.w	fp, [sp, #28]
  407520:	2b01      	cmp	r3, #1
  407522:	f000 8134 	beq.w	40778e <_svfprintf_r+0xcf2>
  407526:	2b02      	cmp	r3, #2
  407528:	d125      	bne.n	407576 <_svfprintf_r+0xada>
  40752a:	f8cd b01c 	str.w	fp, [sp, #28]
  40752e:	2400      	movs	r4, #0
  407530:	2500      	movs	r5, #0
  407532:	e61e      	b.n	407172 <_svfprintf_r+0x6d6>
  407534:	aa25      	add	r2, sp, #148	; 0x94
  407536:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407538:	980c      	ldr	r0, [sp, #48]	; 0x30
  40753a:	f004 f9a7 	bl	40b88c <__ssprint_r>
  40753e:	2800      	cmp	r0, #0
  407540:	f47f ab7e 	bne.w	406c40 <_svfprintf_r+0x1a4>
  407544:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  407546:	46c8      	mov	r8, r9
  407548:	e475      	b.n	406e36 <_svfprintf_r+0x39a>
  40754a:	aa25      	add	r2, sp, #148	; 0x94
  40754c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40754e:	980c      	ldr	r0, [sp, #48]	; 0x30
  407550:	f004 f99c 	bl	40b88c <__ssprint_r>
  407554:	2800      	cmp	r0, #0
  407556:	f47f ab73 	bne.w	406c40 <_svfprintf_r+0x1a4>
  40755a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40755c:	46c8      	mov	r8, r9
  40755e:	e41b      	b.n	406d98 <_svfprintf_r+0x2fc>
  407560:	aa25      	add	r2, sp, #148	; 0x94
  407562:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407564:	980c      	ldr	r0, [sp, #48]	; 0x30
  407566:	f004 f991 	bl	40b88c <__ssprint_r>
  40756a:	2800      	cmp	r0, #0
  40756c:	f47f ab68 	bne.w	406c40 <_svfprintf_r+0x1a4>
  407570:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  407572:	46c8      	mov	r8, r9
  407574:	e420      	b.n	406db8 <_svfprintf_r+0x31c>
  407576:	f8cd b01c 	str.w	fp, [sp, #28]
  40757a:	2400      	movs	r4, #0
  40757c:	2500      	movs	r5, #0
  40757e:	4649      	mov	r1, r9
  407580:	e000      	b.n	407584 <_svfprintf_r+0xae8>
  407582:	4631      	mov	r1, r6
  407584:	08e2      	lsrs	r2, r4, #3
  407586:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  40758a:	08e8      	lsrs	r0, r5, #3
  40758c:	f004 0307 	and.w	r3, r4, #7
  407590:	4605      	mov	r5, r0
  407592:	4614      	mov	r4, r2
  407594:	3330      	adds	r3, #48	; 0x30
  407596:	ea54 0205 	orrs.w	r2, r4, r5
  40759a:	f801 3c01 	strb.w	r3, [r1, #-1]
  40759e:	f101 36ff 	add.w	r6, r1, #4294967295
  4075a2:	d1ee      	bne.n	407582 <_svfprintf_r+0xae6>
  4075a4:	9a07      	ldr	r2, [sp, #28]
  4075a6:	07d2      	lsls	r2, r2, #31
  4075a8:	f57f adf3 	bpl.w	407192 <_svfprintf_r+0x6f6>
  4075ac:	2b30      	cmp	r3, #48	; 0x30
  4075ae:	f43f adf0 	beq.w	407192 <_svfprintf_r+0x6f6>
  4075b2:	3902      	subs	r1, #2
  4075b4:	2330      	movs	r3, #48	; 0x30
  4075b6:	f806 3c01 	strb.w	r3, [r6, #-1]
  4075ba:	eba9 0301 	sub.w	r3, r9, r1
  4075be:	930e      	str	r3, [sp, #56]	; 0x38
  4075c0:	460e      	mov	r6, r1
  4075c2:	f7ff bb7b 	b.w	406cbc <_svfprintf_r+0x220>
  4075c6:	991f      	ldr	r1, [sp, #124]	; 0x7c
  4075c8:	2900      	cmp	r1, #0
  4075ca:	f340 822e 	ble.w	407a2a <_svfprintf_r+0xf8e>
  4075ce:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4075d0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  4075d2:	4293      	cmp	r3, r2
  4075d4:	bfa8      	it	ge
  4075d6:	4613      	movge	r3, r2
  4075d8:	2b00      	cmp	r3, #0
  4075da:	461f      	mov	r7, r3
  4075dc:	dd0d      	ble.n	4075fa <_svfprintf_r+0xb5e>
  4075de:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4075e0:	f8c8 6000 	str.w	r6, [r8]
  4075e4:	3301      	adds	r3, #1
  4075e6:	443c      	add	r4, r7
  4075e8:	2b07      	cmp	r3, #7
  4075ea:	9427      	str	r4, [sp, #156]	; 0x9c
  4075ec:	f8c8 7004 	str.w	r7, [r8, #4]
  4075f0:	9326      	str	r3, [sp, #152]	; 0x98
  4075f2:	f300 831f 	bgt.w	407c34 <_svfprintf_r+0x1198>
  4075f6:	f108 0808 	add.w	r8, r8, #8
  4075fa:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4075fc:	2f00      	cmp	r7, #0
  4075fe:	bfa8      	it	ge
  407600:	1bdb      	subge	r3, r3, r7
  407602:	2b00      	cmp	r3, #0
  407604:	461f      	mov	r7, r3
  407606:	f340 80d6 	ble.w	4077b6 <_svfprintf_r+0xd1a>
  40760a:	2f10      	cmp	r7, #16
  40760c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40760e:	4d31      	ldr	r5, [pc, #196]	; (4076d4 <_svfprintf_r+0xc38>)
  407610:	f340 81ed 	ble.w	4079ee <_svfprintf_r+0xf52>
  407614:	4642      	mov	r2, r8
  407616:	4621      	mov	r1, r4
  407618:	46b0      	mov	r8, r6
  40761a:	f04f 0b10 	mov.w	fp, #16
  40761e:	462e      	mov	r6, r5
  407620:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  407622:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  407624:	e004      	b.n	407630 <_svfprintf_r+0xb94>
  407626:	3208      	adds	r2, #8
  407628:	3f10      	subs	r7, #16
  40762a:	2f10      	cmp	r7, #16
  40762c:	f340 81db 	ble.w	4079e6 <_svfprintf_r+0xf4a>
  407630:	3301      	adds	r3, #1
  407632:	3110      	adds	r1, #16
  407634:	2b07      	cmp	r3, #7
  407636:	9127      	str	r1, [sp, #156]	; 0x9c
  407638:	9326      	str	r3, [sp, #152]	; 0x98
  40763a:	e882 0840 	stmia.w	r2, {r6, fp}
  40763e:	ddf2      	ble.n	407626 <_svfprintf_r+0xb8a>
  407640:	aa25      	add	r2, sp, #148	; 0x94
  407642:	4629      	mov	r1, r5
  407644:	4620      	mov	r0, r4
  407646:	f004 f921 	bl	40b88c <__ssprint_r>
  40764a:	2800      	cmp	r0, #0
  40764c:	f47f aaf8 	bne.w	406c40 <_svfprintf_r+0x1a4>
  407650:	9927      	ldr	r1, [sp, #156]	; 0x9c
  407652:	9b26      	ldr	r3, [sp, #152]	; 0x98
  407654:	464a      	mov	r2, r9
  407656:	e7e7      	b.n	407628 <_svfprintf_r+0xb8c>
  407658:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40765a:	930e      	str	r3, [sp, #56]	; 0x38
  40765c:	464e      	mov	r6, r9
  40765e:	f7ff bb2d 	b.w	406cbc <_svfprintf_r+0x220>
  407662:	2d00      	cmp	r5, #0
  407664:	bf08      	it	eq
  407666:	2c0a      	cmpeq	r4, #10
  407668:	f0c0 808f 	bcc.w	40778a <_svfprintf_r+0xcee>
  40766c:	464e      	mov	r6, r9
  40766e:	4620      	mov	r0, r4
  407670:	4629      	mov	r1, r5
  407672:	220a      	movs	r2, #10
  407674:	2300      	movs	r3, #0
  407676:	f005 f815 	bl	40c6a4 <__aeabi_uldivmod>
  40767a:	3230      	adds	r2, #48	; 0x30
  40767c:	f806 2d01 	strb.w	r2, [r6, #-1]!
  407680:	4620      	mov	r0, r4
  407682:	4629      	mov	r1, r5
  407684:	2300      	movs	r3, #0
  407686:	220a      	movs	r2, #10
  407688:	f005 f80c 	bl	40c6a4 <__aeabi_uldivmod>
  40768c:	4604      	mov	r4, r0
  40768e:	460d      	mov	r5, r1
  407690:	ea54 0305 	orrs.w	r3, r4, r5
  407694:	d1eb      	bne.n	40766e <_svfprintf_r+0xbd2>
  407696:	eba9 0306 	sub.w	r3, r9, r6
  40769a:	930e      	str	r3, [sp, #56]	; 0x38
  40769c:	f7ff bb0e 	b.w	406cbc <_svfprintf_r+0x220>
  4076a0:	aa25      	add	r2, sp, #148	; 0x94
  4076a2:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4076a4:	980c      	ldr	r0, [sp, #48]	; 0x30
  4076a6:	f004 f8f1 	bl	40b88c <__ssprint_r>
  4076aa:	2800      	cmp	r0, #0
  4076ac:	f47f aac8 	bne.w	406c40 <_svfprintf_r+0x1a4>
  4076b0:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  4076b4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4076b6:	46c8      	mov	r8, r9
  4076b8:	f7ff bb5e 	b.w	406d78 <_svfprintf_r+0x2dc>
  4076bc:	1e5e      	subs	r6, r3, #1
  4076be:	2e00      	cmp	r6, #0
  4076c0:	f77f af0a 	ble.w	4074d8 <_svfprintf_r+0xa3c>
  4076c4:	2e10      	cmp	r6, #16
  4076c6:	4d03      	ldr	r5, [pc, #12]	; (4076d4 <_svfprintf_r+0xc38>)
  4076c8:	dd22      	ble.n	407710 <_svfprintf_r+0xc74>
  4076ca:	4622      	mov	r2, r4
  4076cc:	f04f 0b10 	mov.w	fp, #16
  4076d0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4076d2:	e006      	b.n	4076e2 <_svfprintf_r+0xc46>
  4076d4:	0040d9e0 	.word	0x0040d9e0
  4076d8:	3e10      	subs	r6, #16
  4076da:	2e10      	cmp	r6, #16
  4076dc:	f108 0808 	add.w	r8, r8, #8
  4076e0:	dd15      	ble.n	40770e <_svfprintf_r+0xc72>
  4076e2:	3701      	adds	r7, #1
  4076e4:	3210      	adds	r2, #16
  4076e6:	2f07      	cmp	r7, #7
  4076e8:	9227      	str	r2, [sp, #156]	; 0x9c
  4076ea:	9726      	str	r7, [sp, #152]	; 0x98
  4076ec:	e888 0820 	stmia.w	r8, {r5, fp}
  4076f0:	ddf2      	ble.n	4076d8 <_svfprintf_r+0xc3c>
  4076f2:	aa25      	add	r2, sp, #148	; 0x94
  4076f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4076f6:	4620      	mov	r0, r4
  4076f8:	f004 f8c8 	bl	40b88c <__ssprint_r>
  4076fc:	2800      	cmp	r0, #0
  4076fe:	f47f aa9f 	bne.w	406c40 <_svfprintf_r+0x1a4>
  407702:	3e10      	subs	r6, #16
  407704:	2e10      	cmp	r6, #16
  407706:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  407708:	9f26      	ldr	r7, [sp, #152]	; 0x98
  40770a:	46c8      	mov	r8, r9
  40770c:	dce9      	bgt.n	4076e2 <_svfprintf_r+0xc46>
  40770e:	4614      	mov	r4, r2
  407710:	3701      	adds	r7, #1
  407712:	4434      	add	r4, r6
  407714:	2f07      	cmp	r7, #7
  407716:	9427      	str	r4, [sp, #156]	; 0x9c
  407718:	9726      	str	r7, [sp, #152]	; 0x98
  40771a:	e888 0060 	stmia.w	r8, {r5, r6}
  40771e:	f77f aed9 	ble.w	4074d4 <_svfprintf_r+0xa38>
  407722:	aa25      	add	r2, sp, #148	; 0x94
  407724:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407726:	980c      	ldr	r0, [sp, #48]	; 0x30
  407728:	f004 f8b0 	bl	40b88c <__ssprint_r>
  40772c:	2800      	cmp	r0, #0
  40772e:	f47f aa87 	bne.w	406c40 <_svfprintf_r+0x1a4>
  407732:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  407734:	9f26      	ldr	r7, [sp, #152]	; 0x98
  407736:	46c8      	mov	r8, r9
  407738:	e6ce      	b.n	4074d8 <_svfprintf_r+0xa3c>
  40773a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40773c:	6814      	ldr	r4, [r2, #0]
  40773e:	4613      	mov	r3, r2
  407740:	3304      	adds	r3, #4
  407742:	17e5      	asrs	r5, r4, #31
  407744:	930f      	str	r3, [sp, #60]	; 0x3c
  407746:	4622      	mov	r2, r4
  407748:	462b      	mov	r3, r5
  40774a:	e4fa      	b.n	407142 <_svfprintf_r+0x6a6>
  40774c:	3204      	adds	r2, #4
  40774e:	681c      	ldr	r4, [r3, #0]
  407750:	920f      	str	r2, [sp, #60]	; 0x3c
  407752:	2301      	movs	r3, #1
  407754:	2500      	movs	r5, #0
  407756:	f7ff ba94 	b.w	406c82 <_svfprintf_r+0x1e6>
  40775a:	681c      	ldr	r4, [r3, #0]
  40775c:	3304      	adds	r3, #4
  40775e:	930f      	str	r3, [sp, #60]	; 0x3c
  407760:	2500      	movs	r5, #0
  407762:	e421      	b.n	406fa8 <_svfprintf_r+0x50c>
  407764:	990f      	ldr	r1, [sp, #60]	; 0x3c
  407766:	460a      	mov	r2, r1
  407768:	3204      	adds	r2, #4
  40776a:	680c      	ldr	r4, [r1, #0]
  40776c:	920f      	str	r2, [sp, #60]	; 0x3c
  40776e:	2500      	movs	r5, #0
  407770:	f7ff ba87 	b.w	406c82 <_svfprintf_r+0x1e6>
  407774:	4614      	mov	r4, r2
  407776:	3301      	adds	r3, #1
  407778:	4434      	add	r4, r6
  40777a:	2b07      	cmp	r3, #7
  40777c:	9427      	str	r4, [sp, #156]	; 0x9c
  40777e:	9326      	str	r3, [sp, #152]	; 0x98
  407780:	e888 0060 	stmia.w	r8, {r5, r6}
  407784:	f77f ab68 	ble.w	406e58 <_svfprintf_r+0x3bc>
  407788:	e6b3      	b.n	4074f2 <_svfprintf_r+0xa56>
  40778a:	f8dd b01c 	ldr.w	fp, [sp, #28]
  40778e:	f8cd b01c 	str.w	fp, [sp, #28]
  407792:	ae42      	add	r6, sp, #264	; 0x108
  407794:	3430      	adds	r4, #48	; 0x30
  407796:	2301      	movs	r3, #1
  407798:	f806 4d41 	strb.w	r4, [r6, #-65]!
  40779c:	930e      	str	r3, [sp, #56]	; 0x38
  40779e:	f7ff ba8d 	b.w	406cbc <_svfprintf_r+0x220>
  4077a2:	aa25      	add	r2, sp, #148	; 0x94
  4077a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4077a6:	980c      	ldr	r0, [sp, #48]	; 0x30
  4077a8:	f004 f870 	bl	40b88c <__ssprint_r>
  4077ac:	2800      	cmp	r0, #0
  4077ae:	f47f aa47 	bne.w	406c40 <_svfprintf_r+0x1a4>
  4077b2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4077b4:	46c8      	mov	r8, r9
  4077b6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  4077b8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4077ba:	429a      	cmp	r2, r3
  4077bc:	db44      	blt.n	407848 <_svfprintf_r+0xdac>
  4077be:	9b07      	ldr	r3, [sp, #28]
  4077c0:	07d9      	lsls	r1, r3, #31
  4077c2:	d441      	bmi.n	407848 <_svfprintf_r+0xdac>
  4077c4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4077c6:	9812      	ldr	r0, [sp, #72]	; 0x48
  4077c8:	1a9a      	subs	r2, r3, r2
  4077ca:	1a1d      	subs	r5, r3, r0
  4077cc:	4295      	cmp	r5, r2
  4077ce:	bfa8      	it	ge
  4077d0:	4615      	movge	r5, r2
  4077d2:	2d00      	cmp	r5, #0
  4077d4:	dd0e      	ble.n	4077f4 <_svfprintf_r+0xd58>
  4077d6:	9926      	ldr	r1, [sp, #152]	; 0x98
  4077d8:	f8c8 5004 	str.w	r5, [r8, #4]
  4077dc:	3101      	adds	r1, #1
  4077de:	4406      	add	r6, r0
  4077e0:	442c      	add	r4, r5
  4077e2:	2907      	cmp	r1, #7
  4077e4:	f8c8 6000 	str.w	r6, [r8]
  4077e8:	9427      	str	r4, [sp, #156]	; 0x9c
  4077ea:	9126      	str	r1, [sp, #152]	; 0x98
  4077ec:	f300 823b 	bgt.w	407c66 <_svfprintf_r+0x11ca>
  4077f0:	f108 0808 	add.w	r8, r8, #8
  4077f4:	2d00      	cmp	r5, #0
  4077f6:	bfac      	ite	ge
  4077f8:	1b56      	subge	r6, r2, r5
  4077fa:	4616      	movlt	r6, r2
  4077fc:	2e00      	cmp	r6, #0
  4077fe:	f77f ab2d 	ble.w	406e5c <_svfprintf_r+0x3c0>
  407802:	2e10      	cmp	r6, #16
  407804:	9b26      	ldr	r3, [sp, #152]	; 0x98
  407806:	4db0      	ldr	r5, [pc, #704]	; (407ac8 <_svfprintf_r+0x102c>)
  407808:	ddb5      	ble.n	407776 <_svfprintf_r+0xcda>
  40780a:	4622      	mov	r2, r4
  40780c:	2710      	movs	r7, #16
  40780e:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  407812:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  407814:	e004      	b.n	407820 <_svfprintf_r+0xd84>
  407816:	f108 0808 	add.w	r8, r8, #8
  40781a:	3e10      	subs	r6, #16
  40781c:	2e10      	cmp	r6, #16
  40781e:	dda9      	ble.n	407774 <_svfprintf_r+0xcd8>
  407820:	3301      	adds	r3, #1
  407822:	3210      	adds	r2, #16
  407824:	2b07      	cmp	r3, #7
  407826:	9227      	str	r2, [sp, #156]	; 0x9c
  407828:	9326      	str	r3, [sp, #152]	; 0x98
  40782a:	e888 00a0 	stmia.w	r8, {r5, r7}
  40782e:	ddf2      	ble.n	407816 <_svfprintf_r+0xd7a>
  407830:	aa25      	add	r2, sp, #148	; 0x94
  407832:	4621      	mov	r1, r4
  407834:	4658      	mov	r0, fp
  407836:	f004 f829 	bl	40b88c <__ssprint_r>
  40783a:	2800      	cmp	r0, #0
  40783c:	f47f aa00 	bne.w	406c40 <_svfprintf_r+0x1a4>
  407840:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  407842:	9b26      	ldr	r3, [sp, #152]	; 0x98
  407844:	46c8      	mov	r8, r9
  407846:	e7e8      	b.n	40781a <_svfprintf_r+0xd7e>
  407848:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40784a:	9819      	ldr	r0, [sp, #100]	; 0x64
  40784c:	991a      	ldr	r1, [sp, #104]	; 0x68
  40784e:	f8c8 1000 	str.w	r1, [r8]
  407852:	3301      	adds	r3, #1
  407854:	4404      	add	r4, r0
  407856:	2b07      	cmp	r3, #7
  407858:	9427      	str	r4, [sp, #156]	; 0x9c
  40785a:	f8c8 0004 	str.w	r0, [r8, #4]
  40785e:	9326      	str	r3, [sp, #152]	; 0x98
  407860:	f300 81f5 	bgt.w	407c4e <_svfprintf_r+0x11b2>
  407864:	f108 0808 	add.w	r8, r8, #8
  407868:	e7ac      	b.n	4077c4 <_svfprintf_r+0xd28>
  40786a:	9b07      	ldr	r3, [sp, #28]
  40786c:	07da      	lsls	r2, r3, #31
  40786e:	f53f adfe 	bmi.w	40746e <_svfprintf_r+0x9d2>
  407872:	3701      	adds	r7, #1
  407874:	3401      	adds	r4, #1
  407876:	2301      	movs	r3, #1
  407878:	2f07      	cmp	r7, #7
  40787a:	9427      	str	r4, [sp, #156]	; 0x9c
  40787c:	9726      	str	r7, [sp, #152]	; 0x98
  40787e:	f8c8 6000 	str.w	r6, [r8]
  407882:	f8c8 3004 	str.w	r3, [r8, #4]
  407886:	f77f ae25 	ble.w	4074d4 <_svfprintf_r+0xa38>
  40788a:	e74a      	b.n	407722 <_svfprintf_r+0xc86>
  40788c:	aa25      	add	r2, sp, #148	; 0x94
  40788e:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407890:	980c      	ldr	r0, [sp, #48]	; 0x30
  407892:	f003 fffb 	bl	40b88c <__ssprint_r>
  407896:	2800      	cmp	r0, #0
  407898:	f47f a9d2 	bne.w	406c40 <_svfprintf_r+0x1a4>
  40789c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40789e:	9f26      	ldr	r7, [sp, #152]	; 0x98
  4078a0:	46c8      	mov	r8, r9
  4078a2:	e5f2      	b.n	40748a <_svfprintf_r+0x9ee>
  4078a4:	aa25      	add	r2, sp, #148	; 0x94
  4078a6:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4078a8:	980c      	ldr	r0, [sp, #48]	; 0x30
  4078aa:	f003 ffef 	bl	40b88c <__ssprint_r>
  4078ae:	2800      	cmp	r0, #0
  4078b0:	f47f a9c6 	bne.w	406c40 <_svfprintf_r+0x1a4>
  4078b4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4078b6:	9f26      	ldr	r7, [sp, #152]	; 0x98
  4078b8:	46c8      	mov	r8, r9
  4078ba:	e5f5      	b.n	4074a8 <_svfprintf_r+0xa0c>
  4078bc:	464e      	mov	r6, r9
  4078be:	f7ff b9fd 	b.w	406cbc <_svfprintf_r+0x220>
  4078c2:	aa25      	add	r2, sp, #148	; 0x94
  4078c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4078c6:	980c      	ldr	r0, [sp, #48]	; 0x30
  4078c8:	f003 ffe0 	bl	40b88c <__ssprint_r>
  4078cc:	2800      	cmp	r0, #0
  4078ce:	f47f a9b7 	bne.w	406c40 <_svfprintf_r+0x1a4>
  4078d2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4078d4:	46c8      	mov	r8, r9
  4078d6:	f7ff ba72 	b.w	406dbe <_svfprintf_r+0x322>
  4078da:	9c15      	ldr	r4, [sp, #84]	; 0x54
  4078dc:	4622      	mov	r2, r4
  4078de:	4620      	mov	r0, r4
  4078e0:	9c14      	ldr	r4, [sp, #80]	; 0x50
  4078e2:	4623      	mov	r3, r4
  4078e4:	4621      	mov	r1, r4
  4078e6:	f004 fe9f 	bl	40c628 <__aeabi_dcmpun>
  4078ea:	2800      	cmp	r0, #0
  4078ec:	f040 8286 	bne.w	407dfc <_svfprintf_r+0x1360>
  4078f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4078f2:	3301      	adds	r3, #1
  4078f4:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4078f6:	f023 0320 	bic.w	r3, r3, #32
  4078fa:	930e      	str	r3, [sp, #56]	; 0x38
  4078fc:	f000 81e2 	beq.w	407cc4 <_svfprintf_r+0x1228>
  407900:	2b47      	cmp	r3, #71	; 0x47
  407902:	f000 811e 	beq.w	407b42 <_svfprintf_r+0x10a6>
  407906:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
  40790a:	9307      	str	r3, [sp, #28]
  40790c:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40790e:	1e1f      	subs	r7, r3, #0
  407910:	9b15      	ldr	r3, [sp, #84]	; 0x54
  407912:	9308      	str	r3, [sp, #32]
  407914:	bfbb      	ittet	lt
  407916:	463b      	movlt	r3, r7
  407918:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
  40791c:	2300      	movge	r3, #0
  40791e:	232d      	movlt	r3, #45	; 0x2d
  407920:	9310      	str	r3, [sp, #64]	; 0x40
  407922:	9b11      	ldr	r3, [sp, #68]	; 0x44
  407924:	2b66      	cmp	r3, #102	; 0x66
  407926:	f000 81bb 	beq.w	407ca0 <_svfprintf_r+0x1204>
  40792a:	2b46      	cmp	r3, #70	; 0x46
  40792c:	f000 80df 	beq.w	407aee <_svfprintf_r+0x1052>
  407930:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  407932:	9a08      	ldr	r2, [sp, #32]
  407934:	2b45      	cmp	r3, #69	; 0x45
  407936:	bf0c      	ite	eq
  407938:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
  40793a:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
  40793c:	a823      	add	r0, sp, #140	; 0x8c
  40793e:	a920      	add	r1, sp, #128	; 0x80
  407940:	bf08      	it	eq
  407942:	1c5d      	addeq	r5, r3, #1
  407944:	9004      	str	r0, [sp, #16]
  407946:	9103      	str	r1, [sp, #12]
  407948:	a81f      	add	r0, sp, #124	; 0x7c
  40794a:	2102      	movs	r1, #2
  40794c:	463b      	mov	r3, r7
  40794e:	9002      	str	r0, [sp, #8]
  407950:	9501      	str	r5, [sp, #4]
  407952:	9100      	str	r1, [sp, #0]
  407954:	980c      	ldr	r0, [sp, #48]	; 0x30
  407956:	f001 faa3 	bl	408ea0 <_dtoa_r>
  40795a:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40795c:	2b67      	cmp	r3, #103	; 0x67
  40795e:	4606      	mov	r6, r0
  407960:	f040 81e0 	bne.w	407d24 <_svfprintf_r+0x1288>
  407964:	f01b 0f01 	tst.w	fp, #1
  407968:	f000 8246 	beq.w	407df8 <_svfprintf_r+0x135c>
  40796c:	1974      	adds	r4, r6, r5
  40796e:	9a16      	ldr	r2, [sp, #88]	; 0x58
  407970:	9808      	ldr	r0, [sp, #32]
  407972:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  407974:	4639      	mov	r1, r7
  407976:	f004 fe25 	bl	40c5c4 <__aeabi_dcmpeq>
  40797a:	2800      	cmp	r0, #0
  40797c:	f040 8165 	bne.w	407c4a <_svfprintf_r+0x11ae>
  407980:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  407982:	42a3      	cmp	r3, r4
  407984:	d206      	bcs.n	407994 <_svfprintf_r+0xef8>
  407986:	2130      	movs	r1, #48	; 0x30
  407988:	1c5a      	adds	r2, r3, #1
  40798a:	9223      	str	r2, [sp, #140]	; 0x8c
  40798c:	7019      	strb	r1, [r3, #0]
  40798e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  407990:	429c      	cmp	r4, r3
  407992:	d8f9      	bhi.n	407988 <_svfprintf_r+0xeec>
  407994:	1b9b      	subs	r3, r3, r6
  407996:	9313      	str	r3, [sp, #76]	; 0x4c
  407998:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40799a:	2b47      	cmp	r3, #71	; 0x47
  40799c:	f000 80e9 	beq.w	407b72 <_svfprintf_r+0x10d6>
  4079a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4079a2:	2b65      	cmp	r3, #101	; 0x65
  4079a4:	f340 81cd 	ble.w	407d42 <_svfprintf_r+0x12a6>
  4079a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4079aa:	2b66      	cmp	r3, #102	; 0x66
  4079ac:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  4079ae:	9312      	str	r3, [sp, #72]	; 0x48
  4079b0:	f000 819e 	beq.w	407cf0 <_svfprintf_r+0x1254>
  4079b4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4079b6:	9a12      	ldr	r2, [sp, #72]	; 0x48
  4079b8:	4619      	mov	r1, r3
  4079ba:	4291      	cmp	r1, r2
  4079bc:	f300 818a 	bgt.w	407cd4 <_svfprintf_r+0x1238>
  4079c0:	f01b 0f01 	tst.w	fp, #1
  4079c4:	f040 8213 	bne.w	407dee <_svfprintf_r+0x1352>
  4079c8:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  4079cc:	9308      	str	r3, [sp, #32]
  4079ce:	2367      	movs	r3, #103	; 0x67
  4079d0:	920e      	str	r2, [sp, #56]	; 0x38
  4079d2:	9311      	str	r3, [sp, #68]	; 0x44
  4079d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4079d6:	2b00      	cmp	r3, #0
  4079d8:	f040 80c4 	bne.w	407b64 <_svfprintf_r+0x10c8>
  4079dc:	930a      	str	r3, [sp, #40]	; 0x28
  4079de:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  4079e2:	f7ff b973 	b.w	406ccc <_svfprintf_r+0x230>
  4079e6:	4635      	mov	r5, r6
  4079e8:	460c      	mov	r4, r1
  4079ea:	4646      	mov	r6, r8
  4079ec:	4690      	mov	r8, r2
  4079ee:	3301      	adds	r3, #1
  4079f0:	443c      	add	r4, r7
  4079f2:	2b07      	cmp	r3, #7
  4079f4:	9427      	str	r4, [sp, #156]	; 0x9c
  4079f6:	9326      	str	r3, [sp, #152]	; 0x98
  4079f8:	e888 00a0 	stmia.w	r8, {r5, r7}
  4079fc:	f73f aed1 	bgt.w	4077a2 <_svfprintf_r+0xd06>
  407a00:	f108 0808 	add.w	r8, r8, #8
  407a04:	e6d7      	b.n	4077b6 <_svfprintf_r+0xd1a>
  407a06:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  407a08:	6813      	ldr	r3, [r2, #0]
  407a0a:	3204      	adds	r2, #4
  407a0c:	920f      	str	r2, [sp, #60]	; 0x3c
  407a0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
  407a10:	601a      	str	r2, [r3, #0]
  407a12:	f7ff b86a 	b.w	406aea <_svfprintf_r+0x4e>
  407a16:	aa25      	add	r2, sp, #148	; 0x94
  407a18:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407a1a:	980c      	ldr	r0, [sp, #48]	; 0x30
  407a1c:	f003 ff36 	bl	40b88c <__ssprint_r>
  407a20:	2800      	cmp	r0, #0
  407a22:	f47f a90d 	bne.w	406c40 <_svfprintf_r+0x1a4>
  407a26:	46c8      	mov	r8, r9
  407a28:	e48d      	b.n	407346 <_svfprintf_r+0x8aa>
  407a2a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  407a2c:	4a27      	ldr	r2, [pc, #156]	; (407acc <_svfprintf_r+0x1030>)
  407a2e:	f8c8 2000 	str.w	r2, [r8]
  407a32:	3301      	adds	r3, #1
  407a34:	3401      	adds	r4, #1
  407a36:	2201      	movs	r2, #1
  407a38:	2b07      	cmp	r3, #7
  407a3a:	9427      	str	r4, [sp, #156]	; 0x9c
  407a3c:	9326      	str	r3, [sp, #152]	; 0x98
  407a3e:	f8c8 2004 	str.w	r2, [r8, #4]
  407a42:	dc72      	bgt.n	407b2a <_svfprintf_r+0x108e>
  407a44:	f108 0808 	add.w	r8, r8, #8
  407a48:	b929      	cbnz	r1, 407a56 <_svfprintf_r+0xfba>
  407a4a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  407a4c:	b91b      	cbnz	r3, 407a56 <_svfprintf_r+0xfba>
  407a4e:	9b07      	ldr	r3, [sp, #28]
  407a50:	07d8      	lsls	r0, r3, #31
  407a52:	f57f aa03 	bpl.w	406e5c <_svfprintf_r+0x3c0>
  407a56:	9b26      	ldr	r3, [sp, #152]	; 0x98
  407a58:	9819      	ldr	r0, [sp, #100]	; 0x64
  407a5a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  407a5c:	f8c8 2000 	str.w	r2, [r8]
  407a60:	3301      	adds	r3, #1
  407a62:	4602      	mov	r2, r0
  407a64:	4422      	add	r2, r4
  407a66:	2b07      	cmp	r3, #7
  407a68:	9227      	str	r2, [sp, #156]	; 0x9c
  407a6a:	f8c8 0004 	str.w	r0, [r8, #4]
  407a6e:	9326      	str	r3, [sp, #152]	; 0x98
  407a70:	f300 818d 	bgt.w	407d8e <_svfprintf_r+0x12f2>
  407a74:	f108 0808 	add.w	r8, r8, #8
  407a78:	2900      	cmp	r1, #0
  407a7a:	f2c0 8165 	blt.w	407d48 <_svfprintf_r+0x12ac>
  407a7e:	9913      	ldr	r1, [sp, #76]	; 0x4c
  407a80:	f8c8 6000 	str.w	r6, [r8]
  407a84:	3301      	adds	r3, #1
  407a86:	188c      	adds	r4, r1, r2
  407a88:	2b07      	cmp	r3, #7
  407a8a:	9427      	str	r4, [sp, #156]	; 0x9c
  407a8c:	9326      	str	r3, [sp, #152]	; 0x98
  407a8e:	f8c8 1004 	str.w	r1, [r8, #4]
  407a92:	f77f a9e1 	ble.w	406e58 <_svfprintf_r+0x3bc>
  407a96:	e52c      	b.n	4074f2 <_svfprintf_r+0xa56>
  407a98:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  407a9a:	9909      	ldr	r1, [sp, #36]	; 0x24
  407a9c:	6813      	ldr	r3, [r2, #0]
  407a9e:	17cd      	asrs	r5, r1, #31
  407aa0:	4608      	mov	r0, r1
  407aa2:	3204      	adds	r2, #4
  407aa4:	4629      	mov	r1, r5
  407aa6:	920f      	str	r2, [sp, #60]	; 0x3c
  407aa8:	e9c3 0100 	strd	r0, r1, [r3]
  407aac:	f7ff b81d 	b.w	406aea <_svfprintf_r+0x4e>
  407ab0:	aa25      	add	r2, sp, #148	; 0x94
  407ab2:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407ab4:	980c      	ldr	r0, [sp, #48]	; 0x30
  407ab6:	f003 fee9 	bl	40b88c <__ssprint_r>
  407aba:	2800      	cmp	r0, #0
  407abc:	f47f a8c0 	bne.w	406c40 <_svfprintf_r+0x1a4>
  407ac0:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  407ac2:	46c8      	mov	r8, r9
  407ac4:	e458      	b.n	407378 <_svfprintf_r+0x8dc>
  407ac6:	bf00      	nop
  407ac8:	0040d9e0 	.word	0x0040d9e0
  407acc:	0040d9cc 	.word	0x0040d9cc
  407ad0:	2140      	movs	r1, #64	; 0x40
  407ad2:	980c      	ldr	r0, [sp, #48]	; 0x30
  407ad4:	f002 fe58 	bl	40a788 <_malloc_r>
  407ad8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  407ada:	6010      	str	r0, [r2, #0]
  407adc:	6110      	str	r0, [r2, #16]
  407ade:	2800      	cmp	r0, #0
  407ae0:	f000 81f2 	beq.w	407ec8 <_svfprintf_r+0x142c>
  407ae4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  407ae6:	2340      	movs	r3, #64	; 0x40
  407ae8:	6153      	str	r3, [r2, #20]
  407aea:	f7fe bfee 	b.w	406aca <_svfprintf_r+0x2e>
  407aee:	a823      	add	r0, sp, #140	; 0x8c
  407af0:	a920      	add	r1, sp, #128	; 0x80
  407af2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  407af4:	9004      	str	r0, [sp, #16]
  407af6:	9103      	str	r1, [sp, #12]
  407af8:	a81f      	add	r0, sp, #124	; 0x7c
  407afa:	2103      	movs	r1, #3
  407afc:	9002      	str	r0, [sp, #8]
  407afe:	9a08      	ldr	r2, [sp, #32]
  407b00:	9401      	str	r4, [sp, #4]
  407b02:	463b      	mov	r3, r7
  407b04:	9100      	str	r1, [sp, #0]
  407b06:	980c      	ldr	r0, [sp, #48]	; 0x30
  407b08:	f001 f9ca 	bl	408ea0 <_dtoa_r>
  407b0c:	4625      	mov	r5, r4
  407b0e:	4606      	mov	r6, r0
  407b10:	9b11      	ldr	r3, [sp, #68]	; 0x44
  407b12:	2b46      	cmp	r3, #70	; 0x46
  407b14:	eb06 0405 	add.w	r4, r6, r5
  407b18:	f47f af29 	bne.w	40796e <_svfprintf_r+0xed2>
  407b1c:	7833      	ldrb	r3, [r6, #0]
  407b1e:	2b30      	cmp	r3, #48	; 0x30
  407b20:	f000 8178 	beq.w	407e14 <_svfprintf_r+0x1378>
  407b24:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
  407b26:	442c      	add	r4, r5
  407b28:	e721      	b.n	40796e <_svfprintf_r+0xed2>
  407b2a:	aa25      	add	r2, sp, #148	; 0x94
  407b2c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407b2e:	980c      	ldr	r0, [sp, #48]	; 0x30
  407b30:	f003 feac 	bl	40b88c <__ssprint_r>
  407b34:	2800      	cmp	r0, #0
  407b36:	f47f a883 	bne.w	406c40 <_svfprintf_r+0x1a4>
  407b3a:	991f      	ldr	r1, [sp, #124]	; 0x7c
  407b3c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  407b3e:	46c8      	mov	r8, r9
  407b40:	e782      	b.n	407a48 <_svfprintf_r+0xfac>
  407b42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407b44:	2b00      	cmp	r3, #0
  407b46:	bf08      	it	eq
  407b48:	2301      	moveq	r3, #1
  407b4a:	930a      	str	r3, [sp, #40]	; 0x28
  407b4c:	e6db      	b.n	407906 <_svfprintf_r+0xe6a>
  407b4e:	4630      	mov	r0, r6
  407b50:	940a      	str	r4, [sp, #40]	; 0x28
  407b52:	f7fe ff35 	bl	4069c0 <strlen>
  407b56:	950f      	str	r5, [sp, #60]	; 0x3c
  407b58:	900e      	str	r0, [sp, #56]	; 0x38
  407b5a:	f8cd b01c 	str.w	fp, [sp, #28]
  407b5e:	4603      	mov	r3, r0
  407b60:	f7ff b9f9 	b.w	406f56 <_svfprintf_r+0x4ba>
  407b64:	272d      	movs	r7, #45	; 0x2d
  407b66:	2300      	movs	r3, #0
  407b68:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  407b6c:	930a      	str	r3, [sp, #40]	; 0x28
  407b6e:	f7ff b8ae 	b.w	406cce <_svfprintf_r+0x232>
  407b72:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  407b74:	9312      	str	r3, [sp, #72]	; 0x48
  407b76:	461a      	mov	r2, r3
  407b78:	3303      	adds	r3, #3
  407b7a:	db04      	blt.n	407b86 <_svfprintf_r+0x10ea>
  407b7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407b7e:	4619      	mov	r1, r3
  407b80:	4291      	cmp	r1, r2
  407b82:	f6bf af17 	bge.w	4079b4 <_svfprintf_r+0xf18>
  407b86:	9b11      	ldr	r3, [sp, #68]	; 0x44
  407b88:	3b02      	subs	r3, #2
  407b8a:	9311      	str	r3, [sp, #68]	; 0x44
  407b8c:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
  407b90:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
  407b94:	9b12      	ldr	r3, [sp, #72]	; 0x48
  407b96:	3b01      	subs	r3, #1
  407b98:	2b00      	cmp	r3, #0
  407b9a:	931f      	str	r3, [sp, #124]	; 0x7c
  407b9c:	bfbd      	ittte	lt
  407b9e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
  407ba0:	f1c3 0301 	rsblt	r3, r3, #1
  407ba4:	222d      	movlt	r2, #45	; 0x2d
  407ba6:	222b      	movge	r2, #43	; 0x2b
  407ba8:	2b09      	cmp	r3, #9
  407baa:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
  407bae:	f340 8116 	ble.w	407dde <_svfprintf_r+0x1342>
  407bb2:	f10d 0493 	add.w	r4, sp, #147	; 0x93
  407bb6:	4620      	mov	r0, r4
  407bb8:	4dab      	ldr	r5, [pc, #684]	; (407e68 <_svfprintf_r+0x13cc>)
  407bba:	e000      	b.n	407bbe <_svfprintf_r+0x1122>
  407bbc:	4610      	mov	r0, r2
  407bbe:	fb85 1203 	smull	r1, r2, r5, r3
  407bc2:	17d9      	asrs	r1, r3, #31
  407bc4:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
  407bc8:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  407bcc:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
  407bd0:	3230      	adds	r2, #48	; 0x30
  407bd2:	2909      	cmp	r1, #9
  407bd4:	f800 2c01 	strb.w	r2, [r0, #-1]
  407bd8:	460b      	mov	r3, r1
  407bda:	f100 32ff 	add.w	r2, r0, #4294967295
  407bde:	dced      	bgt.n	407bbc <_svfprintf_r+0x1120>
  407be0:	3330      	adds	r3, #48	; 0x30
  407be2:	3802      	subs	r0, #2
  407be4:	b2d9      	uxtb	r1, r3
  407be6:	4284      	cmp	r4, r0
  407be8:	f802 1c01 	strb.w	r1, [r2, #-1]
  407bec:	f240 8165 	bls.w	407eba <_svfprintf_r+0x141e>
  407bf0:	f10d 0086 	add.w	r0, sp, #134	; 0x86
  407bf4:	4613      	mov	r3, r2
  407bf6:	e001      	b.n	407bfc <_svfprintf_r+0x1160>
  407bf8:	f813 1b01 	ldrb.w	r1, [r3], #1
  407bfc:	f800 1b01 	strb.w	r1, [r0], #1
  407c00:	42a3      	cmp	r3, r4
  407c02:	d1f9      	bne.n	407bf8 <_svfprintf_r+0x115c>
  407c04:	3301      	adds	r3, #1
  407c06:	1a9b      	subs	r3, r3, r2
  407c08:	f10d 0286 	add.w	r2, sp, #134	; 0x86
  407c0c:	4413      	add	r3, r2
  407c0e:	aa21      	add	r2, sp, #132	; 0x84
  407c10:	1a9b      	subs	r3, r3, r2
  407c12:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  407c14:	931b      	str	r3, [sp, #108]	; 0x6c
  407c16:	2a01      	cmp	r2, #1
  407c18:	4413      	add	r3, r2
  407c1a:	930e      	str	r3, [sp, #56]	; 0x38
  407c1c:	f340 8119 	ble.w	407e52 <_svfprintf_r+0x13b6>
  407c20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  407c22:	9a19      	ldr	r2, [sp, #100]	; 0x64
  407c24:	4413      	add	r3, r2
  407c26:	930e      	str	r3, [sp, #56]	; 0x38
  407c28:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  407c2c:	9308      	str	r3, [sp, #32]
  407c2e:	2300      	movs	r3, #0
  407c30:	9312      	str	r3, [sp, #72]	; 0x48
  407c32:	e6cf      	b.n	4079d4 <_svfprintf_r+0xf38>
  407c34:	aa25      	add	r2, sp, #148	; 0x94
  407c36:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407c38:	980c      	ldr	r0, [sp, #48]	; 0x30
  407c3a:	f003 fe27 	bl	40b88c <__ssprint_r>
  407c3e:	2800      	cmp	r0, #0
  407c40:	f47e affe 	bne.w	406c40 <_svfprintf_r+0x1a4>
  407c44:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  407c46:	46c8      	mov	r8, r9
  407c48:	e4d7      	b.n	4075fa <_svfprintf_r+0xb5e>
  407c4a:	4623      	mov	r3, r4
  407c4c:	e6a2      	b.n	407994 <_svfprintf_r+0xef8>
  407c4e:	aa25      	add	r2, sp, #148	; 0x94
  407c50:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407c52:	980c      	ldr	r0, [sp, #48]	; 0x30
  407c54:	f003 fe1a 	bl	40b88c <__ssprint_r>
  407c58:	2800      	cmp	r0, #0
  407c5a:	f47e aff1 	bne.w	406c40 <_svfprintf_r+0x1a4>
  407c5e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  407c60:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  407c62:	46c8      	mov	r8, r9
  407c64:	e5ae      	b.n	4077c4 <_svfprintf_r+0xd28>
  407c66:	aa25      	add	r2, sp, #148	; 0x94
  407c68:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407c6a:	980c      	ldr	r0, [sp, #48]	; 0x30
  407c6c:	f003 fe0e 	bl	40b88c <__ssprint_r>
  407c70:	2800      	cmp	r0, #0
  407c72:	f47e afe5 	bne.w	406c40 <_svfprintf_r+0x1a4>
  407c76:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  407c78:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  407c7a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  407c7c:	1a9a      	subs	r2, r3, r2
  407c7e:	46c8      	mov	r8, r9
  407c80:	e5b8      	b.n	4077f4 <_svfprintf_r+0xd58>
  407c82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407c84:	9612      	str	r6, [sp, #72]	; 0x48
  407c86:	2b06      	cmp	r3, #6
  407c88:	bf28      	it	cs
  407c8a:	2306      	movcs	r3, #6
  407c8c:	960a      	str	r6, [sp, #40]	; 0x28
  407c8e:	4637      	mov	r7, r6
  407c90:	9308      	str	r3, [sp, #32]
  407c92:	950f      	str	r5, [sp, #60]	; 0x3c
  407c94:	f8cd b01c 	str.w	fp, [sp, #28]
  407c98:	930e      	str	r3, [sp, #56]	; 0x38
  407c9a:	4e74      	ldr	r6, [pc, #464]	; (407e6c <_svfprintf_r+0x13d0>)
  407c9c:	f7ff b816 	b.w	406ccc <_svfprintf_r+0x230>
  407ca0:	a823      	add	r0, sp, #140	; 0x8c
  407ca2:	a920      	add	r1, sp, #128	; 0x80
  407ca4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  407ca6:	9004      	str	r0, [sp, #16]
  407ca8:	9103      	str	r1, [sp, #12]
  407caa:	a81f      	add	r0, sp, #124	; 0x7c
  407cac:	2103      	movs	r1, #3
  407cae:	9002      	str	r0, [sp, #8]
  407cb0:	9a08      	ldr	r2, [sp, #32]
  407cb2:	9501      	str	r5, [sp, #4]
  407cb4:	463b      	mov	r3, r7
  407cb6:	9100      	str	r1, [sp, #0]
  407cb8:	980c      	ldr	r0, [sp, #48]	; 0x30
  407cba:	f001 f8f1 	bl	408ea0 <_dtoa_r>
  407cbe:	4606      	mov	r6, r0
  407cc0:	1944      	adds	r4, r0, r5
  407cc2:	e72b      	b.n	407b1c <_svfprintf_r+0x1080>
  407cc4:	2306      	movs	r3, #6
  407cc6:	930a      	str	r3, [sp, #40]	; 0x28
  407cc8:	e61d      	b.n	407906 <_svfprintf_r+0xe6a>
  407cca:	272d      	movs	r7, #45	; 0x2d
  407ccc:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  407cd0:	f7ff bacd 	b.w	40726e <_svfprintf_r+0x7d2>
  407cd4:	9a19      	ldr	r2, [sp, #100]	; 0x64
  407cd6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  407cd8:	4413      	add	r3, r2
  407cda:	9a12      	ldr	r2, [sp, #72]	; 0x48
  407cdc:	930e      	str	r3, [sp, #56]	; 0x38
  407cde:	2a00      	cmp	r2, #0
  407ce0:	f340 80b0 	ble.w	407e44 <_svfprintf_r+0x13a8>
  407ce4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  407ce8:	9308      	str	r3, [sp, #32]
  407cea:	2367      	movs	r3, #103	; 0x67
  407cec:	9311      	str	r3, [sp, #68]	; 0x44
  407cee:	e671      	b.n	4079d4 <_svfprintf_r+0xf38>
  407cf0:	2b00      	cmp	r3, #0
  407cf2:	f340 80c3 	ble.w	407e7c <_svfprintf_r+0x13e0>
  407cf6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  407cf8:	2a00      	cmp	r2, #0
  407cfa:	f040 8099 	bne.w	407e30 <_svfprintf_r+0x1394>
  407cfe:	f01b 0f01 	tst.w	fp, #1
  407d02:	f040 8095 	bne.w	407e30 <_svfprintf_r+0x1394>
  407d06:	9308      	str	r3, [sp, #32]
  407d08:	930e      	str	r3, [sp, #56]	; 0x38
  407d0a:	e663      	b.n	4079d4 <_svfprintf_r+0xf38>
  407d0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407d0e:	9308      	str	r3, [sp, #32]
  407d10:	930e      	str	r3, [sp, #56]	; 0x38
  407d12:	900a      	str	r0, [sp, #40]	; 0x28
  407d14:	950f      	str	r5, [sp, #60]	; 0x3c
  407d16:	f8cd b01c 	str.w	fp, [sp, #28]
  407d1a:	9012      	str	r0, [sp, #72]	; 0x48
  407d1c:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  407d20:	f7fe bfd4 	b.w	406ccc <_svfprintf_r+0x230>
  407d24:	9b11      	ldr	r3, [sp, #68]	; 0x44
  407d26:	2b47      	cmp	r3, #71	; 0x47
  407d28:	f47f ae20 	bne.w	40796c <_svfprintf_r+0xed0>
  407d2c:	f01b 0f01 	tst.w	fp, #1
  407d30:	f47f aeee 	bne.w	407b10 <_svfprintf_r+0x1074>
  407d34:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  407d36:	1b9b      	subs	r3, r3, r6
  407d38:	9313      	str	r3, [sp, #76]	; 0x4c
  407d3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  407d3c:	2b47      	cmp	r3, #71	; 0x47
  407d3e:	f43f af18 	beq.w	407b72 <_svfprintf_r+0x10d6>
  407d42:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  407d44:	9312      	str	r3, [sp, #72]	; 0x48
  407d46:	e721      	b.n	407b8c <_svfprintf_r+0x10f0>
  407d48:	424f      	negs	r7, r1
  407d4a:	3110      	adds	r1, #16
  407d4c:	4d48      	ldr	r5, [pc, #288]	; (407e70 <_svfprintf_r+0x13d4>)
  407d4e:	da2f      	bge.n	407db0 <_svfprintf_r+0x1314>
  407d50:	2410      	movs	r4, #16
  407d52:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  407d56:	e004      	b.n	407d62 <_svfprintf_r+0x12c6>
  407d58:	f108 0808 	add.w	r8, r8, #8
  407d5c:	3f10      	subs	r7, #16
  407d5e:	2f10      	cmp	r7, #16
  407d60:	dd26      	ble.n	407db0 <_svfprintf_r+0x1314>
  407d62:	3301      	adds	r3, #1
  407d64:	3210      	adds	r2, #16
  407d66:	2b07      	cmp	r3, #7
  407d68:	9227      	str	r2, [sp, #156]	; 0x9c
  407d6a:	9326      	str	r3, [sp, #152]	; 0x98
  407d6c:	f8c8 5000 	str.w	r5, [r8]
  407d70:	f8c8 4004 	str.w	r4, [r8, #4]
  407d74:	ddf0      	ble.n	407d58 <_svfprintf_r+0x12bc>
  407d76:	aa25      	add	r2, sp, #148	; 0x94
  407d78:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407d7a:	4658      	mov	r0, fp
  407d7c:	f003 fd86 	bl	40b88c <__ssprint_r>
  407d80:	2800      	cmp	r0, #0
  407d82:	f47e af5d 	bne.w	406c40 <_svfprintf_r+0x1a4>
  407d86:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  407d88:	9b26      	ldr	r3, [sp, #152]	; 0x98
  407d8a:	46c8      	mov	r8, r9
  407d8c:	e7e6      	b.n	407d5c <_svfprintf_r+0x12c0>
  407d8e:	aa25      	add	r2, sp, #148	; 0x94
  407d90:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407d92:	980c      	ldr	r0, [sp, #48]	; 0x30
  407d94:	f003 fd7a 	bl	40b88c <__ssprint_r>
  407d98:	2800      	cmp	r0, #0
  407d9a:	f47e af51 	bne.w	406c40 <_svfprintf_r+0x1a4>
  407d9e:	991f      	ldr	r1, [sp, #124]	; 0x7c
  407da0:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  407da2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  407da4:	46c8      	mov	r8, r9
  407da6:	e667      	b.n	407a78 <_svfprintf_r+0xfdc>
  407da8:	2000      	movs	r0, #0
  407daa:	900a      	str	r0, [sp, #40]	; 0x28
  407dac:	f7fe bed0 	b.w	406b50 <_svfprintf_r+0xb4>
  407db0:	3301      	adds	r3, #1
  407db2:	443a      	add	r2, r7
  407db4:	2b07      	cmp	r3, #7
  407db6:	e888 00a0 	stmia.w	r8, {r5, r7}
  407dba:	9227      	str	r2, [sp, #156]	; 0x9c
  407dbc:	9326      	str	r3, [sp, #152]	; 0x98
  407dbe:	f108 0808 	add.w	r8, r8, #8
  407dc2:	f77f ae5c 	ble.w	407a7e <_svfprintf_r+0xfe2>
  407dc6:	aa25      	add	r2, sp, #148	; 0x94
  407dc8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407dca:	980c      	ldr	r0, [sp, #48]	; 0x30
  407dcc:	f003 fd5e 	bl	40b88c <__ssprint_r>
  407dd0:	2800      	cmp	r0, #0
  407dd2:	f47e af35 	bne.w	406c40 <_svfprintf_r+0x1a4>
  407dd6:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  407dd8:	9b26      	ldr	r3, [sp, #152]	; 0x98
  407dda:	46c8      	mov	r8, r9
  407ddc:	e64f      	b.n	407a7e <_svfprintf_r+0xfe2>
  407dde:	3330      	adds	r3, #48	; 0x30
  407de0:	2230      	movs	r2, #48	; 0x30
  407de2:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
  407de6:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
  407dea:	ab22      	add	r3, sp, #136	; 0x88
  407dec:	e70f      	b.n	407c0e <_svfprintf_r+0x1172>
  407dee:	9b12      	ldr	r3, [sp, #72]	; 0x48
  407df0:	9a19      	ldr	r2, [sp, #100]	; 0x64
  407df2:	4413      	add	r3, r2
  407df4:	930e      	str	r3, [sp, #56]	; 0x38
  407df6:	e775      	b.n	407ce4 <_svfprintf_r+0x1248>
  407df8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  407dfa:	e5cb      	b.n	407994 <_svfprintf_r+0xef8>
  407dfc:	9b14      	ldr	r3, [sp, #80]	; 0x50
  407dfe:	4e1d      	ldr	r6, [pc, #116]	; (407e74 <_svfprintf_r+0x13d8>)
  407e00:	2b00      	cmp	r3, #0
  407e02:	bfb6      	itet	lt
  407e04:	272d      	movlt	r7, #45	; 0x2d
  407e06:	f89d 7077 	ldrbge.w	r7, [sp, #119]	; 0x77
  407e0a:	f88d 7077 	strblt.w	r7, [sp, #119]	; 0x77
  407e0e:	4b1a      	ldr	r3, [pc, #104]	; (407e78 <_svfprintf_r+0x13dc>)
  407e10:	f7ff ba2f 	b.w	407272 <_svfprintf_r+0x7d6>
  407e14:	9a16      	ldr	r2, [sp, #88]	; 0x58
  407e16:	9808      	ldr	r0, [sp, #32]
  407e18:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  407e1a:	4639      	mov	r1, r7
  407e1c:	f004 fbd2 	bl	40c5c4 <__aeabi_dcmpeq>
  407e20:	2800      	cmp	r0, #0
  407e22:	f47f ae7f 	bne.w	407b24 <_svfprintf_r+0x1088>
  407e26:	f1c5 0501 	rsb	r5, r5, #1
  407e2a:	951f      	str	r5, [sp, #124]	; 0x7c
  407e2c:	442c      	add	r4, r5
  407e2e:	e59e      	b.n	40796e <_svfprintf_r+0xed2>
  407e30:	9b12      	ldr	r3, [sp, #72]	; 0x48
  407e32:	9a19      	ldr	r2, [sp, #100]	; 0x64
  407e34:	4413      	add	r3, r2
  407e36:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  407e38:	441a      	add	r2, r3
  407e3a:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  407e3e:	920e      	str	r2, [sp, #56]	; 0x38
  407e40:	9308      	str	r3, [sp, #32]
  407e42:	e5c7      	b.n	4079d4 <_svfprintf_r+0xf38>
  407e44:	9b12      	ldr	r3, [sp, #72]	; 0x48
  407e46:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  407e48:	f1c3 0301 	rsb	r3, r3, #1
  407e4c:	441a      	add	r2, r3
  407e4e:	4613      	mov	r3, r2
  407e50:	e7d0      	b.n	407df4 <_svfprintf_r+0x1358>
  407e52:	f01b 0301 	ands.w	r3, fp, #1
  407e56:	9312      	str	r3, [sp, #72]	; 0x48
  407e58:	f47f aee2 	bne.w	407c20 <_svfprintf_r+0x1184>
  407e5c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  407e5e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  407e62:	9308      	str	r3, [sp, #32]
  407e64:	e5b6      	b.n	4079d4 <_svfprintf_r+0xf38>
  407e66:	bf00      	nop
  407e68:	66666667 	.word	0x66666667
  407e6c:	0040d9c4 	.word	0x0040d9c4
  407e70:	0040d9e0 	.word	0x0040d9e0
  407e74:	0040d998 	.word	0x0040d998
  407e78:	0040d994 	.word	0x0040d994
  407e7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407e7e:	b913      	cbnz	r3, 407e86 <_svfprintf_r+0x13ea>
  407e80:	f01b 0f01 	tst.w	fp, #1
  407e84:	d002      	beq.n	407e8c <_svfprintf_r+0x13f0>
  407e86:	9b19      	ldr	r3, [sp, #100]	; 0x64
  407e88:	3301      	adds	r3, #1
  407e8a:	e7d4      	b.n	407e36 <_svfprintf_r+0x139a>
  407e8c:	2301      	movs	r3, #1
  407e8e:	e73a      	b.n	407d06 <_svfprintf_r+0x126a>
  407e90:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  407e92:	f89a 3001 	ldrb.w	r3, [sl, #1]
  407e96:	6828      	ldr	r0, [r5, #0]
  407e98:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
  407e9c:	900a      	str	r0, [sp, #40]	; 0x28
  407e9e:	4628      	mov	r0, r5
  407ea0:	3004      	adds	r0, #4
  407ea2:	46a2      	mov	sl, r4
  407ea4:	900f      	str	r0, [sp, #60]	; 0x3c
  407ea6:	f7fe be51 	b.w	406b4c <_svfprintf_r+0xb0>
  407eaa:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  407eae:	f7ff b867 	b.w	406f80 <_svfprintf_r+0x4e4>
  407eb2:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  407eb6:	f7ff ba15 	b.w	4072e4 <_svfprintf_r+0x848>
  407eba:	f10d 0386 	add.w	r3, sp, #134	; 0x86
  407ebe:	e6a6      	b.n	407c0e <_svfprintf_r+0x1172>
  407ec0:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  407ec4:	f7ff b8eb 	b.w	40709e <_svfprintf_r+0x602>
  407ec8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  407eca:	230c      	movs	r3, #12
  407ecc:	6013      	str	r3, [r2, #0]
  407ece:	f04f 33ff 	mov.w	r3, #4294967295
  407ed2:	9309      	str	r3, [sp, #36]	; 0x24
  407ed4:	f7fe bebd 	b.w	406c52 <_svfprintf_r+0x1b6>
  407ed8:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  407edc:	f7ff b99a 	b.w	407214 <_svfprintf_r+0x778>
  407ee0:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  407ee4:	f7ff b976 	b.w	4071d4 <_svfprintf_r+0x738>
  407ee8:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  407eec:	f7ff b959 	b.w	4071a2 <_svfprintf_r+0x706>
  407ef0:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  407ef4:	f7ff b912 	b.w	40711c <_svfprintf_r+0x680>

00407ef8 <__sprint_r.part.0>:
  407ef8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407efc:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  407efe:	049c      	lsls	r4, r3, #18
  407f00:	4693      	mov	fp, r2
  407f02:	d52f      	bpl.n	407f64 <__sprint_r.part.0+0x6c>
  407f04:	6893      	ldr	r3, [r2, #8]
  407f06:	6812      	ldr	r2, [r2, #0]
  407f08:	b353      	cbz	r3, 407f60 <__sprint_r.part.0+0x68>
  407f0a:	460e      	mov	r6, r1
  407f0c:	4607      	mov	r7, r0
  407f0e:	f102 0908 	add.w	r9, r2, #8
  407f12:	e919 0420 	ldmdb	r9, {r5, sl}
  407f16:	ea5f 089a 	movs.w	r8, sl, lsr #2
  407f1a:	d017      	beq.n	407f4c <__sprint_r.part.0+0x54>
  407f1c:	3d04      	subs	r5, #4
  407f1e:	2400      	movs	r4, #0
  407f20:	e001      	b.n	407f26 <__sprint_r.part.0+0x2e>
  407f22:	45a0      	cmp	r8, r4
  407f24:	d010      	beq.n	407f48 <__sprint_r.part.0+0x50>
  407f26:	4632      	mov	r2, r6
  407f28:	f855 1f04 	ldr.w	r1, [r5, #4]!
  407f2c:	4638      	mov	r0, r7
  407f2e:	f002 f87b 	bl	40a028 <_fputwc_r>
  407f32:	1c43      	adds	r3, r0, #1
  407f34:	f104 0401 	add.w	r4, r4, #1
  407f38:	d1f3      	bne.n	407f22 <__sprint_r.part.0+0x2a>
  407f3a:	2300      	movs	r3, #0
  407f3c:	f8cb 3008 	str.w	r3, [fp, #8]
  407f40:	f8cb 3004 	str.w	r3, [fp, #4]
  407f44:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407f48:	f8db 3008 	ldr.w	r3, [fp, #8]
  407f4c:	f02a 0a03 	bic.w	sl, sl, #3
  407f50:	eba3 030a 	sub.w	r3, r3, sl
  407f54:	f8cb 3008 	str.w	r3, [fp, #8]
  407f58:	f109 0908 	add.w	r9, r9, #8
  407f5c:	2b00      	cmp	r3, #0
  407f5e:	d1d8      	bne.n	407f12 <__sprint_r.part.0+0x1a>
  407f60:	2000      	movs	r0, #0
  407f62:	e7ea      	b.n	407f3a <__sprint_r.part.0+0x42>
  407f64:	f002 f9ca 	bl	40a2fc <__sfvwrite_r>
  407f68:	2300      	movs	r3, #0
  407f6a:	f8cb 3008 	str.w	r3, [fp, #8]
  407f6e:	f8cb 3004 	str.w	r3, [fp, #4]
  407f72:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407f76:	bf00      	nop

00407f78 <_vfiprintf_r>:
  407f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407f7c:	b0ad      	sub	sp, #180	; 0xb4
  407f7e:	461d      	mov	r5, r3
  407f80:	468b      	mov	fp, r1
  407f82:	4690      	mov	r8, r2
  407f84:	9307      	str	r3, [sp, #28]
  407f86:	9006      	str	r0, [sp, #24]
  407f88:	b118      	cbz	r0, 407f92 <_vfiprintf_r+0x1a>
  407f8a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  407f8c:	2b00      	cmp	r3, #0
  407f8e:	f000 80f3 	beq.w	408178 <_vfiprintf_r+0x200>
  407f92:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  407f96:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  407f9a:	07df      	lsls	r7, r3, #31
  407f9c:	b281      	uxth	r1, r0
  407f9e:	d402      	bmi.n	407fa6 <_vfiprintf_r+0x2e>
  407fa0:	058e      	lsls	r6, r1, #22
  407fa2:	f140 80fc 	bpl.w	40819e <_vfiprintf_r+0x226>
  407fa6:	048c      	lsls	r4, r1, #18
  407fa8:	d40a      	bmi.n	407fc0 <_vfiprintf_r+0x48>
  407faa:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  407fae:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  407fb2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  407fb6:	f8ab 100c 	strh.w	r1, [fp, #12]
  407fba:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  407fbe:	b289      	uxth	r1, r1
  407fc0:	0708      	lsls	r0, r1, #28
  407fc2:	f140 80b3 	bpl.w	40812c <_vfiprintf_r+0x1b4>
  407fc6:	f8db 3010 	ldr.w	r3, [fp, #16]
  407fca:	2b00      	cmp	r3, #0
  407fcc:	f000 80ae 	beq.w	40812c <_vfiprintf_r+0x1b4>
  407fd0:	f001 031a 	and.w	r3, r1, #26
  407fd4:	2b0a      	cmp	r3, #10
  407fd6:	f000 80b5 	beq.w	408144 <_vfiprintf_r+0x1cc>
  407fda:	2300      	movs	r3, #0
  407fdc:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  407fe0:	930b      	str	r3, [sp, #44]	; 0x2c
  407fe2:	9311      	str	r3, [sp, #68]	; 0x44
  407fe4:	9310      	str	r3, [sp, #64]	; 0x40
  407fe6:	9303      	str	r3, [sp, #12]
  407fe8:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  407fec:	46ca      	mov	sl, r9
  407fee:	f8cd b010 	str.w	fp, [sp, #16]
  407ff2:	f898 3000 	ldrb.w	r3, [r8]
  407ff6:	4644      	mov	r4, r8
  407ff8:	b1fb      	cbz	r3, 40803a <_vfiprintf_r+0xc2>
  407ffa:	2b25      	cmp	r3, #37	; 0x25
  407ffc:	d102      	bne.n	408004 <_vfiprintf_r+0x8c>
  407ffe:	e01c      	b.n	40803a <_vfiprintf_r+0xc2>
  408000:	2b25      	cmp	r3, #37	; 0x25
  408002:	d003      	beq.n	40800c <_vfiprintf_r+0x94>
  408004:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  408008:	2b00      	cmp	r3, #0
  40800a:	d1f9      	bne.n	408000 <_vfiprintf_r+0x88>
  40800c:	eba4 0508 	sub.w	r5, r4, r8
  408010:	b19d      	cbz	r5, 40803a <_vfiprintf_r+0xc2>
  408012:	9b10      	ldr	r3, [sp, #64]	; 0x40
  408014:	9a11      	ldr	r2, [sp, #68]	; 0x44
  408016:	f8ca 8000 	str.w	r8, [sl]
  40801a:	3301      	adds	r3, #1
  40801c:	442a      	add	r2, r5
  40801e:	2b07      	cmp	r3, #7
  408020:	f8ca 5004 	str.w	r5, [sl, #4]
  408024:	9211      	str	r2, [sp, #68]	; 0x44
  408026:	9310      	str	r3, [sp, #64]	; 0x40
  408028:	dd7a      	ble.n	408120 <_vfiprintf_r+0x1a8>
  40802a:	2a00      	cmp	r2, #0
  40802c:	f040 84b0 	bne.w	408990 <_vfiprintf_r+0xa18>
  408030:	9b03      	ldr	r3, [sp, #12]
  408032:	9210      	str	r2, [sp, #64]	; 0x40
  408034:	442b      	add	r3, r5
  408036:	46ca      	mov	sl, r9
  408038:	9303      	str	r3, [sp, #12]
  40803a:	7823      	ldrb	r3, [r4, #0]
  40803c:	2b00      	cmp	r3, #0
  40803e:	f000 83e0 	beq.w	408802 <_vfiprintf_r+0x88a>
  408042:	2000      	movs	r0, #0
  408044:	f04f 0300 	mov.w	r3, #0
  408048:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  40804c:	f104 0801 	add.w	r8, r4, #1
  408050:	7862      	ldrb	r2, [r4, #1]
  408052:	4605      	mov	r5, r0
  408054:	4606      	mov	r6, r0
  408056:	4603      	mov	r3, r0
  408058:	f04f 34ff 	mov.w	r4, #4294967295
  40805c:	f108 0801 	add.w	r8, r8, #1
  408060:	f1a2 0120 	sub.w	r1, r2, #32
  408064:	2958      	cmp	r1, #88	; 0x58
  408066:	f200 82de 	bhi.w	408626 <_vfiprintf_r+0x6ae>
  40806a:	e8df f011 	tbh	[pc, r1, lsl #1]
  40806e:	0221      	.short	0x0221
  408070:	02dc02dc 	.word	0x02dc02dc
  408074:	02dc0229 	.word	0x02dc0229
  408078:	02dc02dc 	.word	0x02dc02dc
  40807c:	02dc02dc 	.word	0x02dc02dc
  408080:	028902dc 	.word	0x028902dc
  408084:	02dc0295 	.word	0x02dc0295
  408088:	02bd00a2 	.word	0x02bd00a2
  40808c:	019f02dc 	.word	0x019f02dc
  408090:	01a401a4 	.word	0x01a401a4
  408094:	01a401a4 	.word	0x01a401a4
  408098:	01a401a4 	.word	0x01a401a4
  40809c:	01a401a4 	.word	0x01a401a4
  4080a0:	02dc01a4 	.word	0x02dc01a4
  4080a4:	02dc02dc 	.word	0x02dc02dc
  4080a8:	02dc02dc 	.word	0x02dc02dc
  4080ac:	02dc02dc 	.word	0x02dc02dc
  4080b0:	02dc02dc 	.word	0x02dc02dc
  4080b4:	01b202dc 	.word	0x01b202dc
  4080b8:	02dc02dc 	.word	0x02dc02dc
  4080bc:	02dc02dc 	.word	0x02dc02dc
  4080c0:	02dc02dc 	.word	0x02dc02dc
  4080c4:	02dc02dc 	.word	0x02dc02dc
  4080c8:	02dc02dc 	.word	0x02dc02dc
  4080cc:	02dc0197 	.word	0x02dc0197
  4080d0:	02dc02dc 	.word	0x02dc02dc
  4080d4:	02dc02dc 	.word	0x02dc02dc
  4080d8:	02dc019b 	.word	0x02dc019b
  4080dc:	025302dc 	.word	0x025302dc
  4080e0:	02dc02dc 	.word	0x02dc02dc
  4080e4:	02dc02dc 	.word	0x02dc02dc
  4080e8:	02dc02dc 	.word	0x02dc02dc
  4080ec:	02dc02dc 	.word	0x02dc02dc
  4080f0:	02dc02dc 	.word	0x02dc02dc
  4080f4:	021b025a 	.word	0x021b025a
  4080f8:	02dc02dc 	.word	0x02dc02dc
  4080fc:	026e02dc 	.word	0x026e02dc
  408100:	02dc021b 	.word	0x02dc021b
  408104:	027302dc 	.word	0x027302dc
  408108:	01f502dc 	.word	0x01f502dc
  40810c:	02090182 	.word	0x02090182
  408110:	02dc02d7 	.word	0x02dc02d7
  408114:	02dc029a 	.word	0x02dc029a
  408118:	02dc00a7 	.word	0x02dc00a7
  40811c:	022e02dc 	.word	0x022e02dc
  408120:	f10a 0a08 	add.w	sl, sl, #8
  408124:	9b03      	ldr	r3, [sp, #12]
  408126:	442b      	add	r3, r5
  408128:	9303      	str	r3, [sp, #12]
  40812a:	e786      	b.n	40803a <_vfiprintf_r+0xc2>
  40812c:	4659      	mov	r1, fp
  40812e:	9806      	ldr	r0, [sp, #24]
  408130:	f000 fdac 	bl	408c8c <__swsetup_r>
  408134:	bb18      	cbnz	r0, 40817e <_vfiprintf_r+0x206>
  408136:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  40813a:	f001 031a 	and.w	r3, r1, #26
  40813e:	2b0a      	cmp	r3, #10
  408140:	f47f af4b 	bne.w	407fda <_vfiprintf_r+0x62>
  408144:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  408148:	2b00      	cmp	r3, #0
  40814a:	f6ff af46 	blt.w	407fda <_vfiprintf_r+0x62>
  40814e:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  408152:	07db      	lsls	r3, r3, #31
  408154:	d405      	bmi.n	408162 <_vfiprintf_r+0x1ea>
  408156:	058f      	lsls	r7, r1, #22
  408158:	d403      	bmi.n	408162 <_vfiprintf_r+0x1ea>
  40815a:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  40815e:	f002 fa91 	bl	40a684 <__retarget_lock_release_recursive>
  408162:	462b      	mov	r3, r5
  408164:	4642      	mov	r2, r8
  408166:	4659      	mov	r1, fp
  408168:	9806      	ldr	r0, [sp, #24]
  40816a:	f000 fd4d 	bl	408c08 <__sbprintf>
  40816e:	9003      	str	r0, [sp, #12]
  408170:	9803      	ldr	r0, [sp, #12]
  408172:	b02d      	add	sp, #180	; 0xb4
  408174:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408178:	f001 feb4 	bl	409ee4 <__sinit>
  40817c:	e709      	b.n	407f92 <_vfiprintf_r+0x1a>
  40817e:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  408182:	07d9      	lsls	r1, r3, #31
  408184:	d404      	bmi.n	408190 <_vfiprintf_r+0x218>
  408186:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  40818a:	059a      	lsls	r2, r3, #22
  40818c:	f140 84aa 	bpl.w	408ae4 <_vfiprintf_r+0xb6c>
  408190:	f04f 33ff 	mov.w	r3, #4294967295
  408194:	9303      	str	r3, [sp, #12]
  408196:	9803      	ldr	r0, [sp, #12]
  408198:	b02d      	add	sp, #180	; 0xb4
  40819a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40819e:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  4081a2:	f002 fa6d 	bl	40a680 <__retarget_lock_acquire_recursive>
  4081a6:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  4081aa:	b281      	uxth	r1, r0
  4081ac:	e6fb      	b.n	407fa6 <_vfiprintf_r+0x2e>
  4081ae:	4276      	negs	r6, r6
  4081b0:	9207      	str	r2, [sp, #28]
  4081b2:	f043 0304 	orr.w	r3, r3, #4
  4081b6:	f898 2000 	ldrb.w	r2, [r8]
  4081ba:	e74f      	b.n	40805c <_vfiprintf_r+0xe4>
  4081bc:	9608      	str	r6, [sp, #32]
  4081be:	069e      	lsls	r6, r3, #26
  4081c0:	f100 8450 	bmi.w	408a64 <_vfiprintf_r+0xaec>
  4081c4:	9907      	ldr	r1, [sp, #28]
  4081c6:	06dd      	lsls	r5, r3, #27
  4081c8:	460a      	mov	r2, r1
  4081ca:	f100 83ef 	bmi.w	4089ac <_vfiprintf_r+0xa34>
  4081ce:	0658      	lsls	r0, r3, #25
  4081d0:	f140 83ec 	bpl.w	4089ac <_vfiprintf_r+0xa34>
  4081d4:	880e      	ldrh	r6, [r1, #0]
  4081d6:	3104      	adds	r1, #4
  4081d8:	2700      	movs	r7, #0
  4081da:	2201      	movs	r2, #1
  4081dc:	9107      	str	r1, [sp, #28]
  4081de:	f04f 0100 	mov.w	r1, #0
  4081e2:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  4081e6:	2500      	movs	r5, #0
  4081e8:	1c61      	adds	r1, r4, #1
  4081ea:	f000 8116 	beq.w	40841a <_vfiprintf_r+0x4a2>
  4081ee:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  4081f2:	9102      	str	r1, [sp, #8]
  4081f4:	ea56 0107 	orrs.w	r1, r6, r7
  4081f8:	f040 8114 	bne.w	408424 <_vfiprintf_r+0x4ac>
  4081fc:	2c00      	cmp	r4, #0
  4081fe:	f040 835c 	bne.w	4088ba <_vfiprintf_r+0x942>
  408202:	2a00      	cmp	r2, #0
  408204:	f040 83b7 	bne.w	408976 <_vfiprintf_r+0x9fe>
  408208:	f013 0301 	ands.w	r3, r3, #1
  40820c:	9305      	str	r3, [sp, #20]
  40820e:	f000 8457 	beq.w	408ac0 <_vfiprintf_r+0xb48>
  408212:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  408216:	2330      	movs	r3, #48	; 0x30
  408218:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  40821c:	9b05      	ldr	r3, [sp, #20]
  40821e:	42a3      	cmp	r3, r4
  408220:	bfb8      	it	lt
  408222:	4623      	movlt	r3, r4
  408224:	9301      	str	r3, [sp, #4]
  408226:	b10d      	cbz	r5, 40822c <_vfiprintf_r+0x2b4>
  408228:	3301      	adds	r3, #1
  40822a:	9301      	str	r3, [sp, #4]
  40822c:	9b02      	ldr	r3, [sp, #8]
  40822e:	f013 0302 	ands.w	r3, r3, #2
  408232:	9309      	str	r3, [sp, #36]	; 0x24
  408234:	d002      	beq.n	40823c <_vfiprintf_r+0x2c4>
  408236:	9b01      	ldr	r3, [sp, #4]
  408238:	3302      	adds	r3, #2
  40823a:	9301      	str	r3, [sp, #4]
  40823c:	9b02      	ldr	r3, [sp, #8]
  40823e:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  408242:	930a      	str	r3, [sp, #40]	; 0x28
  408244:	f040 8217 	bne.w	408676 <_vfiprintf_r+0x6fe>
  408248:	9b08      	ldr	r3, [sp, #32]
  40824a:	9a01      	ldr	r2, [sp, #4]
  40824c:	1a9d      	subs	r5, r3, r2
  40824e:	2d00      	cmp	r5, #0
  408250:	f340 8211 	ble.w	408676 <_vfiprintf_r+0x6fe>
  408254:	2d10      	cmp	r5, #16
  408256:	f340 8490 	ble.w	408b7a <_vfiprintf_r+0xc02>
  40825a:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40825c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40825e:	4ec4      	ldr	r6, [pc, #784]	; (408570 <_vfiprintf_r+0x5f8>)
  408260:	46d6      	mov	lr, sl
  408262:	2710      	movs	r7, #16
  408264:	46a2      	mov	sl, r4
  408266:	4619      	mov	r1, r3
  408268:	9c06      	ldr	r4, [sp, #24]
  40826a:	e007      	b.n	40827c <_vfiprintf_r+0x304>
  40826c:	f101 0c02 	add.w	ip, r1, #2
  408270:	f10e 0e08 	add.w	lr, lr, #8
  408274:	4601      	mov	r1, r0
  408276:	3d10      	subs	r5, #16
  408278:	2d10      	cmp	r5, #16
  40827a:	dd11      	ble.n	4082a0 <_vfiprintf_r+0x328>
  40827c:	1c48      	adds	r0, r1, #1
  40827e:	3210      	adds	r2, #16
  408280:	2807      	cmp	r0, #7
  408282:	9211      	str	r2, [sp, #68]	; 0x44
  408284:	e88e 00c0 	stmia.w	lr, {r6, r7}
  408288:	9010      	str	r0, [sp, #64]	; 0x40
  40828a:	ddef      	ble.n	40826c <_vfiprintf_r+0x2f4>
  40828c:	2a00      	cmp	r2, #0
  40828e:	f040 81e4 	bne.w	40865a <_vfiprintf_r+0x6e2>
  408292:	3d10      	subs	r5, #16
  408294:	2d10      	cmp	r5, #16
  408296:	4611      	mov	r1, r2
  408298:	f04f 0c01 	mov.w	ip, #1
  40829c:	46ce      	mov	lr, r9
  40829e:	dced      	bgt.n	40827c <_vfiprintf_r+0x304>
  4082a0:	4654      	mov	r4, sl
  4082a2:	4661      	mov	r1, ip
  4082a4:	46f2      	mov	sl, lr
  4082a6:	442a      	add	r2, r5
  4082a8:	2907      	cmp	r1, #7
  4082aa:	9211      	str	r2, [sp, #68]	; 0x44
  4082ac:	f8ca 6000 	str.w	r6, [sl]
  4082b0:	f8ca 5004 	str.w	r5, [sl, #4]
  4082b4:	9110      	str	r1, [sp, #64]	; 0x40
  4082b6:	f300 82ec 	bgt.w	408892 <_vfiprintf_r+0x91a>
  4082ba:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4082be:	f10a 0a08 	add.w	sl, sl, #8
  4082c2:	1c48      	adds	r0, r1, #1
  4082c4:	2d00      	cmp	r5, #0
  4082c6:	f040 81de 	bne.w	408686 <_vfiprintf_r+0x70e>
  4082ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4082cc:	2b00      	cmp	r3, #0
  4082ce:	f000 81f8 	beq.w	4086c2 <_vfiprintf_r+0x74a>
  4082d2:	3202      	adds	r2, #2
  4082d4:	a90e      	add	r1, sp, #56	; 0x38
  4082d6:	2302      	movs	r3, #2
  4082d8:	2807      	cmp	r0, #7
  4082da:	9211      	str	r2, [sp, #68]	; 0x44
  4082dc:	9010      	str	r0, [sp, #64]	; 0x40
  4082de:	e88a 000a 	stmia.w	sl, {r1, r3}
  4082e2:	f340 81ea 	ble.w	4086ba <_vfiprintf_r+0x742>
  4082e6:	2a00      	cmp	r2, #0
  4082e8:	f040 838c 	bne.w	408a04 <_vfiprintf_r+0xa8c>
  4082ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4082ee:	2b80      	cmp	r3, #128	; 0x80
  4082f0:	f04f 0001 	mov.w	r0, #1
  4082f4:	4611      	mov	r1, r2
  4082f6:	46ca      	mov	sl, r9
  4082f8:	f040 81e7 	bne.w	4086ca <_vfiprintf_r+0x752>
  4082fc:	9b08      	ldr	r3, [sp, #32]
  4082fe:	9d01      	ldr	r5, [sp, #4]
  408300:	1b5e      	subs	r6, r3, r5
  408302:	2e00      	cmp	r6, #0
  408304:	f340 81e1 	ble.w	4086ca <_vfiprintf_r+0x752>
  408308:	2e10      	cmp	r6, #16
  40830a:	4d9a      	ldr	r5, [pc, #616]	; (408574 <_vfiprintf_r+0x5fc>)
  40830c:	f340 8450 	ble.w	408bb0 <_vfiprintf_r+0xc38>
  408310:	46d4      	mov	ip, sl
  408312:	2710      	movs	r7, #16
  408314:	46a2      	mov	sl, r4
  408316:	9c06      	ldr	r4, [sp, #24]
  408318:	e007      	b.n	40832a <_vfiprintf_r+0x3b2>
  40831a:	f101 0e02 	add.w	lr, r1, #2
  40831e:	f10c 0c08 	add.w	ip, ip, #8
  408322:	4601      	mov	r1, r0
  408324:	3e10      	subs	r6, #16
  408326:	2e10      	cmp	r6, #16
  408328:	dd11      	ble.n	40834e <_vfiprintf_r+0x3d6>
  40832a:	1c48      	adds	r0, r1, #1
  40832c:	3210      	adds	r2, #16
  40832e:	2807      	cmp	r0, #7
  408330:	9211      	str	r2, [sp, #68]	; 0x44
  408332:	e88c 00a0 	stmia.w	ip, {r5, r7}
  408336:	9010      	str	r0, [sp, #64]	; 0x40
  408338:	ddef      	ble.n	40831a <_vfiprintf_r+0x3a2>
  40833a:	2a00      	cmp	r2, #0
  40833c:	f040 829d 	bne.w	40887a <_vfiprintf_r+0x902>
  408340:	3e10      	subs	r6, #16
  408342:	2e10      	cmp	r6, #16
  408344:	f04f 0e01 	mov.w	lr, #1
  408348:	4611      	mov	r1, r2
  40834a:	46cc      	mov	ip, r9
  40834c:	dced      	bgt.n	40832a <_vfiprintf_r+0x3b2>
  40834e:	4654      	mov	r4, sl
  408350:	46e2      	mov	sl, ip
  408352:	4432      	add	r2, r6
  408354:	f1be 0f07 	cmp.w	lr, #7
  408358:	9211      	str	r2, [sp, #68]	; 0x44
  40835a:	e88a 0060 	stmia.w	sl, {r5, r6}
  40835e:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  408362:	f300 8369 	bgt.w	408a38 <_vfiprintf_r+0xac0>
  408366:	f10a 0a08 	add.w	sl, sl, #8
  40836a:	f10e 0001 	add.w	r0, lr, #1
  40836e:	4671      	mov	r1, lr
  408370:	e1ab      	b.n	4086ca <_vfiprintf_r+0x752>
  408372:	9608      	str	r6, [sp, #32]
  408374:	f013 0220 	ands.w	r2, r3, #32
  408378:	f040 838c 	bne.w	408a94 <_vfiprintf_r+0xb1c>
  40837c:	f013 0110 	ands.w	r1, r3, #16
  408380:	f040 831a 	bne.w	4089b8 <_vfiprintf_r+0xa40>
  408384:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  408388:	f000 8316 	beq.w	4089b8 <_vfiprintf_r+0xa40>
  40838c:	9807      	ldr	r0, [sp, #28]
  40838e:	460a      	mov	r2, r1
  408390:	4601      	mov	r1, r0
  408392:	3104      	adds	r1, #4
  408394:	8806      	ldrh	r6, [r0, #0]
  408396:	9107      	str	r1, [sp, #28]
  408398:	2700      	movs	r7, #0
  40839a:	e720      	b.n	4081de <_vfiprintf_r+0x266>
  40839c:	9608      	str	r6, [sp, #32]
  40839e:	f043 0310 	orr.w	r3, r3, #16
  4083a2:	e7e7      	b.n	408374 <_vfiprintf_r+0x3fc>
  4083a4:	9608      	str	r6, [sp, #32]
  4083a6:	f043 0310 	orr.w	r3, r3, #16
  4083aa:	e708      	b.n	4081be <_vfiprintf_r+0x246>
  4083ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4083b0:	f898 2000 	ldrb.w	r2, [r8]
  4083b4:	e652      	b.n	40805c <_vfiprintf_r+0xe4>
  4083b6:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4083ba:	2600      	movs	r6, #0
  4083bc:	f818 2b01 	ldrb.w	r2, [r8], #1
  4083c0:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  4083c4:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  4083c8:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4083cc:	2909      	cmp	r1, #9
  4083ce:	d9f5      	bls.n	4083bc <_vfiprintf_r+0x444>
  4083d0:	e646      	b.n	408060 <_vfiprintf_r+0xe8>
  4083d2:	9608      	str	r6, [sp, #32]
  4083d4:	2800      	cmp	r0, #0
  4083d6:	f040 8408 	bne.w	408bea <_vfiprintf_r+0xc72>
  4083da:	f043 0310 	orr.w	r3, r3, #16
  4083de:	069e      	lsls	r6, r3, #26
  4083e0:	f100 834c 	bmi.w	408a7c <_vfiprintf_r+0xb04>
  4083e4:	06dd      	lsls	r5, r3, #27
  4083e6:	f100 82f3 	bmi.w	4089d0 <_vfiprintf_r+0xa58>
  4083ea:	0658      	lsls	r0, r3, #25
  4083ec:	f140 82f0 	bpl.w	4089d0 <_vfiprintf_r+0xa58>
  4083f0:	9d07      	ldr	r5, [sp, #28]
  4083f2:	f9b5 6000 	ldrsh.w	r6, [r5]
  4083f6:	462a      	mov	r2, r5
  4083f8:	17f7      	asrs	r7, r6, #31
  4083fa:	3204      	adds	r2, #4
  4083fc:	4630      	mov	r0, r6
  4083fe:	4639      	mov	r1, r7
  408400:	9207      	str	r2, [sp, #28]
  408402:	2800      	cmp	r0, #0
  408404:	f171 0200 	sbcs.w	r2, r1, #0
  408408:	f2c0 835d 	blt.w	408ac6 <_vfiprintf_r+0xb4e>
  40840c:	1c61      	adds	r1, r4, #1
  40840e:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  408412:	f04f 0201 	mov.w	r2, #1
  408416:	f47f aeea 	bne.w	4081ee <_vfiprintf_r+0x276>
  40841a:	ea56 0107 	orrs.w	r1, r6, r7
  40841e:	f000 824d 	beq.w	4088bc <_vfiprintf_r+0x944>
  408422:	9302      	str	r3, [sp, #8]
  408424:	2a01      	cmp	r2, #1
  408426:	f000 828c 	beq.w	408942 <_vfiprintf_r+0x9ca>
  40842a:	2a02      	cmp	r2, #2
  40842c:	f040 825c 	bne.w	4088e8 <_vfiprintf_r+0x970>
  408430:	980b      	ldr	r0, [sp, #44]	; 0x2c
  408432:	46cb      	mov	fp, r9
  408434:	0933      	lsrs	r3, r6, #4
  408436:	f006 010f 	and.w	r1, r6, #15
  40843a:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  40843e:	093a      	lsrs	r2, r7, #4
  408440:	461e      	mov	r6, r3
  408442:	4617      	mov	r7, r2
  408444:	5c43      	ldrb	r3, [r0, r1]
  408446:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  40844a:	ea56 0307 	orrs.w	r3, r6, r7
  40844e:	d1f1      	bne.n	408434 <_vfiprintf_r+0x4bc>
  408450:	eba9 030b 	sub.w	r3, r9, fp
  408454:	9305      	str	r3, [sp, #20]
  408456:	e6e1      	b.n	40821c <_vfiprintf_r+0x2a4>
  408458:	2800      	cmp	r0, #0
  40845a:	f040 83c0 	bne.w	408bde <_vfiprintf_r+0xc66>
  40845e:	0699      	lsls	r1, r3, #26
  408460:	f100 8367 	bmi.w	408b32 <_vfiprintf_r+0xbba>
  408464:	06da      	lsls	r2, r3, #27
  408466:	f100 80f1 	bmi.w	40864c <_vfiprintf_r+0x6d4>
  40846a:	065b      	lsls	r3, r3, #25
  40846c:	f140 80ee 	bpl.w	40864c <_vfiprintf_r+0x6d4>
  408470:	9a07      	ldr	r2, [sp, #28]
  408472:	6813      	ldr	r3, [r2, #0]
  408474:	3204      	adds	r2, #4
  408476:	9207      	str	r2, [sp, #28]
  408478:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  40847c:	801a      	strh	r2, [r3, #0]
  40847e:	e5b8      	b.n	407ff2 <_vfiprintf_r+0x7a>
  408480:	9807      	ldr	r0, [sp, #28]
  408482:	4a3d      	ldr	r2, [pc, #244]	; (408578 <_vfiprintf_r+0x600>)
  408484:	9608      	str	r6, [sp, #32]
  408486:	920b      	str	r2, [sp, #44]	; 0x2c
  408488:	6806      	ldr	r6, [r0, #0]
  40848a:	2278      	movs	r2, #120	; 0x78
  40848c:	2130      	movs	r1, #48	; 0x30
  40848e:	3004      	adds	r0, #4
  408490:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  408494:	f043 0302 	orr.w	r3, r3, #2
  408498:	9007      	str	r0, [sp, #28]
  40849a:	2700      	movs	r7, #0
  40849c:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  4084a0:	2202      	movs	r2, #2
  4084a2:	e69c      	b.n	4081de <_vfiprintf_r+0x266>
  4084a4:	9608      	str	r6, [sp, #32]
  4084a6:	2800      	cmp	r0, #0
  4084a8:	d099      	beq.n	4083de <_vfiprintf_r+0x466>
  4084aa:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4084ae:	e796      	b.n	4083de <_vfiprintf_r+0x466>
  4084b0:	f898 2000 	ldrb.w	r2, [r8]
  4084b4:	2d00      	cmp	r5, #0
  4084b6:	f47f add1 	bne.w	40805c <_vfiprintf_r+0xe4>
  4084ba:	2001      	movs	r0, #1
  4084bc:	2520      	movs	r5, #32
  4084be:	e5cd      	b.n	40805c <_vfiprintf_r+0xe4>
  4084c0:	f043 0301 	orr.w	r3, r3, #1
  4084c4:	f898 2000 	ldrb.w	r2, [r8]
  4084c8:	e5c8      	b.n	40805c <_vfiprintf_r+0xe4>
  4084ca:	9608      	str	r6, [sp, #32]
  4084cc:	2800      	cmp	r0, #0
  4084ce:	f040 8393 	bne.w	408bf8 <_vfiprintf_r+0xc80>
  4084d2:	4929      	ldr	r1, [pc, #164]	; (408578 <_vfiprintf_r+0x600>)
  4084d4:	910b      	str	r1, [sp, #44]	; 0x2c
  4084d6:	069f      	lsls	r7, r3, #26
  4084d8:	f100 82e8 	bmi.w	408aac <_vfiprintf_r+0xb34>
  4084dc:	9807      	ldr	r0, [sp, #28]
  4084de:	06de      	lsls	r6, r3, #27
  4084e0:	4601      	mov	r1, r0
  4084e2:	f100 8270 	bmi.w	4089c6 <_vfiprintf_r+0xa4e>
  4084e6:	065d      	lsls	r5, r3, #25
  4084e8:	f140 826d 	bpl.w	4089c6 <_vfiprintf_r+0xa4e>
  4084ec:	3104      	adds	r1, #4
  4084ee:	8806      	ldrh	r6, [r0, #0]
  4084f0:	9107      	str	r1, [sp, #28]
  4084f2:	2700      	movs	r7, #0
  4084f4:	07d8      	lsls	r0, r3, #31
  4084f6:	f140 8222 	bpl.w	40893e <_vfiprintf_r+0x9c6>
  4084fa:	ea56 0107 	orrs.w	r1, r6, r7
  4084fe:	f000 821e 	beq.w	40893e <_vfiprintf_r+0x9c6>
  408502:	2130      	movs	r1, #48	; 0x30
  408504:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  408508:	f043 0302 	orr.w	r3, r3, #2
  40850c:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  408510:	2202      	movs	r2, #2
  408512:	e664      	b.n	4081de <_vfiprintf_r+0x266>
  408514:	9608      	str	r6, [sp, #32]
  408516:	2800      	cmp	r0, #0
  408518:	f040 836b 	bne.w	408bf2 <_vfiprintf_r+0xc7a>
  40851c:	4917      	ldr	r1, [pc, #92]	; (40857c <_vfiprintf_r+0x604>)
  40851e:	910b      	str	r1, [sp, #44]	; 0x2c
  408520:	e7d9      	b.n	4084d6 <_vfiprintf_r+0x55e>
  408522:	9907      	ldr	r1, [sp, #28]
  408524:	9608      	str	r6, [sp, #32]
  408526:	680a      	ldr	r2, [r1, #0]
  408528:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  40852c:	f04f 0000 	mov.w	r0, #0
  408530:	460a      	mov	r2, r1
  408532:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  408536:	3204      	adds	r2, #4
  408538:	2001      	movs	r0, #1
  40853a:	9001      	str	r0, [sp, #4]
  40853c:	9207      	str	r2, [sp, #28]
  40853e:	9005      	str	r0, [sp, #20]
  408540:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  408544:	9302      	str	r3, [sp, #8]
  408546:	2400      	movs	r4, #0
  408548:	e670      	b.n	40822c <_vfiprintf_r+0x2b4>
  40854a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40854e:	f898 2000 	ldrb.w	r2, [r8]
  408552:	e583      	b.n	40805c <_vfiprintf_r+0xe4>
  408554:	f898 2000 	ldrb.w	r2, [r8]
  408558:	2a6c      	cmp	r2, #108	; 0x6c
  40855a:	bf03      	ittte	eq
  40855c:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  408560:	f043 0320 	orreq.w	r3, r3, #32
  408564:	f108 0801 	addeq.w	r8, r8, #1
  408568:	f043 0310 	orrne.w	r3, r3, #16
  40856c:	e576      	b.n	40805c <_vfiprintf_r+0xe4>
  40856e:	bf00      	nop
  408570:	0040d9f0 	.word	0x0040d9f0
  408574:	0040da00 	.word	0x0040da00
  408578:	0040d9b0 	.word	0x0040d9b0
  40857c:	0040d99c 	.word	0x0040d99c
  408580:	9907      	ldr	r1, [sp, #28]
  408582:	680e      	ldr	r6, [r1, #0]
  408584:	460a      	mov	r2, r1
  408586:	2e00      	cmp	r6, #0
  408588:	f102 0204 	add.w	r2, r2, #4
  40858c:	f6ff ae0f 	blt.w	4081ae <_vfiprintf_r+0x236>
  408590:	9207      	str	r2, [sp, #28]
  408592:	f898 2000 	ldrb.w	r2, [r8]
  408596:	e561      	b.n	40805c <_vfiprintf_r+0xe4>
  408598:	f898 2000 	ldrb.w	r2, [r8]
  40859c:	2001      	movs	r0, #1
  40859e:	252b      	movs	r5, #43	; 0x2b
  4085a0:	e55c      	b.n	40805c <_vfiprintf_r+0xe4>
  4085a2:	9907      	ldr	r1, [sp, #28]
  4085a4:	9608      	str	r6, [sp, #32]
  4085a6:	f8d1 b000 	ldr.w	fp, [r1]
  4085aa:	f04f 0200 	mov.w	r2, #0
  4085ae:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  4085b2:	1d0e      	adds	r6, r1, #4
  4085b4:	f1bb 0f00 	cmp.w	fp, #0
  4085b8:	f000 82e5 	beq.w	408b86 <_vfiprintf_r+0xc0e>
  4085bc:	1c67      	adds	r7, r4, #1
  4085be:	f000 82c4 	beq.w	408b4a <_vfiprintf_r+0xbd2>
  4085c2:	4622      	mov	r2, r4
  4085c4:	2100      	movs	r1, #0
  4085c6:	4658      	mov	r0, fp
  4085c8:	9301      	str	r3, [sp, #4]
  4085ca:	f002 fba9 	bl	40ad20 <memchr>
  4085ce:	9b01      	ldr	r3, [sp, #4]
  4085d0:	2800      	cmp	r0, #0
  4085d2:	f000 82e5 	beq.w	408ba0 <_vfiprintf_r+0xc28>
  4085d6:	eba0 020b 	sub.w	r2, r0, fp
  4085da:	9205      	str	r2, [sp, #20]
  4085dc:	9607      	str	r6, [sp, #28]
  4085de:	9302      	str	r3, [sp, #8]
  4085e0:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4085e4:	2400      	movs	r4, #0
  4085e6:	e619      	b.n	40821c <_vfiprintf_r+0x2a4>
  4085e8:	f898 2000 	ldrb.w	r2, [r8]
  4085ec:	2a2a      	cmp	r2, #42	; 0x2a
  4085ee:	f108 0701 	add.w	r7, r8, #1
  4085f2:	f000 82e9 	beq.w	408bc8 <_vfiprintf_r+0xc50>
  4085f6:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4085fa:	2909      	cmp	r1, #9
  4085fc:	46b8      	mov	r8, r7
  4085fe:	f04f 0400 	mov.w	r4, #0
  408602:	f63f ad2d 	bhi.w	408060 <_vfiprintf_r+0xe8>
  408606:	f818 2b01 	ldrb.w	r2, [r8], #1
  40860a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  40860e:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  408612:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  408616:	2909      	cmp	r1, #9
  408618:	d9f5      	bls.n	408606 <_vfiprintf_r+0x68e>
  40861a:	e521      	b.n	408060 <_vfiprintf_r+0xe8>
  40861c:	f043 0320 	orr.w	r3, r3, #32
  408620:	f898 2000 	ldrb.w	r2, [r8]
  408624:	e51a      	b.n	40805c <_vfiprintf_r+0xe4>
  408626:	9608      	str	r6, [sp, #32]
  408628:	2800      	cmp	r0, #0
  40862a:	f040 82db 	bne.w	408be4 <_vfiprintf_r+0xc6c>
  40862e:	2a00      	cmp	r2, #0
  408630:	f000 80e7 	beq.w	408802 <_vfiprintf_r+0x88a>
  408634:	2101      	movs	r1, #1
  408636:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  40863a:	f04f 0200 	mov.w	r2, #0
  40863e:	9101      	str	r1, [sp, #4]
  408640:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  408644:	9105      	str	r1, [sp, #20]
  408646:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  40864a:	e77b      	b.n	408544 <_vfiprintf_r+0x5cc>
  40864c:	9a07      	ldr	r2, [sp, #28]
  40864e:	6813      	ldr	r3, [r2, #0]
  408650:	3204      	adds	r2, #4
  408652:	9207      	str	r2, [sp, #28]
  408654:	9a03      	ldr	r2, [sp, #12]
  408656:	601a      	str	r2, [r3, #0]
  408658:	e4cb      	b.n	407ff2 <_vfiprintf_r+0x7a>
  40865a:	aa0f      	add	r2, sp, #60	; 0x3c
  40865c:	9904      	ldr	r1, [sp, #16]
  40865e:	4620      	mov	r0, r4
  408660:	f7ff fc4a 	bl	407ef8 <__sprint_r.part.0>
  408664:	2800      	cmp	r0, #0
  408666:	f040 8139 	bne.w	4088dc <_vfiprintf_r+0x964>
  40866a:	9910      	ldr	r1, [sp, #64]	; 0x40
  40866c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40866e:	f101 0c01 	add.w	ip, r1, #1
  408672:	46ce      	mov	lr, r9
  408674:	e5ff      	b.n	408276 <_vfiprintf_r+0x2fe>
  408676:	9910      	ldr	r1, [sp, #64]	; 0x40
  408678:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40867a:	1c48      	adds	r0, r1, #1
  40867c:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  408680:	2d00      	cmp	r5, #0
  408682:	f43f ae22 	beq.w	4082ca <_vfiprintf_r+0x352>
  408686:	3201      	adds	r2, #1
  408688:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  40868c:	2101      	movs	r1, #1
  40868e:	2807      	cmp	r0, #7
  408690:	9211      	str	r2, [sp, #68]	; 0x44
  408692:	9010      	str	r0, [sp, #64]	; 0x40
  408694:	f8ca 5000 	str.w	r5, [sl]
  408698:	f8ca 1004 	str.w	r1, [sl, #4]
  40869c:	f340 8108 	ble.w	4088b0 <_vfiprintf_r+0x938>
  4086a0:	2a00      	cmp	r2, #0
  4086a2:	f040 81bc 	bne.w	408a1e <_vfiprintf_r+0xaa6>
  4086a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4086a8:	2b00      	cmp	r3, #0
  4086aa:	f43f ae1f 	beq.w	4082ec <_vfiprintf_r+0x374>
  4086ae:	ab0e      	add	r3, sp, #56	; 0x38
  4086b0:	2202      	movs	r2, #2
  4086b2:	4608      	mov	r0, r1
  4086b4:	931c      	str	r3, [sp, #112]	; 0x70
  4086b6:	921d      	str	r2, [sp, #116]	; 0x74
  4086b8:	46ca      	mov	sl, r9
  4086ba:	4601      	mov	r1, r0
  4086bc:	f10a 0a08 	add.w	sl, sl, #8
  4086c0:	3001      	adds	r0, #1
  4086c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4086c4:	2b80      	cmp	r3, #128	; 0x80
  4086c6:	f43f ae19 	beq.w	4082fc <_vfiprintf_r+0x384>
  4086ca:	9b05      	ldr	r3, [sp, #20]
  4086cc:	1ae4      	subs	r4, r4, r3
  4086ce:	2c00      	cmp	r4, #0
  4086d0:	dd2e      	ble.n	408730 <_vfiprintf_r+0x7b8>
  4086d2:	2c10      	cmp	r4, #16
  4086d4:	4db3      	ldr	r5, [pc, #716]	; (4089a4 <_vfiprintf_r+0xa2c>)
  4086d6:	dd1e      	ble.n	408716 <_vfiprintf_r+0x79e>
  4086d8:	46d6      	mov	lr, sl
  4086da:	2610      	movs	r6, #16
  4086dc:	9f06      	ldr	r7, [sp, #24]
  4086de:	f8dd a010 	ldr.w	sl, [sp, #16]
  4086e2:	e006      	b.n	4086f2 <_vfiprintf_r+0x77a>
  4086e4:	1c88      	adds	r0, r1, #2
  4086e6:	f10e 0e08 	add.w	lr, lr, #8
  4086ea:	4619      	mov	r1, r3
  4086ec:	3c10      	subs	r4, #16
  4086ee:	2c10      	cmp	r4, #16
  4086f0:	dd10      	ble.n	408714 <_vfiprintf_r+0x79c>
  4086f2:	1c4b      	adds	r3, r1, #1
  4086f4:	3210      	adds	r2, #16
  4086f6:	2b07      	cmp	r3, #7
  4086f8:	9211      	str	r2, [sp, #68]	; 0x44
  4086fa:	e88e 0060 	stmia.w	lr, {r5, r6}
  4086fe:	9310      	str	r3, [sp, #64]	; 0x40
  408700:	ddf0      	ble.n	4086e4 <_vfiprintf_r+0x76c>
  408702:	2a00      	cmp	r2, #0
  408704:	d165      	bne.n	4087d2 <_vfiprintf_r+0x85a>
  408706:	3c10      	subs	r4, #16
  408708:	2c10      	cmp	r4, #16
  40870a:	f04f 0001 	mov.w	r0, #1
  40870e:	4611      	mov	r1, r2
  408710:	46ce      	mov	lr, r9
  408712:	dcee      	bgt.n	4086f2 <_vfiprintf_r+0x77a>
  408714:	46f2      	mov	sl, lr
  408716:	4422      	add	r2, r4
  408718:	2807      	cmp	r0, #7
  40871a:	9211      	str	r2, [sp, #68]	; 0x44
  40871c:	f8ca 5000 	str.w	r5, [sl]
  408720:	f8ca 4004 	str.w	r4, [sl, #4]
  408724:	9010      	str	r0, [sp, #64]	; 0x40
  408726:	f300 8085 	bgt.w	408834 <_vfiprintf_r+0x8bc>
  40872a:	f10a 0a08 	add.w	sl, sl, #8
  40872e:	3001      	adds	r0, #1
  408730:	9905      	ldr	r1, [sp, #20]
  408732:	f8ca b000 	str.w	fp, [sl]
  408736:	440a      	add	r2, r1
  408738:	2807      	cmp	r0, #7
  40873a:	9211      	str	r2, [sp, #68]	; 0x44
  40873c:	f8ca 1004 	str.w	r1, [sl, #4]
  408740:	9010      	str	r0, [sp, #64]	; 0x40
  408742:	f340 8082 	ble.w	40884a <_vfiprintf_r+0x8d2>
  408746:	2a00      	cmp	r2, #0
  408748:	f040 8118 	bne.w	40897c <_vfiprintf_r+0xa04>
  40874c:	9b02      	ldr	r3, [sp, #8]
  40874e:	9210      	str	r2, [sp, #64]	; 0x40
  408750:	0758      	lsls	r0, r3, #29
  408752:	d535      	bpl.n	4087c0 <_vfiprintf_r+0x848>
  408754:	9b08      	ldr	r3, [sp, #32]
  408756:	9901      	ldr	r1, [sp, #4]
  408758:	1a5c      	subs	r4, r3, r1
  40875a:	2c00      	cmp	r4, #0
  40875c:	f340 80e7 	ble.w	40892e <_vfiprintf_r+0x9b6>
  408760:	46ca      	mov	sl, r9
  408762:	2c10      	cmp	r4, #16
  408764:	f340 8218 	ble.w	408b98 <_vfiprintf_r+0xc20>
  408768:	9910      	ldr	r1, [sp, #64]	; 0x40
  40876a:	4e8f      	ldr	r6, [pc, #572]	; (4089a8 <_vfiprintf_r+0xa30>)
  40876c:	9f06      	ldr	r7, [sp, #24]
  40876e:	f8dd b010 	ldr.w	fp, [sp, #16]
  408772:	2510      	movs	r5, #16
  408774:	e006      	b.n	408784 <_vfiprintf_r+0x80c>
  408776:	1c88      	adds	r0, r1, #2
  408778:	f10a 0a08 	add.w	sl, sl, #8
  40877c:	4619      	mov	r1, r3
  40877e:	3c10      	subs	r4, #16
  408780:	2c10      	cmp	r4, #16
  408782:	dd11      	ble.n	4087a8 <_vfiprintf_r+0x830>
  408784:	1c4b      	adds	r3, r1, #1
  408786:	3210      	adds	r2, #16
  408788:	2b07      	cmp	r3, #7
  40878a:	9211      	str	r2, [sp, #68]	; 0x44
  40878c:	f8ca 6000 	str.w	r6, [sl]
  408790:	f8ca 5004 	str.w	r5, [sl, #4]
  408794:	9310      	str	r3, [sp, #64]	; 0x40
  408796:	ddee      	ble.n	408776 <_vfiprintf_r+0x7fe>
  408798:	bb42      	cbnz	r2, 4087ec <_vfiprintf_r+0x874>
  40879a:	3c10      	subs	r4, #16
  40879c:	2c10      	cmp	r4, #16
  40879e:	f04f 0001 	mov.w	r0, #1
  4087a2:	4611      	mov	r1, r2
  4087a4:	46ca      	mov	sl, r9
  4087a6:	dced      	bgt.n	408784 <_vfiprintf_r+0x80c>
  4087a8:	4422      	add	r2, r4
  4087aa:	2807      	cmp	r0, #7
  4087ac:	9211      	str	r2, [sp, #68]	; 0x44
  4087ae:	f8ca 6000 	str.w	r6, [sl]
  4087b2:	f8ca 4004 	str.w	r4, [sl, #4]
  4087b6:	9010      	str	r0, [sp, #64]	; 0x40
  4087b8:	dd51      	ble.n	40885e <_vfiprintf_r+0x8e6>
  4087ba:	2a00      	cmp	r2, #0
  4087bc:	f040 819b 	bne.w	408af6 <_vfiprintf_r+0xb7e>
  4087c0:	9b03      	ldr	r3, [sp, #12]
  4087c2:	9a08      	ldr	r2, [sp, #32]
  4087c4:	9901      	ldr	r1, [sp, #4]
  4087c6:	428a      	cmp	r2, r1
  4087c8:	bfac      	ite	ge
  4087ca:	189b      	addge	r3, r3, r2
  4087cc:	185b      	addlt	r3, r3, r1
  4087ce:	9303      	str	r3, [sp, #12]
  4087d0:	e04e      	b.n	408870 <_vfiprintf_r+0x8f8>
  4087d2:	aa0f      	add	r2, sp, #60	; 0x3c
  4087d4:	4651      	mov	r1, sl
  4087d6:	4638      	mov	r0, r7
  4087d8:	f7ff fb8e 	bl	407ef8 <__sprint_r.part.0>
  4087dc:	2800      	cmp	r0, #0
  4087de:	f040 813f 	bne.w	408a60 <_vfiprintf_r+0xae8>
  4087e2:	9910      	ldr	r1, [sp, #64]	; 0x40
  4087e4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4087e6:	1c48      	adds	r0, r1, #1
  4087e8:	46ce      	mov	lr, r9
  4087ea:	e77f      	b.n	4086ec <_vfiprintf_r+0x774>
  4087ec:	aa0f      	add	r2, sp, #60	; 0x3c
  4087ee:	4659      	mov	r1, fp
  4087f0:	4638      	mov	r0, r7
  4087f2:	f7ff fb81 	bl	407ef8 <__sprint_r.part.0>
  4087f6:	b960      	cbnz	r0, 408812 <_vfiprintf_r+0x89a>
  4087f8:	9910      	ldr	r1, [sp, #64]	; 0x40
  4087fa:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4087fc:	1c48      	adds	r0, r1, #1
  4087fe:	46ca      	mov	sl, r9
  408800:	e7bd      	b.n	40877e <_vfiprintf_r+0x806>
  408802:	9b11      	ldr	r3, [sp, #68]	; 0x44
  408804:	f8dd b010 	ldr.w	fp, [sp, #16]
  408808:	2b00      	cmp	r3, #0
  40880a:	f040 81d4 	bne.w	408bb6 <_vfiprintf_r+0xc3e>
  40880e:	2300      	movs	r3, #0
  408810:	9310      	str	r3, [sp, #64]	; 0x40
  408812:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  408816:	f013 0f01 	tst.w	r3, #1
  40881a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  40881e:	d102      	bne.n	408826 <_vfiprintf_r+0x8ae>
  408820:	059a      	lsls	r2, r3, #22
  408822:	f140 80de 	bpl.w	4089e2 <_vfiprintf_r+0xa6a>
  408826:	065b      	lsls	r3, r3, #25
  408828:	f53f acb2 	bmi.w	408190 <_vfiprintf_r+0x218>
  40882c:	9803      	ldr	r0, [sp, #12]
  40882e:	b02d      	add	sp, #180	; 0xb4
  408830:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408834:	2a00      	cmp	r2, #0
  408836:	f040 8106 	bne.w	408a46 <_vfiprintf_r+0xace>
  40883a:	9a05      	ldr	r2, [sp, #20]
  40883c:	921d      	str	r2, [sp, #116]	; 0x74
  40883e:	2301      	movs	r3, #1
  408840:	9211      	str	r2, [sp, #68]	; 0x44
  408842:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  408846:	9310      	str	r3, [sp, #64]	; 0x40
  408848:	46ca      	mov	sl, r9
  40884a:	f10a 0a08 	add.w	sl, sl, #8
  40884e:	9b02      	ldr	r3, [sp, #8]
  408850:	0759      	lsls	r1, r3, #29
  408852:	d504      	bpl.n	40885e <_vfiprintf_r+0x8e6>
  408854:	9b08      	ldr	r3, [sp, #32]
  408856:	9901      	ldr	r1, [sp, #4]
  408858:	1a5c      	subs	r4, r3, r1
  40885a:	2c00      	cmp	r4, #0
  40885c:	dc81      	bgt.n	408762 <_vfiprintf_r+0x7ea>
  40885e:	9b03      	ldr	r3, [sp, #12]
  408860:	9908      	ldr	r1, [sp, #32]
  408862:	9801      	ldr	r0, [sp, #4]
  408864:	4281      	cmp	r1, r0
  408866:	bfac      	ite	ge
  408868:	185b      	addge	r3, r3, r1
  40886a:	181b      	addlt	r3, r3, r0
  40886c:	9303      	str	r3, [sp, #12]
  40886e:	bb72      	cbnz	r2, 4088ce <_vfiprintf_r+0x956>
  408870:	2300      	movs	r3, #0
  408872:	9310      	str	r3, [sp, #64]	; 0x40
  408874:	46ca      	mov	sl, r9
  408876:	f7ff bbbc 	b.w	407ff2 <_vfiprintf_r+0x7a>
  40887a:	aa0f      	add	r2, sp, #60	; 0x3c
  40887c:	9904      	ldr	r1, [sp, #16]
  40887e:	4620      	mov	r0, r4
  408880:	f7ff fb3a 	bl	407ef8 <__sprint_r.part.0>
  408884:	bb50      	cbnz	r0, 4088dc <_vfiprintf_r+0x964>
  408886:	9910      	ldr	r1, [sp, #64]	; 0x40
  408888:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40888a:	f101 0e01 	add.w	lr, r1, #1
  40888e:	46cc      	mov	ip, r9
  408890:	e548      	b.n	408324 <_vfiprintf_r+0x3ac>
  408892:	2a00      	cmp	r2, #0
  408894:	f040 8140 	bne.w	408b18 <_vfiprintf_r+0xba0>
  408898:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  40889c:	2900      	cmp	r1, #0
  40889e:	f000 811b 	beq.w	408ad8 <_vfiprintf_r+0xb60>
  4088a2:	2201      	movs	r2, #1
  4088a4:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  4088a8:	4610      	mov	r0, r2
  4088aa:	921d      	str	r2, [sp, #116]	; 0x74
  4088ac:	911c      	str	r1, [sp, #112]	; 0x70
  4088ae:	46ca      	mov	sl, r9
  4088b0:	4601      	mov	r1, r0
  4088b2:	f10a 0a08 	add.w	sl, sl, #8
  4088b6:	3001      	adds	r0, #1
  4088b8:	e507      	b.n	4082ca <_vfiprintf_r+0x352>
  4088ba:	9b02      	ldr	r3, [sp, #8]
  4088bc:	2a01      	cmp	r2, #1
  4088be:	f000 8098 	beq.w	4089f2 <_vfiprintf_r+0xa7a>
  4088c2:	2a02      	cmp	r2, #2
  4088c4:	d10d      	bne.n	4088e2 <_vfiprintf_r+0x96a>
  4088c6:	9302      	str	r3, [sp, #8]
  4088c8:	2600      	movs	r6, #0
  4088ca:	2700      	movs	r7, #0
  4088cc:	e5b0      	b.n	408430 <_vfiprintf_r+0x4b8>
  4088ce:	aa0f      	add	r2, sp, #60	; 0x3c
  4088d0:	9904      	ldr	r1, [sp, #16]
  4088d2:	9806      	ldr	r0, [sp, #24]
  4088d4:	f7ff fb10 	bl	407ef8 <__sprint_r.part.0>
  4088d8:	2800      	cmp	r0, #0
  4088da:	d0c9      	beq.n	408870 <_vfiprintf_r+0x8f8>
  4088dc:	f8dd b010 	ldr.w	fp, [sp, #16]
  4088e0:	e797      	b.n	408812 <_vfiprintf_r+0x89a>
  4088e2:	9302      	str	r3, [sp, #8]
  4088e4:	2600      	movs	r6, #0
  4088e6:	2700      	movs	r7, #0
  4088e8:	4649      	mov	r1, r9
  4088ea:	e000      	b.n	4088ee <_vfiprintf_r+0x976>
  4088ec:	4659      	mov	r1, fp
  4088ee:	08f2      	lsrs	r2, r6, #3
  4088f0:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  4088f4:	08f8      	lsrs	r0, r7, #3
  4088f6:	f006 0307 	and.w	r3, r6, #7
  4088fa:	4607      	mov	r7, r0
  4088fc:	4616      	mov	r6, r2
  4088fe:	3330      	adds	r3, #48	; 0x30
  408900:	ea56 0207 	orrs.w	r2, r6, r7
  408904:	f801 3c01 	strb.w	r3, [r1, #-1]
  408908:	f101 3bff 	add.w	fp, r1, #4294967295
  40890c:	d1ee      	bne.n	4088ec <_vfiprintf_r+0x974>
  40890e:	9a02      	ldr	r2, [sp, #8]
  408910:	07d6      	lsls	r6, r2, #31
  408912:	f57f ad9d 	bpl.w	408450 <_vfiprintf_r+0x4d8>
  408916:	2b30      	cmp	r3, #48	; 0x30
  408918:	f43f ad9a 	beq.w	408450 <_vfiprintf_r+0x4d8>
  40891c:	3902      	subs	r1, #2
  40891e:	2330      	movs	r3, #48	; 0x30
  408920:	f80b 3c01 	strb.w	r3, [fp, #-1]
  408924:	eba9 0301 	sub.w	r3, r9, r1
  408928:	9305      	str	r3, [sp, #20]
  40892a:	468b      	mov	fp, r1
  40892c:	e476      	b.n	40821c <_vfiprintf_r+0x2a4>
  40892e:	9b03      	ldr	r3, [sp, #12]
  408930:	9a08      	ldr	r2, [sp, #32]
  408932:	428a      	cmp	r2, r1
  408934:	bfac      	ite	ge
  408936:	189b      	addge	r3, r3, r2
  408938:	185b      	addlt	r3, r3, r1
  40893a:	9303      	str	r3, [sp, #12]
  40893c:	e798      	b.n	408870 <_vfiprintf_r+0x8f8>
  40893e:	2202      	movs	r2, #2
  408940:	e44d      	b.n	4081de <_vfiprintf_r+0x266>
  408942:	2f00      	cmp	r7, #0
  408944:	bf08      	it	eq
  408946:	2e0a      	cmpeq	r6, #10
  408948:	d352      	bcc.n	4089f0 <_vfiprintf_r+0xa78>
  40894a:	46cb      	mov	fp, r9
  40894c:	4630      	mov	r0, r6
  40894e:	4639      	mov	r1, r7
  408950:	220a      	movs	r2, #10
  408952:	2300      	movs	r3, #0
  408954:	f003 fea6 	bl	40c6a4 <__aeabi_uldivmod>
  408958:	3230      	adds	r2, #48	; 0x30
  40895a:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  40895e:	4630      	mov	r0, r6
  408960:	4639      	mov	r1, r7
  408962:	2300      	movs	r3, #0
  408964:	220a      	movs	r2, #10
  408966:	f003 fe9d 	bl	40c6a4 <__aeabi_uldivmod>
  40896a:	4606      	mov	r6, r0
  40896c:	460f      	mov	r7, r1
  40896e:	ea56 0307 	orrs.w	r3, r6, r7
  408972:	d1eb      	bne.n	40894c <_vfiprintf_r+0x9d4>
  408974:	e56c      	b.n	408450 <_vfiprintf_r+0x4d8>
  408976:	9405      	str	r4, [sp, #20]
  408978:	46cb      	mov	fp, r9
  40897a:	e44f      	b.n	40821c <_vfiprintf_r+0x2a4>
  40897c:	aa0f      	add	r2, sp, #60	; 0x3c
  40897e:	9904      	ldr	r1, [sp, #16]
  408980:	9806      	ldr	r0, [sp, #24]
  408982:	f7ff fab9 	bl	407ef8 <__sprint_r.part.0>
  408986:	2800      	cmp	r0, #0
  408988:	d1a8      	bne.n	4088dc <_vfiprintf_r+0x964>
  40898a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40898c:	46ca      	mov	sl, r9
  40898e:	e75e      	b.n	40884e <_vfiprintf_r+0x8d6>
  408990:	aa0f      	add	r2, sp, #60	; 0x3c
  408992:	9904      	ldr	r1, [sp, #16]
  408994:	9806      	ldr	r0, [sp, #24]
  408996:	f7ff faaf 	bl	407ef8 <__sprint_r.part.0>
  40899a:	2800      	cmp	r0, #0
  40899c:	d19e      	bne.n	4088dc <_vfiprintf_r+0x964>
  40899e:	46ca      	mov	sl, r9
  4089a0:	f7ff bbc0 	b.w	408124 <_vfiprintf_r+0x1ac>
  4089a4:	0040da00 	.word	0x0040da00
  4089a8:	0040d9f0 	.word	0x0040d9f0
  4089ac:	3104      	adds	r1, #4
  4089ae:	6816      	ldr	r6, [r2, #0]
  4089b0:	9107      	str	r1, [sp, #28]
  4089b2:	2201      	movs	r2, #1
  4089b4:	2700      	movs	r7, #0
  4089b6:	e412      	b.n	4081de <_vfiprintf_r+0x266>
  4089b8:	9807      	ldr	r0, [sp, #28]
  4089ba:	4601      	mov	r1, r0
  4089bc:	3104      	adds	r1, #4
  4089be:	6806      	ldr	r6, [r0, #0]
  4089c0:	9107      	str	r1, [sp, #28]
  4089c2:	2700      	movs	r7, #0
  4089c4:	e40b      	b.n	4081de <_vfiprintf_r+0x266>
  4089c6:	680e      	ldr	r6, [r1, #0]
  4089c8:	3104      	adds	r1, #4
  4089ca:	9107      	str	r1, [sp, #28]
  4089cc:	2700      	movs	r7, #0
  4089ce:	e591      	b.n	4084f4 <_vfiprintf_r+0x57c>
  4089d0:	9907      	ldr	r1, [sp, #28]
  4089d2:	680e      	ldr	r6, [r1, #0]
  4089d4:	460a      	mov	r2, r1
  4089d6:	17f7      	asrs	r7, r6, #31
  4089d8:	3204      	adds	r2, #4
  4089da:	9207      	str	r2, [sp, #28]
  4089dc:	4630      	mov	r0, r6
  4089de:	4639      	mov	r1, r7
  4089e0:	e50f      	b.n	408402 <_vfiprintf_r+0x48a>
  4089e2:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  4089e6:	f001 fe4d 	bl	40a684 <__retarget_lock_release_recursive>
  4089ea:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  4089ee:	e71a      	b.n	408826 <_vfiprintf_r+0x8ae>
  4089f0:	9b02      	ldr	r3, [sp, #8]
  4089f2:	9302      	str	r3, [sp, #8]
  4089f4:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  4089f8:	3630      	adds	r6, #48	; 0x30
  4089fa:	2301      	movs	r3, #1
  4089fc:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  408a00:	9305      	str	r3, [sp, #20]
  408a02:	e40b      	b.n	40821c <_vfiprintf_r+0x2a4>
  408a04:	aa0f      	add	r2, sp, #60	; 0x3c
  408a06:	9904      	ldr	r1, [sp, #16]
  408a08:	9806      	ldr	r0, [sp, #24]
  408a0a:	f7ff fa75 	bl	407ef8 <__sprint_r.part.0>
  408a0e:	2800      	cmp	r0, #0
  408a10:	f47f af64 	bne.w	4088dc <_vfiprintf_r+0x964>
  408a14:	9910      	ldr	r1, [sp, #64]	; 0x40
  408a16:	9a11      	ldr	r2, [sp, #68]	; 0x44
  408a18:	1c48      	adds	r0, r1, #1
  408a1a:	46ca      	mov	sl, r9
  408a1c:	e651      	b.n	4086c2 <_vfiprintf_r+0x74a>
  408a1e:	aa0f      	add	r2, sp, #60	; 0x3c
  408a20:	9904      	ldr	r1, [sp, #16]
  408a22:	9806      	ldr	r0, [sp, #24]
  408a24:	f7ff fa68 	bl	407ef8 <__sprint_r.part.0>
  408a28:	2800      	cmp	r0, #0
  408a2a:	f47f af57 	bne.w	4088dc <_vfiprintf_r+0x964>
  408a2e:	9910      	ldr	r1, [sp, #64]	; 0x40
  408a30:	9a11      	ldr	r2, [sp, #68]	; 0x44
  408a32:	1c48      	adds	r0, r1, #1
  408a34:	46ca      	mov	sl, r9
  408a36:	e448      	b.n	4082ca <_vfiprintf_r+0x352>
  408a38:	2a00      	cmp	r2, #0
  408a3a:	f040 8091 	bne.w	408b60 <_vfiprintf_r+0xbe8>
  408a3e:	2001      	movs	r0, #1
  408a40:	4611      	mov	r1, r2
  408a42:	46ca      	mov	sl, r9
  408a44:	e641      	b.n	4086ca <_vfiprintf_r+0x752>
  408a46:	aa0f      	add	r2, sp, #60	; 0x3c
  408a48:	9904      	ldr	r1, [sp, #16]
  408a4a:	9806      	ldr	r0, [sp, #24]
  408a4c:	f7ff fa54 	bl	407ef8 <__sprint_r.part.0>
  408a50:	2800      	cmp	r0, #0
  408a52:	f47f af43 	bne.w	4088dc <_vfiprintf_r+0x964>
  408a56:	9810      	ldr	r0, [sp, #64]	; 0x40
  408a58:	9a11      	ldr	r2, [sp, #68]	; 0x44
  408a5a:	3001      	adds	r0, #1
  408a5c:	46ca      	mov	sl, r9
  408a5e:	e667      	b.n	408730 <_vfiprintf_r+0x7b8>
  408a60:	46d3      	mov	fp, sl
  408a62:	e6d6      	b.n	408812 <_vfiprintf_r+0x89a>
  408a64:	9e07      	ldr	r6, [sp, #28]
  408a66:	3607      	adds	r6, #7
  408a68:	f026 0207 	bic.w	r2, r6, #7
  408a6c:	f102 0108 	add.w	r1, r2, #8
  408a70:	e9d2 6700 	ldrd	r6, r7, [r2]
  408a74:	9107      	str	r1, [sp, #28]
  408a76:	2201      	movs	r2, #1
  408a78:	f7ff bbb1 	b.w	4081de <_vfiprintf_r+0x266>
  408a7c:	9e07      	ldr	r6, [sp, #28]
  408a7e:	3607      	adds	r6, #7
  408a80:	f026 0607 	bic.w	r6, r6, #7
  408a84:	e9d6 0100 	ldrd	r0, r1, [r6]
  408a88:	f106 0208 	add.w	r2, r6, #8
  408a8c:	9207      	str	r2, [sp, #28]
  408a8e:	4606      	mov	r6, r0
  408a90:	460f      	mov	r7, r1
  408a92:	e4b6      	b.n	408402 <_vfiprintf_r+0x48a>
  408a94:	9e07      	ldr	r6, [sp, #28]
  408a96:	3607      	adds	r6, #7
  408a98:	f026 0207 	bic.w	r2, r6, #7
  408a9c:	f102 0108 	add.w	r1, r2, #8
  408aa0:	e9d2 6700 	ldrd	r6, r7, [r2]
  408aa4:	9107      	str	r1, [sp, #28]
  408aa6:	2200      	movs	r2, #0
  408aa8:	f7ff bb99 	b.w	4081de <_vfiprintf_r+0x266>
  408aac:	9e07      	ldr	r6, [sp, #28]
  408aae:	3607      	adds	r6, #7
  408ab0:	f026 0107 	bic.w	r1, r6, #7
  408ab4:	f101 0008 	add.w	r0, r1, #8
  408ab8:	9007      	str	r0, [sp, #28]
  408aba:	e9d1 6700 	ldrd	r6, r7, [r1]
  408abe:	e519      	b.n	4084f4 <_vfiprintf_r+0x57c>
  408ac0:	46cb      	mov	fp, r9
  408ac2:	f7ff bbab 	b.w	40821c <_vfiprintf_r+0x2a4>
  408ac6:	252d      	movs	r5, #45	; 0x2d
  408ac8:	4276      	negs	r6, r6
  408aca:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  408ace:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  408ad2:	2201      	movs	r2, #1
  408ad4:	f7ff bb88 	b.w	4081e8 <_vfiprintf_r+0x270>
  408ad8:	9b09      	ldr	r3, [sp, #36]	; 0x24
  408ada:	b9b3      	cbnz	r3, 408b0a <_vfiprintf_r+0xb92>
  408adc:	4611      	mov	r1, r2
  408ade:	2001      	movs	r0, #1
  408ae0:	46ca      	mov	sl, r9
  408ae2:	e5f2      	b.n	4086ca <_vfiprintf_r+0x752>
  408ae4:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  408ae8:	f001 fdcc 	bl	40a684 <__retarget_lock_release_recursive>
  408aec:	f04f 33ff 	mov.w	r3, #4294967295
  408af0:	9303      	str	r3, [sp, #12]
  408af2:	f7ff bb50 	b.w	408196 <_vfiprintf_r+0x21e>
  408af6:	aa0f      	add	r2, sp, #60	; 0x3c
  408af8:	9904      	ldr	r1, [sp, #16]
  408afa:	9806      	ldr	r0, [sp, #24]
  408afc:	f7ff f9fc 	bl	407ef8 <__sprint_r.part.0>
  408b00:	2800      	cmp	r0, #0
  408b02:	f47f aeeb 	bne.w	4088dc <_vfiprintf_r+0x964>
  408b06:	9a11      	ldr	r2, [sp, #68]	; 0x44
  408b08:	e6a9      	b.n	40885e <_vfiprintf_r+0x8e6>
  408b0a:	ab0e      	add	r3, sp, #56	; 0x38
  408b0c:	2202      	movs	r2, #2
  408b0e:	931c      	str	r3, [sp, #112]	; 0x70
  408b10:	921d      	str	r2, [sp, #116]	; 0x74
  408b12:	2001      	movs	r0, #1
  408b14:	46ca      	mov	sl, r9
  408b16:	e5d0      	b.n	4086ba <_vfiprintf_r+0x742>
  408b18:	aa0f      	add	r2, sp, #60	; 0x3c
  408b1a:	9904      	ldr	r1, [sp, #16]
  408b1c:	9806      	ldr	r0, [sp, #24]
  408b1e:	f7ff f9eb 	bl	407ef8 <__sprint_r.part.0>
  408b22:	2800      	cmp	r0, #0
  408b24:	f47f aeda 	bne.w	4088dc <_vfiprintf_r+0x964>
  408b28:	9910      	ldr	r1, [sp, #64]	; 0x40
  408b2a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  408b2c:	1c48      	adds	r0, r1, #1
  408b2e:	46ca      	mov	sl, r9
  408b30:	e5a4      	b.n	40867c <_vfiprintf_r+0x704>
  408b32:	9a07      	ldr	r2, [sp, #28]
  408b34:	9903      	ldr	r1, [sp, #12]
  408b36:	6813      	ldr	r3, [r2, #0]
  408b38:	17cd      	asrs	r5, r1, #31
  408b3a:	4608      	mov	r0, r1
  408b3c:	3204      	adds	r2, #4
  408b3e:	4629      	mov	r1, r5
  408b40:	9207      	str	r2, [sp, #28]
  408b42:	e9c3 0100 	strd	r0, r1, [r3]
  408b46:	f7ff ba54 	b.w	407ff2 <_vfiprintf_r+0x7a>
  408b4a:	4658      	mov	r0, fp
  408b4c:	9607      	str	r6, [sp, #28]
  408b4e:	9302      	str	r3, [sp, #8]
  408b50:	f7fd ff36 	bl	4069c0 <strlen>
  408b54:	2400      	movs	r4, #0
  408b56:	9005      	str	r0, [sp, #20]
  408b58:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  408b5c:	f7ff bb5e 	b.w	40821c <_vfiprintf_r+0x2a4>
  408b60:	aa0f      	add	r2, sp, #60	; 0x3c
  408b62:	9904      	ldr	r1, [sp, #16]
  408b64:	9806      	ldr	r0, [sp, #24]
  408b66:	f7ff f9c7 	bl	407ef8 <__sprint_r.part.0>
  408b6a:	2800      	cmp	r0, #0
  408b6c:	f47f aeb6 	bne.w	4088dc <_vfiprintf_r+0x964>
  408b70:	9910      	ldr	r1, [sp, #64]	; 0x40
  408b72:	9a11      	ldr	r2, [sp, #68]	; 0x44
  408b74:	1c48      	adds	r0, r1, #1
  408b76:	46ca      	mov	sl, r9
  408b78:	e5a7      	b.n	4086ca <_vfiprintf_r+0x752>
  408b7a:	9910      	ldr	r1, [sp, #64]	; 0x40
  408b7c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  408b7e:	4e20      	ldr	r6, [pc, #128]	; (408c00 <_vfiprintf_r+0xc88>)
  408b80:	3101      	adds	r1, #1
  408b82:	f7ff bb90 	b.w	4082a6 <_vfiprintf_r+0x32e>
  408b86:	2c06      	cmp	r4, #6
  408b88:	bf28      	it	cs
  408b8a:	2406      	movcs	r4, #6
  408b8c:	9405      	str	r4, [sp, #20]
  408b8e:	9607      	str	r6, [sp, #28]
  408b90:	9401      	str	r4, [sp, #4]
  408b92:	f8df b070 	ldr.w	fp, [pc, #112]	; 408c04 <_vfiprintf_r+0xc8c>
  408b96:	e4d5      	b.n	408544 <_vfiprintf_r+0x5cc>
  408b98:	9810      	ldr	r0, [sp, #64]	; 0x40
  408b9a:	4e19      	ldr	r6, [pc, #100]	; (408c00 <_vfiprintf_r+0xc88>)
  408b9c:	3001      	adds	r0, #1
  408b9e:	e603      	b.n	4087a8 <_vfiprintf_r+0x830>
  408ba0:	9405      	str	r4, [sp, #20]
  408ba2:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  408ba6:	9607      	str	r6, [sp, #28]
  408ba8:	9302      	str	r3, [sp, #8]
  408baa:	4604      	mov	r4, r0
  408bac:	f7ff bb36 	b.w	40821c <_vfiprintf_r+0x2a4>
  408bb0:	4686      	mov	lr, r0
  408bb2:	f7ff bbce 	b.w	408352 <_vfiprintf_r+0x3da>
  408bb6:	9806      	ldr	r0, [sp, #24]
  408bb8:	aa0f      	add	r2, sp, #60	; 0x3c
  408bba:	4659      	mov	r1, fp
  408bbc:	f7ff f99c 	bl	407ef8 <__sprint_r.part.0>
  408bc0:	2800      	cmp	r0, #0
  408bc2:	f43f ae24 	beq.w	40880e <_vfiprintf_r+0x896>
  408bc6:	e624      	b.n	408812 <_vfiprintf_r+0x89a>
  408bc8:	9907      	ldr	r1, [sp, #28]
  408bca:	f898 2001 	ldrb.w	r2, [r8, #1]
  408bce:	680c      	ldr	r4, [r1, #0]
  408bd0:	3104      	adds	r1, #4
  408bd2:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  408bd6:	46b8      	mov	r8, r7
  408bd8:	9107      	str	r1, [sp, #28]
  408bda:	f7ff ba3f 	b.w	40805c <_vfiprintf_r+0xe4>
  408bde:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  408be2:	e43c      	b.n	40845e <_vfiprintf_r+0x4e6>
  408be4:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  408be8:	e521      	b.n	40862e <_vfiprintf_r+0x6b6>
  408bea:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  408bee:	f7ff bbf4 	b.w	4083da <_vfiprintf_r+0x462>
  408bf2:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  408bf6:	e491      	b.n	40851c <_vfiprintf_r+0x5a4>
  408bf8:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  408bfc:	e469      	b.n	4084d2 <_vfiprintf_r+0x55a>
  408bfe:	bf00      	nop
  408c00:	0040d9f0 	.word	0x0040d9f0
  408c04:	0040d9c4 	.word	0x0040d9c4

00408c08 <__sbprintf>:
  408c08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  408c0c:	460c      	mov	r4, r1
  408c0e:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  408c12:	8989      	ldrh	r1, [r1, #12]
  408c14:	6e66      	ldr	r6, [r4, #100]	; 0x64
  408c16:	89e5      	ldrh	r5, [r4, #14]
  408c18:	9619      	str	r6, [sp, #100]	; 0x64
  408c1a:	f021 0102 	bic.w	r1, r1, #2
  408c1e:	4606      	mov	r6, r0
  408c20:	69e0      	ldr	r0, [r4, #28]
  408c22:	f8ad 100c 	strh.w	r1, [sp, #12]
  408c26:	4617      	mov	r7, r2
  408c28:	f44f 6180 	mov.w	r1, #1024	; 0x400
  408c2c:	6a62      	ldr	r2, [r4, #36]	; 0x24
  408c2e:	f8ad 500e 	strh.w	r5, [sp, #14]
  408c32:	4698      	mov	r8, r3
  408c34:	ad1a      	add	r5, sp, #104	; 0x68
  408c36:	2300      	movs	r3, #0
  408c38:	9007      	str	r0, [sp, #28]
  408c3a:	a816      	add	r0, sp, #88	; 0x58
  408c3c:	9209      	str	r2, [sp, #36]	; 0x24
  408c3e:	9306      	str	r3, [sp, #24]
  408c40:	9500      	str	r5, [sp, #0]
  408c42:	9504      	str	r5, [sp, #16]
  408c44:	9102      	str	r1, [sp, #8]
  408c46:	9105      	str	r1, [sp, #20]
  408c48:	f001 fd16 	bl	40a678 <__retarget_lock_init_recursive>
  408c4c:	4643      	mov	r3, r8
  408c4e:	463a      	mov	r2, r7
  408c50:	4669      	mov	r1, sp
  408c52:	4630      	mov	r0, r6
  408c54:	f7ff f990 	bl	407f78 <_vfiprintf_r>
  408c58:	1e05      	subs	r5, r0, #0
  408c5a:	db07      	blt.n	408c6c <__sbprintf+0x64>
  408c5c:	4630      	mov	r0, r6
  408c5e:	4669      	mov	r1, sp
  408c60:	f001 f8e8 	bl	409e34 <_fflush_r>
  408c64:	2800      	cmp	r0, #0
  408c66:	bf18      	it	ne
  408c68:	f04f 35ff 	movne.w	r5, #4294967295
  408c6c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  408c70:	065b      	lsls	r3, r3, #25
  408c72:	d503      	bpl.n	408c7c <__sbprintf+0x74>
  408c74:	89a3      	ldrh	r3, [r4, #12]
  408c76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  408c7a:	81a3      	strh	r3, [r4, #12]
  408c7c:	9816      	ldr	r0, [sp, #88]	; 0x58
  408c7e:	f001 fcfd 	bl	40a67c <__retarget_lock_close_recursive>
  408c82:	4628      	mov	r0, r5
  408c84:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  408c88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00408c8c <__swsetup_r>:
  408c8c:	b538      	push	{r3, r4, r5, lr}
  408c8e:	4b30      	ldr	r3, [pc, #192]	; (408d50 <__swsetup_r+0xc4>)
  408c90:	681b      	ldr	r3, [r3, #0]
  408c92:	4605      	mov	r5, r0
  408c94:	460c      	mov	r4, r1
  408c96:	b113      	cbz	r3, 408c9e <__swsetup_r+0x12>
  408c98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  408c9a:	2a00      	cmp	r2, #0
  408c9c:	d038      	beq.n	408d10 <__swsetup_r+0x84>
  408c9e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  408ca2:	b293      	uxth	r3, r2
  408ca4:	0718      	lsls	r0, r3, #28
  408ca6:	d50c      	bpl.n	408cc2 <__swsetup_r+0x36>
  408ca8:	6920      	ldr	r0, [r4, #16]
  408caa:	b1a8      	cbz	r0, 408cd8 <__swsetup_r+0x4c>
  408cac:	f013 0201 	ands.w	r2, r3, #1
  408cb0:	d01e      	beq.n	408cf0 <__swsetup_r+0x64>
  408cb2:	6963      	ldr	r3, [r4, #20]
  408cb4:	2200      	movs	r2, #0
  408cb6:	425b      	negs	r3, r3
  408cb8:	61a3      	str	r3, [r4, #24]
  408cba:	60a2      	str	r2, [r4, #8]
  408cbc:	b1f0      	cbz	r0, 408cfc <__swsetup_r+0x70>
  408cbe:	2000      	movs	r0, #0
  408cc0:	bd38      	pop	{r3, r4, r5, pc}
  408cc2:	06d9      	lsls	r1, r3, #27
  408cc4:	d53c      	bpl.n	408d40 <__swsetup_r+0xb4>
  408cc6:	0758      	lsls	r0, r3, #29
  408cc8:	d426      	bmi.n	408d18 <__swsetup_r+0x8c>
  408cca:	6920      	ldr	r0, [r4, #16]
  408ccc:	f042 0308 	orr.w	r3, r2, #8
  408cd0:	81a3      	strh	r3, [r4, #12]
  408cd2:	b29b      	uxth	r3, r3
  408cd4:	2800      	cmp	r0, #0
  408cd6:	d1e9      	bne.n	408cac <__swsetup_r+0x20>
  408cd8:	f403 7220 	and.w	r2, r3, #640	; 0x280
  408cdc:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  408ce0:	d0e4      	beq.n	408cac <__swsetup_r+0x20>
  408ce2:	4628      	mov	r0, r5
  408ce4:	4621      	mov	r1, r4
  408ce6:	f001 fcfd 	bl	40a6e4 <__smakebuf_r>
  408cea:	89a3      	ldrh	r3, [r4, #12]
  408cec:	6920      	ldr	r0, [r4, #16]
  408cee:	e7dd      	b.n	408cac <__swsetup_r+0x20>
  408cf0:	0799      	lsls	r1, r3, #30
  408cf2:	bf58      	it	pl
  408cf4:	6962      	ldrpl	r2, [r4, #20]
  408cf6:	60a2      	str	r2, [r4, #8]
  408cf8:	2800      	cmp	r0, #0
  408cfa:	d1e0      	bne.n	408cbe <__swsetup_r+0x32>
  408cfc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  408d00:	061a      	lsls	r2, r3, #24
  408d02:	d5dd      	bpl.n	408cc0 <__swsetup_r+0x34>
  408d04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  408d08:	81a3      	strh	r3, [r4, #12]
  408d0a:	f04f 30ff 	mov.w	r0, #4294967295
  408d0e:	bd38      	pop	{r3, r4, r5, pc}
  408d10:	4618      	mov	r0, r3
  408d12:	f001 f8e7 	bl	409ee4 <__sinit>
  408d16:	e7c2      	b.n	408c9e <__swsetup_r+0x12>
  408d18:	6b21      	ldr	r1, [r4, #48]	; 0x30
  408d1a:	b151      	cbz	r1, 408d32 <__swsetup_r+0xa6>
  408d1c:	f104 0340 	add.w	r3, r4, #64	; 0x40
  408d20:	4299      	cmp	r1, r3
  408d22:	d004      	beq.n	408d2e <__swsetup_r+0xa2>
  408d24:	4628      	mov	r0, r5
  408d26:	f001 fa03 	bl	40a130 <_free_r>
  408d2a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  408d2e:	2300      	movs	r3, #0
  408d30:	6323      	str	r3, [r4, #48]	; 0x30
  408d32:	2300      	movs	r3, #0
  408d34:	6920      	ldr	r0, [r4, #16]
  408d36:	6063      	str	r3, [r4, #4]
  408d38:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  408d3c:	6020      	str	r0, [r4, #0]
  408d3e:	e7c5      	b.n	408ccc <__swsetup_r+0x40>
  408d40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  408d44:	2309      	movs	r3, #9
  408d46:	602b      	str	r3, [r5, #0]
  408d48:	f04f 30ff 	mov.w	r0, #4294967295
  408d4c:	81a2      	strh	r2, [r4, #12]
  408d4e:	bd38      	pop	{r3, r4, r5, pc}
  408d50:	20400024 	.word	0x20400024

00408d54 <register_fini>:
  408d54:	4b02      	ldr	r3, [pc, #8]	; (408d60 <register_fini+0xc>)
  408d56:	b113      	cbz	r3, 408d5e <register_fini+0xa>
  408d58:	4802      	ldr	r0, [pc, #8]	; (408d64 <register_fini+0x10>)
  408d5a:	f000 b805 	b.w	408d68 <atexit>
  408d5e:	4770      	bx	lr
  408d60:	00000000 	.word	0x00000000
  408d64:	00409f55 	.word	0x00409f55

00408d68 <atexit>:
  408d68:	2300      	movs	r3, #0
  408d6a:	4601      	mov	r1, r0
  408d6c:	461a      	mov	r2, r3
  408d6e:	4618      	mov	r0, r3
  408d70:	f002 beb0 	b.w	40bad4 <__register_exitproc>

00408d74 <quorem>:
  408d74:	6902      	ldr	r2, [r0, #16]
  408d76:	690b      	ldr	r3, [r1, #16]
  408d78:	4293      	cmp	r3, r2
  408d7a:	f300 808d 	bgt.w	408e98 <quorem+0x124>
  408d7e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408d82:	f103 38ff 	add.w	r8, r3, #4294967295
  408d86:	f101 0714 	add.w	r7, r1, #20
  408d8a:	f100 0b14 	add.w	fp, r0, #20
  408d8e:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
  408d92:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
  408d96:	ea4f 0488 	mov.w	r4, r8, lsl #2
  408d9a:	b083      	sub	sp, #12
  408d9c:	3201      	adds	r2, #1
  408d9e:	fbb3 f9f2 	udiv	r9, r3, r2
  408da2:	eb0b 0304 	add.w	r3, fp, r4
  408da6:	9400      	str	r4, [sp, #0]
  408da8:	eb07 0a04 	add.w	sl, r7, r4
  408dac:	9301      	str	r3, [sp, #4]
  408dae:	f1b9 0f00 	cmp.w	r9, #0
  408db2:	d039      	beq.n	408e28 <quorem+0xb4>
  408db4:	2500      	movs	r5, #0
  408db6:	462e      	mov	r6, r5
  408db8:	46bc      	mov	ip, r7
  408dba:	46de      	mov	lr, fp
  408dbc:	f85c 4b04 	ldr.w	r4, [ip], #4
  408dc0:	f8de 3000 	ldr.w	r3, [lr]
  408dc4:	b2a2      	uxth	r2, r4
  408dc6:	fb09 5502 	mla	r5, r9, r2, r5
  408dca:	0c22      	lsrs	r2, r4, #16
  408dcc:	0c2c      	lsrs	r4, r5, #16
  408dce:	fb09 4202 	mla	r2, r9, r2, r4
  408dd2:	b2ad      	uxth	r5, r5
  408dd4:	1b75      	subs	r5, r6, r5
  408dd6:	b296      	uxth	r6, r2
  408dd8:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
  408ddc:	fa15 f383 	uxtah	r3, r5, r3
  408de0:	eb06 4623 	add.w	r6, r6, r3, asr #16
  408de4:	b29b      	uxth	r3, r3
  408de6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  408dea:	45e2      	cmp	sl, ip
  408dec:	ea4f 4512 	mov.w	r5, r2, lsr #16
  408df0:	f84e 3b04 	str.w	r3, [lr], #4
  408df4:	ea4f 4626 	mov.w	r6, r6, asr #16
  408df8:	d2e0      	bcs.n	408dbc <quorem+0x48>
  408dfa:	9b00      	ldr	r3, [sp, #0]
  408dfc:	f85b 3003 	ldr.w	r3, [fp, r3]
  408e00:	b993      	cbnz	r3, 408e28 <quorem+0xb4>
  408e02:	9c01      	ldr	r4, [sp, #4]
  408e04:	1f23      	subs	r3, r4, #4
  408e06:	459b      	cmp	fp, r3
  408e08:	d20c      	bcs.n	408e24 <quorem+0xb0>
  408e0a:	f854 3c04 	ldr.w	r3, [r4, #-4]
  408e0e:	b94b      	cbnz	r3, 408e24 <quorem+0xb0>
  408e10:	f1a4 0308 	sub.w	r3, r4, #8
  408e14:	e002      	b.n	408e1c <quorem+0xa8>
  408e16:	681a      	ldr	r2, [r3, #0]
  408e18:	3b04      	subs	r3, #4
  408e1a:	b91a      	cbnz	r2, 408e24 <quorem+0xb0>
  408e1c:	459b      	cmp	fp, r3
  408e1e:	f108 38ff 	add.w	r8, r8, #4294967295
  408e22:	d3f8      	bcc.n	408e16 <quorem+0xa2>
  408e24:	f8c0 8010 	str.w	r8, [r0, #16]
  408e28:	4604      	mov	r4, r0
  408e2a:	f002 fa37 	bl	40b29c <__mcmp>
  408e2e:	2800      	cmp	r0, #0
  408e30:	db2e      	blt.n	408e90 <quorem+0x11c>
  408e32:	f109 0901 	add.w	r9, r9, #1
  408e36:	465d      	mov	r5, fp
  408e38:	2300      	movs	r3, #0
  408e3a:	f857 1b04 	ldr.w	r1, [r7], #4
  408e3e:	6828      	ldr	r0, [r5, #0]
  408e40:	b28a      	uxth	r2, r1
  408e42:	1a9a      	subs	r2, r3, r2
  408e44:	0c0b      	lsrs	r3, r1, #16
  408e46:	fa12 f280 	uxtah	r2, r2, r0
  408e4a:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
  408e4e:	eb03 4322 	add.w	r3, r3, r2, asr #16
  408e52:	b292      	uxth	r2, r2
  408e54:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  408e58:	45ba      	cmp	sl, r7
  408e5a:	f845 2b04 	str.w	r2, [r5], #4
  408e5e:	ea4f 4323 	mov.w	r3, r3, asr #16
  408e62:	d2ea      	bcs.n	408e3a <quorem+0xc6>
  408e64:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
  408e68:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
  408e6c:	b982      	cbnz	r2, 408e90 <quorem+0x11c>
  408e6e:	1f1a      	subs	r2, r3, #4
  408e70:	4593      	cmp	fp, r2
  408e72:	d20b      	bcs.n	408e8c <quorem+0x118>
  408e74:	f853 2c04 	ldr.w	r2, [r3, #-4]
  408e78:	b942      	cbnz	r2, 408e8c <quorem+0x118>
  408e7a:	3b08      	subs	r3, #8
  408e7c:	e002      	b.n	408e84 <quorem+0x110>
  408e7e:	681a      	ldr	r2, [r3, #0]
  408e80:	3b04      	subs	r3, #4
  408e82:	b91a      	cbnz	r2, 408e8c <quorem+0x118>
  408e84:	459b      	cmp	fp, r3
  408e86:	f108 38ff 	add.w	r8, r8, #4294967295
  408e8a:	d3f8      	bcc.n	408e7e <quorem+0x10a>
  408e8c:	f8c4 8010 	str.w	r8, [r4, #16]
  408e90:	4648      	mov	r0, r9
  408e92:	b003      	add	sp, #12
  408e94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408e98:	2000      	movs	r0, #0
  408e9a:	4770      	bx	lr
  408e9c:	0000      	movs	r0, r0
	...

00408ea0 <_dtoa_r>:
  408ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408ea4:	6c01      	ldr	r1, [r0, #64]	; 0x40
  408ea6:	b09b      	sub	sp, #108	; 0x6c
  408ea8:	4604      	mov	r4, r0
  408eaa:	9e27      	ldr	r6, [sp, #156]	; 0x9c
  408eac:	4692      	mov	sl, r2
  408eae:	469b      	mov	fp, r3
  408eb0:	b141      	cbz	r1, 408ec4 <_dtoa_r+0x24>
  408eb2:	6c42      	ldr	r2, [r0, #68]	; 0x44
  408eb4:	604a      	str	r2, [r1, #4]
  408eb6:	2301      	movs	r3, #1
  408eb8:	4093      	lsls	r3, r2
  408eba:	608b      	str	r3, [r1, #8]
  408ebc:	f002 f816 	bl	40aeec <_Bfree>
  408ec0:	2300      	movs	r3, #0
  408ec2:	6423      	str	r3, [r4, #64]	; 0x40
  408ec4:	f1bb 0f00 	cmp.w	fp, #0
  408ec8:	465d      	mov	r5, fp
  408eca:	db35      	blt.n	408f38 <_dtoa_r+0x98>
  408ecc:	2300      	movs	r3, #0
  408ece:	6033      	str	r3, [r6, #0]
  408ed0:	4b9d      	ldr	r3, [pc, #628]	; (409148 <_dtoa_r+0x2a8>)
  408ed2:	43ab      	bics	r3, r5
  408ed4:	d015      	beq.n	408f02 <_dtoa_r+0x62>
  408ed6:	4650      	mov	r0, sl
  408ed8:	4659      	mov	r1, fp
  408eda:	2200      	movs	r2, #0
  408edc:	2300      	movs	r3, #0
  408ede:	f003 fb71 	bl	40c5c4 <__aeabi_dcmpeq>
  408ee2:	4680      	mov	r8, r0
  408ee4:	2800      	cmp	r0, #0
  408ee6:	d02d      	beq.n	408f44 <_dtoa_r+0xa4>
  408ee8:	9a26      	ldr	r2, [sp, #152]	; 0x98
  408eea:	2301      	movs	r3, #1
  408eec:	6013      	str	r3, [r2, #0]
  408eee:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  408ef0:	2b00      	cmp	r3, #0
  408ef2:	f000 80bd 	beq.w	409070 <_dtoa_r+0x1d0>
  408ef6:	4895      	ldr	r0, [pc, #596]	; (40914c <_dtoa_r+0x2ac>)
  408ef8:	6018      	str	r0, [r3, #0]
  408efa:	3801      	subs	r0, #1
  408efc:	b01b      	add	sp, #108	; 0x6c
  408efe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408f02:	9a26      	ldr	r2, [sp, #152]	; 0x98
  408f04:	f242 730f 	movw	r3, #9999	; 0x270f
  408f08:	6013      	str	r3, [r2, #0]
  408f0a:	f1ba 0f00 	cmp.w	sl, #0
  408f0e:	d10d      	bne.n	408f2c <_dtoa_r+0x8c>
  408f10:	f3c5 0513 	ubfx	r5, r5, #0, #20
  408f14:	b955      	cbnz	r5, 408f2c <_dtoa_r+0x8c>
  408f16:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  408f18:	488d      	ldr	r0, [pc, #564]	; (409150 <_dtoa_r+0x2b0>)
  408f1a:	2b00      	cmp	r3, #0
  408f1c:	d0ee      	beq.n	408efc <_dtoa_r+0x5c>
  408f1e:	f100 0308 	add.w	r3, r0, #8
  408f22:	9a28      	ldr	r2, [sp, #160]	; 0xa0
  408f24:	6013      	str	r3, [r2, #0]
  408f26:	b01b      	add	sp, #108	; 0x6c
  408f28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408f2c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  408f2e:	4889      	ldr	r0, [pc, #548]	; (409154 <_dtoa_r+0x2b4>)
  408f30:	2b00      	cmp	r3, #0
  408f32:	d0e3      	beq.n	408efc <_dtoa_r+0x5c>
  408f34:	1cc3      	adds	r3, r0, #3
  408f36:	e7f4      	b.n	408f22 <_dtoa_r+0x82>
  408f38:	2301      	movs	r3, #1
  408f3a:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
  408f3e:	6033      	str	r3, [r6, #0]
  408f40:	46ab      	mov	fp, r5
  408f42:	e7c5      	b.n	408ed0 <_dtoa_r+0x30>
  408f44:	aa18      	add	r2, sp, #96	; 0x60
  408f46:	ab19      	add	r3, sp, #100	; 0x64
  408f48:	9201      	str	r2, [sp, #4]
  408f4a:	9300      	str	r3, [sp, #0]
  408f4c:	4652      	mov	r2, sl
  408f4e:	465b      	mov	r3, fp
  408f50:	4620      	mov	r0, r4
  408f52:	f002 fa43 	bl	40b3dc <__d2b>
  408f56:	0d2b      	lsrs	r3, r5, #20
  408f58:	4681      	mov	r9, r0
  408f5a:	d071      	beq.n	409040 <_dtoa_r+0x1a0>
  408f5c:	f3cb 0213 	ubfx	r2, fp, #0, #20
  408f60:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
  408f64:	9f18      	ldr	r7, [sp, #96]	; 0x60
  408f66:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  408f6a:	4650      	mov	r0, sl
  408f6c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
  408f70:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  408f74:	2200      	movs	r2, #0
  408f76:	4b78      	ldr	r3, [pc, #480]	; (409158 <_dtoa_r+0x2b8>)
  408f78:	f002 ff08 	bl	40bd8c <__aeabi_dsub>
  408f7c:	a36c      	add	r3, pc, #432	; (adr r3, 409130 <_dtoa_r+0x290>)
  408f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
  408f82:	f003 f8b7 	bl	40c0f4 <__aeabi_dmul>
  408f86:	a36c      	add	r3, pc, #432	; (adr r3, 409138 <_dtoa_r+0x298>)
  408f88:	e9d3 2300 	ldrd	r2, r3, [r3]
  408f8c:	f002 ff00 	bl	40bd90 <__adddf3>
  408f90:	e9cd 0102 	strd	r0, r1, [sp, #8]
  408f94:	4630      	mov	r0, r6
  408f96:	f003 f847 	bl	40c028 <__aeabi_i2d>
  408f9a:	a369      	add	r3, pc, #420	; (adr r3, 409140 <_dtoa_r+0x2a0>)
  408f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
  408fa0:	f003 f8a8 	bl	40c0f4 <__aeabi_dmul>
  408fa4:	4602      	mov	r2, r0
  408fa6:	460b      	mov	r3, r1
  408fa8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  408fac:	f002 fef0 	bl	40bd90 <__adddf3>
  408fb0:	e9cd 0104 	strd	r0, r1, [sp, #16]
  408fb4:	f003 fb4e 	bl	40c654 <__aeabi_d2iz>
  408fb8:	2200      	movs	r2, #0
  408fba:	9002      	str	r0, [sp, #8]
  408fbc:	2300      	movs	r3, #0
  408fbe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  408fc2:	f003 fb09 	bl	40c5d8 <__aeabi_dcmplt>
  408fc6:	2800      	cmp	r0, #0
  408fc8:	f040 8173 	bne.w	4092b2 <_dtoa_r+0x412>
  408fcc:	9d02      	ldr	r5, [sp, #8]
  408fce:	2d16      	cmp	r5, #22
  408fd0:	f200 815d 	bhi.w	40928e <_dtoa_r+0x3ee>
  408fd4:	4b61      	ldr	r3, [pc, #388]	; (40915c <_dtoa_r+0x2bc>)
  408fd6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
  408fda:	e9d3 0100 	ldrd	r0, r1, [r3]
  408fde:	4652      	mov	r2, sl
  408fe0:	465b      	mov	r3, fp
  408fe2:	f003 fb17 	bl	40c614 <__aeabi_dcmpgt>
  408fe6:	2800      	cmp	r0, #0
  408fe8:	f000 81c5 	beq.w	409376 <_dtoa_r+0x4d6>
  408fec:	1e6b      	subs	r3, r5, #1
  408fee:	9302      	str	r3, [sp, #8]
  408ff0:	2300      	movs	r3, #0
  408ff2:	930e      	str	r3, [sp, #56]	; 0x38
  408ff4:	1bbf      	subs	r7, r7, r6
  408ff6:	1e7b      	subs	r3, r7, #1
  408ff8:	9306      	str	r3, [sp, #24]
  408ffa:	f100 8154 	bmi.w	4092a6 <_dtoa_r+0x406>
  408ffe:	2300      	movs	r3, #0
  409000:	9308      	str	r3, [sp, #32]
  409002:	9b02      	ldr	r3, [sp, #8]
  409004:	2b00      	cmp	r3, #0
  409006:	f2c0 8145 	blt.w	409294 <_dtoa_r+0x3f4>
  40900a:	9a06      	ldr	r2, [sp, #24]
  40900c:	930d      	str	r3, [sp, #52]	; 0x34
  40900e:	4611      	mov	r1, r2
  409010:	4419      	add	r1, r3
  409012:	2300      	movs	r3, #0
  409014:	9106      	str	r1, [sp, #24]
  409016:	930c      	str	r3, [sp, #48]	; 0x30
  409018:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40901a:	2b09      	cmp	r3, #9
  40901c:	d82a      	bhi.n	409074 <_dtoa_r+0x1d4>
  40901e:	2b05      	cmp	r3, #5
  409020:	f340 865b 	ble.w	409cda <_dtoa_r+0xe3a>
  409024:	3b04      	subs	r3, #4
  409026:	9324      	str	r3, [sp, #144]	; 0x90
  409028:	2500      	movs	r5, #0
  40902a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40902c:	3b02      	subs	r3, #2
  40902e:	2b03      	cmp	r3, #3
  409030:	f200 8642 	bhi.w	409cb8 <_dtoa_r+0xe18>
  409034:	e8df f013 	tbh	[pc, r3, lsl #1]
  409038:	02c903d4 	.word	0x02c903d4
  40903c:	046103df 	.word	0x046103df
  409040:	9f18      	ldr	r7, [sp, #96]	; 0x60
  409042:	9e19      	ldr	r6, [sp, #100]	; 0x64
  409044:	443e      	add	r6, r7
  409046:	f206 4332 	addw	r3, r6, #1074	; 0x432
  40904a:	2b20      	cmp	r3, #32
  40904c:	f340 818e 	ble.w	40936c <_dtoa_r+0x4cc>
  409050:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  409054:	f206 4012 	addw	r0, r6, #1042	; 0x412
  409058:	409d      	lsls	r5, r3
  40905a:	fa2a f000 	lsr.w	r0, sl, r0
  40905e:	4328      	orrs	r0, r5
  409060:	f002 ffd2 	bl	40c008 <__aeabi_ui2d>
  409064:	2301      	movs	r3, #1
  409066:	3e01      	subs	r6, #1
  409068:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  40906c:	9314      	str	r3, [sp, #80]	; 0x50
  40906e:	e781      	b.n	408f74 <_dtoa_r+0xd4>
  409070:	483b      	ldr	r0, [pc, #236]	; (409160 <_dtoa_r+0x2c0>)
  409072:	e743      	b.n	408efc <_dtoa_r+0x5c>
  409074:	2100      	movs	r1, #0
  409076:	6461      	str	r1, [r4, #68]	; 0x44
  409078:	4620      	mov	r0, r4
  40907a:	9125      	str	r1, [sp, #148]	; 0x94
  40907c:	f001 ff10 	bl	40aea0 <_Balloc>
  409080:	f04f 33ff 	mov.w	r3, #4294967295
  409084:	930a      	str	r3, [sp, #40]	; 0x28
  409086:	9a25      	ldr	r2, [sp, #148]	; 0x94
  409088:	930f      	str	r3, [sp, #60]	; 0x3c
  40908a:	2301      	movs	r3, #1
  40908c:	9004      	str	r0, [sp, #16]
  40908e:	6420      	str	r0, [r4, #64]	; 0x40
  409090:	9224      	str	r2, [sp, #144]	; 0x90
  409092:	930b      	str	r3, [sp, #44]	; 0x2c
  409094:	9b19      	ldr	r3, [sp, #100]	; 0x64
  409096:	2b00      	cmp	r3, #0
  409098:	f2c0 80d9 	blt.w	40924e <_dtoa_r+0x3ae>
  40909c:	9a02      	ldr	r2, [sp, #8]
  40909e:	2a0e      	cmp	r2, #14
  4090a0:	f300 80d5 	bgt.w	40924e <_dtoa_r+0x3ae>
  4090a4:	4b2d      	ldr	r3, [pc, #180]	; (40915c <_dtoa_r+0x2bc>)
  4090a6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  4090aa:	e9d3 2300 	ldrd	r2, r3, [r3]
  4090ae:	e9cd 2308 	strd	r2, r3, [sp, #32]
  4090b2:	9b25      	ldr	r3, [sp, #148]	; 0x94
  4090b4:	2b00      	cmp	r3, #0
  4090b6:	f2c0 83ba 	blt.w	40982e <_dtoa_r+0x98e>
  4090ba:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
  4090be:	4650      	mov	r0, sl
  4090c0:	462a      	mov	r2, r5
  4090c2:	4633      	mov	r3, r6
  4090c4:	4659      	mov	r1, fp
  4090c6:	f003 f93f 	bl	40c348 <__aeabi_ddiv>
  4090ca:	f003 fac3 	bl	40c654 <__aeabi_d2iz>
  4090ce:	4680      	mov	r8, r0
  4090d0:	f002 ffaa 	bl	40c028 <__aeabi_i2d>
  4090d4:	462a      	mov	r2, r5
  4090d6:	4633      	mov	r3, r6
  4090d8:	f003 f80c 	bl	40c0f4 <__aeabi_dmul>
  4090dc:	460b      	mov	r3, r1
  4090de:	4602      	mov	r2, r0
  4090e0:	4659      	mov	r1, fp
  4090e2:	4650      	mov	r0, sl
  4090e4:	f002 fe52 	bl	40bd8c <__aeabi_dsub>
  4090e8:	9d04      	ldr	r5, [sp, #16]
  4090ea:	f108 0330 	add.w	r3, r8, #48	; 0x30
  4090ee:	702b      	strb	r3, [r5, #0]
  4090f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4090f2:	2b01      	cmp	r3, #1
  4090f4:	4606      	mov	r6, r0
  4090f6:	460f      	mov	r7, r1
  4090f8:	f105 0501 	add.w	r5, r5, #1
  4090fc:	d068      	beq.n	4091d0 <_dtoa_r+0x330>
  4090fe:	2200      	movs	r2, #0
  409100:	4b18      	ldr	r3, [pc, #96]	; (409164 <_dtoa_r+0x2c4>)
  409102:	f002 fff7 	bl	40c0f4 <__aeabi_dmul>
  409106:	2200      	movs	r2, #0
  409108:	2300      	movs	r3, #0
  40910a:	4606      	mov	r6, r0
  40910c:	460f      	mov	r7, r1
  40910e:	f003 fa59 	bl	40c5c4 <__aeabi_dcmpeq>
  409112:	2800      	cmp	r0, #0
  409114:	f040 8088 	bne.w	409228 <_dtoa_r+0x388>
  409118:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  40911c:	f04f 0a00 	mov.w	sl, #0
  409120:	f8df b040 	ldr.w	fp, [pc, #64]	; 409164 <_dtoa_r+0x2c4>
  409124:	940c      	str	r4, [sp, #48]	; 0x30
  409126:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  40912a:	e028      	b.n	40917e <_dtoa_r+0x2de>
  40912c:	f3af 8000 	nop.w
  409130:	636f4361 	.word	0x636f4361
  409134:	3fd287a7 	.word	0x3fd287a7
  409138:	8b60c8b3 	.word	0x8b60c8b3
  40913c:	3fc68a28 	.word	0x3fc68a28
  409140:	509f79fb 	.word	0x509f79fb
  409144:	3fd34413 	.word	0x3fd34413
  409148:	7ff00000 	.word	0x7ff00000
  40914c:	0040d9cd 	.word	0x0040d9cd
  409150:	0040da10 	.word	0x0040da10
  409154:	0040da1c 	.word	0x0040da1c
  409158:	3ff80000 	.word	0x3ff80000
  40915c:	0040da58 	.word	0x0040da58
  409160:	0040d9cc 	.word	0x0040d9cc
  409164:	40240000 	.word	0x40240000
  409168:	f002 ffc4 	bl	40c0f4 <__aeabi_dmul>
  40916c:	2200      	movs	r2, #0
  40916e:	2300      	movs	r3, #0
  409170:	4606      	mov	r6, r0
  409172:	460f      	mov	r7, r1
  409174:	f003 fa26 	bl	40c5c4 <__aeabi_dcmpeq>
  409178:	2800      	cmp	r0, #0
  40917a:	f040 83c1 	bne.w	409900 <_dtoa_r+0xa60>
  40917e:	4642      	mov	r2, r8
  409180:	464b      	mov	r3, r9
  409182:	4630      	mov	r0, r6
  409184:	4639      	mov	r1, r7
  409186:	f003 f8df 	bl	40c348 <__aeabi_ddiv>
  40918a:	f003 fa63 	bl	40c654 <__aeabi_d2iz>
  40918e:	4604      	mov	r4, r0
  409190:	f002 ff4a 	bl	40c028 <__aeabi_i2d>
  409194:	4642      	mov	r2, r8
  409196:	464b      	mov	r3, r9
  409198:	f002 ffac 	bl	40c0f4 <__aeabi_dmul>
  40919c:	4602      	mov	r2, r0
  40919e:	460b      	mov	r3, r1
  4091a0:	4630      	mov	r0, r6
  4091a2:	4639      	mov	r1, r7
  4091a4:	f002 fdf2 	bl	40bd8c <__aeabi_dsub>
  4091a8:	f104 0e30 	add.w	lr, r4, #48	; 0x30
  4091ac:	9e04      	ldr	r6, [sp, #16]
  4091ae:	f805 eb01 	strb.w	lr, [r5], #1
  4091b2:	eba5 0e06 	sub.w	lr, r5, r6
  4091b6:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  4091b8:	45b6      	cmp	lr, r6
  4091ba:	e9cd 0106 	strd	r0, r1, [sp, #24]
  4091be:	4652      	mov	r2, sl
  4091c0:	465b      	mov	r3, fp
  4091c2:	d1d1      	bne.n	409168 <_dtoa_r+0x2c8>
  4091c4:	46a0      	mov	r8, r4
  4091c6:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  4091ca:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4091cc:	4606      	mov	r6, r0
  4091ce:	460f      	mov	r7, r1
  4091d0:	4632      	mov	r2, r6
  4091d2:	463b      	mov	r3, r7
  4091d4:	4630      	mov	r0, r6
  4091d6:	4639      	mov	r1, r7
  4091d8:	f002 fdda 	bl	40bd90 <__adddf3>
  4091dc:	4606      	mov	r6, r0
  4091de:	460f      	mov	r7, r1
  4091e0:	4602      	mov	r2, r0
  4091e2:	460b      	mov	r3, r1
  4091e4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  4091e8:	f003 f9f6 	bl	40c5d8 <__aeabi_dcmplt>
  4091ec:	b948      	cbnz	r0, 409202 <_dtoa_r+0x362>
  4091ee:	4632      	mov	r2, r6
  4091f0:	463b      	mov	r3, r7
  4091f2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  4091f6:	f003 f9e5 	bl	40c5c4 <__aeabi_dcmpeq>
  4091fa:	b1a8      	cbz	r0, 409228 <_dtoa_r+0x388>
  4091fc:	f018 0f01 	tst.w	r8, #1
  409200:	d012      	beq.n	409228 <_dtoa_r+0x388>
  409202:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  409206:	9a04      	ldr	r2, [sp, #16]
  409208:	1e6b      	subs	r3, r5, #1
  40920a:	e004      	b.n	409216 <_dtoa_r+0x376>
  40920c:	429a      	cmp	r2, r3
  40920e:	f000 8401 	beq.w	409a14 <_dtoa_r+0xb74>
  409212:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
  409216:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  40921a:	f103 0501 	add.w	r5, r3, #1
  40921e:	d0f5      	beq.n	40920c <_dtoa_r+0x36c>
  409220:	f108 0801 	add.w	r8, r8, #1
  409224:	f883 8000 	strb.w	r8, [r3]
  409228:	4649      	mov	r1, r9
  40922a:	4620      	mov	r0, r4
  40922c:	f001 fe5e 	bl	40aeec <_Bfree>
  409230:	2200      	movs	r2, #0
  409232:	9b02      	ldr	r3, [sp, #8]
  409234:	702a      	strb	r2, [r5, #0]
  409236:	9a26      	ldr	r2, [sp, #152]	; 0x98
  409238:	3301      	adds	r3, #1
  40923a:	6013      	str	r3, [r2, #0]
  40923c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  40923e:	2b00      	cmp	r3, #0
  409240:	f000 839e 	beq.w	409980 <_dtoa_r+0xae0>
  409244:	9804      	ldr	r0, [sp, #16]
  409246:	601d      	str	r5, [r3, #0]
  409248:	b01b      	add	sp, #108	; 0x6c
  40924a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40924e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  409250:	2a00      	cmp	r2, #0
  409252:	d03e      	beq.n	4092d2 <_dtoa_r+0x432>
  409254:	9a24      	ldr	r2, [sp, #144]	; 0x90
  409256:	2a01      	cmp	r2, #1
  409258:	f340 8311 	ble.w	40987e <_dtoa_r+0x9de>
  40925c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40925e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  409260:	1e5f      	subs	r7, r3, #1
  409262:	42ba      	cmp	r2, r7
  409264:	f2c0 838f 	blt.w	409986 <_dtoa_r+0xae6>
  409268:	1bd7      	subs	r7, r2, r7
  40926a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40926c:	2b00      	cmp	r3, #0
  40926e:	f2c0 848b 	blt.w	409b88 <_dtoa_r+0xce8>
  409272:	9d08      	ldr	r5, [sp, #32]
  409274:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  409276:	9a08      	ldr	r2, [sp, #32]
  409278:	441a      	add	r2, r3
  40927a:	9208      	str	r2, [sp, #32]
  40927c:	9a06      	ldr	r2, [sp, #24]
  40927e:	2101      	movs	r1, #1
  409280:	441a      	add	r2, r3
  409282:	4620      	mov	r0, r4
  409284:	9206      	str	r2, [sp, #24]
  409286:	f001 fecb 	bl	40b020 <__i2b>
  40928a:	4606      	mov	r6, r0
  40928c:	e024      	b.n	4092d8 <_dtoa_r+0x438>
  40928e:	2301      	movs	r3, #1
  409290:	930e      	str	r3, [sp, #56]	; 0x38
  409292:	e6af      	b.n	408ff4 <_dtoa_r+0x154>
  409294:	9a08      	ldr	r2, [sp, #32]
  409296:	9b02      	ldr	r3, [sp, #8]
  409298:	1ad2      	subs	r2, r2, r3
  40929a:	425b      	negs	r3, r3
  40929c:	930c      	str	r3, [sp, #48]	; 0x30
  40929e:	2300      	movs	r3, #0
  4092a0:	9208      	str	r2, [sp, #32]
  4092a2:	930d      	str	r3, [sp, #52]	; 0x34
  4092a4:	e6b8      	b.n	409018 <_dtoa_r+0x178>
  4092a6:	f1c7 0301 	rsb	r3, r7, #1
  4092aa:	9308      	str	r3, [sp, #32]
  4092ac:	2300      	movs	r3, #0
  4092ae:	9306      	str	r3, [sp, #24]
  4092b0:	e6a7      	b.n	409002 <_dtoa_r+0x162>
  4092b2:	9d02      	ldr	r5, [sp, #8]
  4092b4:	4628      	mov	r0, r5
  4092b6:	f002 feb7 	bl	40c028 <__aeabi_i2d>
  4092ba:	4602      	mov	r2, r0
  4092bc:	460b      	mov	r3, r1
  4092be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  4092c2:	f003 f97f 	bl	40c5c4 <__aeabi_dcmpeq>
  4092c6:	2800      	cmp	r0, #0
  4092c8:	f47f ae80 	bne.w	408fcc <_dtoa_r+0x12c>
  4092cc:	1e6b      	subs	r3, r5, #1
  4092ce:	9302      	str	r3, [sp, #8]
  4092d0:	e67c      	b.n	408fcc <_dtoa_r+0x12c>
  4092d2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  4092d4:	9d08      	ldr	r5, [sp, #32]
  4092d6:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  4092d8:	2d00      	cmp	r5, #0
  4092da:	dd0c      	ble.n	4092f6 <_dtoa_r+0x456>
  4092dc:	9906      	ldr	r1, [sp, #24]
  4092de:	2900      	cmp	r1, #0
  4092e0:	460b      	mov	r3, r1
  4092e2:	dd08      	ble.n	4092f6 <_dtoa_r+0x456>
  4092e4:	42a9      	cmp	r1, r5
  4092e6:	9a08      	ldr	r2, [sp, #32]
  4092e8:	bfa8      	it	ge
  4092ea:	462b      	movge	r3, r5
  4092ec:	1ad2      	subs	r2, r2, r3
  4092ee:	1aed      	subs	r5, r5, r3
  4092f0:	1acb      	subs	r3, r1, r3
  4092f2:	9208      	str	r2, [sp, #32]
  4092f4:	9306      	str	r3, [sp, #24]
  4092f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4092f8:	b1d3      	cbz	r3, 409330 <_dtoa_r+0x490>
  4092fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4092fc:	2b00      	cmp	r3, #0
  4092fe:	f000 82b7 	beq.w	409870 <_dtoa_r+0x9d0>
  409302:	2f00      	cmp	r7, #0
  409304:	dd10      	ble.n	409328 <_dtoa_r+0x488>
  409306:	4631      	mov	r1, r6
  409308:	463a      	mov	r2, r7
  40930a:	4620      	mov	r0, r4
  40930c:	f001 ff24 	bl	40b158 <__pow5mult>
  409310:	464a      	mov	r2, r9
  409312:	4601      	mov	r1, r0
  409314:	4606      	mov	r6, r0
  409316:	4620      	mov	r0, r4
  409318:	f001 fe8c 	bl	40b034 <__multiply>
  40931c:	4649      	mov	r1, r9
  40931e:	4680      	mov	r8, r0
  409320:	4620      	mov	r0, r4
  409322:	f001 fde3 	bl	40aeec <_Bfree>
  409326:	46c1      	mov	r9, r8
  409328:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40932a:	1bda      	subs	r2, r3, r7
  40932c:	f040 82a1 	bne.w	409872 <_dtoa_r+0x9d2>
  409330:	2101      	movs	r1, #1
  409332:	4620      	mov	r0, r4
  409334:	f001 fe74 	bl	40b020 <__i2b>
  409338:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40933a:	2b00      	cmp	r3, #0
  40933c:	4680      	mov	r8, r0
  40933e:	dd1c      	ble.n	40937a <_dtoa_r+0x4da>
  409340:	4601      	mov	r1, r0
  409342:	461a      	mov	r2, r3
  409344:	4620      	mov	r0, r4
  409346:	f001 ff07 	bl	40b158 <__pow5mult>
  40934a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40934c:	2b01      	cmp	r3, #1
  40934e:	4680      	mov	r8, r0
  409350:	f340 8254 	ble.w	4097fc <_dtoa_r+0x95c>
  409354:	2300      	movs	r3, #0
  409356:	930c      	str	r3, [sp, #48]	; 0x30
  409358:	f8d8 3010 	ldr.w	r3, [r8, #16]
  40935c:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  409360:	6918      	ldr	r0, [r3, #16]
  409362:	f001 fe0d 	bl	40af80 <__hi0bits>
  409366:	f1c0 0020 	rsb	r0, r0, #32
  40936a:	e010      	b.n	40938e <_dtoa_r+0x4ee>
  40936c:	f1c3 0520 	rsb	r5, r3, #32
  409370:	fa0a f005 	lsl.w	r0, sl, r5
  409374:	e674      	b.n	409060 <_dtoa_r+0x1c0>
  409376:	900e      	str	r0, [sp, #56]	; 0x38
  409378:	e63c      	b.n	408ff4 <_dtoa_r+0x154>
  40937a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40937c:	2b01      	cmp	r3, #1
  40937e:	f340 8287 	ble.w	409890 <_dtoa_r+0x9f0>
  409382:	2300      	movs	r3, #0
  409384:	930c      	str	r3, [sp, #48]	; 0x30
  409386:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  409388:	2001      	movs	r0, #1
  40938a:	2b00      	cmp	r3, #0
  40938c:	d1e4      	bne.n	409358 <_dtoa_r+0x4b8>
  40938e:	9a06      	ldr	r2, [sp, #24]
  409390:	4410      	add	r0, r2
  409392:	f010 001f 	ands.w	r0, r0, #31
  409396:	f000 80a1 	beq.w	4094dc <_dtoa_r+0x63c>
  40939a:	f1c0 0320 	rsb	r3, r0, #32
  40939e:	2b04      	cmp	r3, #4
  4093a0:	f340 849e 	ble.w	409ce0 <_dtoa_r+0xe40>
  4093a4:	9b08      	ldr	r3, [sp, #32]
  4093a6:	f1c0 001c 	rsb	r0, r0, #28
  4093aa:	4403      	add	r3, r0
  4093ac:	9308      	str	r3, [sp, #32]
  4093ae:	4613      	mov	r3, r2
  4093b0:	4403      	add	r3, r0
  4093b2:	4405      	add	r5, r0
  4093b4:	9306      	str	r3, [sp, #24]
  4093b6:	9b08      	ldr	r3, [sp, #32]
  4093b8:	2b00      	cmp	r3, #0
  4093ba:	dd05      	ble.n	4093c8 <_dtoa_r+0x528>
  4093bc:	4649      	mov	r1, r9
  4093be:	461a      	mov	r2, r3
  4093c0:	4620      	mov	r0, r4
  4093c2:	f001 ff19 	bl	40b1f8 <__lshift>
  4093c6:	4681      	mov	r9, r0
  4093c8:	9b06      	ldr	r3, [sp, #24]
  4093ca:	2b00      	cmp	r3, #0
  4093cc:	dd05      	ble.n	4093da <_dtoa_r+0x53a>
  4093ce:	4641      	mov	r1, r8
  4093d0:	461a      	mov	r2, r3
  4093d2:	4620      	mov	r0, r4
  4093d4:	f001 ff10 	bl	40b1f8 <__lshift>
  4093d8:	4680      	mov	r8, r0
  4093da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4093dc:	2b00      	cmp	r3, #0
  4093de:	f040 8086 	bne.w	4094ee <_dtoa_r+0x64e>
  4093e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4093e4:	2b00      	cmp	r3, #0
  4093e6:	f340 8266 	ble.w	4098b6 <_dtoa_r+0xa16>
  4093ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4093ec:	2b00      	cmp	r3, #0
  4093ee:	f000 8098 	beq.w	409522 <_dtoa_r+0x682>
  4093f2:	2d00      	cmp	r5, #0
  4093f4:	dd05      	ble.n	409402 <_dtoa_r+0x562>
  4093f6:	4631      	mov	r1, r6
  4093f8:	462a      	mov	r2, r5
  4093fa:	4620      	mov	r0, r4
  4093fc:	f001 fefc 	bl	40b1f8 <__lshift>
  409400:	4606      	mov	r6, r0
  409402:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  409404:	2b00      	cmp	r3, #0
  409406:	f040 8337 	bne.w	409a78 <_dtoa_r+0xbd8>
  40940a:	9606      	str	r6, [sp, #24]
  40940c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40940e:	9a04      	ldr	r2, [sp, #16]
  409410:	f8dd b018 	ldr.w	fp, [sp, #24]
  409414:	3b01      	subs	r3, #1
  409416:	18d3      	adds	r3, r2, r3
  409418:	930b      	str	r3, [sp, #44]	; 0x2c
  40941a:	f00a 0301 	and.w	r3, sl, #1
  40941e:	930c      	str	r3, [sp, #48]	; 0x30
  409420:	4617      	mov	r7, r2
  409422:	46c2      	mov	sl, r8
  409424:	4651      	mov	r1, sl
  409426:	4648      	mov	r0, r9
  409428:	f7ff fca4 	bl	408d74 <quorem>
  40942c:	4631      	mov	r1, r6
  40942e:	4605      	mov	r5, r0
  409430:	4648      	mov	r0, r9
  409432:	f001 ff33 	bl	40b29c <__mcmp>
  409436:	465a      	mov	r2, fp
  409438:	900a      	str	r0, [sp, #40]	; 0x28
  40943a:	4651      	mov	r1, sl
  40943c:	4620      	mov	r0, r4
  40943e:	f001 ff49 	bl	40b2d4 <__mdiff>
  409442:	68c2      	ldr	r2, [r0, #12]
  409444:	4680      	mov	r8, r0
  409446:	f105 0330 	add.w	r3, r5, #48	; 0x30
  40944a:	2a00      	cmp	r2, #0
  40944c:	f040 822b 	bne.w	4098a6 <_dtoa_r+0xa06>
  409450:	4601      	mov	r1, r0
  409452:	4648      	mov	r0, r9
  409454:	9308      	str	r3, [sp, #32]
  409456:	f001 ff21 	bl	40b29c <__mcmp>
  40945a:	4641      	mov	r1, r8
  40945c:	9006      	str	r0, [sp, #24]
  40945e:	4620      	mov	r0, r4
  409460:	f001 fd44 	bl	40aeec <_Bfree>
  409464:	9a06      	ldr	r2, [sp, #24]
  409466:	9b08      	ldr	r3, [sp, #32]
  409468:	b932      	cbnz	r2, 409478 <_dtoa_r+0x5d8>
  40946a:	9924      	ldr	r1, [sp, #144]	; 0x90
  40946c:	b921      	cbnz	r1, 409478 <_dtoa_r+0x5d8>
  40946e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  409470:	2a00      	cmp	r2, #0
  409472:	f000 83ef 	beq.w	409c54 <_dtoa_r+0xdb4>
  409476:	9a24      	ldr	r2, [sp, #144]	; 0x90
  409478:	990a      	ldr	r1, [sp, #40]	; 0x28
  40947a:	2900      	cmp	r1, #0
  40947c:	f2c0 829f 	blt.w	4099be <_dtoa_r+0xb1e>
  409480:	d105      	bne.n	40948e <_dtoa_r+0x5ee>
  409482:	9924      	ldr	r1, [sp, #144]	; 0x90
  409484:	b919      	cbnz	r1, 40948e <_dtoa_r+0x5ee>
  409486:	990c      	ldr	r1, [sp, #48]	; 0x30
  409488:	2900      	cmp	r1, #0
  40948a:	f000 8298 	beq.w	4099be <_dtoa_r+0xb1e>
  40948e:	2a00      	cmp	r2, #0
  409490:	f300 8306 	bgt.w	409aa0 <_dtoa_r+0xc00>
  409494:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  409496:	703b      	strb	r3, [r7, #0]
  409498:	f107 0801 	add.w	r8, r7, #1
  40949c:	4297      	cmp	r7, r2
  40949e:	4645      	mov	r5, r8
  4094a0:	f000 830c 	beq.w	409abc <_dtoa_r+0xc1c>
  4094a4:	4649      	mov	r1, r9
  4094a6:	2300      	movs	r3, #0
  4094a8:	220a      	movs	r2, #10
  4094aa:	4620      	mov	r0, r4
  4094ac:	f001 fd28 	bl	40af00 <__multadd>
  4094b0:	455e      	cmp	r6, fp
  4094b2:	4681      	mov	r9, r0
  4094b4:	4631      	mov	r1, r6
  4094b6:	f04f 0300 	mov.w	r3, #0
  4094ba:	f04f 020a 	mov.w	r2, #10
  4094be:	4620      	mov	r0, r4
  4094c0:	f000 81eb 	beq.w	40989a <_dtoa_r+0x9fa>
  4094c4:	f001 fd1c 	bl	40af00 <__multadd>
  4094c8:	4659      	mov	r1, fp
  4094ca:	4606      	mov	r6, r0
  4094cc:	2300      	movs	r3, #0
  4094ce:	220a      	movs	r2, #10
  4094d0:	4620      	mov	r0, r4
  4094d2:	f001 fd15 	bl	40af00 <__multadd>
  4094d6:	4647      	mov	r7, r8
  4094d8:	4683      	mov	fp, r0
  4094da:	e7a3      	b.n	409424 <_dtoa_r+0x584>
  4094dc:	201c      	movs	r0, #28
  4094de:	9b08      	ldr	r3, [sp, #32]
  4094e0:	4403      	add	r3, r0
  4094e2:	9308      	str	r3, [sp, #32]
  4094e4:	9b06      	ldr	r3, [sp, #24]
  4094e6:	4403      	add	r3, r0
  4094e8:	4405      	add	r5, r0
  4094ea:	9306      	str	r3, [sp, #24]
  4094ec:	e763      	b.n	4093b6 <_dtoa_r+0x516>
  4094ee:	4641      	mov	r1, r8
  4094f0:	4648      	mov	r0, r9
  4094f2:	f001 fed3 	bl	40b29c <__mcmp>
  4094f6:	2800      	cmp	r0, #0
  4094f8:	f6bf af73 	bge.w	4093e2 <_dtoa_r+0x542>
  4094fc:	9f02      	ldr	r7, [sp, #8]
  4094fe:	4649      	mov	r1, r9
  409500:	2300      	movs	r3, #0
  409502:	220a      	movs	r2, #10
  409504:	4620      	mov	r0, r4
  409506:	3f01      	subs	r7, #1
  409508:	9702      	str	r7, [sp, #8]
  40950a:	f001 fcf9 	bl	40af00 <__multadd>
  40950e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  409510:	4681      	mov	r9, r0
  409512:	2b00      	cmp	r3, #0
  409514:	f040 83b6 	bne.w	409c84 <_dtoa_r+0xde4>
  409518:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40951a:	2b00      	cmp	r3, #0
  40951c:	f340 83bf 	ble.w	409c9e <_dtoa_r+0xdfe>
  409520:	930a      	str	r3, [sp, #40]	; 0x28
  409522:	f8dd b010 	ldr.w	fp, [sp, #16]
  409526:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  409528:	465d      	mov	r5, fp
  40952a:	e002      	b.n	409532 <_dtoa_r+0x692>
  40952c:	f001 fce8 	bl	40af00 <__multadd>
  409530:	4681      	mov	r9, r0
  409532:	4641      	mov	r1, r8
  409534:	4648      	mov	r0, r9
  409536:	f7ff fc1d 	bl	408d74 <quorem>
  40953a:	f100 0a30 	add.w	sl, r0, #48	; 0x30
  40953e:	f805 ab01 	strb.w	sl, [r5], #1
  409542:	eba5 030b 	sub.w	r3, r5, fp
  409546:	42bb      	cmp	r3, r7
  409548:	f04f 020a 	mov.w	r2, #10
  40954c:	f04f 0300 	mov.w	r3, #0
  409550:	4649      	mov	r1, r9
  409552:	4620      	mov	r0, r4
  409554:	dbea      	blt.n	40952c <_dtoa_r+0x68c>
  409556:	9b04      	ldr	r3, [sp, #16]
  409558:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40955a:	2a01      	cmp	r2, #1
  40955c:	bfac      	ite	ge
  40955e:	189b      	addge	r3, r3, r2
  409560:	3301      	addlt	r3, #1
  409562:	461d      	mov	r5, r3
  409564:	f04f 0b00 	mov.w	fp, #0
  409568:	4649      	mov	r1, r9
  40956a:	2201      	movs	r2, #1
  40956c:	4620      	mov	r0, r4
  40956e:	f001 fe43 	bl	40b1f8 <__lshift>
  409572:	4641      	mov	r1, r8
  409574:	4681      	mov	r9, r0
  409576:	f001 fe91 	bl	40b29c <__mcmp>
  40957a:	2800      	cmp	r0, #0
  40957c:	f340 823d 	ble.w	4099fa <_dtoa_r+0xb5a>
  409580:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  409584:	9904      	ldr	r1, [sp, #16]
  409586:	1e6b      	subs	r3, r5, #1
  409588:	e004      	b.n	409594 <_dtoa_r+0x6f4>
  40958a:	428b      	cmp	r3, r1
  40958c:	f000 81ae 	beq.w	4098ec <_dtoa_r+0xa4c>
  409590:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  409594:	2a39      	cmp	r2, #57	; 0x39
  409596:	f103 0501 	add.w	r5, r3, #1
  40959a:	d0f6      	beq.n	40958a <_dtoa_r+0x6ea>
  40959c:	3201      	adds	r2, #1
  40959e:	701a      	strb	r2, [r3, #0]
  4095a0:	4641      	mov	r1, r8
  4095a2:	4620      	mov	r0, r4
  4095a4:	f001 fca2 	bl	40aeec <_Bfree>
  4095a8:	2e00      	cmp	r6, #0
  4095aa:	f43f ae3d 	beq.w	409228 <_dtoa_r+0x388>
  4095ae:	f1bb 0f00 	cmp.w	fp, #0
  4095b2:	d005      	beq.n	4095c0 <_dtoa_r+0x720>
  4095b4:	45b3      	cmp	fp, r6
  4095b6:	d003      	beq.n	4095c0 <_dtoa_r+0x720>
  4095b8:	4659      	mov	r1, fp
  4095ba:	4620      	mov	r0, r4
  4095bc:	f001 fc96 	bl	40aeec <_Bfree>
  4095c0:	4631      	mov	r1, r6
  4095c2:	4620      	mov	r0, r4
  4095c4:	f001 fc92 	bl	40aeec <_Bfree>
  4095c8:	e62e      	b.n	409228 <_dtoa_r+0x388>
  4095ca:	2300      	movs	r3, #0
  4095cc:	930b      	str	r3, [sp, #44]	; 0x2c
  4095ce:	9b02      	ldr	r3, [sp, #8]
  4095d0:	9a25      	ldr	r2, [sp, #148]	; 0x94
  4095d2:	4413      	add	r3, r2
  4095d4:	930f      	str	r3, [sp, #60]	; 0x3c
  4095d6:	3301      	adds	r3, #1
  4095d8:	2b01      	cmp	r3, #1
  4095da:	461f      	mov	r7, r3
  4095dc:	461e      	mov	r6, r3
  4095de:	930a      	str	r3, [sp, #40]	; 0x28
  4095e0:	bfb8      	it	lt
  4095e2:	2701      	movlt	r7, #1
  4095e4:	2100      	movs	r1, #0
  4095e6:	2f17      	cmp	r7, #23
  4095e8:	6461      	str	r1, [r4, #68]	; 0x44
  4095ea:	d90a      	bls.n	409602 <_dtoa_r+0x762>
  4095ec:	2201      	movs	r2, #1
  4095ee:	2304      	movs	r3, #4
  4095f0:	005b      	lsls	r3, r3, #1
  4095f2:	f103 0014 	add.w	r0, r3, #20
  4095f6:	4287      	cmp	r7, r0
  4095f8:	4611      	mov	r1, r2
  4095fa:	f102 0201 	add.w	r2, r2, #1
  4095fe:	d2f7      	bcs.n	4095f0 <_dtoa_r+0x750>
  409600:	6461      	str	r1, [r4, #68]	; 0x44
  409602:	4620      	mov	r0, r4
  409604:	f001 fc4c 	bl	40aea0 <_Balloc>
  409608:	2e0e      	cmp	r6, #14
  40960a:	9004      	str	r0, [sp, #16]
  40960c:	6420      	str	r0, [r4, #64]	; 0x40
  40960e:	f63f ad41 	bhi.w	409094 <_dtoa_r+0x1f4>
  409612:	2d00      	cmp	r5, #0
  409614:	f43f ad3e 	beq.w	409094 <_dtoa_r+0x1f4>
  409618:	9902      	ldr	r1, [sp, #8]
  40961a:	2900      	cmp	r1, #0
  40961c:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
  409620:	f340 8202 	ble.w	409a28 <_dtoa_r+0xb88>
  409624:	4bb8      	ldr	r3, [pc, #736]	; (409908 <_dtoa_r+0xa68>)
  409626:	f001 020f 	and.w	r2, r1, #15
  40962a:	110d      	asrs	r5, r1, #4
  40962c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  409630:	06e9      	lsls	r1, r5, #27
  409632:	e9d3 6700 	ldrd	r6, r7, [r3]
  409636:	f140 81ae 	bpl.w	409996 <_dtoa_r+0xaf6>
  40963a:	4bb4      	ldr	r3, [pc, #720]	; (40990c <_dtoa_r+0xa6c>)
  40963c:	4650      	mov	r0, sl
  40963e:	4659      	mov	r1, fp
  409640:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  409644:	f002 fe80 	bl	40c348 <__aeabi_ddiv>
  409648:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  40964c:	f005 050f 	and.w	r5, r5, #15
  409650:	f04f 0a03 	mov.w	sl, #3
  409654:	b18d      	cbz	r5, 40967a <_dtoa_r+0x7da>
  409656:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 40990c <_dtoa_r+0xa6c>
  40965a:	07ea      	lsls	r2, r5, #31
  40965c:	d509      	bpl.n	409672 <_dtoa_r+0x7d2>
  40965e:	4630      	mov	r0, r6
  409660:	4639      	mov	r1, r7
  409662:	e9d8 2300 	ldrd	r2, r3, [r8]
  409666:	f002 fd45 	bl	40c0f4 <__aeabi_dmul>
  40966a:	f10a 0a01 	add.w	sl, sl, #1
  40966e:	4606      	mov	r6, r0
  409670:	460f      	mov	r7, r1
  409672:	106d      	asrs	r5, r5, #1
  409674:	f108 0808 	add.w	r8, r8, #8
  409678:	d1ef      	bne.n	40965a <_dtoa_r+0x7ba>
  40967a:	463b      	mov	r3, r7
  40967c:	4632      	mov	r2, r6
  40967e:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  409682:	f002 fe61 	bl	40c348 <__aeabi_ddiv>
  409686:	4607      	mov	r7, r0
  409688:	4688      	mov	r8, r1
  40968a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40968c:	b143      	cbz	r3, 4096a0 <_dtoa_r+0x800>
  40968e:	2200      	movs	r2, #0
  409690:	4b9f      	ldr	r3, [pc, #636]	; (409910 <_dtoa_r+0xa70>)
  409692:	4638      	mov	r0, r7
  409694:	4641      	mov	r1, r8
  409696:	f002 ff9f 	bl	40c5d8 <__aeabi_dcmplt>
  40969a:	2800      	cmp	r0, #0
  40969c:	f040 8286 	bne.w	409bac <_dtoa_r+0xd0c>
  4096a0:	4650      	mov	r0, sl
  4096a2:	f002 fcc1 	bl	40c028 <__aeabi_i2d>
  4096a6:	463a      	mov	r2, r7
  4096a8:	4643      	mov	r3, r8
  4096aa:	f002 fd23 	bl	40c0f4 <__aeabi_dmul>
  4096ae:	4b99      	ldr	r3, [pc, #612]	; (409914 <_dtoa_r+0xa74>)
  4096b0:	2200      	movs	r2, #0
  4096b2:	f002 fb6d 	bl	40bd90 <__adddf3>
  4096b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4096b8:	4605      	mov	r5, r0
  4096ba:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  4096be:	2b00      	cmp	r3, #0
  4096c0:	f000 813e 	beq.w	409940 <_dtoa_r+0xaa0>
  4096c4:	9b02      	ldr	r3, [sp, #8]
  4096c6:	9315      	str	r3, [sp, #84]	; 0x54
  4096c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4096ca:	9312      	str	r3, [sp, #72]	; 0x48
  4096cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4096ce:	2b00      	cmp	r3, #0
  4096d0:	f000 81fa 	beq.w	409ac8 <_dtoa_r+0xc28>
  4096d4:	9a12      	ldr	r2, [sp, #72]	; 0x48
  4096d6:	4b8c      	ldr	r3, [pc, #560]	; (409908 <_dtoa_r+0xa68>)
  4096d8:	498f      	ldr	r1, [pc, #572]	; (409918 <_dtoa_r+0xa78>)
  4096da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  4096de:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  4096e2:	2000      	movs	r0, #0
  4096e4:	f002 fe30 	bl	40c348 <__aeabi_ddiv>
  4096e8:	462a      	mov	r2, r5
  4096ea:	4633      	mov	r3, r6
  4096ec:	f002 fb4e 	bl	40bd8c <__aeabi_dsub>
  4096f0:	4682      	mov	sl, r0
  4096f2:	468b      	mov	fp, r1
  4096f4:	4638      	mov	r0, r7
  4096f6:	4641      	mov	r1, r8
  4096f8:	f002 ffac 	bl	40c654 <__aeabi_d2iz>
  4096fc:	4605      	mov	r5, r0
  4096fe:	f002 fc93 	bl	40c028 <__aeabi_i2d>
  409702:	4602      	mov	r2, r0
  409704:	460b      	mov	r3, r1
  409706:	4638      	mov	r0, r7
  409708:	4641      	mov	r1, r8
  40970a:	f002 fb3f 	bl	40bd8c <__aeabi_dsub>
  40970e:	3530      	adds	r5, #48	; 0x30
  409710:	fa5f f885 	uxtb.w	r8, r5
  409714:	9d04      	ldr	r5, [sp, #16]
  409716:	4606      	mov	r6, r0
  409718:	460f      	mov	r7, r1
  40971a:	f885 8000 	strb.w	r8, [r5]
  40971e:	4602      	mov	r2, r0
  409720:	460b      	mov	r3, r1
  409722:	4650      	mov	r0, sl
  409724:	4659      	mov	r1, fp
  409726:	3501      	adds	r5, #1
  409728:	f002 ff74 	bl	40c614 <__aeabi_dcmpgt>
  40972c:	2800      	cmp	r0, #0
  40972e:	d154      	bne.n	4097da <_dtoa_r+0x93a>
  409730:	4632      	mov	r2, r6
  409732:	463b      	mov	r3, r7
  409734:	2000      	movs	r0, #0
  409736:	4976      	ldr	r1, [pc, #472]	; (409910 <_dtoa_r+0xa70>)
  409738:	f002 fb28 	bl	40bd8c <__aeabi_dsub>
  40973c:	4602      	mov	r2, r0
  40973e:	460b      	mov	r3, r1
  409740:	4650      	mov	r0, sl
  409742:	4659      	mov	r1, fp
  409744:	f002 ff66 	bl	40c614 <__aeabi_dcmpgt>
  409748:	2800      	cmp	r0, #0
  40974a:	f040 8270 	bne.w	409c2e <_dtoa_r+0xd8e>
  40974e:	9a12      	ldr	r2, [sp, #72]	; 0x48
  409750:	2a01      	cmp	r2, #1
  409752:	f000 8111 	beq.w	409978 <_dtoa_r+0xad8>
  409756:	9b12      	ldr	r3, [sp, #72]	; 0x48
  409758:	9a04      	ldr	r2, [sp, #16]
  40975a:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  40975e:	4413      	add	r3, r2
  409760:	4699      	mov	r9, r3
  409762:	e00d      	b.n	409780 <_dtoa_r+0x8e0>
  409764:	2000      	movs	r0, #0
  409766:	496a      	ldr	r1, [pc, #424]	; (409910 <_dtoa_r+0xa70>)
  409768:	f002 fb10 	bl	40bd8c <__aeabi_dsub>
  40976c:	4652      	mov	r2, sl
  40976e:	465b      	mov	r3, fp
  409770:	f002 ff32 	bl	40c5d8 <__aeabi_dcmplt>
  409774:	2800      	cmp	r0, #0
  409776:	f040 8258 	bne.w	409c2a <_dtoa_r+0xd8a>
  40977a:	454d      	cmp	r5, r9
  40977c:	f000 80fa 	beq.w	409974 <_dtoa_r+0xad4>
  409780:	4650      	mov	r0, sl
  409782:	4659      	mov	r1, fp
  409784:	2200      	movs	r2, #0
  409786:	4b65      	ldr	r3, [pc, #404]	; (40991c <_dtoa_r+0xa7c>)
  409788:	f002 fcb4 	bl	40c0f4 <__aeabi_dmul>
  40978c:	2200      	movs	r2, #0
  40978e:	4b63      	ldr	r3, [pc, #396]	; (40991c <_dtoa_r+0xa7c>)
  409790:	4682      	mov	sl, r0
  409792:	468b      	mov	fp, r1
  409794:	4630      	mov	r0, r6
  409796:	4639      	mov	r1, r7
  409798:	f002 fcac 	bl	40c0f4 <__aeabi_dmul>
  40979c:	460f      	mov	r7, r1
  40979e:	4606      	mov	r6, r0
  4097a0:	f002 ff58 	bl	40c654 <__aeabi_d2iz>
  4097a4:	4680      	mov	r8, r0
  4097a6:	f002 fc3f 	bl	40c028 <__aeabi_i2d>
  4097aa:	4602      	mov	r2, r0
  4097ac:	460b      	mov	r3, r1
  4097ae:	4630      	mov	r0, r6
  4097b0:	4639      	mov	r1, r7
  4097b2:	f002 faeb 	bl	40bd8c <__aeabi_dsub>
  4097b6:	f108 0830 	add.w	r8, r8, #48	; 0x30
  4097ba:	fa5f f888 	uxtb.w	r8, r8
  4097be:	4652      	mov	r2, sl
  4097c0:	465b      	mov	r3, fp
  4097c2:	f805 8b01 	strb.w	r8, [r5], #1
  4097c6:	4606      	mov	r6, r0
  4097c8:	460f      	mov	r7, r1
  4097ca:	f002 ff05 	bl	40c5d8 <__aeabi_dcmplt>
  4097ce:	4632      	mov	r2, r6
  4097d0:	463b      	mov	r3, r7
  4097d2:	2800      	cmp	r0, #0
  4097d4:	d0c6      	beq.n	409764 <_dtoa_r+0x8c4>
  4097d6:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  4097da:	9b15      	ldr	r3, [sp, #84]	; 0x54
  4097dc:	9302      	str	r3, [sp, #8]
  4097de:	e523      	b.n	409228 <_dtoa_r+0x388>
  4097e0:	2300      	movs	r3, #0
  4097e2:	930b      	str	r3, [sp, #44]	; 0x2c
  4097e4:	9b25      	ldr	r3, [sp, #148]	; 0x94
  4097e6:	2b00      	cmp	r3, #0
  4097e8:	f340 80dc 	ble.w	4099a4 <_dtoa_r+0xb04>
  4097ec:	461f      	mov	r7, r3
  4097ee:	461e      	mov	r6, r3
  4097f0:	930f      	str	r3, [sp, #60]	; 0x3c
  4097f2:	930a      	str	r3, [sp, #40]	; 0x28
  4097f4:	e6f6      	b.n	4095e4 <_dtoa_r+0x744>
  4097f6:	2301      	movs	r3, #1
  4097f8:	930b      	str	r3, [sp, #44]	; 0x2c
  4097fa:	e7f3      	b.n	4097e4 <_dtoa_r+0x944>
  4097fc:	f1ba 0f00 	cmp.w	sl, #0
  409800:	f47f ada8 	bne.w	409354 <_dtoa_r+0x4b4>
  409804:	f3cb 0313 	ubfx	r3, fp, #0, #20
  409808:	2b00      	cmp	r3, #0
  40980a:	f47f adba 	bne.w	409382 <_dtoa_r+0x4e2>
  40980e:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
  409812:	0d3f      	lsrs	r7, r7, #20
  409814:	053f      	lsls	r7, r7, #20
  409816:	2f00      	cmp	r7, #0
  409818:	f000 820d 	beq.w	409c36 <_dtoa_r+0xd96>
  40981c:	9b08      	ldr	r3, [sp, #32]
  40981e:	3301      	adds	r3, #1
  409820:	9308      	str	r3, [sp, #32]
  409822:	9b06      	ldr	r3, [sp, #24]
  409824:	3301      	adds	r3, #1
  409826:	9306      	str	r3, [sp, #24]
  409828:	2301      	movs	r3, #1
  40982a:	930c      	str	r3, [sp, #48]	; 0x30
  40982c:	e5ab      	b.n	409386 <_dtoa_r+0x4e6>
  40982e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  409830:	2b00      	cmp	r3, #0
  409832:	f73f ac42 	bgt.w	4090ba <_dtoa_r+0x21a>
  409836:	f040 8221 	bne.w	409c7c <_dtoa_r+0xddc>
  40983a:	2200      	movs	r2, #0
  40983c:	4b38      	ldr	r3, [pc, #224]	; (409920 <_dtoa_r+0xa80>)
  40983e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  409842:	f002 fc57 	bl	40c0f4 <__aeabi_dmul>
  409846:	4652      	mov	r2, sl
  409848:	465b      	mov	r3, fp
  40984a:	f002 fed9 	bl	40c600 <__aeabi_dcmpge>
  40984e:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  409852:	4646      	mov	r6, r8
  409854:	2800      	cmp	r0, #0
  409856:	d041      	beq.n	4098dc <_dtoa_r+0xa3c>
  409858:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40985a:	9d04      	ldr	r5, [sp, #16]
  40985c:	43db      	mvns	r3, r3
  40985e:	9302      	str	r3, [sp, #8]
  409860:	4641      	mov	r1, r8
  409862:	4620      	mov	r0, r4
  409864:	f001 fb42 	bl	40aeec <_Bfree>
  409868:	2e00      	cmp	r6, #0
  40986a:	f43f acdd 	beq.w	409228 <_dtoa_r+0x388>
  40986e:	e6a7      	b.n	4095c0 <_dtoa_r+0x720>
  409870:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  409872:	4649      	mov	r1, r9
  409874:	4620      	mov	r0, r4
  409876:	f001 fc6f 	bl	40b158 <__pow5mult>
  40987a:	4681      	mov	r9, r0
  40987c:	e558      	b.n	409330 <_dtoa_r+0x490>
  40987e:	9a14      	ldr	r2, [sp, #80]	; 0x50
  409880:	2a00      	cmp	r2, #0
  409882:	f000 8187 	beq.w	409b94 <_dtoa_r+0xcf4>
  409886:	f203 4333 	addw	r3, r3, #1075	; 0x433
  40988a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  40988c:	9d08      	ldr	r5, [sp, #32]
  40988e:	e4f2      	b.n	409276 <_dtoa_r+0x3d6>
  409890:	f1ba 0f00 	cmp.w	sl, #0
  409894:	f47f ad75 	bne.w	409382 <_dtoa_r+0x4e2>
  409898:	e7b4      	b.n	409804 <_dtoa_r+0x964>
  40989a:	f001 fb31 	bl	40af00 <__multadd>
  40989e:	4647      	mov	r7, r8
  4098a0:	4606      	mov	r6, r0
  4098a2:	4683      	mov	fp, r0
  4098a4:	e5be      	b.n	409424 <_dtoa_r+0x584>
  4098a6:	4601      	mov	r1, r0
  4098a8:	4620      	mov	r0, r4
  4098aa:	9306      	str	r3, [sp, #24]
  4098ac:	f001 fb1e 	bl	40aeec <_Bfree>
  4098b0:	2201      	movs	r2, #1
  4098b2:	9b06      	ldr	r3, [sp, #24]
  4098b4:	e5e0      	b.n	409478 <_dtoa_r+0x5d8>
  4098b6:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4098b8:	2b02      	cmp	r3, #2
  4098ba:	f77f ad96 	ble.w	4093ea <_dtoa_r+0x54a>
  4098be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4098c0:	2b00      	cmp	r3, #0
  4098c2:	d1c9      	bne.n	409858 <_dtoa_r+0x9b8>
  4098c4:	4641      	mov	r1, r8
  4098c6:	2205      	movs	r2, #5
  4098c8:	4620      	mov	r0, r4
  4098ca:	f001 fb19 	bl	40af00 <__multadd>
  4098ce:	4601      	mov	r1, r0
  4098d0:	4680      	mov	r8, r0
  4098d2:	4648      	mov	r0, r9
  4098d4:	f001 fce2 	bl	40b29c <__mcmp>
  4098d8:	2800      	cmp	r0, #0
  4098da:	ddbd      	ble.n	409858 <_dtoa_r+0x9b8>
  4098dc:	9a02      	ldr	r2, [sp, #8]
  4098de:	9904      	ldr	r1, [sp, #16]
  4098e0:	2331      	movs	r3, #49	; 0x31
  4098e2:	3201      	adds	r2, #1
  4098e4:	9202      	str	r2, [sp, #8]
  4098e6:	700b      	strb	r3, [r1, #0]
  4098e8:	1c4d      	adds	r5, r1, #1
  4098ea:	e7b9      	b.n	409860 <_dtoa_r+0x9c0>
  4098ec:	9a02      	ldr	r2, [sp, #8]
  4098ee:	3201      	adds	r2, #1
  4098f0:	9202      	str	r2, [sp, #8]
  4098f2:	9a04      	ldr	r2, [sp, #16]
  4098f4:	2331      	movs	r3, #49	; 0x31
  4098f6:	7013      	strb	r3, [r2, #0]
  4098f8:	e652      	b.n	4095a0 <_dtoa_r+0x700>
  4098fa:	2301      	movs	r3, #1
  4098fc:	930b      	str	r3, [sp, #44]	; 0x2c
  4098fe:	e666      	b.n	4095ce <_dtoa_r+0x72e>
  409900:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  409904:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  409906:	e48f      	b.n	409228 <_dtoa_r+0x388>
  409908:	0040da58 	.word	0x0040da58
  40990c:	0040da30 	.word	0x0040da30
  409910:	3ff00000 	.word	0x3ff00000
  409914:	401c0000 	.word	0x401c0000
  409918:	3fe00000 	.word	0x3fe00000
  40991c:	40240000 	.word	0x40240000
  409920:	40140000 	.word	0x40140000
  409924:	4650      	mov	r0, sl
  409926:	f002 fb7f 	bl	40c028 <__aeabi_i2d>
  40992a:	463a      	mov	r2, r7
  40992c:	4643      	mov	r3, r8
  40992e:	f002 fbe1 	bl	40c0f4 <__aeabi_dmul>
  409932:	2200      	movs	r2, #0
  409934:	4bc1      	ldr	r3, [pc, #772]	; (409c3c <_dtoa_r+0xd9c>)
  409936:	f002 fa2b 	bl	40bd90 <__adddf3>
  40993a:	4605      	mov	r5, r0
  40993c:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  409940:	4641      	mov	r1, r8
  409942:	2200      	movs	r2, #0
  409944:	4bbe      	ldr	r3, [pc, #760]	; (409c40 <_dtoa_r+0xda0>)
  409946:	4638      	mov	r0, r7
  409948:	f002 fa20 	bl	40bd8c <__aeabi_dsub>
  40994c:	462a      	mov	r2, r5
  40994e:	4633      	mov	r3, r6
  409950:	4682      	mov	sl, r0
  409952:	468b      	mov	fp, r1
  409954:	f002 fe5e 	bl	40c614 <__aeabi_dcmpgt>
  409958:	4680      	mov	r8, r0
  40995a:	2800      	cmp	r0, #0
  40995c:	f040 8110 	bne.w	409b80 <_dtoa_r+0xce0>
  409960:	462a      	mov	r2, r5
  409962:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
  409966:	4650      	mov	r0, sl
  409968:	4659      	mov	r1, fp
  40996a:	f002 fe35 	bl	40c5d8 <__aeabi_dcmplt>
  40996e:	b118      	cbz	r0, 409978 <_dtoa_r+0xad8>
  409970:	4646      	mov	r6, r8
  409972:	e771      	b.n	409858 <_dtoa_r+0x9b8>
  409974:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  409978:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
  40997c:	f7ff bb8a 	b.w	409094 <_dtoa_r+0x1f4>
  409980:	9804      	ldr	r0, [sp, #16]
  409982:	f7ff babb 	b.w	408efc <_dtoa_r+0x5c>
  409986:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  409988:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40998a:	970c      	str	r7, [sp, #48]	; 0x30
  40998c:	1afb      	subs	r3, r7, r3
  40998e:	441a      	add	r2, r3
  409990:	920d      	str	r2, [sp, #52]	; 0x34
  409992:	2700      	movs	r7, #0
  409994:	e469      	b.n	40926a <_dtoa_r+0x3ca>
  409996:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
  40999a:	f04f 0a02 	mov.w	sl, #2
  40999e:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  4099a2:	e657      	b.n	409654 <_dtoa_r+0x7b4>
  4099a4:	2100      	movs	r1, #0
  4099a6:	2301      	movs	r3, #1
  4099a8:	6461      	str	r1, [r4, #68]	; 0x44
  4099aa:	4620      	mov	r0, r4
  4099ac:	9325      	str	r3, [sp, #148]	; 0x94
  4099ae:	f001 fa77 	bl	40aea0 <_Balloc>
  4099b2:	9b25      	ldr	r3, [sp, #148]	; 0x94
  4099b4:	9004      	str	r0, [sp, #16]
  4099b6:	6420      	str	r0, [r4, #64]	; 0x40
  4099b8:	930a      	str	r3, [sp, #40]	; 0x28
  4099ba:	930f      	str	r3, [sp, #60]	; 0x3c
  4099bc:	e629      	b.n	409612 <_dtoa_r+0x772>
  4099be:	2a00      	cmp	r2, #0
  4099c0:	46d0      	mov	r8, sl
  4099c2:	f8cd b018 	str.w	fp, [sp, #24]
  4099c6:	469a      	mov	sl, r3
  4099c8:	dd11      	ble.n	4099ee <_dtoa_r+0xb4e>
  4099ca:	4649      	mov	r1, r9
  4099cc:	2201      	movs	r2, #1
  4099ce:	4620      	mov	r0, r4
  4099d0:	f001 fc12 	bl	40b1f8 <__lshift>
  4099d4:	4641      	mov	r1, r8
  4099d6:	4681      	mov	r9, r0
  4099d8:	f001 fc60 	bl	40b29c <__mcmp>
  4099dc:	2800      	cmp	r0, #0
  4099de:	f340 8146 	ble.w	409c6e <_dtoa_r+0xdce>
  4099e2:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  4099e6:	f000 8106 	beq.w	409bf6 <_dtoa_r+0xd56>
  4099ea:	f105 0a31 	add.w	sl, r5, #49	; 0x31
  4099ee:	46b3      	mov	fp, r6
  4099f0:	f887 a000 	strb.w	sl, [r7]
  4099f4:	1c7d      	adds	r5, r7, #1
  4099f6:	9e06      	ldr	r6, [sp, #24]
  4099f8:	e5d2      	b.n	4095a0 <_dtoa_r+0x700>
  4099fa:	d104      	bne.n	409a06 <_dtoa_r+0xb66>
  4099fc:	f01a 0f01 	tst.w	sl, #1
  409a00:	d001      	beq.n	409a06 <_dtoa_r+0xb66>
  409a02:	e5bd      	b.n	409580 <_dtoa_r+0x6e0>
  409a04:	4615      	mov	r5, r2
  409a06:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  409a0a:	2b30      	cmp	r3, #48	; 0x30
  409a0c:	f105 32ff 	add.w	r2, r5, #4294967295
  409a10:	d0f8      	beq.n	409a04 <_dtoa_r+0xb64>
  409a12:	e5c5      	b.n	4095a0 <_dtoa_r+0x700>
  409a14:	9904      	ldr	r1, [sp, #16]
  409a16:	2230      	movs	r2, #48	; 0x30
  409a18:	700a      	strb	r2, [r1, #0]
  409a1a:	9a02      	ldr	r2, [sp, #8]
  409a1c:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  409a20:	3201      	adds	r2, #1
  409a22:	9202      	str	r2, [sp, #8]
  409a24:	f7ff bbfc 	b.w	409220 <_dtoa_r+0x380>
  409a28:	f000 80bb 	beq.w	409ba2 <_dtoa_r+0xd02>
  409a2c:	9b02      	ldr	r3, [sp, #8]
  409a2e:	425d      	negs	r5, r3
  409a30:	4b84      	ldr	r3, [pc, #528]	; (409c44 <_dtoa_r+0xda4>)
  409a32:	f005 020f 	and.w	r2, r5, #15
  409a36:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  409a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
  409a3e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  409a42:	f002 fb57 	bl	40c0f4 <__aeabi_dmul>
  409a46:	112d      	asrs	r5, r5, #4
  409a48:	4607      	mov	r7, r0
  409a4a:	4688      	mov	r8, r1
  409a4c:	f000 812c 	beq.w	409ca8 <_dtoa_r+0xe08>
  409a50:	4e7d      	ldr	r6, [pc, #500]	; (409c48 <_dtoa_r+0xda8>)
  409a52:	f04f 0a02 	mov.w	sl, #2
  409a56:	07eb      	lsls	r3, r5, #31
  409a58:	d509      	bpl.n	409a6e <_dtoa_r+0xbce>
  409a5a:	4638      	mov	r0, r7
  409a5c:	4641      	mov	r1, r8
  409a5e:	e9d6 2300 	ldrd	r2, r3, [r6]
  409a62:	f002 fb47 	bl	40c0f4 <__aeabi_dmul>
  409a66:	f10a 0a01 	add.w	sl, sl, #1
  409a6a:	4607      	mov	r7, r0
  409a6c:	4688      	mov	r8, r1
  409a6e:	106d      	asrs	r5, r5, #1
  409a70:	f106 0608 	add.w	r6, r6, #8
  409a74:	d1ef      	bne.n	409a56 <_dtoa_r+0xbb6>
  409a76:	e608      	b.n	40968a <_dtoa_r+0x7ea>
  409a78:	6871      	ldr	r1, [r6, #4]
  409a7a:	4620      	mov	r0, r4
  409a7c:	f001 fa10 	bl	40aea0 <_Balloc>
  409a80:	6933      	ldr	r3, [r6, #16]
  409a82:	3302      	adds	r3, #2
  409a84:	009a      	lsls	r2, r3, #2
  409a86:	4605      	mov	r5, r0
  409a88:	f106 010c 	add.w	r1, r6, #12
  409a8c:	300c      	adds	r0, #12
  409a8e:	f7fc fd55 	bl	40653c <memcpy>
  409a92:	4629      	mov	r1, r5
  409a94:	2201      	movs	r2, #1
  409a96:	4620      	mov	r0, r4
  409a98:	f001 fbae 	bl	40b1f8 <__lshift>
  409a9c:	9006      	str	r0, [sp, #24]
  409a9e:	e4b5      	b.n	40940c <_dtoa_r+0x56c>
  409aa0:	2b39      	cmp	r3, #57	; 0x39
  409aa2:	f8cd b018 	str.w	fp, [sp, #24]
  409aa6:	46d0      	mov	r8, sl
  409aa8:	f000 80a5 	beq.w	409bf6 <_dtoa_r+0xd56>
  409aac:	f103 0a01 	add.w	sl, r3, #1
  409ab0:	46b3      	mov	fp, r6
  409ab2:	f887 a000 	strb.w	sl, [r7]
  409ab6:	1c7d      	adds	r5, r7, #1
  409ab8:	9e06      	ldr	r6, [sp, #24]
  409aba:	e571      	b.n	4095a0 <_dtoa_r+0x700>
  409abc:	465a      	mov	r2, fp
  409abe:	46d0      	mov	r8, sl
  409ac0:	46b3      	mov	fp, r6
  409ac2:	469a      	mov	sl, r3
  409ac4:	4616      	mov	r6, r2
  409ac6:	e54f      	b.n	409568 <_dtoa_r+0x6c8>
  409ac8:	9b12      	ldr	r3, [sp, #72]	; 0x48
  409aca:	495e      	ldr	r1, [pc, #376]	; (409c44 <_dtoa_r+0xda4>)
  409acc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  409ad0:	462a      	mov	r2, r5
  409ad2:	4633      	mov	r3, r6
  409ad4:	e951 0102 	ldrd	r0, r1, [r1, #-8]
  409ad8:	f002 fb0c 	bl	40c0f4 <__aeabi_dmul>
  409adc:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
  409ae0:	4638      	mov	r0, r7
  409ae2:	4641      	mov	r1, r8
  409ae4:	f002 fdb6 	bl	40c654 <__aeabi_d2iz>
  409ae8:	4605      	mov	r5, r0
  409aea:	f002 fa9d 	bl	40c028 <__aeabi_i2d>
  409aee:	460b      	mov	r3, r1
  409af0:	4602      	mov	r2, r0
  409af2:	4641      	mov	r1, r8
  409af4:	4638      	mov	r0, r7
  409af6:	f002 f949 	bl	40bd8c <__aeabi_dsub>
  409afa:	9b12      	ldr	r3, [sp, #72]	; 0x48
  409afc:	460f      	mov	r7, r1
  409afe:	9904      	ldr	r1, [sp, #16]
  409b00:	3530      	adds	r5, #48	; 0x30
  409b02:	2b01      	cmp	r3, #1
  409b04:	700d      	strb	r5, [r1, #0]
  409b06:	4606      	mov	r6, r0
  409b08:	f101 0501 	add.w	r5, r1, #1
  409b0c:	d026      	beq.n	409b5c <_dtoa_r+0xcbc>
  409b0e:	9b12      	ldr	r3, [sp, #72]	; 0x48
  409b10:	9a04      	ldr	r2, [sp, #16]
  409b12:	f8df b13c 	ldr.w	fp, [pc, #316]	; 409c50 <_dtoa_r+0xdb0>
  409b16:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  409b1a:	4413      	add	r3, r2
  409b1c:	f04f 0a00 	mov.w	sl, #0
  409b20:	4699      	mov	r9, r3
  409b22:	4652      	mov	r2, sl
  409b24:	465b      	mov	r3, fp
  409b26:	4630      	mov	r0, r6
  409b28:	4639      	mov	r1, r7
  409b2a:	f002 fae3 	bl	40c0f4 <__aeabi_dmul>
  409b2e:	460f      	mov	r7, r1
  409b30:	4606      	mov	r6, r0
  409b32:	f002 fd8f 	bl	40c654 <__aeabi_d2iz>
  409b36:	4680      	mov	r8, r0
  409b38:	f002 fa76 	bl	40c028 <__aeabi_i2d>
  409b3c:	f108 0830 	add.w	r8, r8, #48	; 0x30
  409b40:	4602      	mov	r2, r0
  409b42:	460b      	mov	r3, r1
  409b44:	4630      	mov	r0, r6
  409b46:	4639      	mov	r1, r7
  409b48:	f002 f920 	bl	40bd8c <__aeabi_dsub>
  409b4c:	f805 8b01 	strb.w	r8, [r5], #1
  409b50:	454d      	cmp	r5, r9
  409b52:	4606      	mov	r6, r0
  409b54:	460f      	mov	r7, r1
  409b56:	d1e4      	bne.n	409b22 <_dtoa_r+0xc82>
  409b58:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  409b5c:	4b3b      	ldr	r3, [pc, #236]	; (409c4c <_dtoa_r+0xdac>)
  409b5e:	2200      	movs	r2, #0
  409b60:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  409b64:	f002 f914 	bl	40bd90 <__adddf3>
  409b68:	4632      	mov	r2, r6
  409b6a:	463b      	mov	r3, r7
  409b6c:	f002 fd34 	bl	40c5d8 <__aeabi_dcmplt>
  409b70:	2800      	cmp	r0, #0
  409b72:	d046      	beq.n	409c02 <_dtoa_r+0xd62>
  409b74:	9b15      	ldr	r3, [sp, #84]	; 0x54
  409b76:	9302      	str	r3, [sp, #8]
  409b78:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  409b7c:	f7ff bb43 	b.w	409206 <_dtoa_r+0x366>
  409b80:	f04f 0800 	mov.w	r8, #0
  409b84:	4646      	mov	r6, r8
  409b86:	e6a9      	b.n	4098dc <_dtoa_r+0xa3c>
  409b88:	9b08      	ldr	r3, [sp, #32]
  409b8a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  409b8c:	1a9d      	subs	r5, r3, r2
  409b8e:	2300      	movs	r3, #0
  409b90:	f7ff bb71 	b.w	409276 <_dtoa_r+0x3d6>
  409b94:	9b18      	ldr	r3, [sp, #96]	; 0x60
  409b96:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  409b98:	9d08      	ldr	r5, [sp, #32]
  409b9a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  409b9e:	f7ff bb6a 	b.w	409276 <_dtoa_r+0x3d6>
  409ba2:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
  409ba6:	f04f 0a02 	mov.w	sl, #2
  409baa:	e56e      	b.n	40968a <_dtoa_r+0x7ea>
  409bac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  409bae:	2b00      	cmp	r3, #0
  409bb0:	f43f aeb8 	beq.w	409924 <_dtoa_r+0xa84>
  409bb4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  409bb6:	2b00      	cmp	r3, #0
  409bb8:	f77f aede 	ble.w	409978 <_dtoa_r+0xad8>
  409bbc:	2200      	movs	r2, #0
  409bbe:	4b24      	ldr	r3, [pc, #144]	; (409c50 <_dtoa_r+0xdb0>)
  409bc0:	4638      	mov	r0, r7
  409bc2:	4641      	mov	r1, r8
  409bc4:	f002 fa96 	bl	40c0f4 <__aeabi_dmul>
  409bc8:	4607      	mov	r7, r0
  409bca:	4688      	mov	r8, r1
  409bcc:	f10a 0001 	add.w	r0, sl, #1
  409bd0:	f002 fa2a 	bl	40c028 <__aeabi_i2d>
  409bd4:	463a      	mov	r2, r7
  409bd6:	4643      	mov	r3, r8
  409bd8:	f002 fa8c 	bl	40c0f4 <__aeabi_dmul>
  409bdc:	2200      	movs	r2, #0
  409bde:	4b17      	ldr	r3, [pc, #92]	; (409c3c <_dtoa_r+0xd9c>)
  409be0:	f002 f8d6 	bl	40bd90 <__adddf3>
  409be4:	9a02      	ldr	r2, [sp, #8]
  409be6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  409be8:	9312      	str	r3, [sp, #72]	; 0x48
  409bea:	3a01      	subs	r2, #1
  409bec:	4605      	mov	r5, r0
  409bee:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  409bf2:	9215      	str	r2, [sp, #84]	; 0x54
  409bf4:	e56a      	b.n	4096cc <_dtoa_r+0x82c>
  409bf6:	2239      	movs	r2, #57	; 0x39
  409bf8:	46b3      	mov	fp, r6
  409bfa:	703a      	strb	r2, [r7, #0]
  409bfc:	9e06      	ldr	r6, [sp, #24]
  409bfe:	1c7d      	adds	r5, r7, #1
  409c00:	e4c0      	b.n	409584 <_dtoa_r+0x6e4>
  409c02:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
  409c06:	2000      	movs	r0, #0
  409c08:	4910      	ldr	r1, [pc, #64]	; (409c4c <_dtoa_r+0xdac>)
  409c0a:	f002 f8bf 	bl	40bd8c <__aeabi_dsub>
  409c0e:	4632      	mov	r2, r6
  409c10:	463b      	mov	r3, r7
  409c12:	f002 fcff 	bl	40c614 <__aeabi_dcmpgt>
  409c16:	b908      	cbnz	r0, 409c1c <_dtoa_r+0xd7c>
  409c18:	e6ae      	b.n	409978 <_dtoa_r+0xad8>
  409c1a:	4615      	mov	r5, r2
  409c1c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  409c20:	2b30      	cmp	r3, #48	; 0x30
  409c22:	f105 32ff 	add.w	r2, r5, #4294967295
  409c26:	d0f8      	beq.n	409c1a <_dtoa_r+0xd7a>
  409c28:	e5d7      	b.n	4097da <_dtoa_r+0x93a>
  409c2a:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  409c2e:	9b15      	ldr	r3, [sp, #84]	; 0x54
  409c30:	9302      	str	r3, [sp, #8]
  409c32:	f7ff bae8 	b.w	409206 <_dtoa_r+0x366>
  409c36:	970c      	str	r7, [sp, #48]	; 0x30
  409c38:	f7ff bba5 	b.w	409386 <_dtoa_r+0x4e6>
  409c3c:	401c0000 	.word	0x401c0000
  409c40:	40140000 	.word	0x40140000
  409c44:	0040da58 	.word	0x0040da58
  409c48:	0040da30 	.word	0x0040da30
  409c4c:	3fe00000 	.word	0x3fe00000
  409c50:	40240000 	.word	0x40240000
  409c54:	2b39      	cmp	r3, #57	; 0x39
  409c56:	f8cd b018 	str.w	fp, [sp, #24]
  409c5a:	46d0      	mov	r8, sl
  409c5c:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  409c60:	469a      	mov	sl, r3
  409c62:	d0c8      	beq.n	409bf6 <_dtoa_r+0xd56>
  409c64:	f1bb 0f00 	cmp.w	fp, #0
  409c68:	f73f aebf 	bgt.w	4099ea <_dtoa_r+0xb4a>
  409c6c:	e6bf      	b.n	4099ee <_dtoa_r+0xb4e>
  409c6e:	f47f aebe 	bne.w	4099ee <_dtoa_r+0xb4e>
  409c72:	f01a 0f01 	tst.w	sl, #1
  409c76:	f43f aeba 	beq.w	4099ee <_dtoa_r+0xb4e>
  409c7a:	e6b2      	b.n	4099e2 <_dtoa_r+0xb42>
  409c7c:	f04f 0800 	mov.w	r8, #0
  409c80:	4646      	mov	r6, r8
  409c82:	e5e9      	b.n	409858 <_dtoa_r+0x9b8>
  409c84:	4631      	mov	r1, r6
  409c86:	2300      	movs	r3, #0
  409c88:	220a      	movs	r2, #10
  409c8a:	4620      	mov	r0, r4
  409c8c:	f001 f938 	bl	40af00 <__multadd>
  409c90:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  409c92:	2b00      	cmp	r3, #0
  409c94:	4606      	mov	r6, r0
  409c96:	dd0a      	ble.n	409cae <_dtoa_r+0xe0e>
  409c98:	930a      	str	r3, [sp, #40]	; 0x28
  409c9a:	f7ff bbaa 	b.w	4093f2 <_dtoa_r+0x552>
  409c9e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  409ca0:	2b02      	cmp	r3, #2
  409ca2:	dc23      	bgt.n	409cec <_dtoa_r+0xe4c>
  409ca4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  409ca6:	e43b      	b.n	409520 <_dtoa_r+0x680>
  409ca8:	f04f 0a02 	mov.w	sl, #2
  409cac:	e4ed      	b.n	40968a <_dtoa_r+0x7ea>
  409cae:	9b24      	ldr	r3, [sp, #144]	; 0x90
  409cb0:	2b02      	cmp	r3, #2
  409cb2:	dc1b      	bgt.n	409cec <_dtoa_r+0xe4c>
  409cb4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  409cb6:	e7ef      	b.n	409c98 <_dtoa_r+0xdf8>
  409cb8:	2500      	movs	r5, #0
  409cba:	6465      	str	r5, [r4, #68]	; 0x44
  409cbc:	4629      	mov	r1, r5
  409cbe:	4620      	mov	r0, r4
  409cc0:	f001 f8ee 	bl	40aea0 <_Balloc>
  409cc4:	f04f 33ff 	mov.w	r3, #4294967295
  409cc8:	930a      	str	r3, [sp, #40]	; 0x28
  409cca:	930f      	str	r3, [sp, #60]	; 0x3c
  409ccc:	2301      	movs	r3, #1
  409cce:	9004      	str	r0, [sp, #16]
  409cd0:	9525      	str	r5, [sp, #148]	; 0x94
  409cd2:	6420      	str	r0, [r4, #64]	; 0x40
  409cd4:	930b      	str	r3, [sp, #44]	; 0x2c
  409cd6:	f7ff b9dd 	b.w	409094 <_dtoa_r+0x1f4>
  409cda:	2501      	movs	r5, #1
  409cdc:	f7ff b9a5 	b.w	40902a <_dtoa_r+0x18a>
  409ce0:	f43f ab69 	beq.w	4093b6 <_dtoa_r+0x516>
  409ce4:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  409ce8:	f7ff bbf9 	b.w	4094de <_dtoa_r+0x63e>
  409cec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  409cee:	930a      	str	r3, [sp, #40]	; 0x28
  409cf0:	e5e5      	b.n	4098be <_dtoa_r+0xa1e>
  409cf2:	bf00      	nop

00409cf4 <__sflush_r>:
  409cf4:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  409cf8:	b29a      	uxth	r2, r3
  409cfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  409cfe:	460d      	mov	r5, r1
  409d00:	0711      	lsls	r1, r2, #28
  409d02:	4680      	mov	r8, r0
  409d04:	d43a      	bmi.n	409d7c <__sflush_r+0x88>
  409d06:	686a      	ldr	r2, [r5, #4]
  409d08:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  409d0c:	2a00      	cmp	r2, #0
  409d0e:	81ab      	strh	r3, [r5, #12]
  409d10:	dd6f      	ble.n	409df2 <__sflush_r+0xfe>
  409d12:	6aac      	ldr	r4, [r5, #40]	; 0x28
  409d14:	2c00      	cmp	r4, #0
  409d16:	d049      	beq.n	409dac <__sflush_r+0xb8>
  409d18:	2200      	movs	r2, #0
  409d1a:	b29b      	uxth	r3, r3
  409d1c:	f8d8 6000 	ldr.w	r6, [r8]
  409d20:	f8c8 2000 	str.w	r2, [r8]
  409d24:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  409d28:	d067      	beq.n	409dfa <__sflush_r+0x106>
  409d2a:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  409d2c:	075f      	lsls	r7, r3, #29
  409d2e:	d505      	bpl.n	409d3c <__sflush_r+0x48>
  409d30:	6869      	ldr	r1, [r5, #4]
  409d32:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  409d34:	1a52      	subs	r2, r2, r1
  409d36:	b10b      	cbz	r3, 409d3c <__sflush_r+0x48>
  409d38:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  409d3a:	1ad2      	subs	r2, r2, r3
  409d3c:	2300      	movs	r3, #0
  409d3e:	69e9      	ldr	r1, [r5, #28]
  409d40:	4640      	mov	r0, r8
  409d42:	47a0      	blx	r4
  409d44:	1c44      	adds	r4, r0, #1
  409d46:	d03c      	beq.n	409dc2 <__sflush_r+0xce>
  409d48:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  409d4c:	692a      	ldr	r2, [r5, #16]
  409d4e:	602a      	str	r2, [r5, #0]
  409d50:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  409d54:	2200      	movs	r2, #0
  409d56:	81ab      	strh	r3, [r5, #12]
  409d58:	04db      	lsls	r3, r3, #19
  409d5a:	606a      	str	r2, [r5, #4]
  409d5c:	d447      	bmi.n	409dee <__sflush_r+0xfa>
  409d5e:	6b29      	ldr	r1, [r5, #48]	; 0x30
  409d60:	f8c8 6000 	str.w	r6, [r8]
  409d64:	b311      	cbz	r1, 409dac <__sflush_r+0xb8>
  409d66:	f105 0340 	add.w	r3, r5, #64	; 0x40
  409d6a:	4299      	cmp	r1, r3
  409d6c:	d002      	beq.n	409d74 <__sflush_r+0x80>
  409d6e:	4640      	mov	r0, r8
  409d70:	f000 f9de 	bl	40a130 <_free_r>
  409d74:	2000      	movs	r0, #0
  409d76:	6328      	str	r0, [r5, #48]	; 0x30
  409d78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  409d7c:	692e      	ldr	r6, [r5, #16]
  409d7e:	b1ae      	cbz	r6, 409dac <__sflush_r+0xb8>
  409d80:	682c      	ldr	r4, [r5, #0]
  409d82:	602e      	str	r6, [r5, #0]
  409d84:	0791      	lsls	r1, r2, #30
  409d86:	bf0c      	ite	eq
  409d88:	696b      	ldreq	r3, [r5, #20]
  409d8a:	2300      	movne	r3, #0
  409d8c:	1ba4      	subs	r4, r4, r6
  409d8e:	60ab      	str	r3, [r5, #8]
  409d90:	e00a      	b.n	409da8 <__sflush_r+0xb4>
  409d92:	4623      	mov	r3, r4
  409d94:	4632      	mov	r2, r6
  409d96:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  409d98:	69e9      	ldr	r1, [r5, #28]
  409d9a:	4640      	mov	r0, r8
  409d9c:	47b8      	blx	r7
  409d9e:	2800      	cmp	r0, #0
  409da0:	eba4 0400 	sub.w	r4, r4, r0
  409da4:	4406      	add	r6, r0
  409da6:	dd04      	ble.n	409db2 <__sflush_r+0xbe>
  409da8:	2c00      	cmp	r4, #0
  409daa:	dcf2      	bgt.n	409d92 <__sflush_r+0x9e>
  409dac:	2000      	movs	r0, #0
  409dae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  409db2:	89ab      	ldrh	r3, [r5, #12]
  409db4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  409db8:	81ab      	strh	r3, [r5, #12]
  409dba:	f04f 30ff 	mov.w	r0, #4294967295
  409dbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  409dc2:	f8d8 4000 	ldr.w	r4, [r8]
  409dc6:	2c1d      	cmp	r4, #29
  409dc8:	d8f3      	bhi.n	409db2 <__sflush_r+0xbe>
  409dca:	4b19      	ldr	r3, [pc, #100]	; (409e30 <__sflush_r+0x13c>)
  409dcc:	40e3      	lsrs	r3, r4
  409dce:	43db      	mvns	r3, r3
  409dd0:	f013 0301 	ands.w	r3, r3, #1
  409dd4:	d1ed      	bne.n	409db2 <__sflush_r+0xbe>
  409dd6:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  409dda:	606b      	str	r3, [r5, #4]
  409ddc:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  409de0:	6929      	ldr	r1, [r5, #16]
  409de2:	81ab      	strh	r3, [r5, #12]
  409de4:	04da      	lsls	r2, r3, #19
  409de6:	6029      	str	r1, [r5, #0]
  409de8:	d5b9      	bpl.n	409d5e <__sflush_r+0x6a>
  409dea:	2c00      	cmp	r4, #0
  409dec:	d1b7      	bne.n	409d5e <__sflush_r+0x6a>
  409dee:	6528      	str	r0, [r5, #80]	; 0x50
  409df0:	e7b5      	b.n	409d5e <__sflush_r+0x6a>
  409df2:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  409df4:	2a00      	cmp	r2, #0
  409df6:	dc8c      	bgt.n	409d12 <__sflush_r+0x1e>
  409df8:	e7d8      	b.n	409dac <__sflush_r+0xb8>
  409dfa:	2301      	movs	r3, #1
  409dfc:	69e9      	ldr	r1, [r5, #28]
  409dfe:	4640      	mov	r0, r8
  409e00:	47a0      	blx	r4
  409e02:	1c43      	adds	r3, r0, #1
  409e04:	4602      	mov	r2, r0
  409e06:	d002      	beq.n	409e0e <__sflush_r+0x11a>
  409e08:	89ab      	ldrh	r3, [r5, #12]
  409e0a:	6aac      	ldr	r4, [r5, #40]	; 0x28
  409e0c:	e78e      	b.n	409d2c <__sflush_r+0x38>
  409e0e:	f8d8 3000 	ldr.w	r3, [r8]
  409e12:	2b00      	cmp	r3, #0
  409e14:	d0f8      	beq.n	409e08 <__sflush_r+0x114>
  409e16:	2b1d      	cmp	r3, #29
  409e18:	d001      	beq.n	409e1e <__sflush_r+0x12a>
  409e1a:	2b16      	cmp	r3, #22
  409e1c:	d102      	bne.n	409e24 <__sflush_r+0x130>
  409e1e:	f8c8 6000 	str.w	r6, [r8]
  409e22:	e7c3      	b.n	409dac <__sflush_r+0xb8>
  409e24:	89ab      	ldrh	r3, [r5, #12]
  409e26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  409e2a:	81ab      	strh	r3, [r5, #12]
  409e2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  409e30:	20400001 	.word	0x20400001

00409e34 <_fflush_r>:
  409e34:	b538      	push	{r3, r4, r5, lr}
  409e36:	460d      	mov	r5, r1
  409e38:	4604      	mov	r4, r0
  409e3a:	b108      	cbz	r0, 409e40 <_fflush_r+0xc>
  409e3c:	6b83      	ldr	r3, [r0, #56]	; 0x38
  409e3e:	b1bb      	cbz	r3, 409e70 <_fflush_r+0x3c>
  409e40:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  409e44:	b188      	cbz	r0, 409e6a <_fflush_r+0x36>
  409e46:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  409e48:	07db      	lsls	r3, r3, #31
  409e4a:	d401      	bmi.n	409e50 <_fflush_r+0x1c>
  409e4c:	0581      	lsls	r1, r0, #22
  409e4e:	d517      	bpl.n	409e80 <_fflush_r+0x4c>
  409e50:	4620      	mov	r0, r4
  409e52:	4629      	mov	r1, r5
  409e54:	f7ff ff4e 	bl	409cf4 <__sflush_r>
  409e58:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  409e5a:	07da      	lsls	r2, r3, #31
  409e5c:	4604      	mov	r4, r0
  409e5e:	d402      	bmi.n	409e66 <_fflush_r+0x32>
  409e60:	89ab      	ldrh	r3, [r5, #12]
  409e62:	059b      	lsls	r3, r3, #22
  409e64:	d507      	bpl.n	409e76 <_fflush_r+0x42>
  409e66:	4620      	mov	r0, r4
  409e68:	bd38      	pop	{r3, r4, r5, pc}
  409e6a:	4604      	mov	r4, r0
  409e6c:	4620      	mov	r0, r4
  409e6e:	bd38      	pop	{r3, r4, r5, pc}
  409e70:	f000 f838 	bl	409ee4 <__sinit>
  409e74:	e7e4      	b.n	409e40 <_fflush_r+0xc>
  409e76:	6da8      	ldr	r0, [r5, #88]	; 0x58
  409e78:	f000 fc04 	bl	40a684 <__retarget_lock_release_recursive>
  409e7c:	4620      	mov	r0, r4
  409e7e:	bd38      	pop	{r3, r4, r5, pc}
  409e80:	6da8      	ldr	r0, [r5, #88]	; 0x58
  409e82:	f000 fbfd 	bl	40a680 <__retarget_lock_acquire_recursive>
  409e86:	e7e3      	b.n	409e50 <_fflush_r+0x1c>

00409e88 <_cleanup_r>:
  409e88:	4901      	ldr	r1, [pc, #4]	; (409e90 <_cleanup_r+0x8>)
  409e8a:	f000 bbaf 	b.w	40a5ec <_fwalk_reent>
  409e8e:	bf00      	nop
  409e90:	0040bc1d 	.word	0x0040bc1d

00409e94 <std.isra.0>:
  409e94:	b510      	push	{r4, lr}
  409e96:	2300      	movs	r3, #0
  409e98:	4604      	mov	r4, r0
  409e9a:	8181      	strh	r1, [r0, #12]
  409e9c:	81c2      	strh	r2, [r0, #14]
  409e9e:	6003      	str	r3, [r0, #0]
  409ea0:	6043      	str	r3, [r0, #4]
  409ea2:	6083      	str	r3, [r0, #8]
  409ea4:	6643      	str	r3, [r0, #100]	; 0x64
  409ea6:	6103      	str	r3, [r0, #16]
  409ea8:	6143      	str	r3, [r0, #20]
  409eaa:	6183      	str	r3, [r0, #24]
  409eac:	4619      	mov	r1, r3
  409eae:	2208      	movs	r2, #8
  409eb0:	305c      	adds	r0, #92	; 0x5c
  409eb2:	f7fc fbdd 	bl	406670 <memset>
  409eb6:	4807      	ldr	r0, [pc, #28]	; (409ed4 <std.isra.0+0x40>)
  409eb8:	4907      	ldr	r1, [pc, #28]	; (409ed8 <std.isra.0+0x44>)
  409eba:	4a08      	ldr	r2, [pc, #32]	; (409edc <std.isra.0+0x48>)
  409ebc:	4b08      	ldr	r3, [pc, #32]	; (409ee0 <std.isra.0+0x4c>)
  409ebe:	6220      	str	r0, [r4, #32]
  409ec0:	61e4      	str	r4, [r4, #28]
  409ec2:	6261      	str	r1, [r4, #36]	; 0x24
  409ec4:	62a2      	str	r2, [r4, #40]	; 0x28
  409ec6:	62e3      	str	r3, [r4, #44]	; 0x2c
  409ec8:	f104 0058 	add.w	r0, r4, #88	; 0x58
  409ecc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  409ed0:	f000 bbd2 	b.w	40a678 <__retarget_lock_init_recursive>
  409ed4:	0040b805 	.word	0x0040b805
  409ed8:	0040b829 	.word	0x0040b829
  409edc:	0040b865 	.word	0x0040b865
  409ee0:	0040b885 	.word	0x0040b885

00409ee4 <__sinit>:
  409ee4:	b510      	push	{r4, lr}
  409ee6:	4604      	mov	r4, r0
  409ee8:	4812      	ldr	r0, [pc, #72]	; (409f34 <__sinit+0x50>)
  409eea:	f000 fbc9 	bl	40a680 <__retarget_lock_acquire_recursive>
  409eee:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  409ef0:	b9d2      	cbnz	r2, 409f28 <__sinit+0x44>
  409ef2:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  409ef6:	4810      	ldr	r0, [pc, #64]	; (409f38 <__sinit+0x54>)
  409ef8:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  409efc:	2103      	movs	r1, #3
  409efe:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  409f02:	63e0      	str	r0, [r4, #60]	; 0x3c
  409f04:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  409f08:	6860      	ldr	r0, [r4, #4]
  409f0a:	2104      	movs	r1, #4
  409f0c:	f7ff ffc2 	bl	409e94 <std.isra.0>
  409f10:	2201      	movs	r2, #1
  409f12:	2109      	movs	r1, #9
  409f14:	68a0      	ldr	r0, [r4, #8]
  409f16:	f7ff ffbd 	bl	409e94 <std.isra.0>
  409f1a:	2202      	movs	r2, #2
  409f1c:	2112      	movs	r1, #18
  409f1e:	68e0      	ldr	r0, [r4, #12]
  409f20:	f7ff ffb8 	bl	409e94 <std.isra.0>
  409f24:	2301      	movs	r3, #1
  409f26:	63a3      	str	r3, [r4, #56]	; 0x38
  409f28:	4802      	ldr	r0, [pc, #8]	; (409f34 <__sinit+0x50>)
  409f2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  409f2e:	f000 bba9 	b.w	40a684 <__retarget_lock_release_recursive>
  409f32:	bf00      	nop
  409f34:	2040cb68 	.word	0x2040cb68
  409f38:	00409e89 	.word	0x00409e89

00409f3c <__sfp_lock_acquire>:
  409f3c:	4801      	ldr	r0, [pc, #4]	; (409f44 <__sfp_lock_acquire+0x8>)
  409f3e:	f000 bb9f 	b.w	40a680 <__retarget_lock_acquire_recursive>
  409f42:	bf00      	nop
  409f44:	2040cb7c 	.word	0x2040cb7c

00409f48 <__sfp_lock_release>:
  409f48:	4801      	ldr	r0, [pc, #4]	; (409f50 <__sfp_lock_release+0x8>)
  409f4a:	f000 bb9b 	b.w	40a684 <__retarget_lock_release_recursive>
  409f4e:	bf00      	nop
  409f50:	2040cb7c 	.word	0x2040cb7c

00409f54 <__libc_fini_array>:
  409f54:	b538      	push	{r3, r4, r5, lr}
  409f56:	4c0a      	ldr	r4, [pc, #40]	; (409f80 <__libc_fini_array+0x2c>)
  409f58:	4d0a      	ldr	r5, [pc, #40]	; (409f84 <__libc_fini_array+0x30>)
  409f5a:	1b64      	subs	r4, r4, r5
  409f5c:	10a4      	asrs	r4, r4, #2
  409f5e:	d00a      	beq.n	409f76 <__libc_fini_array+0x22>
  409f60:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  409f64:	3b01      	subs	r3, #1
  409f66:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  409f6a:	3c01      	subs	r4, #1
  409f6c:	f855 3904 	ldr.w	r3, [r5], #-4
  409f70:	4798      	blx	r3
  409f72:	2c00      	cmp	r4, #0
  409f74:	d1f9      	bne.n	409f6a <__libc_fini_array+0x16>
  409f76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  409f7a:	f003 be63 	b.w	40dc44 <_fini>
  409f7e:	bf00      	nop
  409f80:	0040dc54 	.word	0x0040dc54
  409f84:	0040dc50 	.word	0x0040dc50

00409f88 <__fputwc>:
  409f88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  409f8c:	b082      	sub	sp, #8
  409f8e:	4680      	mov	r8, r0
  409f90:	4689      	mov	r9, r1
  409f92:	4614      	mov	r4, r2
  409f94:	f000 fb54 	bl	40a640 <__locale_mb_cur_max>
  409f98:	2801      	cmp	r0, #1
  409f9a:	d036      	beq.n	40a00a <__fputwc+0x82>
  409f9c:	464a      	mov	r2, r9
  409f9e:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  409fa2:	a901      	add	r1, sp, #4
  409fa4:	4640      	mov	r0, r8
  409fa6:	f001 fd47 	bl	40ba38 <_wcrtomb_r>
  409faa:	1c42      	adds	r2, r0, #1
  409fac:	4606      	mov	r6, r0
  409fae:	d025      	beq.n	409ffc <__fputwc+0x74>
  409fb0:	b3a8      	cbz	r0, 40a01e <__fputwc+0x96>
  409fb2:	f89d e004 	ldrb.w	lr, [sp, #4]
  409fb6:	2500      	movs	r5, #0
  409fb8:	f10d 0a04 	add.w	sl, sp, #4
  409fbc:	e009      	b.n	409fd2 <__fputwc+0x4a>
  409fbe:	6823      	ldr	r3, [r4, #0]
  409fc0:	1c5a      	adds	r2, r3, #1
  409fc2:	6022      	str	r2, [r4, #0]
  409fc4:	f883 e000 	strb.w	lr, [r3]
  409fc8:	3501      	adds	r5, #1
  409fca:	42b5      	cmp	r5, r6
  409fcc:	d227      	bcs.n	40a01e <__fputwc+0x96>
  409fce:	f815 e00a 	ldrb.w	lr, [r5, sl]
  409fd2:	68a3      	ldr	r3, [r4, #8]
  409fd4:	3b01      	subs	r3, #1
  409fd6:	2b00      	cmp	r3, #0
  409fd8:	60a3      	str	r3, [r4, #8]
  409fda:	daf0      	bge.n	409fbe <__fputwc+0x36>
  409fdc:	69a7      	ldr	r7, [r4, #24]
  409fde:	42bb      	cmp	r3, r7
  409fe0:	4671      	mov	r1, lr
  409fe2:	4622      	mov	r2, r4
  409fe4:	4640      	mov	r0, r8
  409fe6:	db02      	blt.n	409fee <__fputwc+0x66>
  409fe8:	f1be 0f0a 	cmp.w	lr, #10
  409fec:	d1e7      	bne.n	409fbe <__fputwc+0x36>
  409fee:	f001 fccb 	bl	40b988 <__swbuf_r>
  409ff2:	1c43      	adds	r3, r0, #1
  409ff4:	d1e8      	bne.n	409fc8 <__fputwc+0x40>
  409ff6:	b002      	add	sp, #8
  409ff8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  409ffc:	89a3      	ldrh	r3, [r4, #12]
  409ffe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40a002:	81a3      	strh	r3, [r4, #12]
  40a004:	b002      	add	sp, #8
  40a006:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40a00a:	f109 33ff 	add.w	r3, r9, #4294967295
  40a00e:	2bfe      	cmp	r3, #254	; 0xfe
  40a010:	d8c4      	bhi.n	409f9c <__fputwc+0x14>
  40a012:	fa5f fe89 	uxtb.w	lr, r9
  40a016:	4606      	mov	r6, r0
  40a018:	f88d e004 	strb.w	lr, [sp, #4]
  40a01c:	e7cb      	b.n	409fb6 <__fputwc+0x2e>
  40a01e:	4648      	mov	r0, r9
  40a020:	b002      	add	sp, #8
  40a022:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40a026:	bf00      	nop

0040a028 <_fputwc_r>:
  40a028:	b530      	push	{r4, r5, lr}
  40a02a:	6e53      	ldr	r3, [r2, #100]	; 0x64
  40a02c:	f013 0f01 	tst.w	r3, #1
  40a030:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  40a034:	4614      	mov	r4, r2
  40a036:	b083      	sub	sp, #12
  40a038:	4605      	mov	r5, r0
  40a03a:	b29a      	uxth	r2, r3
  40a03c:	d101      	bne.n	40a042 <_fputwc_r+0x1a>
  40a03e:	0590      	lsls	r0, r2, #22
  40a040:	d51c      	bpl.n	40a07c <_fputwc_r+0x54>
  40a042:	0490      	lsls	r0, r2, #18
  40a044:	d406      	bmi.n	40a054 <_fputwc_r+0x2c>
  40a046:	6e62      	ldr	r2, [r4, #100]	; 0x64
  40a048:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  40a04c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  40a050:	81a3      	strh	r3, [r4, #12]
  40a052:	6662      	str	r2, [r4, #100]	; 0x64
  40a054:	4628      	mov	r0, r5
  40a056:	4622      	mov	r2, r4
  40a058:	f7ff ff96 	bl	409f88 <__fputwc>
  40a05c:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40a05e:	07da      	lsls	r2, r3, #31
  40a060:	4605      	mov	r5, r0
  40a062:	d402      	bmi.n	40a06a <_fputwc_r+0x42>
  40a064:	89a3      	ldrh	r3, [r4, #12]
  40a066:	059b      	lsls	r3, r3, #22
  40a068:	d502      	bpl.n	40a070 <_fputwc_r+0x48>
  40a06a:	4628      	mov	r0, r5
  40a06c:	b003      	add	sp, #12
  40a06e:	bd30      	pop	{r4, r5, pc}
  40a070:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40a072:	f000 fb07 	bl	40a684 <__retarget_lock_release_recursive>
  40a076:	4628      	mov	r0, r5
  40a078:	b003      	add	sp, #12
  40a07a:	bd30      	pop	{r4, r5, pc}
  40a07c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40a07e:	9101      	str	r1, [sp, #4]
  40a080:	f000 fafe 	bl	40a680 <__retarget_lock_acquire_recursive>
  40a084:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40a088:	9901      	ldr	r1, [sp, #4]
  40a08a:	b29a      	uxth	r2, r3
  40a08c:	e7d9      	b.n	40a042 <_fputwc_r+0x1a>
  40a08e:	bf00      	nop

0040a090 <_malloc_trim_r>:
  40a090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40a092:	4f24      	ldr	r7, [pc, #144]	; (40a124 <_malloc_trim_r+0x94>)
  40a094:	460c      	mov	r4, r1
  40a096:	4606      	mov	r6, r0
  40a098:	f000 fef6 	bl	40ae88 <__malloc_lock>
  40a09c:	68bb      	ldr	r3, [r7, #8]
  40a09e:	685d      	ldr	r5, [r3, #4]
  40a0a0:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  40a0a4:	310f      	adds	r1, #15
  40a0a6:	f025 0503 	bic.w	r5, r5, #3
  40a0aa:	4429      	add	r1, r5
  40a0ac:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  40a0b0:	f021 010f 	bic.w	r1, r1, #15
  40a0b4:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  40a0b8:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  40a0bc:	db07      	blt.n	40a0ce <_malloc_trim_r+0x3e>
  40a0be:	2100      	movs	r1, #0
  40a0c0:	4630      	mov	r0, r6
  40a0c2:	f001 fb8d 	bl	40b7e0 <_sbrk_r>
  40a0c6:	68bb      	ldr	r3, [r7, #8]
  40a0c8:	442b      	add	r3, r5
  40a0ca:	4298      	cmp	r0, r3
  40a0cc:	d004      	beq.n	40a0d8 <_malloc_trim_r+0x48>
  40a0ce:	4630      	mov	r0, r6
  40a0d0:	f000 fee0 	bl	40ae94 <__malloc_unlock>
  40a0d4:	2000      	movs	r0, #0
  40a0d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40a0d8:	4261      	negs	r1, r4
  40a0da:	4630      	mov	r0, r6
  40a0dc:	f001 fb80 	bl	40b7e0 <_sbrk_r>
  40a0e0:	3001      	adds	r0, #1
  40a0e2:	d00d      	beq.n	40a100 <_malloc_trim_r+0x70>
  40a0e4:	4b10      	ldr	r3, [pc, #64]	; (40a128 <_malloc_trim_r+0x98>)
  40a0e6:	68ba      	ldr	r2, [r7, #8]
  40a0e8:	6819      	ldr	r1, [r3, #0]
  40a0ea:	1b2d      	subs	r5, r5, r4
  40a0ec:	f045 0501 	orr.w	r5, r5, #1
  40a0f0:	4630      	mov	r0, r6
  40a0f2:	1b09      	subs	r1, r1, r4
  40a0f4:	6055      	str	r5, [r2, #4]
  40a0f6:	6019      	str	r1, [r3, #0]
  40a0f8:	f000 fecc 	bl	40ae94 <__malloc_unlock>
  40a0fc:	2001      	movs	r0, #1
  40a0fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40a100:	2100      	movs	r1, #0
  40a102:	4630      	mov	r0, r6
  40a104:	f001 fb6c 	bl	40b7e0 <_sbrk_r>
  40a108:	68ba      	ldr	r2, [r7, #8]
  40a10a:	1a83      	subs	r3, r0, r2
  40a10c:	2b0f      	cmp	r3, #15
  40a10e:	ddde      	ble.n	40a0ce <_malloc_trim_r+0x3e>
  40a110:	4c06      	ldr	r4, [pc, #24]	; (40a12c <_malloc_trim_r+0x9c>)
  40a112:	4905      	ldr	r1, [pc, #20]	; (40a128 <_malloc_trim_r+0x98>)
  40a114:	6824      	ldr	r4, [r4, #0]
  40a116:	f043 0301 	orr.w	r3, r3, #1
  40a11a:	1b00      	subs	r0, r0, r4
  40a11c:	6053      	str	r3, [r2, #4]
  40a11e:	6008      	str	r0, [r1, #0]
  40a120:	e7d5      	b.n	40a0ce <_malloc_trim_r+0x3e>
  40a122:	bf00      	nop
  40a124:	204005c0 	.word	0x204005c0
  40a128:	2040c964 	.word	0x2040c964
  40a12c:	204009c8 	.word	0x204009c8

0040a130 <_free_r>:
  40a130:	2900      	cmp	r1, #0
  40a132:	d044      	beq.n	40a1be <_free_r+0x8e>
  40a134:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40a138:	460d      	mov	r5, r1
  40a13a:	4680      	mov	r8, r0
  40a13c:	f000 fea4 	bl	40ae88 <__malloc_lock>
  40a140:	f855 7c04 	ldr.w	r7, [r5, #-4]
  40a144:	4969      	ldr	r1, [pc, #420]	; (40a2ec <_free_r+0x1bc>)
  40a146:	f027 0301 	bic.w	r3, r7, #1
  40a14a:	f1a5 0408 	sub.w	r4, r5, #8
  40a14e:	18e2      	adds	r2, r4, r3
  40a150:	688e      	ldr	r6, [r1, #8]
  40a152:	6850      	ldr	r0, [r2, #4]
  40a154:	42b2      	cmp	r2, r6
  40a156:	f020 0003 	bic.w	r0, r0, #3
  40a15a:	d05e      	beq.n	40a21a <_free_r+0xea>
  40a15c:	07fe      	lsls	r6, r7, #31
  40a15e:	6050      	str	r0, [r2, #4]
  40a160:	d40b      	bmi.n	40a17a <_free_r+0x4a>
  40a162:	f855 7c08 	ldr.w	r7, [r5, #-8]
  40a166:	1be4      	subs	r4, r4, r7
  40a168:	f101 0e08 	add.w	lr, r1, #8
  40a16c:	68a5      	ldr	r5, [r4, #8]
  40a16e:	4575      	cmp	r5, lr
  40a170:	443b      	add	r3, r7
  40a172:	d06d      	beq.n	40a250 <_free_r+0x120>
  40a174:	68e7      	ldr	r7, [r4, #12]
  40a176:	60ef      	str	r7, [r5, #12]
  40a178:	60bd      	str	r5, [r7, #8]
  40a17a:	1815      	adds	r5, r2, r0
  40a17c:	686d      	ldr	r5, [r5, #4]
  40a17e:	07ed      	lsls	r5, r5, #31
  40a180:	d53e      	bpl.n	40a200 <_free_r+0xd0>
  40a182:	f043 0201 	orr.w	r2, r3, #1
  40a186:	6062      	str	r2, [r4, #4]
  40a188:	50e3      	str	r3, [r4, r3]
  40a18a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40a18e:	d217      	bcs.n	40a1c0 <_free_r+0x90>
  40a190:	08db      	lsrs	r3, r3, #3
  40a192:	1c58      	adds	r0, r3, #1
  40a194:	109a      	asrs	r2, r3, #2
  40a196:	684d      	ldr	r5, [r1, #4]
  40a198:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  40a19c:	60a7      	str	r7, [r4, #8]
  40a19e:	2301      	movs	r3, #1
  40a1a0:	4093      	lsls	r3, r2
  40a1a2:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  40a1a6:	432b      	orrs	r3, r5
  40a1a8:	3a08      	subs	r2, #8
  40a1aa:	60e2      	str	r2, [r4, #12]
  40a1ac:	604b      	str	r3, [r1, #4]
  40a1ae:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  40a1b2:	60fc      	str	r4, [r7, #12]
  40a1b4:	4640      	mov	r0, r8
  40a1b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40a1ba:	f000 be6b 	b.w	40ae94 <__malloc_unlock>
  40a1be:	4770      	bx	lr
  40a1c0:	0a5a      	lsrs	r2, r3, #9
  40a1c2:	2a04      	cmp	r2, #4
  40a1c4:	d852      	bhi.n	40a26c <_free_r+0x13c>
  40a1c6:	099a      	lsrs	r2, r3, #6
  40a1c8:	f102 0739 	add.w	r7, r2, #57	; 0x39
  40a1cc:	00ff      	lsls	r7, r7, #3
  40a1ce:	f102 0538 	add.w	r5, r2, #56	; 0x38
  40a1d2:	19c8      	adds	r0, r1, r7
  40a1d4:	59ca      	ldr	r2, [r1, r7]
  40a1d6:	3808      	subs	r0, #8
  40a1d8:	4290      	cmp	r0, r2
  40a1da:	d04f      	beq.n	40a27c <_free_r+0x14c>
  40a1dc:	6851      	ldr	r1, [r2, #4]
  40a1de:	f021 0103 	bic.w	r1, r1, #3
  40a1e2:	428b      	cmp	r3, r1
  40a1e4:	d232      	bcs.n	40a24c <_free_r+0x11c>
  40a1e6:	6892      	ldr	r2, [r2, #8]
  40a1e8:	4290      	cmp	r0, r2
  40a1ea:	d1f7      	bne.n	40a1dc <_free_r+0xac>
  40a1ec:	68c3      	ldr	r3, [r0, #12]
  40a1ee:	60a0      	str	r0, [r4, #8]
  40a1f0:	60e3      	str	r3, [r4, #12]
  40a1f2:	609c      	str	r4, [r3, #8]
  40a1f4:	60c4      	str	r4, [r0, #12]
  40a1f6:	4640      	mov	r0, r8
  40a1f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40a1fc:	f000 be4a 	b.w	40ae94 <__malloc_unlock>
  40a200:	6895      	ldr	r5, [r2, #8]
  40a202:	4f3b      	ldr	r7, [pc, #236]	; (40a2f0 <_free_r+0x1c0>)
  40a204:	42bd      	cmp	r5, r7
  40a206:	4403      	add	r3, r0
  40a208:	d040      	beq.n	40a28c <_free_r+0x15c>
  40a20a:	68d0      	ldr	r0, [r2, #12]
  40a20c:	60e8      	str	r0, [r5, #12]
  40a20e:	f043 0201 	orr.w	r2, r3, #1
  40a212:	6085      	str	r5, [r0, #8]
  40a214:	6062      	str	r2, [r4, #4]
  40a216:	50e3      	str	r3, [r4, r3]
  40a218:	e7b7      	b.n	40a18a <_free_r+0x5a>
  40a21a:	07ff      	lsls	r7, r7, #31
  40a21c:	4403      	add	r3, r0
  40a21e:	d407      	bmi.n	40a230 <_free_r+0x100>
  40a220:	f855 2c08 	ldr.w	r2, [r5, #-8]
  40a224:	1aa4      	subs	r4, r4, r2
  40a226:	4413      	add	r3, r2
  40a228:	68a0      	ldr	r0, [r4, #8]
  40a22a:	68e2      	ldr	r2, [r4, #12]
  40a22c:	60c2      	str	r2, [r0, #12]
  40a22e:	6090      	str	r0, [r2, #8]
  40a230:	4a30      	ldr	r2, [pc, #192]	; (40a2f4 <_free_r+0x1c4>)
  40a232:	6812      	ldr	r2, [r2, #0]
  40a234:	f043 0001 	orr.w	r0, r3, #1
  40a238:	4293      	cmp	r3, r2
  40a23a:	6060      	str	r0, [r4, #4]
  40a23c:	608c      	str	r4, [r1, #8]
  40a23e:	d3b9      	bcc.n	40a1b4 <_free_r+0x84>
  40a240:	4b2d      	ldr	r3, [pc, #180]	; (40a2f8 <_free_r+0x1c8>)
  40a242:	4640      	mov	r0, r8
  40a244:	6819      	ldr	r1, [r3, #0]
  40a246:	f7ff ff23 	bl	40a090 <_malloc_trim_r>
  40a24a:	e7b3      	b.n	40a1b4 <_free_r+0x84>
  40a24c:	4610      	mov	r0, r2
  40a24e:	e7cd      	b.n	40a1ec <_free_r+0xbc>
  40a250:	1811      	adds	r1, r2, r0
  40a252:	6849      	ldr	r1, [r1, #4]
  40a254:	07c9      	lsls	r1, r1, #31
  40a256:	d444      	bmi.n	40a2e2 <_free_r+0x1b2>
  40a258:	6891      	ldr	r1, [r2, #8]
  40a25a:	68d2      	ldr	r2, [r2, #12]
  40a25c:	60ca      	str	r2, [r1, #12]
  40a25e:	4403      	add	r3, r0
  40a260:	f043 0001 	orr.w	r0, r3, #1
  40a264:	6091      	str	r1, [r2, #8]
  40a266:	6060      	str	r0, [r4, #4]
  40a268:	50e3      	str	r3, [r4, r3]
  40a26a:	e7a3      	b.n	40a1b4 <_free_r+0x84>
  40a26c:	2a14      	cmp	r2, #20
  40a26e:	d816      	bhi.n	40a29e <_free_r+0x16e>
  40a270:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  40a274:	00ff      	lsls	r7, r7, #3
  40a276:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  40a27a:	e7aa      	b.n	40a1d2 <_free_r+0xa2>
  40a27c:	10aa      	asrs	r2, r5, #2
  40a27e:	2301      	movs	r3, #1
  40a280:	684d      	ldr	r5, [r1, #4]
  40a282:	4093      	lsls	r3, r2
  40a284:	432b      	orrs	r3, r5
  40a286:	604b      	str	r3, [r1, #4]
  40a288:	4603      	mov	r3, r0
  40a28a:	e7b0      	b.n	40a1ee <_free_r+0xbe>
  40a28c:	f043 0201 	orr.w	r2, r3, #1
  40a290:	614c      	str	r4, [r1, #20]
  40a292:	610c      	str	r4, [r1, #16]
  40a294:	60e5      	str	r5, [r4, #12]
  40a296:	60a5      	str	r5, [r4, #8]
  40a298:	6062      	str	r2, [r4, #4]
  40a29a:	50e3      	str	r3, [r4, r3]
  40a29c:	e78a      	b.n	40a1b4 <_free_r+0x84>
  40a29e:	2a54      	cmp	r2, #84	; 0x54
  40a2a0:	d806      	bhi.n	40a2b0 <_free_r+0x180>
  40a2a2:	0b1a      	lsrs	r2, r3, #12
  40a2a4:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  40a2a8:	00ff      	lsls	r7, r7, #3
  40a2aa:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  40a2ae:	e790      	b.n	40a1d2 <_free_r+0xa2>
  40a2b0:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  40a2b4:	d806      	bhi.n	40a2c4 <_free_r+0x194>
  40a2b6:	0bda      	lsrs	r2, r3, #15
  40a2b8:	f102 0778 	add.w	r7, r2, #120	; 0x78
  40a2bc:	00ff      	lsls	r7, r7, #3
  40a2be:	f102 0577 	add.w	r5, r2, #119	; 0x77
  40a2c2:	e786      	b.n	40a1d2 <_free_r+0xa2>
  40a2c4:	f240 5054 	movw	r0, #1364	; 0x554
  40a2c8:	4282      	cmp	r2, r0
  40a2ca:	d806      	bhi.n	40a2da <_free_r+0x1aa>
  40a2cc:	0c9a      	lsrs	r2, r3, #18
  40a2ce:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  40a2d2:	00ff      	lsls	r7, r7, #3
  40a2d4:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  40a2d8:	e77b      	b.n	40a1d2 <_free_r+0xa2>
  40a2da:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  40a2de:	257e      	movs	r5, #126	; 0x7e
  40a2e0:	e777      	b.n	40a1d2 <_free_r+0xa2>
  40a2e2:	f043 0101 	orr.w	r1, r3, #1
  40a2e6:	6061      	str	r1, [r4, #4]
  40a2e8:	6013      	str	r3, [r2, #0]
  40a2ea:	e763      	b.n	40a1b4 <_free_r+0x84>
  40a2ec:	204005c0 	.word	0x204005c0
  40a2f0:	204005c8 	.word	0x204005c8
  40a2f4:	204009cc 	.word	0x204009cc
  40a2f8:	2040c994 	.word	0x2040c994

0040a2fc <__sfvwrite_r>:
  40a2fc:	6893      	ldr	r3, [r2, #8]
  40a2fe:	2b00      	cmp	r3, #0
  40a300:	d073      	beq.n	40a3ea <__sfvwrite_r+0xee>
  40a302:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40a306:	898b      	ldrh	r3, [r1, #12]
  40a308:	b083      	sub	sp, #12
  40a30a:	460c      	mov	r4, r1
  40a30c:	0719      	lsls	r1, r3, #28
  40a30e:	9000      	str	r0, [sp, #0]
  40a310:	4616      	mov	r6, r2
  40a312:	d526      	bpl.n	40a362 <__sfvwrite_r+0x66>
  40a314:	6922      	ldr	r2, [r4, #16]
  40a316:	b322      	cbz	r2, 40a362 <__sfvwrite_r+0x66>
  40a318:	f013 0002 	ands.w	r0, r3, #2
  40a31c:	6835      	ldr	r5, [r6, #0]
  40a31e:	d02c      	beq.n	40a37a <__sfvwrite_r+0x7e>
  40a320:	f04f 0900 	mov.w	r9, #0
  40a324:	4fb0      	ldr	r7, [pc, #704]	; (40a5e8 <__sfvwrite_r+0x2ec>)
  40a326:	46c8      	mov	r8, r9
  40a328:	46b2      	mov	sl, r6
  40a32a:	45b8      	cmp	r8, r7
  40a32c:	4643      	mov	r3, r8
  40a32e:	464a      	mov	r2, r9
  40a330:	bf28      	it	cs
  40a332:	463b      	movcs	r3, r7
  40a334:	9800      	ldr	r0, [sp, #0]
  40a336:	f1b8 0f00 	cmp.w	r8, #0
  40a33a:	d050      	beq.n	40a3de <__sfvwrite_r+0xe2>
  40a33c:	69e1      	ldr	r1, [r4, #28]
  40a33e:	6a66      	ldr	r6, [r4, #36]	; 0x24
  40a340:	47b0      	blx	r6
  40a342:	2800      	cmp	r0, #0
  40a344:	dd58      	ble.n	40a3f8 <__sfvwrite_r+0xfc>
  40a346:	f8da 3008 	ldr.w	r3, [sl, #8]
  40a34a:	1a1b      	subs	r3, r3, r0
  40a34c:	4481      	add	r9, r0
  40a34e:	eba8 0800 	sub.w	r8, r8, r0
  40a352:	f8ca 3008 	str.w	r3, [sl, #8]
  40a356:	2b00      	cmp	r3, #0
  40a358:	d1e7      	bne.n	40a32a <__sfvwrite_r+0x2e>
  40a35a:	2000      	movs	r0, #0
  40a35c:	b003      	add	sp, #12
  40a35e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a362:	4621      	mov	r1, r4
  40a364:	9800      	ldr	r0, [sp, #0]
  40a366:	f7fe fc91 	bl	408c8c <__swsetup_r>
  40a36a:	2800      	cmp	r0, #0
  40a36c:	f040 8133 	bne.w	40a5d6 <__sfvwrite_r+0x2da>
  40a370:	89a3      	ldrh	r3, [r4, #12]
  40a372:	6835      	ldr	r5, [r6, #0]
  40a374:	f013 0002 	ands.w	r0, r3, #2
  40a378:	d1d2      	bne.n	40a320 <__sfvwrite_r+0x24>
  40a37a:	f013 0901 	ands.w	r9, r3, #1
  40a37e:	d145      	bne.n	40a40c <__sfvwrite_r+0x110>
  40a380:	464f      	mov	r7, r9
  40a382:	9601      	str	r6, [sp, #4]
  40a384:	b337      	cbz	r7, 40a3d4 <__sfvwrite_r+0xd8>
  40a386:	059a      	lsls	r2, r3, #22
  40a388:	f8d4 8008 	ldr.w	r8, [r4, #8]
  40a38c:	f140 8083 	bpl.w	40a496 <__sfvwrite_r+0x19a>
  40a390:	4547      	cmp	r7, r8
  40a392:	46c3      	mov	fp, r8
  40a394:	f0c0 80ab 	bcc.w	40a4ee <__sfvwrite_r+0x1f2>
  40a398:	f413 6f90 	tst.w	r3, #1152	; 0x480
  40a39c:	f040 80ac 	bne.w	40a4f8 <__sfvwrite_r+0x1fc>
  40a3a0:	6820      	ldr	r0, [r4, #0]
  40a3a2:	46ba      	mov	sl, r7
  40a3a4:	465a      	mov	r2, fp
  40a3a6:	4649      	mov	r1, r9
  40a3a8:	f000 fd0a 	bl	40adc0 <memmove>
  40a3ac:	68a2      	ldr	r2, [r4, #8]
  40a3ae:	6823      	ldr	r3, [r4, #0]
  40a3b0:	eba2 0208 	sub.w	r2, r2, r8
  40a3b4:	445b      	add	r3, fp
  40a3b6:	60a2      	str	r2, [r4, #8]
  40a3b8:	6023      	str	r3, [r4, #0]
  40a3ba:	9a01      	ldr	r2, [sp, #4]
  40a3bc:	6893      	ldr	r3, [r2, #8]
  40a3be:	eba3 030a 	sub.w	r3, r3, sl
  40a3c2:	44d1      	add	r9, sl
  40a3c4:	eba7 070a 	sub.w	r7, r7, sl
  40a3c8:	6093      	str	r3, [r2, #8]
  40a3ca:	2b00      	cmp	r3, #0
  40a3cc:	d0c5      	beq.n	40a35a <__sfvwrite_r+0x5e>
  40a3ce:	89a3      	ldrh	r3, [r4, #12]
  40a3d0:	2f00      	cmp	r7, #0
  40a3d2:	d1d8      	bne.n	40a386 <__sfvwrite_r+0x8a>
  40a3d4:	f8d5 9000 	ldr.w	r9, [r5]
  40a3d8:	686f      	ldr	r7, [r5, #4]
  40a3da:	3508      	adds	r5, #8
  40a3dc:	e7d2      	b.n	40a384 <__sfvwrite_r+0x88>
  40a3de:	f8d5 9000 	ldr.w	r9, [r5]
  40a3e2:	f8d5 8004 	ldr.w	r8, [r5, #4]
  40a3e6:	3508      	adds	r5, #8
  40a3e8:	e79f      	b.n	40a32a <__sfvwrite_r+0x2e>
  40a3ea:	2000      	movs	r0, #0
  40a3ec:	4770      	bx	lr
  40a3ee:	4621      	mov	r1, r4
  40a3f0:	9800      	ldr	r0, [sp, #0]
  40a3f2:	f7ff fd1f 	bl	409e34 <_fflush_r>
  40a3f6:	b370      	cbz	r0, 40a456 <__sfvwrite_r+0x15a>
  40a3f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40a3fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40a400:	f04f 30ff 	mov.w	r0, #4294967295
  40a404:	81a3      	strh	r3, [r4, #12]
  40a406:	b003      	add	sp, #12
  40a408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a40c:	4681      	mov	r9, r0
  40a40e:	4633      	mov	r3, r6
  40a410:	464e      	mov	r6, r9
  40a412:	46a8      	mov	r8, r5
  40a414:	469a      	mov	sl, r3
  40a416:	464d      	mov	r5, r9
  40a418:	b34e      	cbz	r6, 40a46e <__sfvwrite_r+0x172>
  40a41a:	b380      	cbz	r0, 40a47e <__sfvwrite_r+0x182>
  40a41c:	6820      	ldr	r0, [r4, #0]
  40a41e:	6923      	ldr	r3, [r4, #16]
  40a420:	6962      	ldr	r2, [r4, #20]
  40a422:	45b1      	cmp	r9, r6
  40a424:	46cb      	mov	fp, r9
  40a426:	bf28      	it	cs
  40a428:	46b3      	movcs	fp, r6
  40a42a:	4298      	cmp	r0, r3
  40a42c:	465f      	mov	r7, fp
  40a42e:	d904      	bls.n	40a43a <__sfvwrite_r+0x13e>
  40a430:	68a3      	ldr	r3, [r4, #8]
  40a432:	4413      	add	r3, r2
  40a434:	459b      	cmp	fp, r3
  40a436:	f300 80a6 	bgt.w	40a586 <__sfvwrite_r+0x28a>
  40a43a:	4593      	cmp	fp, r2
  40a43c:	db4b      	blt.n	40a4d6 <__sfvwrite_r+0x1da>
  40a43e:	4613      	mov	r3, r2
  40a440:	6a67      	ldr	r7, [r4, #36]	; 0x24
  40a442:	69e1      	ldr	r1, [r4, #28]
  40a444:	9800      	ldr	r0, [sp, #0]
  40a446:	462a      	mov	r2, r5
  40a448:	47b8      	blx	r7
  40a44a:	1e07      	subs	r7, r0, #0
  40a44c:	ddd4      	ble.n	40a3f8 <__sfvwrite_r+0xfc>
  40a44e:	ebb9 0907 	subs.w	r9, r9, r7
  40a452:	d0cc      	beq.n	40a3ee <__sfvwrite_r+0xf2>
  40a454:	2001      	movs	r0, #1
  40a456:	f8da 3008 	ldr.w	r3, [sl, #8]
  40a45a:	1bdb      	subs	r3, r3, r7
  40a45c:	443d      	add	r5, r7
  40a45e:	1bf6      	subs	r6, r6, r7
  40a460:	f8ca 3008 	str.w	r3, [sl, #8]
  40a464:	2b00      	cmp	r3, #0
  40a466:	f43f af78 	beq.w	40a35a <__sfvwrite_r+0x5e>
  40a46a:	2e00      	cmp	r6, #0
  40a46c:	d1d5      	bne.n	40a41a <__sfvwrite_r+0x11e>
  40a46e:	f108 0308 	add.w	r3, r8, #8
  40a472:	e913 0060 	ldmdb	r3, {r5, r6}
  40a476:	4698      	mov	r8, r3
  40a478:	3308      	adds	r3, #8
  40a47a:	2e00      	cmp	r6, #0
  40a47c:	d0f9      	beq.n	40a472 <__sfvwrite_r+0x176>
  40a47e:	4632      	mov	r2, r6
  40a480:	210a      	movs	r1, #10
  40a482:	4628      	mov	r0, r5
  40a484:	f000 fc4c 	bl	40ad20 <memchr>
  40a488:	2800      	cmp	r0, #0
  40a48a:	f000 80a1 	beq.w	40a5d0 <__sfvwrite_r+0x2d4>
  40a48e:	3001      	adds	r0, #1
  40a490:	eba0 0905 	sub.w	r9, r0, r5
  40a494:	e7c2      	b.n	40a41c <__sfvwrite_r+0x120>
  40a496:	6820      	ldr	r0, [r4, #0]
  40a498:	6923      	ldr	r3, [r4, #16]
  40a49a:	4298      	cmp	r0, r3
  40a49c:	d802      	bhi.n	40a4a4 <__sfvwrite_r+0x1a8>
  40a49e:	6963      	ldr	r3, [r4, #20]
  40a4a0:	429f      	cmp	r7, r3
  40a4a2:	d25d      	bcs.n	40a560 <__sfvwrite_r+0x264>
  40a4a4:	45b8      	cmp	r8, r7
  40a4a6:	bf28      	it	cs
  40a4a8:	46b8      	movcs	r8, r7
  40a4aa:	4642      	mov	r2, r8
  40a4ac:	4649      	mov	r1, r9
  40a4ae:	f000 fc87 	bl	40adc0 <memmove>
  40a4b2:	68a3      	ldr	r3, [r4, #8]
  40a4b4:	6822      	ldr	r2, [r4, #0]
  40a4b6:	eba3 0308 	sub.w	r3, r3, r8
  40a4ba:	4442      	add	r2, r8
  40a4bc:	60a3      	str	r3, [r4, #8]
  40a4be:	6022      	str	r2, [r4, #0]
  40a4c0:	b10b      	cbz	r3, 40a4c6 <__sfvwrite_r+0x1ca>
  40a4c2:	46c2      	mov	sl, r8
  40a4c4:	e779      	b.n	40a3ba <__sfvwrite_r+0xbe>
  40a4c6:	4621      	mov	r1, r4
  40a4c8:	9800      	ldr	r0, [sp, #0]
  40a4ca:	f7ff fcb3 	bl	409e34 <_fflush_r>
  40a4ce:	2800      	cmp	r0, #0
  40a4d0:	d192      	bne.n	40a3f8 <__sfvwrite_r+0xfc>
  40a4d2:	46c2      	mov	sl, r8
  40a4d4:	e771      	b.n	40a3ba <__sfvwrite_r+0xbe>
  40a4d6:	465a      	mov	r2, fp
  40a4d8:	4629      	mov	r1, r5
  40a4da:	f000 fc71 	bl	40adc0 <memmove>
  40a4de:	68a2      	ldr	r2, [r4, #8]
  40a4e0:	6823      	ldr	r3, [r4, #0]
  40a4e2:	eba2 020b 	sub.w	r2, r2, fp
  40a4e6:	445b      	add	r3, fp
  40a4e8:	60a2      	str	r2, [r4, #8]
  40a4ea:	6023      	str	r3, [r4, #0]
  40a4ec:	e7af      	b.n	40a44e <__sfvwrite_r+0x152>
  40a4ee:	6820      	ldr	r0, [r4, #0]
  40a4f0:	46b8      	mov	r8, r7
  40a4f2:	46ba      	mov	sl, r7
  40a4f4:	46bb      	mov	fp, r7
  40a4f6:	e755      	b.n	40a3a4 <__sfvwrite_r+0xa8>
  40a4f8:	6962      	ldr	r2, [r4, #20]
  40a4fa:	6820      	ldr	r0, [r4, #0]
  40a4fc:	6921      	ldr	r1, [r4, #16]
  40a4fe:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  40a502:	eba0 0a01 	sub.w	sl, r0, r1
  40a506:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  40a50a:	f10a 0001 	add.w	r0, sl, #1
  40a50e:	ea4f 0868 	mov.w	r8, r8, asr #1
  40a512:	4438      	add	r0, r7
  40a514:	4540      	cmp	r0, r8
  40a516:	4642      	mov	r2, r8
  40a518:	bf84      	itt	hi
  40a51a:	4680      	movhi	r8, r0
  40a51c:	4642      	movhi	r2, r8
  40a51e:	055b      	lsls	r3, r3, #21
  40a520:	d544      	bpl.n	40a5ac <__sfvwrite_r+0x2b0>
  40a522:	4611      	mov	r1, r2
  40a524:	9800      	ldr	r0, [sp, #0]
  40a526:	f000 f92f 	bl	40a788 <_malloc_r>
  40a52a:	4683      	mov	fp, r0
  40a52c:	2800      	cmp	r0, #0
  40a52e:	d055      	beq.n	40a5dc <__sfvwrite_r+0x2e0>
  40a530:	4652      	mov	r2, sl
  40a532:	6921      	ldr	r1, [r4, #16]
  40a534:	f7fc f802 	bl	40653c <memcpy>
  40a538:	89a3      	ldrh	r3, [r4, #12]
  40a53a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  40a53e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40a542:	81a3      	strh	r3, [r4, #12]
  40a544:	eb0b 000a 	add.w	r0, fp, sl
  40a548:	eba8 030a 	sub.w	r3, r8, sl
  40a54c:	f8c4 b010 	str.w	fp, [r4, #16]
  40a550:	f8c4 8014 	str.w	r8, [r4, #20]
  40a554:	6020      	str	r0, [r4, #0]
  40a556:	60a3      	str	r3, [r4, #8]
  40a558:	46b8      	mov	r8, r7
  40a55a:	46ba      	mov	sl, r7
  40a55c:	46bb      	mov	fp, r7
  40a55e:	e721      	b.n	40a3a4 <__sfvwrite_r+0xa8>
  40a560:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  40a564:	42b9      	cmp	r1, r7
  40a566:	bf28      	it	cs
  40a568:	4639      	movcs	r1, r7
  40a56a:	464a      	mov	r2, r9
  40a56c:	fb91 f1f3 	sdiv	r1, r1, r3
  40a570:	9800      	ldr	r0, [sp, #0]
  40a572:	6a66      	ldr	r6, [r4, #36]	; 0x24
  40a574:	fb03 f301 	mul.w	r3, r3, r1
  40a578:	69e1      	ldr	r1, [r4, #28]
  40a57a:	47b0      	blx	r6
  40a57c:	f1b0 0a00 	subs.w	sl, r0, #0
  40a580:	f73f af1b 	bgt.w	40a3ba <__sfvwrite_r+0xbe>
  40a584:	e738      	b.n	40a3f8 <__sfvwrite_r+0xfc>
  40a586:	461a      	mov	r2, r3
  40a588:	4629      	mov	r1, r5
  40a58a:	9301      	str	r3, [sp, #4]
  40a58c:	f000 fc18 	bl	40adc0 <memmove>
  40a590:	6822      	ldr	r2, [r4, #0]
  40a592:	9b01      	ldr	r3, [sp, #4]
  40a594:	9800      	ldr	r0, [sp, #0]
  40a596:	441a      	add	r2, r3
  40a598:	6022      	str	r2, [r4, #0]
  40a59a:	4621      	mov	r1, r4
  40a59c:	f7ff fc4a 	bl	409e34 <_fflush_r>
  40a5a0:	9b01      	ldr	r3, [sp, #4]
  40a5a2:	2800      	cmp	r0, #0
  40a5a4:	f47f af28 	bne.w	40a3f8 <__sfvwrite_r+0xfc>
  40a5a8:	461f      	mov	r7, r3
  40a5aa:	e750      	b.n	40a44e <__sfvwrite_r+0x152>
  40a5ac:	9800      	ldr	r0, [sp, #0]
  40a5ae:	f000 ff71 	bl	40b494 <_realloc_r>
  40a5b2:	4683      	mov	fp, r0
  40a5b4:	2800      	cmp	r0, #0
  40a5b6:	d1c5      	bne.n	40a544 <__sfvwrite_r+0x248>
  40a5b8:	9d00      	ldr	r5, [sp, #0]
  40a5ba:	6921      	ldr	r1, [r4, #16]
  40a5bc:	4628      	mov	r0, r5
  40a5be:	f7ff fdb7 	bl	40a130 <_free_r>
  40a5c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40a5c6:	220c      	movs	r2, #12
  40a5c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  40a5cc:	602a      	str	r2, [r5, #0]
  40a5ce:	e715      	b.n	40a3fc <__sfvwrite_r+0x100>
  40a5d0:	f106 0901 	add.w	r9, r6, #1
  40a5d4:	e722      	b.n	40a41c <__sfvwrite_r+0x120>
  40a5d6:	f04f 30ff 	mov.w	r0, #4294967295
  40a5da:	e6bf      	b.n	40a35c <__sfvwrite_r+0x60>
  40a5dc:	9a00      	ldr	r2, [sp, #0]
  40a5de:	230c      	movs	r3, #12
  40a5e0:	6013      	str	r3, [r2, #0]
  40a5e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40a5e6:	e709      	b.n	40a3fc <__sfvwrite_r+0x100>
  40a5e8:	7ffffc00 	.word	0x7ffffc00

0040a5ec <_fwalk_reent>:
  40a5ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40a5f0:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  40a5f4:	d01f      	beq.n	40a636 <_fwalk_reent+0x4a>
  40a5f6:	4688      	mov	r8, r1
  40a5f8:	4606      	mov	r6, r0
  40a5fa:	f04f 0900 	mov.w	r9, #0
  40a5fe:	687d      	ldr	r5, [r7, #4]
  40a600:	68bc      	ldr	r4, [r7, #8]
  40a602:	3d01      	subs	r5, #1
  40a604:	d411      	bmi.n	40a62a <_fwalk_reent+0x3e>
  40a606:	89a3      	ldrh	r3, [r4, #12]
  40a608:	2b01      	cmp	r3, #1
  40a60a:	f105 35ff 	add.w	r5, r5, #4294967295
  40a60e:	d908      	bls.n	40a622 <_fwalk_reent+0x36>
  40a610:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  40a614:	3301      	adds	r3, #1
  40a616:	4621      	mov	r1, r4
  40a618:	4630      	mov	r0, r6
  40a61a:	d002      	beq.n	40a622 <_fwalk_reent+0x36>
  40a61c:	47c0      	blx	r8
  40a61e:	ea49 0900 	orr.w	r9, r9, r0
  40a622:	1c6b      	adds	r3, r5, #1
  40a624:	f104 0468 	add.w	r4, r4, #104	; 0x68
  40a628:	d1ed      	bne.n	40a606 <_fwalk_reent+0x1a>
  40a62a:	683f      	ldr	r7, [r7, #0]
  40a62c:	2f00      	cmp	r7, #0
  40a62e:	d1e6      	bne.n	40a5fe <_fwalk_reent+0x12>
  40a630:	4648      	mov	r0, r9
  40a632:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40a636:	46b9      	mov	r9, r7
  40a638:	4648      	mov	r0, r9
  40a63a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40a63e:	bf00      	nop

0040a640 <__locale_mb_cur_max>:
  40a640:	4b04      	ldr	r3, [pc, #16]	; (40a654 <__locale_mb_cur_max+0x14>)
  40a642:	4a05      	ldr	r2, [pc, #20]	; (40a658 <__locale_mb_cur_max+0x18>)
  40a644:	681b      	ldr	r3, [r3, #0]
  40a646:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  40a648:	2b00      	cmp	r3, #0
  40a64a:	bf08      	it	eq
  40a64c:	4613      	moveq	r3, r2
  40a64e:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  40a652:	4770      	bx	lr
  40a654:	20400024 	.word	0x20400024
  40a658:	20400454 	.word	0x20400454

0040a65c <_localeconv_r>:
  40a65c:	4a04      	ldr	r2, [pc, #16]	; (40a670 <_localeconv_r+0x14>)
  40a65e:	4b05      	ldr	r3, [pc, #20]	; (40a674 <_localeconv_r+0x18>)
  40a660:	6812      	ldr	r2, [r2, #0]
  40a662:	6b50      	ldr	r0, [r2, #52]	; 0x34
  40a664:	2800      	cmp	r0, #0
  40a666:	bf08      	it	eq
  40a668:	4618      	moveq	r0, r3
  40a66a:	30f0      	adds	r0, #240	; 0xf0
  40a66c:	4770      	bx	lr
  40a66e:	bf00      	nop
  40a670:	20400024 	.word	0x20400024
  40a674:	20400454 	.word	0x20400454

0040a678 <__retarget_lock_init_recursive>:
  40a678:	4770      	bx	lr
  40a67a:	bf00      	nop

0040a67c <__retarget_lock_close_recursive>:
  40a67c:	4770      	bx	lr
  40a67e:	bf00      	nop

0040a680 <__retarget_lock_acquire_recursive>:
  40a680:	4770      	bx	lr
  40a682:	bf00      	nop

0040a684 <__retarget_lock_release_recursive>:
  40a684:	4770      	bx	lr
  40a686:	bf00      	nop

0040a688 <__swhatbuf_r>:
  40a688:	b570      	push	{r4, r5, r6, lr}
  40a68a:	460c      	mov	r4, r1
  40a68c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40a690:	2900      	cmp	r1, #0
  40a692:	b090      	sub	sp, #64	; 0x40
  40a694:	4615      	mov	r5, r2
  40a696:	461e      	mov	r6, r3
  40a698:	db14      	blt.n	40a6c4 <__swhatbuf_r+0x3c>
  40a69a:	aa01      	add	r2, sp, #4
  40a69c:	f001 fb20 	bl	40bce0 <_fstat_r>
  40a6a0:	2800      	cmp	r0, #0
  40a6a2:	db0f      	blt.n	40a6c4 <__swhatbuf_r+0x3c>
  40a6a4:	9a02      	ldr	r2, [sp, #8]
  40a6a6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  40a6aa:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  40a6ae:	fab2 f282 	clz	r2, r2
  40a6b2:	0952      	lsrs	r2, r2, #5
  40a6b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40a6b8:	f44f 6000 	mov.w	r0, #2048	; 0x800
  40a6bc:	6032      	str	r2, [r6, #0]
  40a6be:	602b      	str	r3, [r5, #0]
  40a6c0:	b010      	add	sp, #64	; 0x40
  40a6c2:	bd70      	pop	{r4, r5, r6, pc}
  40a6c4:	89a2      	ldrh	r2, [r4, #12]
  40a6c6:	2300      	movs	r3, #0
  40a6c8:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  40a6cc:	6033      	str	r3, [r6, #0]
  40a6ce:	d004      	beq.n	40a6da <__swhatbuf_r+0x52>
  40a6d0:	2240      	movs	r2, #64	; 0x40
  40a6d2:	4618      	mov	r0, r3
  40a6d4:	602a      	str	r2, [r5, #0]
  40a6d6:	b010      	add	sp, #64	; 0x40
  40a6d8:	bd70      	pop	{r4, r5, r6, pc}
  40a6da:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40a6de:	602b      	str	r3, [r5, #0]
  40a6e0:	b010      	add	sp, #64	; 0x40
  40a6e2:	bd70      	pop	{r4, r5, r6, pc}

0040a6e4 <__smakebuf_r>:
  40a6e4:	898a      	ldrh	r2, [r1, #12]
  40a6e6:	0792      	lsls	r2, r2, #30
  40a6e8:	460b      	mov	r3, r1
  40a6ea:	d506      	bpl.n	40a6fa <__smakebuf_r+0x16>
  40a6ec:	f101 0243 	add.w	r2, r1, #67	; 0x43
  40a6f0:	2101      	movs	r1, #1
  40a6f2:	601a      	str	r2, [r3, #0]
  40a6f4:	611a      	str	r2, [r3, #16]
  40a6f6:	6159      	str	r1, [r3, #20]
  40a6f8:	4770      	bx	lr
  40a6fa:	b5f0      	push	{r4, r5, r6, r7, lr}
  40a6fc:	b083      	sub	sp, #12
  40a6fe:	ab01      	add	r3, sp, #4
  40a700:	466a      	mov	r2, sp
  40a702:	460c      	mov	r4, r1
  40a704:	4606      	mov	r6, r0
  40a706:	f7ff ffbf 	bl	40a688 <__swhatbuf_r>
  40a70a:	9900      	ldr	r1, [sp, #0]
  40a70c:	4605      	mov	r5, r0
  40a70e:	4630      	mov	r0, r6
  40a710:	f000 f83a 	bl	40a788 <_malloc_r>
  40a714:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40a718:	b1d8      	cbz	r0, 40a752 <__smakebuf_r+0x6e>
  40a71a:	9a01      	ldr	r2, [sp, #4]
  40a71c:	4f15      	ldr	r7, [pc, #84]	; (40a774 <__smakebuf_r+0x90>)
  40a71e:	9900      	ldr	r1, [sp, #0]
  40a720:	63f7      	str	r7, [r6, #60]	; 0x3c
  40a722:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40a726:	81a3      	strh	r3, [r4, #12]
  40a728:	6020      	str	r0, [r4, #0]
  40a72a:	6120      	str	r0, [r4, #16]
  40a72c:	6161      	str	r1, [r4, #20]
  40a72e:	b91a      	cbnz	r2, 40a738 <__smakebuf_r+0x54>
  40a730:	432b      	orrs	r3, r5
  40a732:	81a3      	strh	r3, [r4, #12]
  40a734:	b003      	add	sp, #12
  40a736:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40a738:	4630      	mov	r0, r6
  40a73a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40a73e:	f001 fae3 	bl	40bd08 <_isatty_r>
  40a742:	b1a0      	cbz	r0, 40a76e <__smakebuf_r+0x8a>
  40a744:	89a3      	ldrh	r3, [r4, #12]
  40a746:	f023 0303 	bic.w	r3, r3, #3
  40a74a:	f043 0301 	orr.w	r3, r3, #1
  40a74e:	b21b      	sxth	r3, r3
  40a750:	e7ee      	b.n	40a730 <__smakebuf_r+0x4c>
  40a752:	059a      	lsls	r2, r3, #22
  40a754:	d4ee      	bmi.n	40a734 <__smakebuf_r+0x50>
  40a756:	f023 0303 	bic.w	r3, r3, #3
  40a75a:	f104 0243 	add.w	r2, r4, #67	; 0x43
  40a75e:	f043 0302 	orr.w	r3, r3, #2
  40a762:	2101      	movs	r1, #1
  40a764:	81a3      	strh	r3, [r4, #12]
  40a766:	6022      	str	r2, [r4, #0]
  40a768:	6122      	str	r2, [r4, #16]
  40a76a:	6161      	str	r1, [r4, #20]
  40a76c:	e7e2      	b.n	40a734 <__smakebuf_r+0x50>
  40a76e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40a772:	e7dd      	b.n	40a730 <__smakebuf_r+0x4c>
  40a774:	00409e89 	.word	0x00409e89

0040a778 <malloc>:
  40a778:	4b02      	ldr	r3, [pc, #8]	; (40a784 <malloc+0xc>)
  40a77a:	4601      	mov	r1, r0
  40a77c:	6818      	ldr	r0, [r3, #0]
  40a77e:	f000 b803 	b.w	40a788 <_malloc_r>
  40a782:	bf00      	nop
  40a784:	20400024 	.word	0x20400024

0040a788 <_malloc_r>:
  40a788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40a78c:	f101 060b 	add.w	r6, r1, #11
  40a790:	2e16      	cmp	r6, #22
  40a792:	b083      	sub	sp, #12
  40a794:	4605      	mov	r5, r0
  40a796:	f240 809e 	bls.w	40a8d6 <_malloc_r+0x14e>
  40a79a:	f036 0607 	bics.w	r6, r6, #7
  40a79e:	f100 80bd 	bmi.w	40a91c <_malloc_r+0x194>
  40a7a2:	42b1      	cmp	r1, r6
  40a7a4:	f200 80ba 	bhi.w	40a91c <_malloc_r+0x194>
  40a7a8:	f000 fb6e 	bl	40ae88 <__malloc_lock>
  40a7ac:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  40a7b0:	f0c0 8293 	bcc.w	40acda <_malloc_r+0x552>
  40a7b4:	0a73      	lsrs	r3, r6, #9
  40a7b6:	f000 80b8 	beq.w	40a92a <_malloc_r+0x1a2>
  40a7ba:	2b04      	cmp	r3, #4
  40a7bc:	f200 8179 	bhi.w	40aab2 <_malloc_r+0x32a>
  40a7c0:	09b3      	lsrs	r3, r6, #6
  40a7c2:	f103 0039 	add.w	r0, r3, #57	; 0x39
  40a7c6:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  40a7ca:	00c3      	lsls	r3, r0, #3
  40a7cc:	4fbf      	ldr	r7, [pc, #764]	; (40aacc <_malloc_r+0x344>)
  40a7ce:	443b      	add	r3, r7
  40a7d0:	f1a3 0108 	sub.w	r1, r3, #8
  40a7d4:	685c      	ldr	r4, [r3, #4]
  40a7d6:	42a1      	cmp	r1, r4
  40a7d8:	d106      	bne.n	40a7e8 <_malloc_r+0x60>
  40a7da:	e00c      	b.n	40a7f6 <_malloc_r+0x6e>
  40a7dc:	2a00      	cmp	r2, #0
  40a7de:	f280 80aa 	bge.w	40a936 <_malloc_r+0x1ae>
  40a7e2:	68e4      	ldr	r4, [r4, #12]
  40a7e4:	42a1      	cmp	r1, r4
  40a7e6:	d006      	beq.n	40a7f6 <_malloc_r+0x6e>
  40a7e8:	6863      	ldr	r3, [r4, #4]
  40a7ea:	f023 0303 	bic.w	r3, r3, #3
  40a7ee:	1b9a      	subs	r2, r3, r6
  40a7f0:	2a0f      	cmp	r2, #15
  40a7f2:	ddf3      	ble.n	40a7dc <_malloc_r+0x54>
  40a7f4:	4670      	mov	r0, lr
  40a7f6:	693c      	ldr	r4, [r7, #16]
  40a7f8:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 40aae0 <_malloc_r+0x358>
  40a7fc:	4574      	cmp	r4, lr
  40a7fe:	f000 81ab 	beq.w	40ab58 <_malloc_r+0x3d0>
  40a802:	6863      	ldr	r3, [r4, #4]
  40a804:	f023 0303 	bic.w	r3, r3, #3
  40a808:	1b9a      	subs	r2, r3, r6
  40a80a:	2a0f      	cmp	r2, #15
  40a80c:	f300 8190 	bgt.w	40ab30 <_malloc_r+0x3a8>
  40a810:	2a00      	cmp	r2, #0
  40a812:	f8c7 e014 	str.w	lr, [r7, #20]
  40a816:	f8c7 e010 	str.w	lr, [r7, #16]
  40a81a:	f280 809d 	bge.w	40a958 <_malloc_r+0x1d0>
  40a81e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40a822:	f080 8161 	bcs.w	40aae8 <_malloc_r+0x360>
  40a826:	08db      	lsrs	r3, r3, #3
  40a828:	f103 0c01 	add.w	ip, r3, #1
  40a82c:	1099      	asrs	r1, r3, #2
  40a82e:	687a      	ldr	r2, [r7, #4]
  40a830:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  40a834:	f8c4 8008 	str.w	r8, [r4, #8]
  40a838:	2301      	movs	r3, #1
  40a83a:	408b      	lsls	r3, r1
  40a83c:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  40a840:	4313      	orrs	r3, r2
  40a842:	3908      	subs	r1, #8
  40a844:	60e1      	str	r1, [r4, #12]
  40a846:	607b      	str	r3, [r7, #4]
  40a848:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  40a84c:	f8c8 400c 	str.w	r4, [r8, #12]
  40a850:	1082      	asrs	r2, r0, #2
  40a852:	2401      	movs	r4, #1
  40a854:	4094      	lsls	r4, r2
  40a856:	429c      	cmp	r4, r3
  40a858:	f200 808b 	bhi.w	40a972 <_malloc_r+0x1ea>
  40a85c:	421c      	tst	r4, r3
  40a85e:	d106      	bne.n	40a86e <_malloc_r+0xe6>
  40a860:	f020 0003 	bic.w	r0, r0, #3
  40a864:	0064      	lsls	r4, r4, #1
  40a866:	421c      	tst	r4, r3
  40a868:	f100 0004 	add.w	r0, r0, #4
  40a86c:	d0fa      	beq.n	40a864 <_malloc_r+0xdc>
  40a86e:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  40a872:	46cc      	mov	ip, r9
  40a874:	4680      	mov	r8, r0
  40a876:	f8dc 300c 	ldr.w	r3, [ip, #12]
  40a87a:	459c      	cmp	ip, r3
  40a87c:	d107      	bne.n	40a88e <_malloc_r+0x106>
  40a87e:	e16d      	b.n	40ab5c <_malloc_r+0x3d4>
  40a880:	2a00      	cmp	r2, #0
  40a882:	f280 817b 	bge.w	40ab7c <_malloc_r+0x3f4>
  40a886:	68db      	ldr	r3, [r3, #12]
  40a888:	459c      	cmp	ip, r3
  40a88a:	f000 8167 	beq.w	40ab5c <_malloc_r+0x3d4>
  40a88e:	6859      	ldr	r1, [r3, #4]
  40a890:	f021 0103 	bic.w	r1, r1, #3
  40a894:	1b8a      	subs	r2, r1, r6
  40a896:	2a0f      	cmp	r2, #15
  40a898:	ddf2      	ble.n	40a880 <_malloc_r+0xf8>
  40a89a:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  40a89e:	f8d3 8008 	ldr.w	r8, [r3, #8]
  40a8a2:	9300      	str	r3, [sp, #0]
  40a8a4:	199c      	adds	r4, r3, r6
  40a8a6:	4628      	mov	r0, r5
  40a8a8:	f046 0601 	orr.w	r6, r6, #1
  40a8ac:	f042 0501 	orr.w	r5, r2, #1
  40a8b0:	605e      	str	r6, [r3, #4]
  40a8b2:	f8c8 c00c 	str.w	ip, [r8, #12]
  40a8b6:	f8cc 8008 	str.w	r8, [ip, #8]
  40a8ba:	617c      	str	r4, [r7, #20]
  40a8bc:	613c      	str	r4, [r7, #16]
  40a8be:	f8c4 e00c 	str.w	lr, [r4, #12]
  40a8c2:	f8c4 e008 	str.w	lr, [r4, #8]
  40a8c6:	6065      	str	r5, [r4, #4]
  40a8c8:	505a      	str	r2, [r3, r1]
  40a8ca:	f000 fae3 	bl	40ae94 <__malloc_unlock>
  40a8ce:	9b00      	ldr	r3, [sp, #0]
  40a8d0:	f103 0408 	add.w	r4, r3, #8
  40a8d4:	e01e      	b.n	40a914 <_malloc_r+0x18c>
  40a8d6:	2910      	cmp	r1, #16
  40a8d8:	d820      	bhi.n	40a91c <_malloc_r+0x194>
  40a8da:	f000 fad5 	bl	40ae88 <__malloc_lock>
  40a8de:	2610      	movs	r6, #16
  40a8e0:	2318      	movs	r3, #24
  40a8e2:	2002      	movs	r0, #2
  40a8e4:	4f79      	ldr	r7, [pc, #484]	; (40aacc <_malloc_r+0x344>)
  40a8e6:	443b      	add	r3, r7
  40a8e8:	f1a3 0208 	sub.w	r2, r3, #8
  40a8ec:	685c      	ldr	r4, [r3, #4]
  40a8ee:	4294      	cmp	r4, r2
  40a8f0:	f000 813d 	beq.w	40ab6e <_malloc_r+0x3e6>
  40a8f4:	6863      	ldr	r3, [r4, #4]
  40a8f6:	68e1      	ldr	r1, [r4, #12]
  40a8f8:	68a6      	ldr	r6, [r4, #8]
  40a8fa:	f023 0303 	bic.w	r3, r3, #3
  40a8fe:	4423      	add	r3, r4
  40a900:	4628      	mov	r0, r5
  40a902:	685a      	ldr	r2, [r3, #4]
  40a904:	60f1      	str	r1, [r6, #12]
  40a906:	f042 0201 	orr.w	r2, r2, #1
  40a90a:	608e      	str	r6, [r1, #8]
  40a90c:	605a      	str	r2, [r3, #4]
  40a90e:	f000 fac1 	bl	40ae94 <__malloc_unlock>
  40a912:	3408      	adds	r4, #8
  40a914:	4620      	mov	r0, r4
  40a916:	b003      	add	sp, #12
  40a918:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a91c:	2400      	movs	r4, #0
  40a91e:	230c      	movs	r3, #12
  40a920:	4620      	mov	r0, r4
  40a922:	602b      	str	r3, [r5, #0]
  40a924:	b003      	add	sp, #12
  40a926:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a92a:	2040      	movs	r0, #64	; 0x40
  40a92c:	f44f 7300 	mov.w	r3, #512	; 0x200
  40a930:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  40a934:	e74a      	b.n	40a7cc <_malloc_r+0x44>
  40a936:	4423      	add	r3, r4
  40a938:	68e1      	ldr	r1, [r4, #12]
  40a93a:	685a      	ldr	r2, [r3, #4]
  40a93c:	68a6      	ldr	r6, [r4, #8]
  40a93e:	f042 0201 	orr.w	r2, r2, #1
  40a942:	60f1      	str	r1, [r6, #12]
  40a944:	4628      	mov	r0, r5
  40a946:	608e      	str	r6, [r1, #8]
  40a948:	605a      	str	r2, [r3, #4]
  40a94a:	f000 faa3 	bl	40ae94 <__malloc_unlock>
  40a94e:	3408      	adds	r4, #8
  40a950:	4620      	mov	r0, r4
  40a952:	b003      	add	sp, #12
  40a954:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a958:	4423      	add	r3, r4
  40a95a:	4628      	mov	r0, r5
  40a95c:	685a      	ldr	r2, [r3, #4]
  40a95e:	f042 0201 	orr.w	r2, r2, #1
  40a962:	605a      	str	r2, [r3, #4]
  40a964:	f000 fa96 	bl	40ae94 <__malloc_unlock>
  40a968:	3408      	adds	r4, #8
  40a96a:	4620      	mov	r0, r4
  40a96c:	b003      	add	sp, #12
  40a96e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a972:	68bc      	ldr	r4, [r7, #8]
  40a974:	6863      	ldr	r3, [r4, #4]
  40a976:	f023 0803 	bic.w	r8, r3, #3
  40a97a:	45b0      	cmp	r8, r6
  40a97c:	d304      	bcc.n	40a988 <_malloc_r+0x200>
  40a97e:	eba8 0306 	sub.w	r3, r8, r6
  40a982:	2b0f      	cmp	r3, #15
  40a984:	f300 8085 	bgt.w	40aa92 <_malloc_r+0x30a>
  40a988:	f8df 9158 	ldr.w	r9, [pc, #344]	; 40aae4 <_malloc_r+0x35c>
  40a98c:	4b50      	ldr	r3, [pc, #320]	; (40aad0 <_malloc_r+0x348>)
  40a98e:	f8d9 2000 	ldr.w	r2, [r9]
  40a992:	681b      	ldr	r3, [r3, #0]
  40a994:	3201      	adds	r2, #1
  40a996:	4433      	add	r3, r6
  40a998:	eb04 0a08 	add.w	sl, r4, r8
  40a99c:	f000 8155 	beq.w	40ac4a <_malloc_r+0x4c2>
  40a9a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  40a9a4:	330f      	adds	r3, #15
  40a9a6:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  40a9aa:	f02b 0b0f 	bic.w	fp, fp, #15
  40a9ae:	4659      	mov	r1, fp
  40a9b0:	4628      	mov	r0, r5
  40a9b2:	f000 ff15 	bl	40b7e0 <_sbrk_r>
  40a9b6:	1c41      	adds	r1, r0, #1
  40a9b8:	4602      	mov	r2, r0
  40a9ba:	f000 80fc 	beq.w	40abb6 <_malloc_r+0x42e>
  40a9be:	4582      	cmp	sl, r0
  40a9c0:	f200 80f7 	bhi.w	40abb2 <_malloc_r+0x42a>
  40a9c4:	4b43      	ldr	r3, [pc, #268]	; (40aad4 <_malloc_r+0x34c>)
  40a9c6:	6819      	ldr	r1, [r3, #0]
  40a9c8:	4459      	add	r1, fp
  40a9ca:	6019      	str	r1, [r3, #0]
  40a9cc:	f000 814d 	beq.w	40ac6a <_malloc_r+0x4e2>
  40a9d0:	f8d9 0000 	ldr.w	r0, [r9]
  40a9d4:	3001      	adds	r0, #1
  40a9d6:	bf1b      	ittet	ne
  40a9d8:	eba2 0a0a 	subne.w	sl, r2, sl
  40a9dc:	4451      	addne	r1, sl
  40a9de:	f8c9 2000 	streq.w	r2, [r9]
  40a9e2:	6019      	strne	r1, [r3, #0]
  40a9e4:	f012 0107 	ands.w	r1, r2, #7
  40a9e8:	f000 8115 	beq.w	40ac16 <_malloc_r+0x48e>
  40a9ec:	f1c1 0008 	rsb	r0, r1, #8
  40a9f0:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  40a9f4:	4402      	add	r2, r0
  40a9f6:	3108      	adds	r1, #8
  40a9f8:	eb02 090b 	add.w	r9, r2, fp
  40a9fc:	f3c9 090b 	ubfx	r9, r9, #0, #12
  40aa00:	eba1 0909 	sub.w	r9, r1, r9
  40aa04:	4649      	mov	r1, r9
  40aa06:	4628      	mov	r0, r5
  40aa08:	9301      	str	r3, [sp, #4]
  40aa0a:	9200      	str	r2, [sp, #0]
  40aa0c:	f000 fee8 	bl	40b7e0 <_sbrk_r>
  40aa10:	1c43      	adds	r3, r0, #1
  40aa12:	e89d 000c 	ldmia.w	sp, {r2, r3}
  40aa16:	f000 8143 	beq.w	40aca0 <_malloc_r+0x518>
  40aa1a:	1a80      	subs	r0, r0, r2
  40aa1c:	4448      	add	r0, r9
  40aa1e:	f040 0001 	orr.w	r0, r0, #1
  40aa22:	6819      	ldr	r1, [r3, #0]
  40aa24:	60ba      	str	r2, [r7, #8]
  40aa26:	4449      	add	r1, r9
  40aa28:	42bc      	cmp	r4, r7
  40aa2a:	6050      	str	r0, [r2, #4]
  40aa2c:	6019      	str	r1, [r3, #0]
  40aa2e:	d017      	beq.n	40aa60 <_malloc_r+0x2d8>
  40aa30:	f1b8 0f0f 	cmp.w	r8, #15
  40aa34:	f240 80fb 	bls.w	40ac2e <_malloc_r+0x4a6>
  40aa38:	6860      	ldr	r0, [r4, #4]
  40aa3a:	f1a8 020c 	sub.w	r2, r8, #12
  40aa3e:	f022 0207 	bic.w	r2, r2, #7
  40aa42:	eb04 0e02 	add.w	lr, r4, r2
  40aa46:	f000 0001 	and.w	r0, r0, #1
  40aa4a:	f04f 0c05 	mov.w	ip, #5
  40aa4e:	4310      	orrs	r0, r2
  40aa50:	2a0f      	cmp	r2, #15
  40aa52:	6060      	str	r0, [r4, #4]
  40aa54:	f8ce c004 	str.w	ip, [lr, #4]
  40aa58:	f8ce c008 	str.w	ip, [lr, #8]
  40aa5c:	f200 8117 	bhi.w	40ac8e <_malloc_r+0x506>
  40aa60:	4b1d      	ldr	r3, [pc, #116]	; (40aad8 <_malloc_r+0x350>)
  40aa62:	68bc      	ldr	r4, [r7, #8]
  40aa64:	681a      	ldr	r2, [r3, #0]
  40aa66:	4291      	cmp	r1, r2
  40aa68:	bf88      	it	hi
  40aa6a:	6019      	strhi	r1, [r3, #0]
  40aa6c:	4b1b      	ldr	r3, [pc, #108]	; (40aadc <_malloc_r+0x354>)
  40aa6e:	681a      	ldr	r2, [r3, #0]
  40aa70:	4291      	cmp	r1, r2
  40aa72:	6862      	ldr	r2, [r4, #4]
  40aa74:	bf88      	it	hi
  40aa76:	6019      	strhi	r1, [r3, #0]
  40aa78:	f022 0203 	bic.w	r2, r2, #3
  40aa7c:	4296      	cmp	r6, r2
  40aa7e:	eba2 0306 	sub.w	r3, r2, r6
  40aa82:	d801      	bhi.n	40aa88 <_malloc_r+0x300>
  40aa84:	2b0f      	cmp	r3, #15
  40aa86:	dc04      	bgt.n	40aa92 <_malloc_r+0x30a>
  40aa88:	4628      	mov	r0, r5
  40aa8a:	f000 fa03 	bl	40ae94 <__malloc_unlock>
  40aa8e:	2400      	movs	r4, #0
  40aa90:	e740      	b.n	40a914 <_malloc_r+0x18c>
  40aa92:	19a2      	adds	r2, r4, r6
  40aa94:	f043 0301 	orr.w	r3, r3, #1
  40aa98:	f046 0601 	orr.w	r6, r6, #1
  40aa9c:	6066      	str	r6, [r4, #4]
  40aa9e:	4628      	mov	r0, r5
  40aaa0:	60ba      	str	r2, [r7, #8]
  40aaa2:	6053      	str	r3, [r2, #4]
  40aaa4:	f000 f9f6 	bl	40ae94 <__malloc_unlock>
  40aaa8:	3408      	adds	r4, #8
  40aaaa:	4620      	mov	r0, r4
  40aaac:	b003      	add	sp, #12
  40aaae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40aab2:	2b14      	cmp	r3, #20
  40aab4:	d971      	bls.n	40ab9a <_malloc_r+0x412>
  40aab6:	2b54      	cmp	r3, #84	; 0x54
  40aab8:	f200 80a3 	bhi.w	40ac02 <_malloc_r+0x47a>
  40aabc:	0b33      	lsrs	r3, r6, #12
  40aabe:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  40aac2:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  40aac6:	00c3      	lsls	r3, r0, #3
  40aac8:	e680      	b.n	40a7cc <_malloc_r+0x44>
  40aaca:	bf00      	nop
  40aacc:	204005c0 	.word	0x204005c0
  40aad0:	2040c994 	.word	0x2040c994
  40aad4:	2040c964 	.word	0x2040c964
  40aad8:	2040c98c 	.word	0x2040c98c
  40aadc:	2040c990 	.word	0x2040c990
  40aae0:	204005c8 	.word	0x204005c8
  40aae4:	204009c8 	.word	0x204009c8
  40aae8:	0a5a      	lsrs	r2, r3, #9
  40aaea:	2a04      	cmp	r2, #4
  40aaec:	d95b      	bls.n	40aba6 <_malloc_r+0x41e>
  40aaee:	2a14      	cmp	r2, #20
  40aaf0:	f200 80ae 	bhi.w	40ac50 <_malloc_r+0x4c8>
  40aaf4:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  40aaf8:	00c9      	lsls	r1, r1, #3
  40aafa:	325b      	adds	r2, #91	; 0x5b
  40aafc:	eb07 0c01 	add.w	ip, r7, r1
  40ab00:	5879      	ldr	r1, [r7, r1]
  40ab02:	f1ac 0c08 	sub.w	ip, ip, #8
  40ab06:	458c      	cmp	ip, r1
  40ab08:	f000 8088 	beq.w	40ac1c <_malloc_r+0x494>
  40ab0c:	684a      	ldr	r2, [r1, #4]
  40ab0e:	f022 0203 	bic.w	r2, r2, #3
  40ab12:	4293      	cmp	r3, r2
  40ab14:	d273      	bcs.n	40abfe <_malloc_r+0x476>
  40ab16:	6889      	ldr	r1, [r1, #8]
  40ab18:	458c      	cmp	ip, r1
  40ab1a:	d1f7      	bne.n	40ab0c <_malloc_r+0x384>
  40ab1c:	f8dc 200c 	ldr.w	r2, [ip, #12]
  40ab20:	687b      	ldr	r3, [r7, #4]
  40ab22:	60e2      	str	r2, [r4, #12]
  40ab24:	f8c4 c008 	str.w	ip, [r4, #8]
  40ab28:	6094      	str	r4, [r2, #8]
  40ab2a:	f8cc 400c 	str.w	r4, [ip, #12]
  40ab2e:	e68f      	b.n	40a850 <_malloc_r+0xc8>
  40ab30:	19a1      	adds	r1, r4, r6
  40ab32:	f046 0c01 	orr.w	ip, r6, #1
  40ab36:	f042 0601 	orr.w	r6, r2, #1
  40ab3a:	f8c4 c004 	str.w	ip, [r4, #4]
  40ab3e:	4628      	mov	r0, r5
  40ab40:	6179      	str	r1, [r7, #20]
  40ab42:	6139      	str	r1, [r7, #16]
  40ab44:	f8c1 e00c 	str.w	lr, [r1, #12]
  40ab48:	f8c1 e008 	str.w	lr, [r1, #8]
  40ab4c:	604e      	str	r6, [r1, #4]
  40ab4e:	50e2      	str	r2, [r4, r3]
  40ab50:	f000 f9a0 	bl	40ae94 <__malloc_unlock>
  40ab54:	3408      	adds	r4, #8
  40ab56:	e6dd      	b.n	40a914 <_malloc_r+0x18c>
  40ab58:	687b      	ldr	r3, [r7, #4]
  40ab5a:	e679      	b.n	40a850 <_malloc_r+0xc8>
  40ab5c:	f108 0801 	add.w	r8, r8, #1
  40ab60:	f018 0f03 	tst.w	r8, #3
  40ab64:	f10c 0c08 	add.w	ip, ip, #8
  40ab68:	f47f ae85 	bne.w	40a876 <_malloc_r+0xee>
  40ab6c:	e02d      	b.n	40abca <_malloc_r+0x442>
  40ab6e:	68dc      	ldr	r4, [r3, #12]
  40ab70:	42a3      	cmp	r3, r4
  40ab72:	bf08      	it	eq
  40ab74:	3002      	addeq	r0, #2
  40ab76:	f43f ae3e 	beq.w	40a7f6 <_malloc_r+0x6e>
  40ab7a:	e6bb      	b.n	40a8f4 <_malloc_r+0x16c>
  40ab7c:	4419      	add	r1, r3
  40ab7e:	461c      	mov	r4, r3
  40ab80:	684a      	ldr	r2, [r1, #4]
  40ab82:	68db      	ldr	r3, [r3, #12]
  40ab84:	f854 6f08 	ldr.w	r6, [r4, #8]!
  40ab88:	f042 0201 	orr.w	r2, r2, #1
  40ab8c:	604a      	str	r2, [r1, #4]
  40ab8e:	4628      	mov	r0, r5
  40ab90:	60f3      	str	r3, [r6, #12]
  40ab92:	609e      	str	r6, [r3, #8]
  40ab94:	f000 f97e 	bl	40ae94 <__malloc_unlock>
  40ab98:	e6bc      	b.n	40a914 <_malloc_r+0x18c>
  40ab9a:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  40ab9e:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  40aba2:	00c3      	lsls	r3, r0, #3
  40aba4:	e612      	b.n	40a7cc <_malloc_r+0x44>
  40aba6:	099a      	lsrs	r2, r3, #6
  40aba8:	f102 0139 	add.w	r1, r2, #57	; 0x39
  40abac:	00c9      	lsls	r1, r1, #3
  40abae:	3238      	adds	r2, #56	; 0x38
  40abb0:	e7a4      	b.n	40aafc <_malloc_r+0x374>
  40abb2:	42bc      	cmp	r4, r7
  40abb4:	d054      	beq.n	40ac60 <_malloc_r+0x4d8>
  40abb6:	68bc      	ldr	r4, [r7, #8]
  40abb8:	6862      	ldr	r2, [r4, #4]
  40abba:	f022 0203 	bic.w	r2, r2, #3
  40abbe:	e75d      	b.n	40aa7c <_malloc_r+0x2f4>
  40abc0:	f859 3908 	ldr.w	r3, [r9], #-8
  40abc4:	4599      	cmp	r9, r3
  40abc6:	f040 8086 	bne.w	40acd6 <_malloc_r+0x54e>
  40abca:	f010 0f03 	tst.w	r0, #3
  40abce:	f100 30ff 	add.w	r0, r0, #4294967295
  40abd2:	d1f5      	bne.n	40abc0 <_malloc_r+0x438>
  40abd4:	687b      	ldr	r3, [r7, #4]
  40abd6:	ea23 0304 	bic.w	r3, r3, r4
  40abda:	607b      	str	r3, [r7, #4]
  40abdc:	0064      	lsls	r4, r4, #1
  40abde:	429c      	cmp	r4, r3
  40abe0:	f63f aec7 	bhi.w	40a972 <_malloc_r+0x1ea>
  40abe4:	2c00      	cmp	r4, #0
  40abe6:	f43f aec4 	beq.w	40a972 <_malloc_r+0x1ea>
  40abea:	421c      	tst	r4, r3
  40abec:	4640      	mov	r0, r8
  40abee:	f47f ae3e 	bne.w	40a86e <_malloc_r+0xe6>
  40abf2:	0064      	lsls	r4, r4, #1
  40abf4:	421c      	tst	r4, r3
  40abf6:	f100 0004 	add.w	r0, r0, #4
  40abfa:	d0fa      	beq.n	40abf2 <_malloc_r+0x46a>
  40abfc:	e637      	b.n	40a86e <_malloc_r+0xe6>
  40abfe:	468c      	mov	ip, r1
  40ac00:	e78c      	b.n	40ab1c <_malloc_r+0x394>
  40ac02:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  40ac06:	d815      	bhi.n	40ac34 <_malloc_r+0x4ac>
  40ac08:	0bf3      	lsrs	r3, r6, #15
  40ac0a:	f103 0078 	add.w	r0, r3, #120	; 0x78
  40ac0e:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  40ac12:	00c3      	lsls	r3, r0, #3
  40ac14:	e5da      	b.n	40a7cc <_malloc_r+0x44>
  40ac16:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  40ac1a:	e6ed      	b.n	40a9f8 <_malloc_r+0x270>
  40ac1c:	687b      	ldr	r3, [r7, #4]
  40ac1e:	1092      	asrs	r2, r2, #2
  40ac20:	2101      	movs	r1, #1
  40ac22:	fa01 f202 	lsl.w	r2, r1, r2
  40ac26:	4313      	orrs	r3, r2
  40ac28:	607b      	str	r3, [r7, #4]
  40ac2a:	4662      	mov	r2, ip
  40ac2c:	e779      	b.n	40ab22 <_malloc_r+0x39a>
  40ac2e:	2301      	movs	r3, #1
  40ac30:	6053      	str	r3, [r2, #4]
  40ac32:	e729      	b.n	40aa88 <_malloc_r+0x300>
  40ac34:	f240 5254 	movw	r2, #1364	; 0x554
  40ac38:	4293      	cmp	r3, r2
  40ac3a:	d822      	bhi.n	40ac82 <_malloc_r+0x4fa>
  40ac3c:	0cb3      	lsrs	r3, r6, #18
  40ac3e:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  40ac42:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  40ac46:	00c3      	lsls	r3, r0, #3
  40ac48:	e5c0      	b.n	40a7cc <_malloc_r+0x44>
  40ac4a:	f103 0b10 	add.w	fp, r3, #16
  40ac4e:	e6ae      	b.n	40a9ae <_malloc_r+0x226>
  40ac50:	2a54      	cmp	r2, #84	; 0x54
  40ac52:	d829      	bhi.n	40aca8 <_malloc_r+0x520>
  40ac54:	0b1a      	lsrs	r2, r3, #12
  40ac56:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  40ac5a:	00c9      	lsls	r1, r1, #3
  40ac5c:	326e      	adds	r2, #110	; 0x6e
  40ac5e:	e74d      	b.n	40aafc <_malloc_r+0x374>
  40ac60:	4b20      	ldr	r3, [pc, #128]	; (40ace4 <_malloc_r+0x55c>)
  40ac62:	6819      	ldr	r1, [r3, #0]
  40ac64:	4459      	add	r1, fp
  40ac66:	6019      	str	r1, [r3, #0]
  40ac68:	e6b2      	b.n	40a9d0 <_malloc_r+0x248>
  40ac6a:	f3ca 000b 	ubfx	r0, sl, #0, #12
  40ac6e:	2800      	cmp	r0, #0
  40ac70:	f47f aeae 	bne.w	40a9d0 <_malloc_r+0x248>
  40ac74:	eb08 030b 	add.w	r3, r8, fp
  40ac78:	68ba      	ldr	r2, [r7, #8]
  40ac7a:	f043 0301 	orr.w	r3, r3, #1
  40ac7e:	6053      	str	r3, [r2, #4]
  40ac80:	e6ee      	b.n	40aa60 <_malloc_r+0x2d8>
  40ac82:	207f      	movs	r0, #127	; 0x7f
  40ac84:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  40ac88:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  40ac8c:	e59e      	b.n	40a7cc <_malloc_r+0x44>
  40ac8e:	f104 0108 	add.w	r1, r4, #8
  40ac92:	4628      	mov	r0, r5
  40ac94:	9300      	str	r3, [sp, #0]
  40ac96:	f7ff fa4b 	bl	40a130 <_free_r>
  40ac9a:	9b00      	ldr	r3, [sp, #0]
  40ac9c:	6819      	ldr	r1, [r3, #0]
  40ac9e:	e6df      	b.n	40aa60 <_malloc_r+0x2d8>
  40aca0:	2001      	movs	r0, #1
  40aca2:	f04f 0900 	mov.w	r9, #0
  40aca6:	e6bc      	b.n	40aa22 <_malloc_r+0x29a>
  40aca8:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  40acac:	d805      	bhi.n	40acba <_malloc_r+0x532>
  40acae:	0bda      	lsrs	r2, r3, #15
  40acb0:	f102 0178 	add.w	r1, r2, #120	; 0x78
  40acb4:	00c9      	lsls	r1, r1, #3
  40acb6:	3277      	adds	r2, #119	; 0x77
  40acb8:	e720      	b.n	40aafc <_malloc_r+0x374>
  40acba:	f240 5154 	movw	r1, #1364	; 0x554
  40acbe:	428a      	cmp	r2, r1
  40acc0:	d805      	bhi.n	40acce <_malloc_r+0x546>
  40acc2:	0c9a      	lsrs	r2, r3, #18
  40acc4:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  40acc8:	00c9      	lsls	r1, r1, #3
  40acca:	327c      	adds	r2, #124	; 0x7c
  40accc:	e716      	b.n	40aafc <_malloc_r+0x374>
  40acce:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  40acd2:	227e      	movs	r2, #126	; 0x7e
  40acd4:	e712      	b.n	40aafc <_malloc_r+0x374>
  40acd6:	687b      	ldr	r3, [r7, #4]
  40acd8:	e780      	b.n	40abdc <_malloc_r+0x454>
  40acda:	08f0      	lsrs	r0, r6, #3
  40acdc:	f106 0308 	add.w	r3, r6, #8
  40ace0:	e600      	b.n	40a8e4 <_malloc_r+0x15c>
  40ace2:	bf00      	nop
  40ace4:	2040c964 	.word	0x2040c964

0040ace8 <__ascii_mbtowc>:
  40ace8:	b082      	sub	sp, #8
  40acea:	b149      	cbz	r1, 40ad00 <__ascii_mbtowc+0x18>
  40acec:	b15a      	cbz	r2, 40ad06 <__ascii_mbtowc+0x1e>
  40acee:	b16b      	cbz	r3, 40ad0c <__ascii_mbtowc+0x24>
  40acf0:	7813      	ldrb	r3, [r2, #0]
  40acf2:	600b      	str	r3, [r1, #0]
  40acf4:	7812      	ldrb	r2, [r2, #0]
  40acf6:	1c10      	adds	r0, r2, #0
  40acf8:	bf18      	it	ne
  40acfa:	2001      	movne	r0, #1
  40acfc:	b002      	add	sp, #8
  40acfe:	4770      	bx	lr
  40ad00:	a901      	add	r1, sp, #4
  40ad02:	2a00      	cmp	r2, #0
  40ad04:	d1f3      	bne.n	40acee <__ascii_mbtowc+0x6>
  40ad06:	4610      	mov	r0, r2
  40ad08:	b002      	add	sp, #8
  40ad0a:	4770      	bx	lr
  40ad0c:	f06f 0001 	mvn.w	r0, #1
  40ad10:	e7f4      	b.n	40acfc <__ascii_mbtowc+0x14>
  40ad12:	bf00      	nop
	...

0040ad20 <memchr>:
  40ad20:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40ad24:	2a10      	cmp	r2, #16
  40ad26:	db2b      	blt.n	40ad80 <memchr+0x60>
  40ad28:	f010 0f07 	tst.w	r0, #7
  40ad2c:	d008      	beq.n	40ad40 <memchr+0x20>
  40ad2e:	f810 3b01 	ldrb.w	r3, [r0], #1
  40ad32:	3a01      	subs	r2, #1
  40ad34:	428b      	cmp	r3, r1
  40ad36:	d02d      	beq.n	40ad94 <memchr+0x74>
  40ad38:	f010 0f07 	tst.w	r0, #7
  40ad3c:	b342      	cbz	r2, 40ad90 <memchr+0x70>
  40ad3e:	d1f6      	bne.n	40ad2e <memchr+0xe>
  40ad40:	b4f0      	push	{r4, r5, r6, r7}
  40ad42:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  40ad46:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40ad4a:	f022 0407 	bic.w	r4, r2, #7
  40ad4e:	f07f 0700 	mvns.w	r7, #0
  40ad52:	2300      	movs	r3, #0
  40ad54:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  40ad58:	3c08      	subs	r4, #8
  40ad5a:	ea85 0501 	eor.w	r5, r5, r1
  40ad5e:	ea86 0601 	eor.w	r6, r6, r1
  40ad62:	fa85 f547 	uadd8	r5, r5, r7
  40ad66:	faa3 f587 	sel	r5, r3, r7
  40ad6a:	fa86 f647 	uadd8	r6, r6, r7
  40ad6e:	faa5 f687 	sel	r6, r5, r7
  40ad72:	b98e      	cbnz	r6, 40ad98 <memchr+0x78>
  40ad74:	d1ee      	bne.n	40ad54 <memchr+0x34>
  40ad76:	bcf0      	pop	{r4, r5, r6, r7}
  40ad78:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40ad7c:	f002 0207 	and.w	r2, r2, #7
  40ad80:	b132      	cbz	r2, 40ad90 <memchr+0x70>
  40ad82:	f810 3b01 	ldrb.w	r3, [r0], #1
  40ad86:	3a01      	subs	r2, #1
  40ad88:	ea83 0301 	eor.w	r3, r3, r1
  40ad8c:	b113      	cbz	r3, 40ad94 <memchr+0x74>
  40ad8e:	d1f8      	bne.n	40ad82 <memchr+0x62>
  40ad90:	2000      	movs	r0, #0
  40ad92:	4770      	bx	lr
  40ad94:	3801      	subs	r0, #1
  40ad96:	4770      	bx	lr
  40ad98:	2d00      	cmp	r5, #0
  40ad9a:	bf06      	itte	eq
  40ad9c:	4635      	moveq	r5, r6
  40ad9e:	3803      	subeq	r0, #3
  40ada0:	3807      	subne	r0, #7
  40ada2:	f015 0f01 	tst.w	r5, #1
  40ada6:	d107      	bne.n	40adb8 <memchr+0x98>
  40ada8:	3001      	adds	r0, #1
  40adaa:	f415 7f80 	tst.w	r5, #256	; 0x100
  40adae:	bf02      	ittt	eq
  40adb0:	3001      	addeq	r0, #1
  40adb2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  40adb6:	3001      	addeq	r0, #1
  40adb8:	bcf0      	pop	{r4, r5, r6, r7}
  40adba:	3801      	subs	r0, #1
  40adbc:	4770      	bx	lr
  40adbe:	bf00      	nop

0040adc0 <memmove>:
  40adc0:	4288      	cmp	r0, r1
  40adc2:	b5f0      	push	{r4, r5, r6, r7, lr}
  40adc4:	d90d      	bls.n	40ade2 <memmove+0x22>
  40adc6:	188b      	adds	r3, r1, r2
  40adc8:	4298      	cmp	r0, r3
  40adca:	d20a      	bcs.n	40ade2 <memmove+0x22>
  40adcc:	1884      	adds	r4, r0, r2
  40adce:	2a00      	cmp	r2, #0
  40add0:	d051      	beq.n	40ae76 <memmove+0xb6>
  40add2:	4622      	mov	r2, r4
  40add4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  40add8:	f802 4d01 	strb.w	r4, [r2, #-1]!
  40addc:	4299      	cmp	r1, r3
  40adde:	d1f9      	bne.n	40add4 <memmove+0x14>
  40ade0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40ade2:	2a0f      	cmp	r2, #15
  40ade4:	d948      	bls.n	40ae78 <memmove+0xb8>
  40ade6:	ea41 0300 	orr.w	r3, r1, r0
  40adea:	079b      	lsls	r3, r3, #30
  40adec:	d146      	bne.n	40ae7c <memmove+0xbc>
  40adee:	f100 0410 	add.w	r4, r0, #16
  40adf2:	f101 0310 	add.w	r3, r1, #16
  40adf6:	4615      	mov	r5, r2
  40adf8:	f853 6c10 	ldr.w	r6, [r3, #-16]
  40adfc:	f844 6c10 	str.w	r6, [r4, #-16]
  40ae00:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  40ae04:	f844 6c0c 	str.w	r6, [r4, #-12]
  40ae08:	f853 6c08 	ldr.w	r6, [r3, #-8]
  40ae0c:	f844 6c08 	str.w	r6, [r4, #-8]
  40ae10:	3d10      	subs	r5, #16
  40ae12:	f853 6c04 	ldr.w	r6, [r3, #-4]
  40ae16:	f844 6c04 	str.w	r6, [r4, #-4]
  40ae1a:	2d0f      	cmp	r5, #15
  40ae1c:	f103 0310 	add.w	r3, r3, #16
  40ae20:	f104 0410 	add.w	r4, r4, #16
  40ae24:	d8e8      	bhi.n	40adf8 <memmove+0x38>
  40ae26:	f1a2 0310 	sub.w	r3, r2, #16
  40ae2a:	f023 030f 	bic.w	r3, r3, #15
  40ae2e:	f002 0e0f 	and.w	lr, r2, #15
  40ae32:	3310      	adds	r3, #16
  40ae34:	f1be 0f03 	cmp.w	lr, #3
  40ae38:	4419      	add	r1, r3
  40ae3a:	4403      	add	r3, r0
  40ae3c:	d921      	bls.n	40ae82 <memmove+0xc2>
  40ae3e:	1f1e      	subs	r6, r3, #4
  40ae40:	460d      	mov	r5, r1
  40ae42:	4674      	mov	r4, lr
  40ae44:	3c04      	subs	r4, #4
  40ae46:	f855 7b04 	ldr.w	r7, [r5], #4
  40ae4a:	f846 7f04 	str.w	r7, [r6, #4]!
  40ae4e:	2c03      	cmp	r4, #3
  40ae50:	d8f8      	bhi.n	40ae44 <memmove+0x84>
  40ae52:	f1ae 0404 	sub.w	r4, lr, #4
  40ae56:	f024 0403 	bic.w	r4, r4, #3
  40ae5a:	3404      	adds	r4, #4
  40ae5c:	4421      	add	r1, r4
  40ae5e:	4423      	add	r3, r4
  40ae60:	f002 0203 	and.w	r2, r2, #3
  40ae64:	b162      	cbz	r2, 40ae80 <memmove+0xc0>
  40ae66:	3b01      	subs	r3, #1
  40ae68:	440a      	add	r2, r1
  40ae6a:	f811 4b01 	ldrb.w	r4, [r1], #1
  40ae6e:	f803 4f01 	strb.w	r4, [r3, #1]!
  40ae72:	428a      	cmp	r2, r1
  40ae74:	d1f9      	bne.n	40ae6a <memmove+0xaa>
  40ae76:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40ae78:	4603      	mov	r3, r0
  40ae7a:	e7f3      	b.n	40ae64 <memmove+0xa4>
  40ae7c:	4603      	mov	r3, r0
  40ae7e:	e7f2      	b.n	40ae66 <memmove+0xa6>
  40ae80:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40ae82:	4672      	mov	r2, lr
  40ae84:	e7ee      	b.n	40ae64 <memmove+0xa4>
  40ae86:	bf00      	nop

0040ae88 <__malloc_lock>:
  40ae88:	4801      	ldr	r0, [pc, #4]	; (40ae90 <__malloc_lock+0x8>)
  40ae8a:	f7ff bbf9 	b.w	40a680 <__retarget_lock_acquire_recursive>
  40ae8e:	bf00      	nop
  40ae90:	2040cb6c 	.word	0x2040cb6c

0040ae94 <__malloc_unlock>:
  40ae94:	4801      	ldr	r0, [pc, #4]	; (40ae9c <__malloc_unlock+0x8>)
  40ae96:	f7ff bbf5 	b.w	40a684 <__retarget_lock_release_recursive>
  40ae9a:	bf00      	nop
  40ae9c:	2040cb6c 	.word	0x2040cb6c

0040aea0 <_Balloc>:
  40aea0:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  40aea2:	b570      	push	{r4, r5, r6, lr}
  40aea4:	4605      	mov	r5, r0
  40aea6:	460c      	mov	r4, r1
  40aea8:	b14b      	cbz	r3, 40aebe <_Balloc+0x1e>
  40aeaa:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  40aeae:	b180      	cbz	r0, 40aed2 <_Balloc+0x32>
  40aeb0:	6802      	ldr	r2, [r0, #0]
  40aeb2:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  40aeb6:	2300      	movs	r3, #0
  40aeb8:	6103      	str	r3, [r0, #16]
  40aeba:	60c3      	str	r3, [r0, #12]
  40aebc:	bd70      	pop	{r4, r5, r6, pc}
  40aebe:	2221      	movs	r2, #33	; 0x21
  40aec0:	2104      	movs	r1, #4
  40aec2:	f000 fe69 	bl	40bb98 <_calloc_r>
  40aec6:	64e8      	str	r0, [r5, #76]	; 0x4c
  40aec8:	4603      	mov	r3, r0
  40aeca:	2800      	cmp	r0, #0
  40aecc:	d1ed      	bne.n	40aeaa <_Balloc+0xa>
  40aece:	2000      	movs	r0, #0
  40aed0:	bd70      	pop	{r4, r5, r6, pc}
  40aed2:	2101      	movs	r1, #1
  40aed4:	fa01 f604 	lsl.w	r6, r1, r4
  40aed8:	1d72      	adds	r2, r6, #5
  40aeda:	4628      	mov	r0, r5
  40aedc:	0092      	lsls	r2, r2, #2
  40aede:	f000 fe5b 	bl	40bb98 <_calloc_r>
  40aee2:	2800      	cmp	r0, #0
  40aee4:	d0f3      	beq.n	40aece <_Balloc+0x2e>
  40aee6:	6044      	str	r4, [r0, #4]
  40aee8:	6086      	str	r6, [r0, #8]
  40aeea:	e7e4      	b.n	40aeb6 <_Balloc+0x16>

0040aeec <_Bfree>:
  40aeec:	b131      	cbz	r1, 40aefc <_Bfree+0x10>
  40aeee:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  40aef0:	684a      	ldr	r2, [r1, #4]
  40aef2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  40aef6:	6008      	str	r0, [r1, #0]
  40aef8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  40aefc:	4770      	bx	lr
  40aefe:	bf00      	nop

0040af00 <__multadd>:
  40af00:	b5f0      	push	{r4, r5, r6, r7, lr}
  40af02:	690c      	ldr	r4, [r1, #16]
  40af04:	b083      	sub	sp, #12
  40af06:	460d      	mov	r5, r1
  40af08:	4606      	mov	r6, r0
  40af0a:	f101 0e14 	add.w	lr, r1, #20
  40af0e:	2700      	movs	r7, #0
  40af10:	f8de 0000 	ldr.w	r0, [lr]
  40af14:	b281      	uxth	r1, r0
  40af16:	fb02 3301 	mla	r3, r2, r1, r3
  40af1a:	0c01      	lsrs	r1, r0, #16
  40af1c:	0c18      	lsrs	r0, r3, #16
  40af1e:	fb02 0101 	mla	r1, r2, r1, r0
  40af22:	b29b      	uxth	r3, r3
  40af24:	3701      	adds	r7, #1
  40af26:	eb03 4301 	add.w	r3, r3, r1, lsl #16
  40af2a:	42bc      	cmp	r4, r7
  40af2c:	f84e 3b04 	str.w	r3, [lr], #4
  40af30:	ea4f 4311 	mov.w	r3, r1, lsr #16
  40af34:	dcec      	bgt.n	40af10 <__multadd+0x10>
  40af36:	b13b      	cbz	r3, 40af48 <__multadd+0x48>
  40af38:	68aa      	ldr	r2, [r5, #8]
  40af3a:	4294      	cmp	r4, r2
  40af3c:	da07      	bge.n	40af4e <__multadd+0x4e>
  40af3e:	eb05 0284 	add.w	r2, r5, r4, lsl #2
  40af42:	3401      	adds	r4, #1
  40af44:	6153      	str	r3, [r2, #20]
  40af46:	612c      	str	r4, [r5, #16]
  40af48:	4628      	mov	r0, r5
  40af4a:	b003      	add	sp, #12
  40af4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40af4e:	6869      	ldr	r1, [r5, #4]
  40af50:	9301      	str	r3, [sp, #4]
  40af52:	3101      	adds	r1, #1
  40af54:	4630      	mov	r0, r6
  40af56:	f7ff ffa3 	bl	40aea0 <_Balloc>
  40af5a:	692a      	ldr	r2, [r5, #16]
  40af5c:	3202      	adds	r2, #2
  40af5e:	f105 010c 	add.w	r1, r5, #12
  40af62:	4607      	mov	r7, r0
  40af64:	0092      	lsls	r2, r2, #2
  40af66:	300c      	adds	r0, #12
  40af68:	f7fb fae8 	bl	40653c <memcpy>
  40af6c:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
  40af6e:	6869      	ldr	r1, [r5, #4]
  40af70:	9b01      	ldr	r3, [sp, #4]
  40af72:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  40af76:	6028      	str	r0, [r5, #0]
  40af78:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  40af7c:	463d      	mov	r5, r7
  40af7e:	e7de      	b.n	40af3e <__multadd+0x3e>

0040af80 <__hi0bits>:
  40af80:	0c02      	lsrs	r2, r0, #16
  40af82:	0412      	lsls	r2, r2, #16
  40af84:	4603      	mov	r3, r0
  40af86:	b9b2      	cbnz	r2, 40afb6 <__hi0bits+0x36>
  40af88:	0403      	lsls	r3, r0, #16
  40af8a:	2010      	movs	r0, #16
  40af8c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
  40af90:	bf04      	itt	eq
  40af92:	021b      	lsleq	r3, r3, #8
  40af94:	3008      	addeq	r0, #8
  40af96:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
  40af9a:	bf04      	itt	eq
  40af9c:	011b      	lsleq	r3, r3, #4
  40af9e:	3004      	addeq	r0, #4
  40afa0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
  40afa4:	bf04      	itt	eq
  40afa6:	009b      	lsleq	r3, r3, #2
  40afa8:	3002      	addeq	r0, #2
  40afaa:	2b00      	cmp	r3, #0
  40afac:	db02      	blt.n	40afb4 <__hi0bits+0x34>
  40afae:	005b      	lsls	r3, r3, #1
  40afb0:	d403      	bmi.n	40afba <__hi0bits+0x3a>
  40afb2:	2020      	movs	r0, #32
  40afb4:	4770      	bx	lr
  40afb6:	2000      	movs	r0, #0
  40afb8:	e7e8      	b.n	40af8c <__hi0bits+0xc>
  40afba:	3001      	adds	r0, #1
  40afbc:	4770      	bx	lr
  40afbe:	bf00      	nop

0040afc0 <__lo0bits>:
  40afc0:	6803      	ldr	r3, [r0, #0]
  40afc2:	f013 0207 	ands.w	r2, r3, #7
  40afc6:	4601      	mov	r1, r0
  40afc8:	d007      	beq.n	40afda <__lo0bits+0x1a>
  40afca:	07da      	lsls	r2, r3, #31
  40afcc:	d421      	bmi.n	40b012 <__lo0bits+0x52>
  40afce:	0798      	lsls	r0, r3, #30
  40afd0:	d421      	bmi.n	40b016 <__lo0bits+0x56>
  40afd2:	089b      	lsrs	r3, r3, #2
  40afd4:	600b      	str	r3, [r1, #0]
  40afd6:	2002      	movs	r0, #2
  40afd8:	4770      	bx	lr
  40afda:	b298      	uxth	r0, r3
  40afdc:	b198      	cbz	r0, 40b006 <__lo0bits+0x46>
  40afde:	4610      	mov	r0, r2
  40afe0:	f013 0fff 	tst.w	r3, #255	; 0xff
  40afe4:	bf04      	itt	eq
  40afe6:	0a1b      	lsreq	r3, r3, #8
  40afe8:	3008      	addeq	r0, #8
  40afea:	071a      	lsls	r2, r3, #28
  40afec:	bf04      	itt	eq
  40afee:	091b      	lsreq	r3, r3, #4
  40aff0:	3004      	addeq	r0, #4
  40aff2:	079a      	lsls	r2, r3, #30
  40aff4:	bf04      	itt	eq
  40aff6:	089b      	lsreq	r3, r3, #2
  40aff8:	3002      	addeq	r0, #2
  40affa:	07da      	lsls	r2, r3, #31
  40affc:	d407      	bmi.n	40b00e <__lo0bits+0x4e>
  40affe:	085b      	lsrs	r3, r3, #1
  40b000:	d104      	bne.n	40b00c <__lo0bits+0x4c>
  40b002:	2020      	movs	r0, #32
  40b004:	4770      	bx	lr
  40b006:	0c1b      	lsrs	r3, r3, #16
  40b008:	2010      	movs	r0, #16
  40b00a:	e7e9      	b.n	40afe0 <__lo0bits+0x20>
  40b00c:	3001      	adds	r0, #1
  40b00e:	600b      	str	r3, [r1, #0]
  40b010:	4770      	bx	lr
  40b012:	2000      	movs	r0, #0
  40b014:	4770      	bx	lr
  40b016:	085b      	lsrs	r3, r3, #1
  40b018:	600b      	str	r3, [r1, #0]
  40b01a:	2001      	movs	r0, #1
  40b01c:	4770      	bx	lr
  40b01e:	bf00      	nop

0040b020 <__i2b>:
  40b020:	b510      	push	{r4, lr}
  40b022:	460c      	mov	r4, r1
  40b024:	2101      	movs	r1, #1
  40b026:	f7ff ff3b 	bl	40aea0 <_Balloc>
  40b02a:	2201      	movs	r2, #1
  40b02c:	6144      	str	r4, [r0, #20]
  40b02e:	6102      	str	r2, [r0, #16]
  40b030:	bd10      	pop	{r4, pc}
  40b032:	bf00      	nop

0040b034 <__multiply>:
  40b034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40b038:	690c      	ldr	r4, [r1, #16]
  40b03a:	6915      	ldr	r5, [r2, #16]
  40b03c:	42ac      	cmp	r4, r5
  40b03e:	b083      	sub	sp, #12
  40b040:	468b      	mov	fp, r1
  40b042:	4616      	mov	r6, r2
  40b044:	da04      	bge.n	40b050 <__multiply+0x1c>
  40b046:	4622      	mov	r2, r4
  40b048:	46b3      	mov	fp, r6
  40b04a:	462c      	mov	r4, r5
  40b04c:	460e      	mov	r6, r1
  40b04e:	4615      	mov	r5, r2
  40b050:	f8db 3008 	ldr.w	r3, [fp, #8]
  40b054:	f8db 1004 	ldr.w	r1, [fp, #4]
  40b058:	eb04 0805 	add.w	r8, r4, r5
  40b05c:	4598      	cmp	r8, r3
  40b05e:	bfc8      	it	gt
  40b060:	3101      	addgt	r1, #1
  40b062:	f7ff ff1d 	bl	40aea0 <_Balloc>
  40b066:	f100 0914 	add.w	r9, r0, #20
  40b06a:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
  40b06e:	45d1      	cmp	r9, sl
  40b070:	9000      	str	r0, [sp, #0]
  40b072:	d205      	bcs.n	40b080 <__multiply+0x4c>
  40b074:	464b      	mov	r3, r9
  40b076:	2100      	movs	r1, #0
  40b078:	f843 1b04 	str.w	r1, [r3], #4
  40b07c:	459a      	cmp	sl, r3
  40b07e:	d8fb      	bhi.n	40b078 <__multiply+0x44>
  40b080:	f106 0c14 	add.w	ip, r6, #20
  40b084:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
  40b088:	f10b 0b14 	add.w	fp, fp, #20
  40b08c:	459c      	cmp	ip, r3
  40b08e:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
  40b092:	d24c      	bcs.n	40b12e <__multiply+0xfa>
  40b094:	f8cd a004 	str.w	sl, [sp, #4]
  40b098:	469a      	mov	sl, r3
  40b09a:	f8dc 5000 	ldr.w	r5, [ip]
  40b09e:	b2af      	uxth	r7, r5
  40b0a0:	b1ef      	cbz	r7, 40b0de <__multiply+0xaa>
  40b0a2:	2100      	movs	r1, #0
  40b0a4:	464d      	mov	r5, r9
  40b0a6:	465e      	mov	r6, fp
  40b0a8:	460c      	mov	r4, r1
  40b0aa:	f856 2b04 	ldr.w	r2, [r6], #4
  40b0ae:	6828      	ldr	r0, [r5, #0]
  40b0b0:	b293      	uxth	r3, r2
  40b0b2:	b281      	uxth	r1, r0
  40b0b4:	fb07 1303 	mla	r3, r7, r3, r1
  40b0b8:	0c12      	lsrs	r2, r2, #16
  40b0ba:	0c01      	lsrs	r1, r0, #16
  40b0bc:	4423      	add	r3, r4
  40b0be:	fb07 1102 	mla	r1, r7, r2, r1
  40b0c2:	eb01 4113 	add.w	r1, r1, r3, lsr #16
  40b0c6:	b29b      	uxth	r3, r3
  40b0c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  40b0cc:	45b6      	cmp	lr, r6
  40b0ce:	f845 3b04 	str.w	r3, [r5], #4
  40b0d2:	ea4f 4411 	mov.w	r4, r1, lsr #16
  40b0d6:	d8e8      	bhi.n	40b0aa <__multiply+0x76>
  40b0d8:	602c      	str	r4, [r5, #0]
  40b0da:	f8dc 5000 	ldr.w	r5, [ip]
  40b0de:	0c2d      	lsrs	r5, r5, #16
  40b0e0:	d01d      	beq.n	40b11e <__multiply+0xea>
  40b0e2:	f8d9 3000 	ldr.w	r3, [r9]
  40b0e6:	4648      	mov	r0, r9
  40b0e8:	461c      	mov	r4, r3
  40b0ea:	4659      	mov	r1, fp
  40b0ec:	2200      	movs	r2, #0
  40b0ee:	880e      	ldrh	r6, [r1, #0]
  40b0f0:	0c24      	lsrs	r4, r4, #16
  40b0f2:	fb05 4406 	mla	r4, r5, r6, r4
  40b0f6:	4422      	add	r2, r4
  40b0f8:	b29b      	uxth	r3, r3
  40b0fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  40b0fe:	f840 3b04 	str.w	r3, [r0], #4
  40b102:	f851 3b04 	ldr.w	r3, [r1], #4
  40b106:	6804      	ldr	r4, [r0, #0]
  40b108:	0c1b      	lsrs	r3, r3, #16
  40b10a:	b2a6      	uxth	r6, r4
  40b10c:	fb05 6303 	mla	r3, r5, r3, r6
  40b110:	eb03 4312 	add.w	r3, r3, r2, lsr #16
  40b114:	458e      	cmp	lr, r1
  40b116:	ea4f 4213 	mov.w	r2, r3, lsr #16
  40b11a:	d8e8      	bhi.n	40b0ee <__multiply+0xba>
  40b11c:	6003      	str	r3, [r0, #0]
  40b11e:	f10c 0c04 	add.w	ip, ip, #4
  40b122:	45e2      	cmp	sl, ip
  40b124:	f109 0904 	add.w	r9, r9, #4
  40b128:	d8b7      	bhi.n	40b09a <__multiply+0x66>
  40b12a:	f8dd a004 	ldr.w	sl, [sp, #4]
  40b12e:	f1b8 0f00 	cmp.w	r8, #0
  40b132:	dd0b      	ble.n	40b14c <__multiply+0x118>
  40b134:	f85a 3c04 	ldr.w	r3, [sl, #-4]
  40b138:	f1aa 0a04 	sub.w	sl, sl, #4
  40b13c:	b11b      	cbz	r3, 40b146 <__multiply+0x112>
  40b13e:	e005      	b.n	40b14c <__multiply+0x118>
  40b140:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
  40b144:	b913      	cbnz	r3, 40b14c <__multiply+0x118>
  40b146:	f1b8 0801 	subs.w	r8, r8, #1
  40b14a:	d1f9      	bne.n	40b140 <__multiply+0x10c>
  40b14c:	9800      	ldr	r0, [sp, #0]
  40b14e:	f8c0 8010 	str.w	r8, [r0, #16]
  40b152:	b003      	add	sp, #12
  40b154:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040b158 <__pow5mult>:
  40b158:	f012 0303 	ands.w	r3, r2, #3
  40b15c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40b160:	4614      	mov	r4, r2
  40b162:	4607      	mov	r7, r0
  40b164:	d12e      	bne.n	40b1c4 <__pow5mult+0x6c>
  40b166:	460d      	mov	r5, r1
  40b168:	10a4      	asrs	r4, r4, #2
  40b16a:	d01c      	beq.n	40b1a6 <__pow5mult+0x4e>
  40b16c:	6cbe      	ldr	r6, [r7, #72]	; 0x48
  40b16e:	b396      	cbz	r6, 40b1d6 <__pow5mult+0x7e>
  40b170:	07e3      	lsls	r3, r4, #31
  40b172:	f04f 0800 	mov.w	r8, #0
  40b176:	d406      	bmi.n	40b186 <__pow5mult+0x2e>
  40b178:	1064      	asrs	r4, r4, #1
  40b17a:	d014      	beq.n	40b1a6 <__pow5mult+0x4e>
  40b17c:	6830      	ldr	r0, [r6, #0]
  40b17e:	b1a8      	cbz	r0, 40b1ac <__pow5mult+0x54>
  40b180:	4606      	mov	r6, r0
  40b182:	07e3      	lsls	r3, r4, #31
  40b184:	d5f8      	bpl.n	40b178 <__pow5mult+0x20>
  40b186:	4632      	mov	r2, r6
  40b188:	4629      	mov	r1, r5
  40b18a:	4638      	mov	r0, r7
  40b18c:	f7ff ff52 	bl	40b034 <__multiply>
  40b190:	b1b5      	cbz	r5, 40b1c0 <__pow5mult+0x68>
  40b192:	686a      	ldr	r2, [r5, #4]
  40b194:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  40b196:	1064      	asrs	r4, r4, #1
  40b198:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  40b19c:	6029      	str	r1, [r5, #0]
  40b19e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  40b1a2:	4605      	mov	r5, r0
  40b1a4:	d1ea      	bne.n	40b17c <__pow5mult+0x24>
  40b1a6:	4628      	mov	r0, r5
  40b1a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40b1ac:	4632      	mov	r2, r6
  40b1ae:	4631      	mov	r1, r6
  40b1b0:	4638      	mov	r0, r7
  40b1b2:	f7ff ff3f 	bl	40b034 <__multiply>
  40b1b6:	6030      	str	r0, [r6, #0]
  40b1b8:	f8c0 8000 	str.w	r8, [r0]
  40b1bc:	4606      	mov	r6, r0
  40b1be:	e7e0      	b.n	40b182 <__pow5mult+0x2a>
  40b1c0:	4605      	mov	r5, r0
  40b1c2:	e7d9      	b.n	40b178 <__pow5mult+0x20>
  40b1c4:	1e5a      	subs	r2, r3, #1
  40b1c6:	4d0b      	ldr	r5, [pc, #44]	; (40b1f4 <__pow5mult+0x9c>)
  40b1c8:	2300      	movs	r3, #0
  40b1ca:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  40b1ce:	f7ff fe97 	bl	40af00 <__multadd>
  40b1d2:	4605      	mov	r5, r0
  40b1d4:	e7c8      	b.n	40b168 <__pow5mult+0x10>
  40b1d6:	2101      	movs	r1, #1
  40b1d8:	4638      	mov	r0, r7
  40b1da:	f7ff fe61 	bl	40aea0 <_Balloc>
  40b1de:	f240 2171 	movw	r1, #625	; 0x271
  40b1e2:	2201      	movs	r2, #1
  40b1e4:	2300      	movs	r3, #0
  40b1e6:	6141      	str	r1, [r0, #20]
  40b1e8:	6102      	str	r2, [r0, #16]
  40b1ea:	4606      	mov	r6, r0
  40b1ec:	64b8      	str	r0, [r7, #72]	; 0x48
  40b1ee:	6003      	str	r3, [r0, #0]
  40b1f0:	e7be      	b.n	40b170 <__pow5mult+0x18>
  40b1f2:	bf00      	nop
  40b1f4:	0040db20 	.word	0x0040db20

0040b1f8 <__lshift>:
  40b1f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40b1fc:	4691      	mov	r9, r2
  40b1fe:	690a      	ldr	r2, [r1, #16]
  40b200:	688b      	ldr	r3, [r1, #8]
  40b202:	ea4f 1469 	mov.w	r4, r9, asr #5
  40b206:	eb04 0802 	add.w	r8, r4, r2
  40b20a:	f108 0501 	add.w	r5, r8, #1
  40b20e:	429d      	cmp	r5, r3
  40b210:	460e      	mov	r6, r1
  40b212:	4607      	mov	r7, r0
  40b214:	6849      	ldr	r1, [r1, #4]
  40b216:	dd04      	ble.n	40b222 <__lshift+0x2a>
  40b218:	005b      	lsls	r3, r3, #1
  40b21a:	429d      	cmp	r5, r3
  40b21c:	f101 0101 	add.w	r1, r1, #1
  40b220:	dcfa      	bgt.n	40b218 <__lshift+0x20>
  40b222:	4638      	mov	r0, r7
  40b224:	f7ff fe3c 	bl	40aea0 <_Balloc>
  40b228:	2c00      	cmp	r4, #0
  40b22a:	f100 0314 	add.w	r3, r0, #20
  40b22e:	dd06      	ble.n	40b23e <__lshift+0x46>
  40b230:	eb03 0284 	add.w	r2, r3, r4, lsl #2
  40b234:	2100      	movs	r1, #0
  40b236:	f843 1b04 	str.w	r1, [r3], #4
  40b23a:	429a      	cmp	r2, r3
  40b23c:	d1fb      	bne.n	40b236 <__lshift+0x3e>
  40b23e:	6934      	ldr	r4, [r6, #16]
  40b240:	f106 0114 	add.w	r1, r6, #20
  40b244:	f019 091f 	ands.w	r9, r9, #31
  40b248:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
  40b24c:	d01d      	beq.n	40b28a <__lshift+0x92>
  40b24e:	f1c9 0c20 	rsb	ip, r9, #32
  40b252:	2200      	movs	r2, #0
  40b254:	680c      	ldr	r4, [r1, #0]
  40b256:	fa04 f409 	lsl.w	r4, r4, r9
  40b25a:	4314      	orrs	r4, r2
  40b25c:	f843 4b04 	str.w	r4, [r3], #4
  40b260:	f851 2b04 	ldr.w	r2, [r1], #4
  40b264:	458e      	cmp	lr, r1
  40b266:	fa22 f20c 	lsr.w	r2, r2, ip
  40b26a:	d8f3      	bhi.n	40b254 <__lshift+0x5c>
  40b26c:	601a      	str	r2, [r3, #0]
  40b26e:	b10a      	cbz	r2, 40b274 <__lshift+0x7c>
  40b270:	f108 0502 	add.w	r5, r8, #2
  40b274:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  40b276:	6872      	ldr	r2, [r6, #4]
  40b278:	3d01      	subs	r5, #1
  40b27a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  40b27e:	6105      	str	r5, [r0, #16]
  40b280:	6031      	str	r1, [r6, #0]
  40b282:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  40b286:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40b28a:	3b04      	subs	r3, #4
  40b28c:	f851 2b04 	ldr.w	r2, [r1], #4
  40b290:	f843 2f04 	str.w	r2, [r3, #4]!
  40b294:	458e      	cmp	lr, r1
  40b296:	d8f9      	bhi.n	40b28c <__lshift+0x94>
  40b298:	e7ec      	b.n	40b274 <__lshift+0x7c>
  40b29a:	bf00      	nop

0040b29c <__mcmp>:
  40b29c:	b430      	push	{r4, r5}
  40b29e:	690b      	ldr	r3, [r1, #16]
  40b2a0:	4605      	mov	r5, r0
  40b2a2:	6900      	ldr	r0, [r0, #16]
  40b2a4:	1ac0      	subs	r0, r0, r3
  40b2a6:	d10f      	bne.n	40b2c8 <__mcmp+0x2c>
  40b2a8:	009b      	lsls	r3, r3, #2
  40b2aa:	3514      	adds	r5, #20
  40b2ac:	3114      	adds	r1, #20
  40b2ae:	4419      	add	r1, r3
  40b2b0:	442b      	add	r3, r5
  40b2b2:	e001      	b.n	40b2b8 <__mcmp+0x1c>
  40b2b4:	429d      	cmp	r5, r3
  40b2b6:	d207      	bcs.n	40b2c8 <__mcmp+0x2c>
  40b2b8:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  40b2bc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  40b2c0:	4294      	cmp	r4, r2
  40b2c2:	d0f7      	beq.n	40b2b4 <__mcmp+0x18>
  40b2c4:	d302      	bcc.n	40b2cc <__mcmp+0x30>
  40b2c6:	2001      	movs	r0, #1
  40b2c8:	bc30      	pop	{r4, r5}
  40b2ca:	4770      	bx	lr
  40b2cc:	f04f 30ff 	mov.w	r0, #4294967295
  40b2d0:	e7fa      	b.n	40b2c8 <__mcmp+0x2c>
  40b2d2:	bf00      	nop

0040b2d4 <__mdiff>:
  40b2d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40b2d8:	690f      	ldr	r7, [r1, #16]
  40b2da:	460e      	mov	r6, r1
  40b2dc:	6911      	ldr	r1, [r2, #16]
  40b2de:	1a7f      	subs	r7, r7, r1
  40b2e0:	2f00      	cmp	r7, #0
  40b2e2:	4690      	mov	r8, r2
  40b2e4:	d117      	bne.n	40b316 <__mdiff+0x42>
  40b2e6:	0089      	lsls	r1, r1, #2
  40b2e8:	f106 0514 	add.w	r5, r6, #20
  40b2ec:	f102 0e14 	add.w	lr, r2, #20
  40b2f0:	186b      	adds	r3, r5, r1
  40b2f2:	4471      	add	r1, lr
  40b2f4:	e001      	b.n	40b2fa <__mdiff+0x26>
  40b2f6:	429d      	cmp	r5, r3
  40b2f8:	d25c      	bcs.n	40b3b4 <__mdiff+0xe0>
  40b2fa:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  40b2fe:	f851 4d04 	ldr.w	r4, [r1, #-4]!
  40b302:	42a2      	cmp	r2, r4
  40b304:	d0f7      	beq.n	40b2f6 <__mdiff+0x22>
  40b306:	d25e      	bcs.n	40b3c6 <__mdiff+0xf2>
  40b308:	4633      	mov	r3, r6
  40b30a:	462c      	mov	r4, r5
  40b30c:	4646      	mov	r6, r8
  40b30e:	4675      	mov	r5, lr
  40b310:	4698      	mov	r8, r3
  40b312:	2701      	movs	r7, #1
  40b314:	e005      	b.n	40b322 <__mdiff+0x4e>
  40b316:	db58      	blt.n	40b3ca <__mdiff+0xf6>
  40b318:	f106 0514 	add.w	r5, r6, #20
  40b31c:	f108 0414 	add.w	r4, r8, #20
  40b320:	2700      	movs	r7, #0
  40b322:	6871      	ldr	r1, [r6, #4]
  40b324:	f7ff fdbc 	bl	40aea0 <_Balloc>
  40b328:	f8d8 3010 	ldr.w	r3, [r8, #16]
  40b32c:	6936      	ldr	r6, [r6, #16]
  40b32e:	60c7      	str	r7, [r0, #12]
  40b330:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
  40b334:	46a6      	mov	lr, r4
  40b336:	eb05 0786 	add.w	r7, r5, r6, lsl #2
  40b33a:	f100 0414 	add.w	r4, r0, #20
  40b33e:	2300      	movs	r3, #0
  40b340:	f85e 1b04 	ldr.w	r1, [lr], #4
  40b344:	f855 8b04 	ldr.w	r8, [r5], #4
  40b348:	b28a      	uxth	r2, r1
  40b34a:	fa13 f388 	uxtah	r3, r3, r8
  40b34e:	0c09      	lsrs	r1, r1, #16
  40b350:	1a9a      	subs	r2, r3, r2
  40b352:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
  40b356:	eb03 4322 	add.w	r3, r3, r2, asr #16
  40b35a:	b292      	uxth	r2, r2
  40b35c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  40b360:	45f4      	cmp	ip, lr
  40b362:	f844 2b04 	str.w	r2, [r4], #4
  40b366:	ea4f 4323 	mov.w	r3, r3, asr #16
  40b36a:	d8e9      	bhi.n	40b340 <__mdiff+0x6c>
  40b36c:	42af      	cmp	r7, r5
  40b36e:	d917      	bls.n	40b3a0 <__mdiff+0xcc>
  40b370:	46a4      	mov	ip, r4
  40b372:	46ae      	mov	lr, r5
  40b374:	f85e 2b04 	ldr.w	r2, [lr], #4
  40b378:	fa13 f382 	uxtah	r3, r3, r2
  40b37c:	1419      	asrs	r1, r3, #16
  40b37e:	eb01 4112 	add.w	r1, r1, r2, lsr #16
  40b382:	b29b      	uxth	r3, r3
  40b384:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
  40b388:	4577      	cmp	r7, lr
  40b38a:	f84c 2b04 	str.w	r2, [ip], #4
  40b38e:	ea4f 4321 	mov.w	r3, r1, asr #16
  40b392:	d8ef      	bhi.n	40b374 <__mdiff+0xa0>
  40b394:	43ed      	mvns	r5, r5
  40b396:	442f      	add	r7, r5
  40b398:	f027 0703 	bic.w	r7, r7, #3
  40b39c:	3704      	adds	r7, #4
  40b39e:	443c      	add	r4, r7
  40b3a0:	3c04      	subs	r4, #4
  40b3a2:	b922      	cbnz	r2, 40b3ae <__mdiff+0xda>
  40b3a4:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  40b3a8:	3e01      	subs	r6, #1
  40b3aa:	2b00      	cmp	r3, #0
  40b3ac:	d0fa      	beq.n	40b3a4 <__mdiff+0xd0>
  40b3ae:	6106      	str	r6, [r0, #16]
  40b3b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40b3b4:	2100      	movs	r1, #0
  40b3b6:	f7ff fd73 	bl	40aea0 <_Balloc>
  40b3ba:	2201      	movs	r2, #1
  40b3bc:	2300      	movs	r3, #0
  40b3be:	6102      	str	r2, [r0, #16]
  40b3c0:	6143      	str	r3, [r0, #20]
  40b3c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40b3c6:	4674      	mov	r4, lr
  40b3c8:	e7ab      	b.n	40b322 <__mdiff+0x4e>
  40b3ca:	4633      	mov	r3, r6
  40b3cc:	f106 0414 	add.w	r4, r6, #20
  40b3d0:	f102 0514 	add.w	r5, r2, #20
  40b3d4:	4616      	mov	r6, r2
  40b3d6:	2701      	movs	r7, #1
  40b3d8:	4698      	mov	r8, r3
  40b3da:	e7a2      	b.n	40b322 <__mdiff+0x4e>

0040b3dc <__d2b>:
  40b3dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40b3e0:	b082      	sub	sp, #8
  40b3e2:	2101      	movs	r1, #1
  40b3e4:	461c      	mov	r4, r3
  40b3e6:	f3c3 570a 	ubfx	r7, r3, #20, #11
  40b3ea:	4615      	mov	r5, r2
  40b3ec:	9e08      	ldr	r6, [sp, #32]
  40b3ee:	f7ff fd57 	bl	40aea0 <_Balloc>
  40b3f2:	f3c4 0413 	ubfx	r4, r4, #0, #20
  40b3f6:	4680      	mov	r8, r0
  40b3f8:	b10f      	cbz	r7, 40b3fe <__d2b+0x22>
  40b3fa:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  40b3fe:	9401      	str	r4, [sp, #4]
  40b400:	b31d      	cbz	r5, 40b44a <__d2b+0x6e>
  40b402:	a802      	add	r0, sp, #8
  40b404:	f840 5d08 	str.w	r5, [r0, #-8]!
  40b408:	f7ff fdda 	bl	40afc0 <__lo0bits>
  40b40c:	2800      	cmp	r0, #0
  40b40e:	d134      	bne.n	40b47a <__d2b+0x9e>
  40b410:	e89d 000c 	ldmia.w	sp, {r2, r3}
  40b414:	f8c8 2014 	str.w	r2, [r8, #20]
  40b418:	2b00      	cmp	r3, #0
  40b41a:	bf0c      	ite	eq
  40b41c:	2101      	moveq	r1, #1
  40b41e:	2102      	movne	r1, #2
  40b420:	f8c8 3018 	str.w	r3, [r8, #24]
  40b424:	f8c8 1010 	str.w	r1, [r8, #16]
  40b428:	b9df      	cbnz	r7, 40b462 <__d2b+0x86>
  40b42a:	eb08 0381 	add.w	r3, r8, r1, lsl #2
  40b42e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  40b432:	6030      	str	r0, [r6, #0]
  40b434:	6918      	ldr	r0, [r3, #16]
  40b436:	f7ff fda3 	bl	40af80 <__hi0bits>
  40b43a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40b43c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  40b440:	6018      	str	r0, [r3, #0]
  40b442:	4640      	mov	r0, r8
  40b444:	b002      	add	sp, #8
  40b446:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40b44a:	a801      	add	r0, sp, #4
  40b44c:	f7ff fdb8 	bl	40afc0 <__lo0bits>
  40b450:	9b01      	ldr	r3, [sp, #4]
  40b452:	f8c8 3014 	str.w	r3, [r8, #20]
  40b456:	2101      	movs	r1, #1
  40b458:	3020      	adds	r0, #32
  40b45a:	f8c8 1010 	str.w	r1, [r8, #16]
  40b45e:	2f00      	cmp	r7, #0
  40b460:	d0e3      	beq.n	40b42a <__d2b+0x4e>
  40b462:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40b464:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
  40b468:	4407      	add	r7, r0
  40b46a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  40b46e:	6037      	str	r7, [r6, #0]
  40b470:	6018      	str	r0, [r3, #0]
  40b472:	4640      	mov	r0, r8
  40b474:	b002      	add	sp, #8
  40b476:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40b47a:	e89d 000a 	ldmia.w	sp, {r1, r3}
  40b47e:	f1c0 0220 	rsb	r2, r0, #32
  40b482:	fa03 f202 	lsl.w	r2, r3, r2
  40b486:	430a      	orrs	r2, r1
  40b488:	40c3      	lsrs	r3, r0
  40b48a:	9301      	str	r3, [sp, #4]
  40b48c:	f8c8 2014 	str.w	r2, [r8, #20]
  40b490:	e7c2      	b.n	40b418 <__d2b+0x3c>
  40b492:	bf00      	nop

0040b494 <_realloc_r>:
  40b494:	2900      	cmp	r1, #0
  40b496:	f000 8095 	beq.w	40b5c4 <_realloc_r+0x130>
  40b49a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40b49e:	460d      	mov	r5, r1
  40b4a0:	4616      	mov	r6, r2
  40b4a2:	b083      	sub	sp, #12
  40b4a4:	4680      	mov	r8, r0
  40b4a6:	f106 070b 	add.w	r7, r6, #11
  40b4aa:	f7ff fced 	bl	40ae88 <__malloc_lock>
  40b4ae:	f855 ec04 	ldr.w	lr, [r5, #-4]
  40b4b2:	2f16      	cmp	r7, #22
  40b4b4:	f02e 0403 	bic.w	r4, lr, #3
  40b4b8:	f1a5 0908 	sub.w	r9, r5, #8
  40b4bc:	d83c      	bhi.n	40b538 <_realloc_r+0xa4>
  40b4be:	2210      	movs	r2, #16
  40b4c0:	4617      	mov	r7, r2
  40b4c2:	42be      	cmp	r6, r7
  40b4c4:	d83d      	bhi.n	40b542 <_realloc_r+0xae>
  40b4c6:	4294      	cmp	r4, r2
  40b4c8:	da43      	bge.n	40b552 <_realloc_r+0xbe>
  40b4ca:	4bc4      	ldr	r3, [pc, #784]	; (40b7dc <_realloc_r+0x348>)
  40b4cc:	6899      	ldr	r1, [r3, #8]
  40b4ce:	eb09 0004 	add.w	r0, r9, r4
  40b4d2:	4288      	cmp	r0, r1
  40b4d4:	f000 80b4 	beq.w	40b640 <_realloc_r+0x1ac>
  40b4d8:	6843      	ldr	r3, [r0, #4]
  40b4da:	f023 0101 	bic.w	r1, r3, #1
  40b4de:	4401      	add	r1, r0
  40b4e0:	6849      	ldr	r1, [r1, #4]
  40b4e2:	07c9      	lsls	r1, r1, #31
  40b4e4:	d54c      	bpl.n	40b580 <_realloc_r+0xec>
  40b4e6:	f01e 0f01 	tst.w	lr, #1
  40b4ea:	f000 809b 	beq.w	40b624 <_realloc_r+0x190>
  40b4ee:	4631      	mov	r1, r6
  40b4f0:	4640      	mov	r0, r8
  40b4f2:	f7ff f949 	bl	40a788 <_malloc_r>
  40b4f6:	4606      	mov	r6, r0
  40b4f8:	2800      	cmp	r0, #0
  40b4fa:	d03a      	beq.n	40b572 <_realloc_r+0xde>
  40b4fc:	f855 3c04 	ldr.w	r3, [r5, #-4]
  40b500:	f023 0301 	bic.w	r3, r3, #1
  40b504:	444b      	add	r3, r9
  40b506:	f1a0 0208 	sub.w	r2, r0, #8
  40b50a:	429a      	cmp	r2, r3
  40b50c:	f000 8121 	beq.w	40b752 <_realloc_r+0x2be>
  40b510:	1f22      	subs	r2, r4, #4
  40b512:	2a24      	cmp	r2, #36	; 0x24
  40b514:	f200 8107 	bhi.w	40b726 <_realloc_r+0x292>
  40b518:	2a13      	cmp	r2, #19
  40b51a:	f200 80db 	bhi.w	40b6d4 <_realloc_r+0x240>
  40b51e:	4603      	mov	r3, r0
  40b520:	462a      	mov	r2, r5
  40b522:	6811      	ldr	r1, [r2, #0]
  40b524:	6019      	str	r1, [r3, #0]
  40b526:	6851      	ldr	r1, [r2, #4]
  40b528:	6059      	str	r1, [r3, #4]
  40b52a:	6892      	ldr	r2, [r2, #8]
  40b52c:	609a      	str	r2, [r3, #8]
  40b52e:	4629      	mov	r1, r5
  40b530:	4640      	mov	r0, r8
  40b532:	f7fe fdfd 	bl	40a130 <_free_r>
  40b536:	e01c      	b.n	40b572 <_realloc_r+0xde>
  40b538:	f027 0707 	bic.w	r7, r7, #7
  40b53c:	2f00      	cmp	r7, #0
  40b53e:	463a      	mov	r2, r7
  40b540:	dabf      	bge.n	40b4c2 <_realloc_r+0x2e>
  40b542:	2600      	movs	r6, #0
  40b544:	230c      	movs	r3, #12
  40b546:	4630      	mov	r0, r6
  40b548:	f8c8 3000 	str.w	r3, [r8]
  40b54c:	b003      	add	sp, #12
  40b54e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40b552:	462e      	mov	r6, r5
  40b554:	1be3      	subs	r3, r4, r7
  40b556:	2b0f      	cmp	r3, #15
  40b558:	d81e      	bhi.n	40b598 <_realloc_r+0x104>
  40b55a:	f8d9 3004 	ldr.w	r3, [r9, #4]
  40b55e:	f003 0301 	and.w	r3, r3, #1
  40b562:	4323      	orrs	r3, r4
  40b564:	444c      	add	r4, r9
  40b566:	f8c9 3004 	str.w	r3, [r9, #4]
  40b56a:	6863      	ldr	r3, [r4, #4]
  40b56c:	f043 0301 	orr.w	r3, r3, #1
  40b570:	6063      	str	r3, [r4, #4]
  40b572:	4640      	mov	r0, r8
  40b574:	f7ff fc8e 	bl	40ae94 <__malloc_unlock>
  40b578:	4630      	mov	r0, r6
  40b57a:	b003      	add	sp, #12
  40b57c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40b580:	f023 0303 	bic.w	r3, r3, #3
  40b584:	18e1      	adds	r1, r4, r3
  40b586:	4291      	cmp	r1, r2
  40b588:	db1f      	blt.n	40b5ca <_realloc_r+0x136>
  40b58a:	68c3      	ldr	r3, [r0, #12]
  40b58c:	6882      	ldr	r2, [r0, #8]
  40b58e:	462e      	mov	r6, r5
  40b590:	60d3      	str	r3, [r2, #12]
  40b592:	460c      	mov	r4, r1
  40b594:	609a      	str	r2, [r3, #8]
  40b596:	e7dd      	b.n	40b554 <_realloc_r+0xc0>
  40b598:	f8d9 2004 	ldr.w	r2, [r9, #4]
  40b59c:	eb09 0107 	add.w	r1, r9, r7
  40b5a0:	f002 0201 	and.w	r2, r2, #1
  40b5a4:	444c      	add	r4, r9
  40b5a6:	f043 0301 	orr.w	r3, r3, #1
  40b5aa:	4317      	orrs	r7, r2
  40b5ac:	f8c9 7004 	str.w	r7, [r9, #4]
  40b5b0:	604b      	str	r3, [r1, #4]
  40b5b2:	6863      	ldr	r3, [r4, #4]
  40b5b4:	f043 0301 	orr.w	r3, r3, #1
  40b5b8:	3108      	adds	r1, #8
  40b5ba:	6063      	str	r3, [r4, #4]
  40b5bc:	4640      	mov	r0, r8
  40b5be:	f7fe fdb7 	bl	40a130 <_free_r>
  40b5c2:	e7d6      	b.n	40b572 <_realloc_r+0xde>
  40b5c4:	4611      	mov	r1, r2
  40b5c6:	f7ff b8df 	b.w	40a788 <_malloc_r>
  40b5ca:	f01e 0f01 	tst.w	lr, #1
  40b5ce:	d18e      	bne.n	40b4ee <_realloc_r+0x5a>
  40b5d0:	f855 1c08 	ldr.w	r1, [r5, #-8]
  40b5d4:	eba9 0a01 	sub.w	sl, r9, r1
  40b5d8:	f8da 1004 	ldr.w	r1, [sl, #4]
  40b5dc:	f021 0103 	bic.w	r1, r1, #3
  40b5e0:	440b      	add	r3, r1
  40b5e2:	4423      	add	r3, r4
  40b5e4:	4293      	cmp	r3, r2
  40b5e6:	db25      	blt.n	40b634 <_realloc_r+0x1a0>
  40b5e8:	68c2      	ldr	r2, [r0, #12]
  40b5ea:	6881      	ldr	r1, [r0, #8]
  40b5ec:	4656      	mov	r6, sl
  40b5ee:	60ca      	str	r2, [r1, #12]
  40b5f0:	6091      	str	r1, [r2, #8]
  40b5f2:	f8da 100c 	ldr.w	r1, [sl, #12]
  40b5f6:	f856 0f08 	ldr.w	r0, [r6, #8]!
  40b5fa:	1f22      	subs	r2, r4, #4
  40b5fc:	2a24      	cmp	r2, #36	; 0x24
  40b5fe:	60c1      	str	r1, [r0, #12]
  40b600:	6088      	str	r0, [r1, #8]
  40b602:	f200 8094 	bhi.w	40b72e <_realloc_r+0x29a>
  40b606:	2a13      	cmp	r2, #19
  40b608:	d96f      	bls.n	40b6ea <_realloc_r+0x256>
  40b60a:	6829      	ldr	r1, [r5, #0]
  40b60c:	f8ca 1008 	str.w	r1, [sl, #8]
  40b610:	6869      	ldr	r1, [r5, #4]
  40b612:	f8ca 100c 	str.w	r1, [sl, #12]
  40b616:	2a1b      	cmp	r2, #27
  40b618:	f200 80a2 	bhi.w	40b760 <_realloc_r+0x2cc>
  40b61c:	3508      	adds	r5, #8
  40b61e:	f10a 0210 	add.w	r2, sl, #16
  40b622:	e063      	b.n	40b6ec <_realloc_r+0x258>
  40b624:	f855 3c08 	ldr.w	r3, [r5, #-8]
  40b628:	eba9 0a03 	sub.w	sl, r9, r3
  40b62c:	f8da 1004 	ldr.w	r1, [sl, #4]
  40b630:	f021 0103 	bic.w	r1, r1, #3
  40b634:	1863      	adds	r3, r4, r1
  40b636:	4293      	cmp	r3, r2
  40b638:	f6ff af59 	blt.w	40b4ee <_realloc_r+0x5a>
  40b63c:	4656      	mov	r6, sl
  40b63e:	e7d8      	b.n	40b5f2 <_realloc_r+0x15e>
  40b640:	6841      	ldr	r1, [r0, #4]
  40b642:	f021 0b03 	bic.w	fp, r1, #3
  40b646:	44a3      	add	fp, r4
  40b648:	f107 0010 	add.w	r0, r7, #16
  40b64c:	4583      	cmp	fp, r0
  40b64e:	da56      	bge.n	40b6fe <_realloc_r+0x26a>
  40b650:	f01e 0f01 	tst.w	lr, #1
  40b654:	f47f af4b 	bne.w	40b4ee <_realloc_r+0x5a>
  40b658:	f855 1c08 	ldr.w	r1, [r5, #-8]
  40b65c:	eba9 0a01 	sub.w	sl, r9, r1
  40b660:	f8da 1004 	ldr.w	r1, [sl, #4]
  40b664:	f021 0103 	bic.w	r1, r1, #3
  40b668:	448b      	add	fp, r1
  40b66a:	4558      	cmp	r0, fp
  40b66c:	dce2      	bgt.n	40b634 <_realloc_r+0x1a0>
  40b66e:	4656      	mov	r6, sl
  40b670:	f8da 100c 	ldr.w	r1, [sl, #12]
  40b674:	f856 0f08 	ldr.w	r0, [r6, #8]!
  40b678:	1f22      	subs	r2, r4, #4
  40b67a:	2a24      	cmp	r2, #36	; 0x24
  40b67c:	60c1      	str	r1, [r0, #12]
  40b67e:	6088      	str	r0, [r1, #8]
  40b680:	f200 808f 	bhi.w	40b7a2 <_realloc_r+0x30e>
  40b684:	2a13      	cmp	r2, #19
  40b686:	f240 808a 	bls.w	40b79e <_realloc_r+0x30a>
  40b68a:	6829      	ldr	r1, [r5, #0]
  40b68c:	f8ca 1008 	str.w	r1, [sl, #8]
  40b690:	6869      	ldr	r1, [r5, #4]
  40b692:	f8ca 100c 	str.w	r1, [sl, #12]
  40b696:	2a1b      	cmp	r2, #27
  40b698:	f200 808a 	bhi.w	40b7b0 <_realloc_r+0x31c>
  40b69c:	3508      	adds	r5, #8
  40b69e:	f10a 0210 	add.w	r2, sl, #16
  40b6a2:	6829      	ldr	r1, [r5, #0]
  40b6a4:	6011      	str	r1, [r2, #0]
  40b6a6:	6869      	ldr	r1, [r5, #4]
  40b6a8:	6051      	str	r1, [r2, #4]
  40b6aa:	68a9      	ldr	r1, [r5, #8]
  40b6ac:	6091      	str	r1, [r2, #8]
  40b6ae:	eb0a 0107 	add.w	r1, sl, r7
  40b6b2:	ebab 0207 	sub.w	r2, fp, r7
  40b6b6:	f042 0201 	orr.w	r2, r2, #1
  40b6ba:	6099      	str	r1, [r3, #8]
  40b6bc:	604a      	str	r2, [r1, #4]
  40b6be:	f8da 3004 	ldr.w	r3, [sl, #4]
  40b6c2:	f003 0301 	and.w	r3, r3, #1
  40b6c6:	431f      	orrs	r7, r3
  40b6c8:	4640      	mov	r0, r8
  40b6ca:	f8ca 7004 	str.w	r7, [sl, #4]
  40b6ce:	f7ff fbe1 	bl	40ae94 <__malloc_unlock>
  40b6d2:	e751      	b.n	40b578 <_realloc_r+0xe4>
  40b6d4:	682b      	ldr	r3, [r5, #0]
  40b6d6:	6003      	str	r3, [r0, #0]
  40b6d8:	686b      	ldr	r3, [r5, #4]
  40b6da:	6043      	str	r3, [r0, #4]
  40b6dc:	2a1b      	cmp	r2, #27
  40b6de:	d82d      	bhi.n	40b73c <_realloc_r+0x2a8>
  40b6e0:	f100 0308 	add.w	r3, r0, #8
  40b6e4:	f105 0208 	add.w	r2, r5, #8
  40b6e8:	e71b      	b.n	40b522 <_realloc_r+0x8e>
  40b6ea:	4632      	mov	r2, r6
  40b6ec:	6829      	ldr	r1, [r5, #0]
  40b6ee:	6011      	str	r1, [r2, #0]
  40b6f0:	6869      	ldr	r1, [r5, #4]
  40b6f2:	6051      	str	r1, [r2, #4]
  40b6f4:	68a9      	ldr	r1, [r5, #8]
  40b6f6:	6091      	str	r1, [r2, #8]
  40b6f8:	461c      	mov	r4, r3
  40b6fa:	46d1      	mov	r9, sl
  40b6fc:	e72a      	b.n	40b554 <_realloc_r+0xc0>
  40b6fe:	eb09 0107 	add.w	r1, r9, r7
  40b702:	ebab 0b07 	sub.w	fp, fp, r7
  40b706:	f04b 0201 	orr.w	r2, fp, #1
  40b70a:	6099      	str	r1, [r3, #8]
  40b70c:	604a      	str	r2, [r1, #4]
  40b70e:	f855 3c04 	ldr.w	r3, [r5, #-4]
  40b712:	f003 0301 	and.w	r3, r3, #1
  40b716:	431f      	orrs	r7, r3
  40b718:	4640      	mov	r0, r8
  40b71a:	f845 7c04 	str.w	r7, [r5, #-4]
  40b71e:	f7ff fbb9 	bl	40ae94 <__malloc_unlock>
  40b722:	462e      	mov	r6, r5
  40b724:	e728      	b.n	40b578 <_realloc_r+0xe4>
  40b726:	4629      	mov	r1, r5
  40b728:	f7ff fb4a 	bl	40adc0 <memmove>
  40b72c:	e6ff      	b.n	40b52e <_realloc_r+0x9a>
  40b72e:	4629      	mov	r1, r5
  40b730:	4630      	mov	r0, r6
  40b732:	461c      	mov	r4, r3
  40b734:	46d1      	mov	r9, sl
  40b736:	f7ff fb43 	bl	40adc0 <memmove>
  40b73a:	e70b      	b.n	40b554 <_realloc_r+0xc0>
  40b73c:	68ab      	ldr	r3, [r5, #8]
  40b73e:	6083      	str	r3, [r0, #8]
  40b740:	68eb      	ldr	r3, [r5, #12]
  40b742:	60c3      	str	r3, [r0, #12]
  40b744:	2a24      	cmp	r2, #36	; 0x24
  40b746:	d017      	beq.n	40b778 <_realloc_r+0x2e4>
  40b748:	f100 0310 	add.w	r3, r0, #16
  40b74c:	f105 0210 	add.w	r2, r5, #16
  40b750:	e6e7      	b.n	40b522 <_realloc_r+0x8e>
  40b752:	f850 3c04 	ldr.w	r3, [r0, #-4]
  40b756:	f023 0303 	bic.w	r3, r3, #3
  40b75a:	441c      	add	r4, r3
  40b75c:	462e      	mov	r6, r5
  40b75e:	e6f9      	b.n	40b554 <_realloc_r+0xc0>
  40b760:	68a9      	ldr	r1, [r5, #8]
  40b762:	f8ca 1010 	str.w	r1, [sl, #16]
  40b766:	68e9      	ldr	r1, [r5, #12]
  40b768:	f8ca 1014 	str.w	r1, [sl, #20]
  40b76c:	2a24      	cmp	r2, #36	; 0x24
  40b76e:	d00c      	beq.n	40b78a <_realloc_r+0x2f6>
  40b770:	3510      	adds	r5, #16
  40b772:	f10a 0218 	add.w	r2, sl, #24
  40b776:	e7b9      	b.n	40b6ec <_realloc_r+0x258>
  40b778:	692b      	ldr	r3, [r5, #16]
  40b77a:	6103      	str	r3, [r0, #16]
  40b77c:	696b      	ldr	r3, [r5, #20]
  40b77e:	6143      	str	r3, [r0, #20]
  40b780:	f105 0218 	add.w	r2, r5, #24
  40b784:	f100 0318 	add.w	r3, r0, #24
  40b788:	e6cb      	b.n	40b522 <_realloc_r+0x8e>
  40b78a:	692a      	ldr	r2, [r5, #16]
  40b78c:	f8ca 2018 	str.w	r2, [sl, #24]
  40b790:	696a      	ldr	r2, [r5, #20]
  40b792:	f8ca 201c 	str.w	r2, [sl, #28]
  40b796:	3518      	adds	r5, #24
  40b798:	f10a 0220 	add.w	r2, sl, #32
  40b79c:	e7a6      	b.n	40b6ec <_realloc_r+0x258>
  40b79e:	4632      	mov	r2, r6
  40b7a0:	e77f      	b.n	40b6a2 <_realloc_r+0x20e>
  40b7a2:	4629      	mov	r1, r5
  40b7a4:	4630      	mov	r0, r6
  40b7a6:	9301      	str	r3, [sp, #4]
  40b7a8:	f7ff fb0a 	bl	40adc0 <memmove>
  40b7ac:	9b01      	ldr	r3, [sp, #4]
  40b7ae:	e77e      	b.n	40b6ae <_realloc_r+0x21a>
  40b7b0:	68a9      	ldr	r1, [r5, #8]
  40b7b2:	f8ca 1010 	str.w	r1, [sl, #16]
  40b7b6:	68e9      	ldr	r1, [r5, #12]
  40b7b8:	f8ca 1014 	str.w	r1, [sl, #20]
  40b7bc:	2a24      	cmp	r2, #36	; 0x24
  40b7be:	d003      	beq.n	40b7c8 <_realloc_r+0x334>
  40b7c0:	3510      	adds	r5, #16
  40b7c2:	f10a 0218 	add.w	r2, sl, #24
  40b7c6:	e76c      	b.n	40b6a2 <_realloc_r+0x20e>
  40b7c8:	692a      	ldr	r2, [r5, #16]
  40b7ca:	f8ca 2018 	str.w	r2, [sl, #24]
  40b7ce:	696a      	ldr	r2, [r5, #20]
  40b7d0:	f8ca 201c 	str.w	r2, [sl, #28]
  40b7d4:	3518      	adds	r5, #24
  40b7d6:	f10a 0220 	add.w	r2, sl, #32
  40b7da:	e762      	b.n	40b6a2 <_realloc_r+0x20e>
  40b7dc:	204005c0 	.word	0x204005c0

0040b7e0 <_sbrk_r>:
  40b7e0:	b538      	push	{r3, r4, r5, lr}
  40b7e2:	4c07      	ldr	r4, [pc, #28]	; (40b800 <_sbrk_r+0x20>)
  40b7e4:	2300      	movs	r3, #0
  40b7e6:	4605      	mov	r5, r0
  40b7e8:	4608      	mov	r0, r1
  40b7ea:	6023      	str	r3, [r4, #0]
  40b7ec:	f7fa f924 	bl	405a38 <_sbrk>
  40b7f0:	1c43      	adds	r3, r0, #1
  40b7f2:	d000      	beq.n	40b7f6 <_sbrk_r+0x16>
  40b7f4:	bd38      	pop	{r3, r4, r5, pc}
  40b7f6:	6823      	ldr	r3, [r4, #0]
  40b7f8:	2b00      	cmp	r3, #0
  40b7fa:	d0fb      	beq.n	40b7f4 <_sbrk_r+0x14>
  40b7fc:	602b      	str	r3, [r5, #0]
  40b7fe:	bd38      	pop	{r3, r4, r5, pc}
  40b800:	2040cb80 	.word	0x2040cb80

0040b804 <__sread>:
  40b804:	b510      	push	{r4, lr}
  40b806:	460c      	mov	r4, r1
  40b808:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40b80c:	f000 faa4 	bl	40bd58 <_read_r>
  40b810:	2800      	cmp	r0, #0
  40b812:	db03      	blt.n	40b81c <__sread+0x18>
  40b814:	6d23      	ldr	r3, [r4, #80]	; 0x50
  40b816:	4403      	add	r3, r0
  40b818:	6523      	str	r3, [r4, #80]	; 0x50
  40b81a:	bd10      	pop	{r4, pc}
  40b81c:	89a3      	ldrh	r3, [r4, #12]
  40b81e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  40b822:	81a3      	strh	r3, [r4, #12]
  40b824:	bd10      	pop	{r4, pc}
  40b826:	bf00      	nop

0040b828 <__swrite>:
  40b828:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40b82c:	4616      	mov	r6, r2
  40b82e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  40b832:	461f      	mov	r7, r3
  40b834:	05d3      	lsls	r3, r2, #23
  40b836:	460c      	mov	r4, r1
  40b838:	4605      	mov	r5, r0
  40b83a:	d507      	bpl.n	40b84c <__swrite+0x24>
  40b83c:	2200      	movs	r2, #0
  40b83e:	2302      	movs	r3, #2
  40b840:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40b844:	f000 fa72 	bl	40bd2c <_lseek_r>
  40b848:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40b84c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40b850:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  40b854:	81a2      	strh	r2, [r4, #12]
  40b856:	463b      	mov	r3, r7
  40b858:	4632      	mov	r2, r6
  40b85a:	4628      	mov	r0, r5
  40b85c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40b860:	f000 b922 	b.w	40baa8 <_write_r>

0040b864 <__sseek>:
  40b864:	b510      	push	{r4, lr}
  40b866:	460c      	mov	r4, r1
  40b868:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40b86c:	f000 fa5e 	bl	40bd2c <_lseek_r>
  40b870:	89a3      	ldrh	r3, [r4, #12]
  40b872:	1c42      	adds	r2, r0, #1
  40b874:	bf0e      	itee	eq
  40b876:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  40b87a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  40b87e:	6520      	strne	r0, [r4, #80]	; 0x50
  40b880:	81a3      	strh	r3, [r4, #12]
  40b882:	bd10      	pop	{r4, pc}

0040b884 <__sclose>:
  40b884:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40b888:	f000 b9b6 	b.w	40bbf8 <_close_r>

0040b88c <__ssprint_r>:
  40b88c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40b890:	6893      	ldr	r3, [r2, #8]
  40b892:	b083      	sub	sp, #12
  40b894:	4690      	mov	r8, r2
  40b896:	2b00      	cmp	r3, #0
  40b898:	d070      	beq.n	40b97c <__ssprint_r+0xf0>
  40b89a:	4682      	mov	sl, r0
  40b89c:	460c      	mov	r4, r1
  40b89e:	6817      	ldr	r7, [r2, #0]
  40b8a0:	688d      	ldr	r5, [r1, #8]
  40b8a2:	6808      	ldr	r0, [r1, #0]
  40b8a4:	e042      	b.n	40b92c <__ssprint_r+0xa0>
  40b8a6:	89a3      	ldrh	r3, [r4, #12]
  40b8a8:	f413 6f90 	tst.w	r3, #1152	; 0x480
  40b8ac:	d02e      	beq.n	40b90c <__ssprint_r+0x80>
  40b8ae:	6965      	ldr	r5, [r4, #20]
  40b8b0:	6921      	ldr	r1, [r4, #16]
  40b8b2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
  40b8b6:	eba0 0b01 	sub.w	fp, r0, r1
  40b8ba:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
  40b8be:	f10b 0001 	add.w	r0, fp, #1
  40b8c2:	106d      	asrs	r5, r5, #1
  40b8c4:	4430      	add	r0, r6
  40b8c6:	42a8      	cmp	r0, r5
  40b8c8:	462a      	mov	r2, r5
  40b8ca:	bf84      	itt	hi
  40b8cc:	4605      	movhi	r5, r0
  40b8ce:	462a      	movhi	r2, r5
  40b8d0:	055b      	lsls	r3, r3, #21
  40b8d2:	d538      	bpl.n	40b946 <__ssprint_r+0xba>
  40b8d4:	4611      	mov	r1, r2
  40b8d6:	4650      	mov	r0, sl
  40b8d8:	f7fe ff56 	bl	40a788 <_malloc_r>
  40b8dc:	2800      	cmp	r0, #0
  40b8de:	d03c      	beq.n	40b95a <__ssprint_r+0xce>
  40b8e0:	465a      	mov	r2, fp
  40b8e2:	6921      	ldr	r1, [r4, #16]
  40b8e4:	9001      	str	r0, [sp, #4]
  40b8e6:	f7fa fe29 	bl	40653c <memcpy>
  40b8ea:	89a2      	ldrh	r2, [r4, #12]
  40b8ec:	9b01      	ldr	r3, [sp, #4]
  40b8ee:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  40b8f2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  40b8f6:	81a2      	strh	r2, [r4, #12]
  40b8f8:	eba5 020b 	sub.w	r2, r5, fp
  40b8fc:	eb03 000b 	add.w	r0, r3, fp
  40b900:	6165      	str	r5, [r4, #20]
  40b902:	6123      	str	r3, [r4, #16]
  40b904:	6020      	str	r0, [r4, #0]
  40b906:	60a2      	str	r2, [r4, #8]
  40b908:	4635      	mov	r5, r6
  40b90a:	46b3      	mov	fp, r6
  40b90c:	465a      	mov	r2, fp
  40b90e:	4649      	mov	r1, r9
  40b910:	f7ff fa56 	bl	40adc0 <memmove>
  40b914:	f8d8 3008 	ldr.w	r3, [r8, #8]
  40b918:	68a2      	ldr	r2, [r4, #8]
  40b91a:	6820      	ldr	r0, [r4, #0]
  40b91c:	1b55      	subs	r5, r2, r5
  40b91e:	4458      	add	r0, fp
  40b920:	1b9e      	subs	r6, r3, r6
  40b922:	60a5      	str	r5, [r4, #8]
  40b924:	6020      	str	r0, [r4, #0]
  40b926:	f8c8 6008 	str.w	r6, [r8, #8]
  40b92a:	b33e      	cbz	r6, 40b97c <__ssprint_r+0xf0>
  40b92c:	687e      	ldr	r6, [r7, #4]
  40b92e:	463b      	mov	r3, r7
  40b930:	3708      	adds	r7, #8
  40b932:	2e00      	cmp	r6, #0
  40b934:	d0fa      	beq.n	40b92c <__ssprint_r+0xa0>
  40b936:	42ae      	cmp	r6, r5
  40b938:	f8d3 9000 	ldr.w	r9, [r3]
  40b93c:	46ab      	mov	fp, r5
  40b93e:	d2b2      	bcs.n	40b8a6 <__ssprint_r+0x1a>
  40b940:	4635      	mov	r5, r6
  40b942:	46b3      	mov	fp, r6
  40b944:	e7e2      	b.n	40b90c <__ssprint_r+0x80>
  40b946:	4650      	mov	r0, sl
  40b948:	f7ff fda4 	bl	40b494 <_realloc_r>
  40b94c:	4603      	mov	r3, r0
  40b94e:	2800      	cmp	r0, #0
  40b950:	d1d2      	bne.n	40b8f8 <__ssprint_r+0x6c>
  40b952:	6921      	ldr	r1, [r4, #16]
  40b954:	4650      	mov	r0, sl
  40b956:	f7fe fbeb 	bl	40a130 <_free_r>
  40b95a:	230c      	movs	r3, #12
  40b95c:	f8ca 3000 	str.w	r3, [sl]
  40b960:	89a3      	ldrh	r3, [r4, #12]
  40b962:	2200      	movs	r2, #0
  40b964:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40b968:	f04f 30ff 	mov.w	r0, #4294967295
  40b96c:	81a3      	strh	r3, [r4, #12]
  40b96e:	f8c8 2008 	str.w	r2, [r8, #8]
  40b972:	f8c8 2004 	str.w	r2, [r8, #4]
  40b976:	b003      	add	sp, #12
  40b978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40b97c:	2000      	movs	r0, #0
  40b97e:	f8c8 0004 	str.w	r0, [r8, #4]
  40b982:	b003      	add	sp, #12
  40b984:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040b988 <__swbuf_r>:
  40b988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40b98a:	460d      	mov	r5, r1
  40b98c:	4614      	mov	r4, r2
  40b98e:	4606      	mov	r6, r0
  40b990:	b110      	cbz	r0, 40b998 <__swbuf_r+0x10>
  40b992:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40b994:	2b00      	cmp	r3, #0
  40b996:	d04b      	beq.n	40ba30 <__swbuf_r+0xa8>
  40b998:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40b99c:	69a3      	ldr	r3, [r4, #24]
  40b99e:	60a3      	str	r3, [r4, #8]
  40b9a0:	b291      	uxth	r1, r2
  40b9a2:	0708      	lsls	r0, r1, #28
  40b9a4:	d539      	bpl.n	40ba1a <__swbuf_r+0x92>
  40b9a6:	6923      	ldr	r3, [r4, #16]
  40b9a8:	2b00      	cmp	r3, #0
  40b9aa:	d036      	beq.n	40ba1a <__swbuf_r+0x92>
  40b9ac:	b2ed      	uxtb	r5, r5
  40b9ae:	0489      	lsls	r1, r1, #18
  40b9b0:	462f      	mov	r7, r5
  40b9b2:	d515      	bpl.n	40b9e0 <__swbuf_r+0x58>
  40b9b4:	6822      	ldr	r2, [r4, #0]
  40b9b6:	6961      	ldr	r1, [r4, #20]
  40b9b8:	1ad3      	subs	r3, r2, r3
  40b9ba:	428b      	cmp	r3, r1
  40b9bc:	da1c      	bge.n	40b9f8 <__swbuf_r+0x70>
  40b9be:	3301      	adds	r3, #1
  40b9c0:	68a1      	ldr	r1, [r4, #8]
  40b9c2:	1c50      	adds	r0, r2, #1
  40b9c4:	3901      	subs	r1, #1
  40b9c6:	60a1      	str	r1, [r4, #8]
  40b9c8:	6020      	str	r0, [r4, #0]
  40b9ca:	7015      	strb	r5, [r2, #0]
  40b9cc:	6962      	ldr	r2, [r4, #20]
  40b9ce:	429a      	cmp	r2, r3
  40b9d0:	d01a      	beq.n	40ba08 <__swbuf_r+0x80>
  40b9d2:	89a3      	ldrh	r3, [r4, #12]
  40b9d4:	07db      	lsls	r3, r3, #31
  40b9d6:	d501      	bpl.n	40b9dc <__swbuf_r+0x54>
  40b9d8:	2d0a      	cmp	r5, #10
  40b9da:	d015      	beq.n	40ba08 <__swbuf_r+0x80>
  40b9dc:	4638      	mov	r0, r7
  40b9de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40b9e0:	6e61      	ldr	r1, [r4, #100]	; 0x64
  40b9e2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  40b9e6:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  40b9ea:	81a2      	strh	r2, [r4, #12]
  40b9ec:	6822      	ldr	r2, [r4, #0]
  40b9ee:	6661      	str	r1, [r4, #100]	; 0x64
  40b9f0:	6961      	ldr	r1, [r4, #20]
  40b9f2:	1ad3      	subs	r3, r2, r3
  40b9f4:	428b      	cmp	r3, r1
  40b9f6:	dbe2      	blt.n	40b9be <__swbuf_r+0x36>
  40b9f8:	4621      	mov	r1, r4
  40b9fa:	4630      	mov	r0, r6
  40b9fc:	f7fe fa1a 	bl	409e34 <_fflush_r>
  40ba00:	b940      	cbnz	r0, 40ba14 <__swbuf_r+0x8c>
  40ba02:	6822      	ldr	r2, [r4, #0]
  40ba04:	2301      	movs	r3, #1
  40ba06:	e7db      	b.n	40b9c0 <__swbuf_r+0x38>
  40ba08:	4621      	mov	r1, r4
  40ba0a:	4630      	mov	r0, r6
  40ba0c:	f7fe fa12 	bl	409e34 <_fflush_r>
  40ba10:	2800      	cmp	r0, #0
  40ba12:	d0e3      	beq.n	40b9dc <__swbuf_r+0x54>
  40ba14:	f04f 37ff 	mov.w	r7, #4294967295
  40ba18:	e7e0      	b.n	40b9dc <__swbuf_r+0x54>
  40ba1a:	4621      	mov	r1, r4
  40ba1c:	4630      	mov	r0, r6
  40ba1e:	f7fd f935 	bl	408c8c <__swsetup_r>
  40ba22:	2800      	cmp	r0, #0
  40ba24:	d1f6      	bne.n	40ba14 <__swbuf_r+0x8c>
  40ba26:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40ba2a:	6923      	ldr	r3, [r4, #16]
  40ba2c:	b291      	uxth	r1, r2
  40ba2e:	e7bd      	b.n	40b9ac <__swbuf_r+0x24>
  40ba30:	f7fe fa58 	bl	409ee4 <__sinit>
  40ba34:	e7b0      	b.n	40b998 <__swbuf_r+0x10>
  40ba36:	bf00      	nop

0040ba38 <_wcrtomb_r>:
  40ba38:	b5f0      	push	{r4, r5, r6, r7, lr}
  40ba3a:	4606      	mov	r6, r0
  40ba3c:	b085      	sub	sp, #20
  40ba3e:	461f      	mov	r7, r3
  40ba40:	b189      	cbz	r1, 40ba66 <_wcrtomb_r+0x2e>
  40ba42:	4c10      	ldr	r4, [pc, #64]	; (40ba84 <_wcrtomb_r+0x4c>)
  40ba44:	4d10      	ldr	r5, [pc, #64]	; (40ba88 <_wcrtomb_r+0x50>)
  40ba46:	6824      	ldr	r4, [r4, #0]
  40ba48:	6b64      	ldr	r4, [r4, #52]	; 0x34
  40ba4a:	2c00      	cmp	r4, #0
  40ba4c:	bf08      	it	eq
  40ba4e:	462c      	moveq	r4, r5
  40ba50:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  40ba54:	47a0      	blx	r4
  40ba56:	1c43      	adds	r3, r0, #1
  40ba58:	d103      	bne.n	40ba62 <_wcrtomb_r+0x2a>
  40ba5a:	2200      	movs	r2, #0
  40ba5c:	238a      	movs	r3, #138	; 0x8a
  40ba5e:	603a      	str	r2, [r7, #0]
  40ba60:	6033      	str	r3, [r6, #0]
  40ba62:	b005      	add	sp, #20
  40ba64:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40ba66:	460c      	mov	r4, r1
  40ba68:	4906      	ldr	r1, [pc, #24]	; (40ba84 <_wcrtomb_r+0x4c>)
  40ba6a:	4a07      	ldr	r2, [pc, #28]	; (40ba88 <_wcrtomb_r+0x50>)
  40ba6c:	6809      	ldr	r1, [r1, #0]
  40ba6e:	6b49      	ldr	r1, [r1, #52]	; 0x34
  40ba70:	2900      	cmp	r1, #0
  40ba72:	bf08      	it	eq
  40ba74:	4611      	moveq	r1, r2
  40ba76:	4622      	mov	r2, r4
  40ba78:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  40ba7c:	a901      	add	r1, sp, #4
  40ba7e:	47a0      	blx	r4
  40ba80:	e7e9      	b.n	40ba56 <_wcrtomb_r+0x1e>
  40ba82:	bf00      	nop
  40ba84:	20400024 	.word	0x20400024
  40ba88:	20400454 	.word	0x20400454

0040ba8c <__ascii_wctomb>:
  40ba8c:	b121      	cbz	r1, 40ba98 <__ascii_wctomb+0xc>
  40ba8e:	2aff      	cmp	r2, #255	; 0xff
  40ba90:	d804      	bhi.n	40ba9c <__ascii_wctomb+0x10>
  40ba92:	700a      	strb	r2, [r1, #0]
  40ba94:	2001      	movs	r0, #1
  40ba96:	4770      	bx	lr
  40ba98:	4608      	mov	r0, r1
  40ba9a:	4770      	bx	lr
  40ba9c:	238a      	movs	r3, #138	; 0x8a
  40ba9e:	6003      	str	r3, [r0, #0]
  40baa0:	f04f 30ff 	mov.w	r0, #4294967295
  40baa4:	4770      	bx	lr
  40baa6:	bf00      	nop

0040baa8 <_write_r>:
  40baa8:	b570      	push	{r4, r5, r6, lr}
  40baaa:	460d      	mov	r5, r1
  40baac:	4c08      	ldr	r4, [pc, #32]	; (40bad0 <_write_r+0x28>)
  40baae:	4611      	mov	r1, r2
  40bab0:	4606      	mov	r6, r0
  40bab2:	461a      	mov	r2, r3
  40bab4:	4628      	mov	r0, r5
  40bab6:	2300      	movs	r3, #0
  40bab8:	6023      	str	r3, [r4, #0]
  40baba:	f7f9 f951 	bl	404d60 <_write>
  40babe:	1c43      	adds	r3, r0, #1
  40bac0:	d000      	beq.n	40bac4 <_write_r+0x1c>
  40bac2:	bd70      	pop	{r4, r5, r6, pc}
  40bac4:	6823      	ldr	r3, [r4, #0]
  40bac6:	2b00      	cmp	r3, #0
  40bac8:	d0fb      	beq.n	40bac2 <_write_r+0x1a>
  40baca:	6033      	str	r3, [r6, #0]
  40bacc:	bd70      	pop	{r4, r5, r6, pc}
  40bace:	bf00      	nop
  40bad0:	2040cb80 	.word	0x2040cb80

0040bad4 <__register_exitproc>:
  40bad4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40bad8:	4d2c      	ldr	r5, [pc, #176]	; (40bb8c <__register_exitproc+0xb8>)
  40bada:	4606      	mov	r6, r0
  40badc:	6828      	ldr	r0, [r5, #0]
  40bade:	4698      	mov	r8, r3
  40bae0:	460f      	mov	r7, r1
  40bae2:	4691      	mov	r9, r2
  40bae4:	f7fe fdcc 	bl	40a680 <__retarget_lock_acquire_recursive>
  40bae8:	4b29      	ldr	r3, [pc, #164]	; (40bb90 <__register_exitproc+0xbc>)
  40baea:	681c      	ldr	r4, [r3, #0]
  40baec:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  40baf0:	2b00      	cmp	r3, #0
  40baf2:	d03e      	beq.n	40bb72 <__register_exitproc+0x9e>
  40baf4:	685a      	ldr	r2, [r3, #4]
  40baf6:	2a1f      	cmp	r2, #31
  40baf8:	dc1c      	bgt.n	40bb34 <__register_exitproc+0x60>
  40bafa:	f102 0e01 	add.w	lr, r2, #1
  40bafe:	b176      	cbz	r6, 40bb1e <__register_exitproc+0x4a>
  40bb00:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  40bb04:	2401      	movs	r4, #1
  40bb06:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  40bb0a:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  40bb0e:	4094      	lsls	r4, r2
  40bb10:	4320      	orrs	r0, r4
  40bb12:	2e02      	cmp	r6, #2
  40bb14:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  40bb18:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  40bb1c:	d023      	beq.n	40bb66 <__register_exitproc+0x92>
  40bb1e:	3202      	adds	r2, #2
  40bb20:	f8c3 e004 	str.w	lr, [r3, #4]
  40bb24:	6828      	ldr	r0, [r5, #0]
  40bb26:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  40bb2a:	f7fe fdab 	bl	40a684 <__retarget_lock_release_recursive>
  40bb2e:	2000      	movs	r0, #0
  40bb30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40bb34:	4b17      	ldr	r3, [pc, #92]	; (40bb94 <__register_exitproc+0xc0>)
  40bb36:	b30b      	cbz	r3, 40bb7c <__register_exitproc+0xa8>
  40bb38:	f44f 70c8 	mov.w	r0, #400	; 0x190
  40bb3c:	f7fe fe1c 	bl	40a778 <malloc>
  40bb40:	4603      	mov	r3, r0
  40bb42:	b1d8      	cbz	r0, 40bb7c <__register_exitproc+0xa8>
  40bb44:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  40bb48:	6002      	str	r2, [r0, #0]
  40bb4a:	2100      	movs	r1, #0
  40bb4c:	6041      	str	r1, [r0, #4]
  40bb4e:	460a      	mov	r2, r1
  40bb50:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  40bb54:	f04f 0e01 	mov.w	lr, #1
  40bb58:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  40bb5c:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  40bb60:	2e00      	cmp	r6, #0
  40bb62:	d0dc      	beq.n	40bb1e <__register_exitproc+0x4a>
  40bb64:	e7cc      	b.n	40bb00 <__register_exitproc+0x2c>
  40bb66:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  40bb6a:	430c      	orrs	r4, r1
  40bb6c:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  40bb70:	e7d5      	b.n	40bb1e <__register_exitproc+0x4a>
  40bb72:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  40bb76:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  40bb7a:	e7bb      	b.n	40baf4 <__register_exitproc+0x20>
  40bb7c:	6828      	ldr	r0, [r5, #0]
  40bb7e:	f7fe fd81 	bl	40a684 <__retarget_lock_release_recursive>
  40bb82:	f04f 30ff 	mov.w	r0, #4294967295
  40bb86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40bb8a:	bf00      	nop
  40bb8c:	20400450 	.word	0x20400450
  40bb90:	0040d988 	.word	0x0040d988
  40bb94:	0040a779 	.word	0x0040a779

0040bb98 <_calloc_r>:
  40bb98:	b510      	push	{r4, lr}
  40bb9a:	fb02 f101 	mul.w	r1, r2, r1
  40bb9e:	f7fe fdf3 	bl	40a788 <_malloc_r>
  40bba2:	4604      	mov	r4, r0
  40bba4:	b1d8      	cbz	r0, 40bbde <_calloc_r+0x46>
  40bba6:	f850 2c04 	ldr.w	r2, [r0, #-4]
  40bbaa:	f022 0203 	bic.w	r2, r2, #3
  40bbae:	3a04      	subs	r2, #4
  40bbb0:	2a24      	cmp	r2, #36	; 0x24
  40bbb2:	d818      	bhi.n	40bbe6 <_calloc_r+0x4e>
  40bbb4:	2a13      	cmp	r2, #19
  40bbb6:	d914      	bls.n	40bbe2 <_calloc_r+0x4a>
  40bbb8:	2300      	movs	r3, #0
  40bbba:	2a1b      	cmp	r2, #27
  40bbbc:	6003      	str	r3, [r0, #0]
  40bbbe:	6043      	str	r3, [r0, #4]
  40bbc0:	d916      	bls.n	40bbf0 <_calloc_r+0x58>
  40bbc2:	2a24      	cmp	r2, #36	; 0x24
  40bbc4:	6083      	str	r3, [r0, #8]
  40bbc6:	60c3      	str	r3, [r0, #12]
  40bbc8:	bf11      	iteee	ne
  40bbca:	f100 0210 	addne.w	r2, r0, #16
  40bbce:	6103      	streq	r3, [r0, #16]
  40bbd0:	6143      	streq	r3, [r0, #20]
  40bbd2:	f100 0218 	addeq.w	r2, r0, #24
  40bbd6:	2300      	movs	r3, #0
  40bbd8:	6013      	str	r3, [r2, #0]
  40bbda:	6053      	str	r3, [r2, #4]
  40bbdc:	6093      	str	r3, [r2, #8]
  40bbde:	4620      	mov	r0, r4
  40bbe0:	bd10      	pop	{r4, pc}
  40bbe2:	4602      	mov	r2, r0
  40bbe4:	e7f7      	b.n	40bbd6 <_calloc_r+0x3e>
  40bbe6:	2100      	movs	r1, #0
  40bbe8:	f7fa fd42 	bl	406670 <memset>
  40bbec:	4620      	mov	r0, r4
  40bbee:	bd10      	pop	{r4, pc}
  40bbf0:	f100 0208 	add.w	r2, r0, #8
  40bbf4:	e7ef      	b.n	40bbd6 <_calloc_r+0x3e>
  40bbf6:	bf00      	nop

0040bbf8 <_close_r>:
  40bbf8:	b538      	push	{r3, r4, r5, lr}
  40bbfa:	4c07      	ldr	r4, [pc, #28]	; (40bc18 <_close_r+0x20>)
  40bbfc:	2300      	movs	r3, #0
  40bbfe:	4605      	mov	r5, r0
  40bc00:	4608      	mov	r0, r1
  40bc02:	6023      	str	r3, [r4, #0]
  40bc04:	f7f9 ff34 	bl	405a70 <_close>
  40bc08:	1c43      	adds	r3, r0, #1
  40bc0a:	d000      	beq.n	40bc0e <_close_r+0x16>
  40bc0c:	bd38      	pop	{r3, r4, r5, pc}
  40bc0e:	6823      	ldr	r3, [r4, #0]
  40bc10:	2b00      	cmp	r3, #0
  40bc12:	d0fb      	beq.n	40bc0c <_close_r+0x14>
  40bc14:	602b      	str	r3, [r5, #0]
  40bc16:	bd38      	pop	{r3, r4, r5, pc}
  40bc18:	2040cb80 	.word	0x2040cb80

0040bc1c <_fclose_r>:
  40bc1c:	b570      	push	{r4, r5, r6, lr}
  40bc1e:	b159      	cbz	r1, 40bc38 <_fclose_r+0x1c>
  40bc20:	4605      	mov	r5, r0
  40bc22:	460c      	mov	r4, r1
  40bc24:	b110      	cbz	r0, 40bc2c <_fclose_r+0x10>
  40bc26:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40bc28:	2b00      	cmp	r3, #0
  40bc2a:	d03c      	beq.n	40bca6 <_fclose_r+0x8a>
  40bc2c:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40bc2e:	07d8      	lsls	r0, r3, #31
  40bc30:	d505      	bpl.n	40bc3e <_fclose_r+0x22>
  40bc32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40bc36:	b92b      	cbnz	r3, 40bc44 <_fclose_r+0x28>
  40bc38:	2600      	movs	r6, #0
  40bc3a:	4630      	mov	r0, r6
  40bc3c:	bd70      	pop	{r4, r5, r6, pc}
  40bc3e:	89a3      	ldrh	r3, [r4, #12]
  40bc40:	0599      	lsls	r1, r3, #22
  40bc42:	d53c      	bpl.n	40bcbe <_fclose_r+0xa2>
  40bc44:	4621      	mov	r1, r4
  40bc46:	4628      	mov	r0, r5
  40bc48:	f7fe f854 	bl	409cf4 <__sflush_r>
  40bc4c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  40bc4e:	4606      	mov	r6, r0
  40bc50:	b133      	cbz	r3, 40bc60 <_fclose_r+0x44>
  40bc52:	69e1      	ldr	r1, [r4, #28]
  40bc54:	4628      	mov	r0, r5
  40bc56:	4798      	blx	r3
  40bc58:	2800      	cmp	r0, #0
  40bc5a:	bfb8      	it	lt
  40bc5c:	f04f 36ff 	movlt.w	r6, #4294967295
  40bc60:	89a3      	ldrh	r3, [r4, #12]
  40bc62:	061a      	lsls	r2, r3, #24
  40bc64:	d422      	bmi.n	40bcac <_fclose_r+0x90>
  40bc66:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40bc68:	b141      	cbz	r1, 40bc7c <_fclose_r+0x60>
  40bc6a:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40bc6e:	4299      	cmp	r1, r3
  40bc70:	d002      	beq.n	40bc78 <_fclose_r+0x5c>
  40bc72:	4628      	mov	r0, r5
  40bc74:	f7fe fa5c 	bl	40a130 <_free_r>
  40bc78:	2300      	movs	r3, #0
  40bc7a:	6323      	str	r3, [r4, #48]	; 0x30
  40bc7c:	6c61      	ldr	r1, [r4, #68]	; 0x44
  40bc7e:	b121      	cbz	r1, 40bc8a <_fclose_r+0x6e>
  40bc80:	4628      	mov	r0, r5
  40bc82:	f7fe fa55 	bl	40a130 <_free_r>
  40bc86:	2300      	movs	r3, #0
  40bc88:	6463      	str	r3, [r4, #68]	; 0x44
  40bc8a:	f7fe f957 	bl	409f3c <__sfp_lock_acquire>
  40bc8e:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40bc90:	2200      	movs	r2, #0
  40bc92:	07db      	lsls	r3, r3, #31
  40bc94:	81a2      	strh	r2, [r4, #12]
  40bc96:	d50e      	bpl.n	40bcb6 <_fclose_r+0x9a>
  40bc98:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40bc9a:	f7fe fcef 	bl	40a67c <__retarget_lock_close_recursive>
  40bc9e:	f7fe f953 	bl	409f48 <__sfp_lock_release>
  40bca2:	4630      	mov	r0, r6
  40bca4:	bd70      	pop	{r4, r5, r6, pc}
  40bca6:	f7fe f91d 	bl	409ee4 <__sinit>
  40bcaa:	e7bf      	b.n	40bc2c <_fclose_r+0x10>
  40bcac:	6921      	ldr	r1, [r4, #16]
  40bcae:	4628      	mov	r0, r5
  40bcb0:	f7fe fa3e 	bl	40a130 <_free_r>
  40bcb4:	e7d7      	b.n	40bc66 <_fclose_r+0x4a>
  40bcb6:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40bcb8:	f7fe fce4 	bl	40a684 <__retarget_lock_release_recursive>
  40bcbc:	e7ec      	b.n	40bc98 <_fclose_r+0x7c>
  40bcbe:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40bcc0:	f7fe fcde 	bl	40a680 <__retarget_lock_acquire_recursive>
  40bcc4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40bcc8:	2b00      	cmp	r3, #0
  40bcca:	d1bb      	bne.n	40bc44 <_fclose_r+0x28>
  40bccc:	6e66      	ldr	r6, [r4, #100]	; 0x64
  40bcce:	f016 0601 	ands.w	r6, r6, #1
  40bcd2:	d1b1      	bne.n	40bc38 <_fclose_r+0x1c>
  40bcd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40bcd6:	f7fe fcd5 	bl	40a684 <__retarget_lock_release_recursive>
  40bcda:	4630      	mov	r0, r6
  40bcdc:	bd70      	pop	{r4, r5, r6, pc}
  40bcde:	bf00      	nop

0040bce0 <_fstat_r>:
  40bce0:	b538      	push	{r3, r4, r5, lr}
  40bce2:	460b      	mov	r3, r1
  40bce4:	4c07      	ldr	r4, [pc, #28]	; (40bd04 <_fstat_r+0x24>)
  40bce6:	4605      	mov	r5, r0
  40bce8:	4611      	mov	r1, r2
  40bcea:	4618      	mov	r0, r3
  40bcec:	2300      	movs	r3, #0
  40bcee:	6023      	str	r3, [r4, #0]
  40bcf0:	f7f9 fec1 	bl	405a76 <_fstat>
  40bcf4:	1c43      	adds	r3, r0, #1
  40bcf6:	d000      	beq.n	40bcfa <_fstat_r+0x1a>
  40bcf8:	bd38      	pop	{r3, r4, r5, pc}
  40bcfa:	6823      	ldr	r3, [r4, #0]
  40bcfc:	2b00      	cmp	r3, #0
  40bcfe:	d0fb      	beq.n	40bcf8 <_fstat_r+0x18>
  40bd00:	602b      	str	r3, [r5, #0]
  40bd02:	bd38      	pop	{r3, r4, r5, pc}
  40bd04:	2040cb80 	.word	0x2040cb80

0040bd08 <_isatty_r>:
  40bd08:	b538      	push	{r3, r4, r5, lr}
  40bd0a:	4c07      	ldr	r4, [pc, #28]	; (40bd28 <_isatty_r+0x20>)
  40bd0c:	2300      	movs	r3, #0
  40bd0e:	4605      	mov	r5, r0
  40bd10:	4608      	mov	r0, r1
  40bd12:	6023      	str	r3, [r4, #0]
  40bd14:	f7f9 feb4 	bl	405a80 <_isatty>
  40bd18:	1c43      	adds	r3, r0, #1
  40bd1a:	d000      	beq.n	40bd1e <_isatty_r+0x16>
  40bd1c:	bd38      	pop	{r3, r4, r5, pc}
  40bd1e:	6823      	ldr	r3, [r4, #0]
  40bd20:	2b00      	cmp	r3, #0
  40bd22:	d0fb      	beq.n	40bd1c <_isatty_r+0x14>
  40bd24:	602b      	str	r3, [r5, #0]
  40bd26:	bd38      	pop	{r3, r4, r5, pc}
  40bd28:	2040cb80 	.word	0x2040cb80

0040bd2c <_lseek_r>:
  40bd2c:	b570      	push	{r4, r5, r6, lr}
  40bd2e:	460d      	mov	r5, r1
  40bd30:	4c08      	ldr	r4, [pc, #32]	; (40bd54 <_lseek_r+0x28>)
  40bd32:	4611      	mov	r1, r2
  40bd34:	4606      	mov	r6, r0
  40bd36:	461a      	mov	r2, r3
  40bd38:	4628      	mov	r0, r5
  40bd3a:	2300      	movs	r3, #0
  40bd3c:	6023      	str	r3, [r4, #0]
  40bd3e:	f7f9 fea1 	bl	405a84 <_lseek>
  40bd42:	1c43      	adds	r3, r0, #1
  40bd44:	d000      	beq.n	40bd48 <_lseek_r+0x1c>
  40bd46:	bd70      	pop	{r4, r5, r6, pc}
  40bd48:	6823      	ldr	r3, [r4, #0]
  40bd4a:	2b00      	cmp	r3, #0
  40bd4c:	d0fb      	beq.n	40bd46 <_lseek_r+0x1a>
  40bd4e:	6033      	str	r3, [r6, #0]
  40bd50:	bd70      	pop	{r4, r5, r6, pc}
  40bd52:	bf00      	nop
  40bd54:	2040cb80 	.word	0x2040cb80

0040bd58 <_read_r>:
  40bd58:	b570      	push	{r4, r5, r6, lr}
  40bd5a:	460d      	mov	r5, r1
  40bd5c:	4c08      	ldr	r4, [pc, #32]	; (40bd80 <_read_r+0x28>)
  40bd5e:	4611      	mov	r1, r2
  40bd60:	4606      	mov	r6, r0
  40bd62:	461a      	mov	r2, r3
  40bd64:	4628      	mov	r0, r5
  40bd66:	2300      	movs	r3, #0
  40bd68:	6023      	str	r3, [r4, #0]
  40bd6a:	f7f8 ffdb 	bl	404d24 <_read>
  40bd6e:	1c43      	adds	r3, r0, #1
  40bd70:	d000      	beq.n	40bd74 <_read_r+0x1c>
  40bd72:	bd70      	pop	{r4, r5, r6, pc}
  40bd74:	6823      	ldr	r3, [r4, #0]
  40bd76:	2b00      	cmp	r3, #0
  40bd78:	d0fb      	beq.n	40bd72 <_read_r+0x1a>
  40bd7a:	6033      	str	r3, [r6, #0]
  40bd7c:	bd70      	pop	{r4, r5, r6, pc}
  40bd7e:	bf00      	nop
  40bd80:	2040cb80 	.word	0x2040cb80

0040bd84 <__aeabi_drsub>:
  40bd84:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  40bd88:	e002      	b.n	40bd90 <__adddf3>
  40bd8a:	bf00      	nop

0040bd8c <__aeabi_dsub>:
  40bd8c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0040bd90 <__adddf3>:
  40bd90:	b530      	push	{r4, r5, lr}
  40bd92:	ea4f 0441 	mov.w	r4, r1, lsl #1
  40bd96:	ea4f 0543 	mov.w	r5, r3, lsl #1
  40bd9a:	ea94 0f05 	teq	r4, r5
  40bd9e:	bf08      	it	eq
  40bda0:	ea90 0f02 	teqeq	r0, r2
  40bda4:	bf1f      	itttt	ne
  40bda6:	ea54 0c00 	orrsne.w	ip, r4, r0
  40bdaa:	ea55 0c02 	orrsne.w	ip, r5, r2
  40bdae:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  40bdb2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40bdb6:	f000 80e2 	beq.w	40bf7e <__adddf3+0x1ee>
  40bdba:	ea4f 5454 	mov.w	r4, r4, lsr #21
  40bdbe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  40bdc2:	bfb8      	it	lt
  40bdc4:	426d      	neglt	r5, r5
  40bdc6:	dd0c      	ble.n	40bde2 <__adddf3+0x52>
  40bdc8:	442c      	add	r4, r5
  40bdca:	ea80 0202 	eor.w	r2, r0, r2
  40bdce:	ea81 0303 	eor.w	r3, r1, r3
  40bdd2:	ea82 0000 	eor.w	r0, r2, r0
  40bdd6:	ea83 0101 	eor.w	r1, r3, r1
  40bdda:	ea80 0202 	eor.w	r2, r0, r2
  40bdde:	ea81 0303 	eor.w	r3, r1, r3
  40bde2:	2d36      	cmp	r5, #54	; 0x36
  40bde4:	bf88      	it	hi
  40bde6:	bd30      	pophi	{r4, r5, pc}
  40bde8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40bdec:	ea4f 3101 	mov.w	r1, r1, lsl #12
  40bdf0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  40bdf4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  40bdf8:	d002      	beq.n	40be00 <__adddf3+0x70>
  40bdfa:	4240      	negs	r0, r0
  40bdfc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40be00:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  40be04:	ea4f 3303 	mov.w	r3, r3, lsl #12
  40be08:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  40be0c:	d002      	beq.n	40be14 <__adddf3+0x84>
  40be0e:	4252      	negs	r2, r2
  40be10:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  40be14:	ea94 0f05 	teq	r4, r5
  40be18:	f000 80a7 	beq.w	40bf6a <__adddf3+0x1da>
  40be1c:	f1a4 0401 	sub.w	r4, r4, #1
  40be20:	f1d5 0e20 	rsbs	lr, r5, #32
  40be24:	db0d      	blt.n	40be42 <__adddf3+0xb2>
  40be26:	fa02 fc0e 	lsl.w	ip, r2, lr
  40be2a:	fa22 f205 	lsr.w	r2, r2, r5
  40be2e:	1880      	adds	r0, r0, r2
  40be30:	f141 0100 	adc.w	r1, r1, #0
  40be34:	fa03 f20e 	lsl.w	r2, r3, lr
  40be38:	1880      	adds	r0, r0, r2
  40be3a:	fa43 f305 	asr.w	r3, r3, r5
  40be3e:	4159      	adcs	r1, r3
  40be40:	e00e      	b.n	40be60 <__adddf3+0xd0>
  40be42:	f1a5 0520 	sub.w	r5, r5, #32
  40be46:	f10e 0e20 	add.w	lr, lr, #32
  40be4a:	2a01      	cmp	r2, #1
  40be4c:	fa03 fc0e 	lsl.w	ip, r3, lr
  40be50:	bf28      	it	cs
  40be52:	f04c 0c02 	orrcs.w	ip, ip, #2
  40be56:	fa43 f305 	asr.w	r3, r3, r5
  40be5a:	18c0      	adds	r0, r0, r3
  40be5c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  40be60:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40be64:	d507      	bpl.n	40be76 <__adddf3+0xe6>
  40be66:	f04f 0e00 	mov.w	lr, #0
  40be6a:	f1dc 0c00 	rsbs	ip, ip, #0
  40be6e:	eb7e 0000 	sbcs.w	r0, lr, r0
  40be72:	eb6e 0101 	sbc.w	r1, lr, r1
  40be76:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  40be7a:	d31b      	bcc.n	40beb4 <__adddf3+0x124>
  40be7c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  40be80:	d30c      	bcc.n	40be9c <__adddf3+0x10c>
  40be82:	0849      	lsrs	r1, r1, #1
  40be84:	ea5f 0030 	movs.w	r0, r0, rrx
  40be88:	ea4f 0c3c 	mov.w	ip, ip, rrx
  40be8c:	f104 0401 	add.w	r4, r4, #1
  40be90:	ea4f 5244 	mov.w	r2, r4, lsl #21
  40be94:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  40be98:	f080 809a 	bcs.w	40bfd0 <__adddf3+0x240>
  40be9c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  40bea0:	bf08      	it	eq
  40bea2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40bea6:	f150 0000 	adcs.w	r0, r0, #0
  40beaa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40beae:	ea41 0105 	orr.w	r1, r1, r5
  40beb2:	bd30      	pop	{r4, r5, pc}
  40beb4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  40beb8:	4140      	adcs	r0, r0
  40beba:	eb41 0101 	adc.w	r1, r1, r1
  40bebe:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40bec2:	f1a4 0401 	sub.w	r4, r4, #1
  40bec6:	d1e9      	bne.n	40be9c <__adddf3+0x10c>
  40bec8:	f091 0f00 	teq	r1, #0
  40becc:	bf04      	itt	eq
  40bece:	4601      	moveq	r1, r0
  40bed0:	2000      	moveq	r0, #0
  40bed2:	fab1 f381 	clz	r3, r1
  40bed6:	bf08      	it	eq
  40bed8:	3320      	addeq	r3, #32
  40beda:	f1a3 030b 	sub.w	r3, r3, #11
  40bede:	f1b3 0220 	subs.w	r2, r3, #32
  40bee2:	da0c      	bge.n	40befe <__adddf3+0x16e>
  40bee4:	320c      	adds	r2, #12
  40bee6:	dd08      	ble.n	40befa <__adddf3+0x16a>
  40bee8:	f102 0c14 	add.w	ip, r2, #20
  40beec:	f1c2 020c 	rsb	r2, r2, #12
  40bef0:	fa01 f00c 	lsl.w	r0, r1, ip
  40bef4:	fa21 f102 	lsr.w	r1, r1, r2
  40bef8:	e00c      	b.n	40bf14 <__adddf3+0x184>
  40befa:	f102 0214 	add.w	r2, r2, #20
  40befe:	bfd8      	it	le
  40bf00:	f1c2 0c20 	rsble	ip, r2, #32
  40bf04:	fa01 f102 	lsl.w	r1, r1, r2
  40bf08:	fa20 fc0c 	lsr.w	ip, r0, ip
  40bf0c:	bfdc      	itt	le
  40bf0e:	ea41 010c 	orrle.w	r1, r1, ip
  40bf12:	4090      	lslle	r0, r2
  40bf14:	1ae4      	subs	r4, r4, r3
  40bf16:	bfa2      	ittt	ge
  40bf18:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  40bf1c:	4329      	orrge	r1, r5
  40bf1e:	bd30      	popge	{r4, r5, pc}
  40bf20:	ea6f 0404 	mvn.w	r4, r4
  40bf24:	3c1f      	subs	r4, #31
  40bf26:	da1c      	bge.n	40bf62 <__adddf3+0x1d2>
  40bf28:	340c      	adds	r4, #12
  40bf2a:	dc0e      	bgt.n	40bf4a <__adddf3+0x1ba>
  40bf2c:	f104 0414 	add.w	r4, r4, #20
  40bf30:	f1c4 0220 	rsb	r2, r4, #32
  40bf34:	fa20 f004 	lsr.w	r0, r0, r4
  40bf38:	fa01 f302 	lsl.w	r3, r1, r2
  40bf3c:	ea40 0003 	orr.w	r0, r0, r3
  40bf40:	fa21 f304 	lsr.w	r3, r1, r4
  40bf44:	ea45 0103 	orr.w	r1, r5, r3
  40bf48:	bd30      	pop	{r4, r5, pc}
  40bf4a:	f1c4 040c 	rsb	r4, r4, #12
  40bf4e:	f1c4 0220 	rsb	r2, r4, #32
  40bf52:	fa20 f002 	lsr.w	r0, r0, r2
  40bf56:	fa01 f304 	lsl.w	r3, r1, r4
  40bf5a:	ea40 0003 	orr.w	r0, r0, r3
  40bf5e:	4629      	mov	r1, r5
  40bf60:	bd30      	pop	{r4, r5, pc}
  40bf62:	fa21 f004 	lsr.w	r0, r1, r4
  40bf66:	4629      	mov	r1, r5
  40bf68:	bd30      	pop	{r4, r5, pc}
  40bf6a:	f094 0f00 	teq	r4, #0
  40bf6e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  40bf72:	bf06      	itte	eq
  40bf74:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  40bf78:	3401      	addeq	r4, #1
  40bf7a:	3d01      	subne	r5, #1
  40bf7c:	e74e      	b.n	40be1c <__adddf3+0x8c>
  40bf7e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40bf82:	bf18      	it	ne
  40bf84:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40bf88:	d029      	beq.n	40bfde <__adddf3+0x24e>
  40bf8a:	ea94 0f05 	teq	r4, r5
  40bf8e:	bf08      	it	eq
  40bf90:	ea90 0f02 	teqeq	r0, r2
  40bf94:	d005      	beq.n	40bfa2 <__adddf3+0x212>
  40bf96:	ea54 0c00 	orrs.w	ip, r4, r0
  40bf9a:	bf04      	itt	eq
  40bf9c:	4619      	moveq	r1, r3
  40bf9e:	4610      	moveq	r0, r2
  40bfa0:	bd30      	pop	{r4, r5, pc}
  40bfa2:	ea91 0f03 	teq	r1, r3
  40bfa6:	bf1e      	ittt	ne
  40bfa8:	2100      	movne	r1, #0
  40bfaa:	2000      	movne	r0, #0
  40bfac:	bd30      	popne	{r4, r5, pc}
  40bfae:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  40bfb2:	d105      	bne.n	40bfc0 <__adddf3+0x230>
  40bfb4:	0040      	lsls	r0, r0, #1
  40bfb6:	4149      	adcs	r1, r1
  40bfb8:	bf28      	it	cs
  40bfba:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  40bfbe:	bd30      	pop	{r4, r5, pc}
  40bfc0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  40bfc4:	bf3c      	itt	cc
  40bfc6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  40bfca:	bd30      	popcc	{r4, r5, pc}
  40bfcc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40bfd0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  40bfd4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40bfd8:	f04f 0000 	mov.w	r0, #0
  40bfdc:	bd30      	pop	{r4, r5, pc}
  40bfde:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40bfe2:	bf1a      	itte	ne
  40bfe4:	4619      	movne	r1, r3
  40bfe6:	4610      	movne	r0, r2
  40bfe8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  40bfec:	bf1c      	itt	ne
  40bfee:	460b      	movne	r3, r1
  40bff0:	4602      	movne	r2, r0
  40bff2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40bff6:	bf06      	itte	eq
  40bff8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  40bffc:	ea91 0f03 	teqeq	r1, r3
  40c000:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  40c004:	bd30      	pop	{r4, r5, pc}
  40c006:	bf00      	nop

0040c008 <__aeabi_ui2d>:
  40c008:	f090 0f00 	teq	r0, #0
  40c00c:	bf04      	itt	eq
  40c00e:	2100      	moveq	r1, #0
  40c010:	4770      	bxeq	lr
  40c012:	b530      	push	{r4, r5, lr}
  40c014:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40c018:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40c01c:	f04f 0500 	mov.w	r5, #0
  40c020:	f04f 0100 	mov.w	r1, #0
  40c024:	e750      	b.n	40bec8 <__adddf3+0x138>
  40c026:	bf00      	nop

0040c028 <__aeabi_i2d>:
  40c028:	f090 0f00 	teq	r0, #0
  40c02c:	bf04      	itt	eq
  40c02e:	2100      	moveq	r1, #0
  40c030:	4770      	bxeq	lr
  40c032:	b530      	push	{r4, r5, lr}
  40c034:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40c038:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40c03c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  40c040:	bf48      	it	mi
  40c042:	4240      	negmi	r0, r0
  40c044:	f04f 0100 	mov.w	r1, #0
  40c048:	e73e      	b.n	40bec8 <__adddf3+0x138>
  40c04a:	bf00      	nop

0040c04c <__aeabi_f2d>:
  40c04c:	0042      	lsls	r2, r0, #1
  40c04e:	ea4f 01e2 	mov.w	r1, r2, asr #3
  40c052:	ea4f 0131 	mov.w	r1, r1, rrx
  40c056:	ea4f 7002 	mov.w	r0, r2, lsl #28
  40c05a:	bf1f      	itttt	ne
  40c05c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  40c060:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40c064:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  40c068:	4770      	bxne	lr
  40c06a:	f092 0f00 	teq	r2, #0
  40c06e:	bf14      	ite	ne
  40c070:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40c074:	4770      	bxeq	lr
  40c076:	b530      	push	{r4, r5, lr}
  40c078:	f44f 7460 	mov.w	r4, #896	; 0x380
  40c07c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40c080:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40c084:	e720      	b.n	40bec8 <__adddf3+0x138>
  40c086:	bf00      	nop

0040c088 <__aeabi_ul2d>:
  40c088:	ea50 0201 	orrs.w	r2, r0, r1
  40c08c:	bf08      	it	eq
  40c08e:	4770      	bxeq	lr
  40c090:	b530      	push	{r4, r5, lr}
  40c092:	f04f 0500 	mov.w	r5, #0
  40c096:	e00a      	b.n	40c0ae <__aeabi_l2d+0x16>

0040c098 <__aeabi_l2d>:
  40c098:	ea50 0201 	orrs.w	r2, r0, r1
  40c09c:	bf08      	it	eq
  40c09e:	4770      	bxeq	lr
  40c0a0:	b530      	push	{r4, r5, lr}
  40c0a2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  40c0a6:	d502      	bpl.n	40c0ae <__aeabi_l2d+0x16>
  40c0a8:	4240      	negs	r0, r0
  40c0aa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40c0ae:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40c0b2:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40c0b6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  40c0ba:	f43f aedc 	beq.w	40be76 <__adddf3+0xe6>
  40c0be:	f04f 0203 	mov.w	r2, #3
  40c0c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40c0c6:	bf18      	it	ne
  40c0c8:	3203      	addne	r2, #3
  40c0ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40c0ce:	bf18      	it	ne
  40c0d0:	3203      	addne	r2, #3
  40c0d2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  40c0d6:	f1c2 0320 	rsb	r3, r2, #32
  40c0da:	fa00 fc03 	lsl.w	ip, r0, r3
  40c0de:	fa20 f002 	lsr.w	r0, r0, r2
  40c0e2:	fa01 fe03 	lsl.w	lr, r1, r3
  40c0e6:	ea40 000e 	orr.w	r0, r0, lr
  40c0ea:	fa21 f102 	lsr.w	r1, r1, r2
  40c0ee:	4414      	add	r4, r2
  40c0f0:	e6c1      	b.n	40be76 <__adddf3+0xe6>
  40c0f2:	bf00      	nop

0040c0f4 <__aeabi_dmul>:
  40c0f4:	b570      	push	{r4, r5, r6, lr}
  40c0f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40c0fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40c0fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40c102:	bf1d      	ittte	ne
  40c104:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  40c108:	ea94 0f0c 	teqne	r4, ip
  40c10c:	ea95 0f0c 	teqne	r5, ip
  40c110:	f000 f8de 	bleq	40c2d0 <__aeabi_dmul+0x1dc>
  40c114:	442c      	add	r4, r5
  40c116:	ea81 0603 	eor.w	r6, r1, r3
  40c11a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  40c11e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  40c122:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  40c126:	bf18      	it	ne
  40c128:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  40c12c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40c130:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  40c134:	d038      	beq.n	40c1a8 <__aeabi_dmul+0xb4>
  40c136:	fba0 ce02 	umull	ip, lr, r0, r2
  40c13a:	f04f 0500 	mov.w	r5, #0
  40c13e:	fbe1 e502 	umlal	lr, r5, r1, r2
  40c142:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  40c146:	fbe0 e503 	umlal	lr, r5, r0, r3
  40c14a:	f04f 0600 	mov.w	r6, #0
  40c14e:	fbe1 5603 	umlal	r5, r6, r1, r3
  40c152:	f09c 0f00 	teq	ip, #0
  40c156:	bf18      	it	ne
  40c158:	f04e 0e01 	orrne.w	lr, lr, #1
  40c15c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  40c160:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  40c164:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  40c168:	d204      	bcs.n	40c174 <__aeabi_dmul+0x80>
  40c16a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  40c16e:	416d      	adcs	r5, r5
  40c170:	eb46 0606 	adc.w	r6, r6, r6
  40c174:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  40c178:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  40c17c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  40c180:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  40c184:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  40c188:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40c18c:	bf88      	it	hi
  40c18e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40c192:	d81e      	bhi.n	40c1d2 <__aeabi_dmul+0xde>
  40c194:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  40c198:	bf08      	it	eq
  40c19a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  40c19e:	f150 0000 	adcs.w	r0, r0, #0
  40c1a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40c1a6:	bd70      	pop	{r4, r5, r6, pc}
  40c1a8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  40c1ac:	ea46 0101 	orr.w	r1, r6, r1
  40c1b0:	ea40 0002 	orr.w	r0, r0, r2
  40c1b4:	ea81 0103 	eor.w	r1, r1, r3
  40c1b8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  40c1bc:	bfc2      	ittt	gt
  40c1be:	ebd4 050c 	rsbsgt	r5, r4, ip
  40c1c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40c1c6:	bd70      	popgt	{r4, r5, r6, pc}
  40c1c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40c1cc:	f04f 0e00 	mov.w	lr, #0
  40c1d0:	3c01      	subs	r4, #1
  40c1d2:	f300 80ab 	bgt.w	40c32c <__aeabi_dmul+0x238>
  40c1d6:	f114 0f36 	cmn.w	r4, #54	; 0x36
  40c1da:	bfde      	ittt	le
  40c1dc:	2000      	movle	r0, #0
  40c1de:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  40c1e2:	bd70      	pople	{r4, r5, r6, pc}
  40c1e4:	f1c4 0400 	rsb	r4, r4, #0
  40c1e8:	3c20      	subs	r4, #32
  40c1ea:	da35      	bge.n	40c258 <__aeabi_dmul+0x164>
  40c1ec:	340c      	adds	r4, #12
  40c1ee:	dc1b      	bgt.n	40c228 <__aeabi_dmul+0x134>
  40c1f0:	f104 0414 	add.w	r4, r4, #20
  40c1f4:	f1c4 0520 	rsb	r5, r4, #32
  40c1f8:	fa00 f305 	lsl.w	r3, r0, r5
  40c1fc:	fa20 f004 	lsr.w	r0, r0, r4
  40c200:	fa01 f205 	lsl.w	r2, r1, r5
  40c204:	ea40 0002 	orr.w	r0, r0, r2
  40c208:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  40c20c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40c210:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  40c214:	fa21 f604 	lsr.w	r6, r1, r4
  40c218:	eb42 0106 	adc.w	r1, r2, r6
  40c21c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40c220:	bf08      	it	eq
  40c222:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40c226:	bd70      	pop	{r4, r5, r6, pc}
  40c228:	f1c4 040c 	rsb	r4, r4, #12
  40c22c:	f1c4 0520 	rsb	r5, r4, #32
  40c230:	fa00 f304 	lsl.w	r3, r0, r4
  40c234:	fa20 f005 	lsr.w	r0, r0, r5
  40c238:	fa01 f204 	lsl.w	r2, r1, r4
  40c23c:	ea40 0002 	orr.w	r0, r0, r2
  40c240:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40c244:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  40c248:	f141 0100 	adc.w	r1, r1, #0
  40c24c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40c250:	bf08      	it	eq
  40c252:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40c256:	bd70      	pop	{r4, r5, r6, pc}
  40c258:	f1c4 0520 	rsb	r5, r4, #32
  40c25c:	fa00 f205 	lsl.w	r2, r0, r5
  40c260:	ea4e 0e02 	orr.w	lr, lr, r2
  40c264:	fa20 f304 	lsr.w	r3, r0, r4
  40c268:	fa01 f205 	lsl.w	r2, r1, r5
  40c26c:	ea43 0302 	orr.w	r3, r3, r2
  40c270:	fa21 f004 	lsr.w	r0, r1, r4
  40c274:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40c278:	fa21 f204 	lsr.w	r2, r1, r4
  40c27c:	ea20 0002 	bic.w	r0, r0, r2
  40c280:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  40c284:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40c288:	bf08      	it	eq
  40c28a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40c28e:	bd70      	pop	{r4, r5, r6, pc}
  40c290:	f094 0f00 	teq	r4, #0
  40c294:	d10f      	bne.n	40c2b6 <__aeabi_dmul+0x1c2>
  40c296:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  40c29a:	0040      	lsls	r0, r0, #1
  40c29c:	eb41 0101 	adc.w	r1, r1, r1
  40c2a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40c2a4:	bf08      	it	eq
  40c2a6:	3c01      	subeq	r4, #1
  40c2a8:	d0f7      	beq.n	40c29a <__aeabi_dmul+0x1a6>
  40c2aa:	ea41 0106 	orr.w	r1, r1, r6
  40c2ae:	f095 0f00 	teq	r5, #0
  40c2b2:	bf18      	it	ne
  40c2b4:	4770      	bxne	lr
  40c2b6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  40c2ba:	0052      	lsls	r2, r2, #1
  40c2bc:	eb43 0303 	adc.w	r3, r3, r3
  40c2c0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  40c2c4:	bf08      	it	eq
  40c2c6:	3d01      	subeq	r5, #1
  40c2c8:	d0f7      	beq.n	40c2ba <__aeabi_dmul+0x1c6>
  40c2ca:	ea43 0306 	orr.w	r3, r3, r6
  40c2ce:	4770      	bx	lr
  40c2d0:	ea94 0f0c 	teq	r4, ip
  40c2d4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40c2d8:	bf18      	it	ne
  40c2da:	ea95 0f0c 	teqne	r5, ip
  40c2de:	d00c      	beq.n	40c2fa <__aeabi_dmul+0x206>
  40c2e0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40c2e4:	bf18      	it	ne
  40c2e6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40c2ea:	d1d1      	bne.n	40c290 <__aeabi_dmul+0x19c>
  40c2ec:	ea81 0103 	eor.w	r1, r1, r3
  40c2f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40c2f4:	f04f 0000 	mov.w	r0, #0
  40c2f8:	bd70      	pop	{r4, r5, r6, pc}
  40c2fa:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40c2fe:	bf06      	itte	eq
  40c300:	4610      	moveq	r0, r2
  40c302:	4619      	moveq	r1, r3
  40c304:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40c308:	d019      	beq.n	40c33e <__aeabi_dmul+0x24a>
  40c30a:	ea94 0f0c 	teq	r4, ip
  40c30e:	d102      	bne.n	40c316 <__aeabi_dmul+0x222>
  40c310:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  40c314:	d113      	bne.n	40c33e <__aeabi_dmul+0x24a>
  40c316:	ea95 0f0c 	teq	r5, ip
  40c31a:	d105      	bne.n	40c328 <__aeabi_dmul+0x234>
  40c31c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  40c320:	bf1c      	itt	ne
  40c322:	4610      	movne	r0, r2
  40c324:	4619      	movne	r1, r3
  40c326:	d10a      	bne.n	40c33e <__aeabi_dmul+0x24a>
  40c328:	ea81 0103 	eor.w	r1, r1, r3
  40c32c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40c330:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40c334:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40c338:	f04f 0000 	mov.w	r0, #0
  40c33c:	bd70      	pop	{r4, r5, r6, pc}
  40c33e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40c342:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  40c346:	bd70      	pop	{r4, r5, r6, pc}

0040c348 <__aeabi_ddiv>:
  40c348:	b570      	push	{r4, r5, r6, lr}
  40c34a:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40c34e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40c352:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40c356:	bf1d      	ittte	ne
  40c358:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  40c35c:	ea94 0f0c 	teqne	r4, ip
  40c360:	ea95 0f0c 	teqne	r5, ip
  40c364:	f000 f8a7 	bleq	40c4b6 <__aeabi_ddiv+0x16e>
  40c368:	eba4 0405 	sub.w	r4, r4, r5
  40c36c:	ea81 0e03 	eor.w	lr, r1, r3
  40c370:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40c374:	ea4f 3101 	mov.w	r1, r1, lsl #12
  40c378:	f000 8088 	beq.w	40c48c <__aeabi_ddiv+0x144>
  40c37c:	ea4f 3303 	mov.w	r3, r3, lsl #12
  40c380:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  40c384:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  40c388:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  40c38c:	ea4f 2202 	mov.w	r2, r2, lsl #8
  40c390:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  40c394:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  40c398:	ea4f 2600 	mov.w	r6, r0, lsl #8
  40c39c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  40c3a0:	429d      	cmp	r5, r3
  40c3a2:	bf08      	it	eq
  40c3a4:	4296      	cmpeq	r6, r2
  40c3a6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  40c3aa:	f504 7440 	add.w	r4, r4, #768	; 0x300
  40c3ae:	d202      	bcs.n	40c3b6 <__aeabi_ddiv+0x6e>
  40c3b0:	085b      	lsrs	r3, r3, #1
  40c3b2:	ea4f 0232 	mov.w	r2, r2, rrx
  40c3b6:	1ab6      	subs	r6, r6, r2
  40c3b8:	eb65 0503 	sbc.w	r5, r5, r3
  40c3bc:	085b      	lsrs	r3, r3, #1
  40c3be:	ea4f 0232 	mov.w	r2, r2, rrx
  40c3c2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  40c3c6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  40c3ca:	ebb6 0e02 	subs.w	lr, r6, r2
  40c3ce:	eb75 0e03 	sbcs.w	lr, r5, r3
  40c3d2:	bf22      	ittt	cs
  40c3d4:	1ab6      	subcs	r6, r6, r2
  40c3d6:	4675      	movcs	r5, lr
  40c3d8:	ea40 000c 	orrcs.w	r0, r0, ip
  40c3dc:	085b      	lsrs	r3, r3, #1
  40c3de:	ea4f 0232 	mov.w	r2, r2, rrx
  40c3e2:	ebb6 0e02 	subs.w	lr, r6, r2
  40c3e6:	eb75 0e03 	sbcs.w	lr, r5, r3
  40c3ea:	bf22      	ittt	cs
  40c3ec:	1ab6      	subcs	r6, r6, r2
  40c3ee:	4675      	movcs	r5, lr
  40c3f0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  40c3f4:	085b      	lsrs	r3, r3, #1
  40c3f6:	ea4f 0232 	mov.w	r2, r2, rrx
  40c3fa:	ebb6 0e02 	subs.w	lr, r6, r2
  40c3fe:	eb75 0e03 	sbcs.w	lr, r5, r3
  40c402:	bf22      	ittt	cs
  40c404:	1ab6      	subcs	r6, r6, r2
  40c406:	4675      	movcs	r5, lr
  40c408:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  40c40c:	085b      	lsrs	r3, r3, #1
  40c40e:	ea4f 0232 	mov.w	r2, r2, rrx
  40c412:	ebb6 0e02 	subs.w	lr, r6, r2
  40c416:	eb75 0e03 	sbcs.w	lr, r5, r3
  40c41a:	bf22      	ittt	cs
  40c41c:	1ab6      	subcs	r6, r6, r2
  40c41e:	4675      	movcs	r5, lr
  40c420:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  40c424:	ea55 0e06 	orrs.w	lr, r5, r6
  40c428:	d018      	beq.n	40c45c <__aeabi_ddiv+0x114>
  40c42a:	ea4f 1505 	mov.w	r5, r5, lsl #4
  40c42e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  40c432:	ea4f 1606 	mov.w	r6, r6, lsl #4
  40c436:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  40c43a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  40c43e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  40c442:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  40c446:	d1c0      	bne.n	40c3ca <__aeabi_ddiv+0x82>
  40c448:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40c44c:	d10b      	bne.n	40c466 <__aeabi_ddiv+0x11e>
  40c44e:	ea41 0100 	orr.w	r1, r1, r0
  40c452:	f04f 0000 	mov.w	r0, #0
  40c456:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  40c45a:	e7b6      	b.n	40c3ca <__aeabi_ddiv+0x82>
  40c45c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40c460:	bf04      	itt	eq
  40c462:	4301      	orreq	r1, r0
  40c464:	2000      	moveq	r0, #0
  40c466:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40c46a:	bf88      	it	hi
  40c46c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40c470:	f63f aeaf 	bhi.w	40c1d2 <__aeabi_dmul+0xde>
  40c474:	ebb5 0c03 	subs.w	ip, r5, r3
  40c478:	bf04      	itt	eq
  40c47a:	ebb6 0c02 	subseq.w	ip, r6, r2
  40c47e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40c482:	f150 0000 	adcs.w	r0, r0, #0
  40c486:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40c48a:	bd70      	pop	{r4, r5, r6, pc}
  40c48c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  40c490:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  40c494:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  40c498:	bfc2      	ittt	gt
  40c49a:	ebd4 050c 	rsbsgt	r5, r4, ip
  40c49e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40c4a2:	bd70      	popgt	{r4, r5, r6, pc}
  40c4a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40c4a8:	f04f 0e00 	mov.w	lr, #0
  40c4ac:	3c01      	subs	r4, #1
  40c4ae:	e690      	b.n	40c1d2 <__aeabi_dmul+0xde>
  40c4b0:	ea45 0e06 	orr.w	lr, r5, r6
  40c4b4:	e68d      	b.n	40c1d2 <__aeabi_dmul+0xde>
  40c4b6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40c4ba:	ea94 0f0c 	teq	r4, ip
  40c4be:	bf08      	it	eq
  40c4c0:	ea95 0f0c 	teqeq	r5, ip
  40c4c4:	f43f af3b 	beq.w	40c33e <__aeabi_dmul+0x24a>
  40c4c8:	ea94 0f0c 	teq	r4, ip
  40c4cc:	d10a      	bne.n	40c4e4 <__aeabi_ddiv+0x19c>
  40c4ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40c4d2:	f47f af34 	bne.w	40c33e <__aeabi_dmul+0x24a>
  40c4d6:	ea95 0f0c 	teq	r5, ip
  40c4da:	f47f af25 	bne.w	40c328 <__aeabi_dmul+0x234>
  40c4de:	4610      	mov	r0, r2
  40c4e0:	4619      	mov	r1, r3
  40c4e2:	e72c      	b.n	40c33e <__aeabi_dmul+0x24a>
  40c4e4:	ea95 0f0c 	teq	r5, ip
  40c4e8:	d106      	bne.n	40c4f8 <__aeabi_ddiv+0x1b0>
  40c4ea:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40c4ee:	f43f aefd 	beq.w	40c2ec <__aeabi_dmul+0x1f8>
  40c4f2:	4610      	mov	r0, r2
  40c4f4:	4619      	mov	r1, r3
  40c4f6:	e722      	b.n	40c33e <__aeabi_dmul+0x24a>
  40c4f8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40c4fc:	bf18      	it	ne
  40c4fe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40c502:	f47f aec5 	bne.w	40c290 <__aeabi_dmul+0x19c>
  40c506:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  40c50a:	f47f af0d 	bne.w	40c328 <__aeabi_dmul+0x234>
  40c50e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  40c512:	f47f aeeb 	bne.w	40c2ec <__aeabi_dmul+0x1f8>
  40c516:	e712      	b.n	40c33e <__aeabi_dmul+0x24a>

0040c518 <__gedf2>:
  40c518:	f04f 3cff 	mov.w	ip, #4294967295
  40c51c:	e006      	b.n	40c52c <__cmpdf2+0x4>
  40c51e:	bf00      	nop

0040c520 <__ledf2>:
  40c520:	f04f 0c01 	mov.w	ip, #1
  40c524:	e002      	b.n	40c52c <__cmpdf2+0x4>
  40c526:	bf00      	nop

0040c528 <__cmpdf2>:
  40c528:	f04f 0c01 	mov.w	ip, #1
  40c52c:	f84d cd04 	str.w	ip, [sp, #-4]!
  40c530:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40c534:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40c538:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40c53c:	bf18      	it	ne
  40c53e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  40c542:	d01b      	beq.n	40c57c <__cmpdf2+0x54>
  40c544:	b001      	add	sp, #4
  40c546:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  40c54a:	bf0c      	ite	eq
  40c54c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  40c550:	ea91 0f03 	teqne	r1, r3
  40c554:	bf02      	ittt	eq
  40c556:	ea90 0f02 	teqeq	r0, r2
  40c55a:	2000      	moveq	r0, #0
  40c55c:	4770      	bxeq	lr
  40c55e:	f110 0f00 	cmn.w	r0, #0
  40c562:	ea91 0f03 	teq	r1, r3
  40c566:	bf58      	it	pl
  40c568:	4299      	cmppl	r1, r3
  40c56a:	bf08      	it	eq
  40c56c:	4290      	cmpeq	r0, r2
  40c56e:	bf2c      	ite	cs
  40c570:	17d8      	asrcs	r0, r3, #31
  40c572:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  40c576:	f040 0001 	orr.w	r0, r0, #1
  40c57a:	4770      	bx	lr
  40c57c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40c580:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40c584:	d102      	bne.n	40c58c <__cmpdf2+0x64>
  40c586:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40c58a:	d107      	bne.n	40c59c <__cmpdf2+0x74>
  40c58c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40c590:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40c594:	d1d6      	bne.n	40c544 <__cmpdf2+0x1c>
  40c596:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40c59a:	d0d3      	beq.n	40c544 <__cmpdf2+0x1c>
  40c59c:	f85d 0b04 	ldr.w	r0, [sp], #4
  40c5a0:	4770      	bx	lr
  40c5a2:	bf00      	nop

0040c5a4 <__aeabi_cdrcmple>:
  40c5a4:	4684      	mov	ip, r0
  40c5a6:	4610      	mov	r0, r2
  40c5a8:	4662      	mov	r2, ip
  40c5aa:	468c      	mov	ip, r1
  40c5ac:	4619      	mov	r1, r3
  40c5ae:	4663      	mov	r3, ip
  40c5b0:	e000      	b.n	40c5b4 <__aeabi_cdcmpeq>
  40c5b2:	bf00      	nop

0040c5b4 <__aeabi_cdcmpeq>:
  40c5b4:	b501      	push	{r0, lr}
  40c5b6:	f7ff ffb7 	bl	40c528 <__cmpdf2>
  40c5ba:	2800      	cmp	r0, #0
  40c5bc:	bf48      	it	mi
  40c5be:	f110 0f00 	cmnmi.w	r0, #0
  40c5c2:	bd01      	pop	{r0, pc}

0040c5c4 <__aeabi_dcmpeq>:
  40c5c4:	f84d ed08 	str.w	lr, [sp, #-8]!
  40c5c8:	f7ff fff4 	bl	40c5b4 <__aeabi_cdcmpeq>
  40c5cc:	bf0c      	ite	eq
  40c5ce:	2001      	moveq	r0, #1
  40c5d0:	2000      	movne	r0, #0
  40c5d2:	f85d fb08 	ldr.w	pc, [sp], #8
  40c5d6:	bf00      	nop

0040c5d8 <__aeabi_dcmplt>:
  40c5d8:	f84d ed08 	str.w	lr, [sp, #-8]!
  40c5dc:	f7ff ffea 	bl	40c5b4 <__aeabi_cdcmpeq>
  40c5e0:	bf34      	ite	cc
  40c5e2:	2001      	movcc	r0, #1
  40c5e4:	2000      	movcs	r0, #0
  40c5e6:	f85d fb08 	ldr.w	pc, [sp], #8
  40c5ea:	bf00      	nop

0040c5ec <__aeabi_dcmple>:
  40c5ec:	f84d ed08 	str.w	lr, [sp, #-8]!
  40c5f0:	f7ff ffe0 	bl	40c5b4 <__aeabi_cdcmpeq>
  40c5f4:	bf94      	ite	ls
  40c5f6:	2001      	movls	r0, #1
  40c5f8:	2000      	movhi	r0, #0
  40c5fa:	f85d fb08 	ldr.w	pc, [sp], #8
  40c5fe:	bf00      	nop

0040c600 <__aeabi_dcmpge>:
  40c600:	f84d ed08 	str.w	lr, [sp, #-8]!
  40c604:	f7ff ffce 	bl	40c5a4 <__aeabi_cdrcmple>
  40c608:	bf94      	ite	ls
  40c60a:	2001      	movls	r0, #1
  40c60c:	2000      	movhi	r0, #0
  40c60e:	f85d fb08 	ldr.w	pc, [sp], #8
  40c612:	bf00      	nop

0040c614 <__aeabi_dcmpgt>:
  40c614:	f84d ed08 	str.w	lr, [sp, #-8]!
  40c618:	f7ff ffc4 	bl	40c5a4 <__aeabi_cdrcmple>
  40c61c:	bf34      	ite	cc
  40c61e:	2001      	movcc	r0, #1
  40c620:	2000      	movcs	r0, #0
  40c622:	f85d fb08 	ldr.w	pc, [sp], #8
  40c626:	bf00      	nop

0040c628 <__aeabi_dcmpun>:
  40c628:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40c62c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40c630:	d102      	bne.n	40c638 <__aeabi_dcmpun+0x10>
  40c632:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40c636:	d10a      	bne.n	40c64e <__aeabi_dcmpun+0x26>
  40c638:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40c63c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40c640:	d102      	bne.n	40c648 <__aeabi_dcmpun+0x20>
  40c642:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40c646:	d102      	bne.n	40c64e <__aeabi_dcmpun+0x26>
  40c648:	f04f 0000 	mov.w	r0, #0
  40c64c:	4770      	bx	lr
  40c64e:	f04f 0001 	mov.w	r0, #1
  40c652:	4770      	bx	lr

0040c654 <__aeabi_d2iz>:
  40c654:	ea4f 0241 	mov.w	r2, r1, lsl #1
  40c658:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  40c65c:	d215      	bcs.n	40c68a <__aeabi_d2iz+0x36>
  40c65e:	d511      	bpl.n	40c684 <__aeabi_d2iz+0x30>
  40c660:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  40c664:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  40c668:	d912      	bls.n	40c690 <__aeabi_d2iz+0x3c>
  40c66a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40c66e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40c672:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  40c676:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40c67a:	fa23 f002 	lsr.w	r0, r3, r2
  40c67e:	bf18      	it	ne
  40c680:	4240      	negne	r0, r0
  40c682:	4770      	bx	lr
  40c684:	f04f 0000 	mov.w	r0, #0
  40c688:	4770      	bx	lr
  40c68a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  40c68e:	d105      	bne.n	40c69c <__aeabi_d2iz+0x48>
  40c690:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  40c694:	bf08      	it	eq
  40c696:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  40c69a:	4770      	bx	lr
  40c69c:	f04f 0000 	mov.w	r0, #0
  40c6a0:	4770      	bx	lr
  40c6a2:	bf00      	nop

0040c6a4 <__aeabi_uldivmod>:
  40c6a4:	b953      	cbnz	r3, 40c6bc <__aeabi_uldivmod+0x18>
  40c6a6:	b94a      	cbnz	r2, 40c6bc <__aeabi_uldivmod+0x18>
  40c6a8:	2900      	cmp	r1, #0
  40c6aa:	bf08      	it	eq
  40c6ac:	2800      	cmpeq	r0, #0
  40c6ae:	bf1c      	itt	ne
  40c6b0:	f04f 31ff 	movne.w	r1, #4294967295
  40c6b4:	f04f 30ff 	movne.w	r0, #4294967295
  40c6b8:	f000 b97a 	b.w	40c9b0 <__aeabi_idiv0>
  40c6bc:	f1ad 0c08 	sub.w	ip, sp, #8
  40c6c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  40c6c4:	f000 f806 	bl	40c6d4 <__udivmoddi4>
  40c6c8:	f8dd e004 	ldr.w	lr, [sp, #4]
  40c6cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40c6d0:	b004      	add	sp, #16
  40c6d2:	4770      	bx	lr

0040c6d4 <__udivmoddi4>:
  40c6d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40c6d8:	468c      	mov	ip, r1
  40c6da:	460d      	mov	r5, r1
  40c6dc:	4604      	mov	r4, r0
  40c6de:	9e08      	ldr	r6, [sp, #32]
  40c6e0:	2b00      	cmp	r3, #0
  40c6e2:	d151      	bne.n	40c788 <__udivmoddi4+0xb4>
  40c6e4:	428a      	cmp	r2, r1
  40c6e6:	4617      	mov	r7, r2
  40c6e8:	d96d      	bls.n	40c7c6 <__udivmoddi4+0xf2>
  40c6ea:	fab2 fe82 	clz	lr, r2
  40c6ee:	f1be 0f00 	cmp.w	lr, #0
  40c6f2:	d00b      	beq.n	40c70c <__udivmoddi4+0x38>
  40c6f4:	f1ce 0c20 	rsb	ip, lr, #32
  40c6f8:	fa01 f50e 	lsl.w	r5, r1, lr
  40c6fc:	fa20 fc0c 	lsr.w	ip, r0, ip
  40c700:	fa02 f70e 	lsl.w	r7, r2, lr
  40c704:	ea4c 0c05 	orr.w	ip, ip, r5
  40c708:	fa00 f40e 	lsl.w	r4, r0, lr
  40c70c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  40c710:	0c25      	lsrs	r5, r4, #16
  40c712:	fbbc f8fa 	udiv	r8, ip, sl
  40c716:	fa1f f987 	uxth.w	r9, r7
  40c71a:	fb0a cc18 	mls	ip, sl, r8, ip
  40c71e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  40c722:	fb08 f309 	mul.w	r3, r8, r9
  40c726:	42ab      	cmp	r3, r5
  40c728:	d90a      	bls.n	40c740 <__udivmoddi4+0x6c>
  40c72a:	19ed      	adds	r5, r5, r7
  40c72c:	f108 32ff 	add.w	r2, r8, #4294967295
  40c730:	f080 8123 	bcs.w	40c97a <__udivmoddi4+0x2a6>
  40c734:	42ab      	cmp	r3, r5
  40c736:	f240 8120 	bls.w	40c97a <__udivmoddi4+0x2a6>
  40c73a:	f1a8 0802 	sub.w	r8, r8, #2
  40c73e:	443d      	add	r5, r7
  40c740:	1aed      	subs	r5, r5, r3
  40c742:	b2a4      	uxth	r4, r4
  40c744:	fbb5 f0fa 	udiv	r0, r5, sl
  40c748:	fb0a 5510 	mls	r5, sl, r0, r5
  40c74c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  40c750:	fb00 f909 	mul.w	r9, r0, r9
  40c754:	45a1      	cmp	r9, r4
  40c756:	d909      	bls.n	40c76c <__udivmoddi4+0x98>
  40c758:	19e4      	adds	r4, r4, r7
  40c75a:	f100 33ff 	add.w	r3, r0, #4294967295
  40c75e:	f080 810a 	bcs.w	40c976 <__udivmoddi4+0x2a2>
  40c762:	45a1      	cmp	r9, r4
  40c764:	f240 8107 	bls.w	40c976 <__udivmoddi4+0x2a2>
  40c768:	3802      	subs	r0, #2
  40c76a:	443c      	add	r4, r7
  40c76c:	eba4 0409 	sub.w	r4, r4, r9
  40c770:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  40c774:	2100      	movs	r1, #0
  40c776:	2e00      	cmp	r6, #0
  40c778:	d061      	beq.n	40c83e <__udivmoddi4+0x16a>
  40c77a:	fa24 f40e 	lsr.w	r4, r4, lr
  40c77e:	2300      	movs	r3, #0
  40c780:	6034      	str	r4, [r6, #0]
  40c782:	6073      	str	r3, [r6, #4]
  40c784:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40c788:	428b      	cmp	r3, r1
  40c78a:	d907      	bls.n	40c79c <__udivmoddi4+0xc8>
  40c78c:	2e00      	cmp	r6, #0
  40c78e:	d054      	beq.n	40c83a <__udivmoddi4+0x166>
  40c790:	2100      	movs	r1, #0
  40c792:	e886 0021 	stmia.w	r6, {r0, r5}
  40c796:	4608      	mov	r0, r1
  40c798:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40c79c:	fab3 f183 	clz	r1, r3
  40c7a0:	2900      	cmp	r1, #0
  40c7a2:	f040 808e 	bne.w	40c8c2 <__udivmoddi4+0x1ee>
  40c7a6:	42ab      	cmp	r3, r5
  40c7a8:	d302      	bcc.n	40c7b0 <__udivmoddi4+0xdc>
  40c7aa:	4282      	cmp	r2, r0
  40c7ac:	f200 80fa 	bhi.w	40c9a4 <__udivmoddi4+0x2d0>
  40c7b0:	1a84      	subs	r4, r0, r2
  40c7b2:	eb65 0503 	sbc.w	r5, r5, r3
  40c7b6:	2001      	movs	r0, #1
  40c7b8:	46ac      	mov	ip, r5
  40c7ba:	2e00      	cmp	r6, #0
  40c7bc:	d03f      	beq.n	40c83e <__udivmoddi4+0x16a>
  40c7be:	e886 1010 	stmia.w	r6, {r4, ip}
  40c7c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40c7c6:	b912      	cbnz	r2, 40c7ce <__udivmoddi4+0xfa>
  40c7c8:	2701      	movs	r7, #1
  40c7ca:	fbb7 f7f2 	udiv	r7, r7, r2
  40c7ce:	fab7 fe87 	clz	lr, r7
  40c7d2:	f1be 0f00 	cmp.w	lr, #0
  40c7d6:	d134      	bne.n	40c842 <__udivmoddi4+0x16e>
  40c7d8:	1beb      	subs	r3, r5, r7
  40c7da:	0c3a      	lsrs	r2, r7, #16
  40c7dc:	fa1f fc87 	uxth.w	ip, r7
  40c7e0:	2101      	movs	r1, #1
  40c7e2:	fbb3 f8f2 	udiv	r8, r3, r2
  40c7e6:	0c25      	lsrs	r5, r4, #16
  40c7e8:	fb02 3318 	mls	r3, r2, r8, r3
  40c7ec:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  40c7f0:	fb0c f308 	mul.w	r3, ip, r8
  40c7f4:	42ab      	cmp	r3, r5
  40c7f6:	d907      	bls.n	40c808 <__udivmoddi4+0x134>
  40c7f8:	19ed      	adds	r5, r5, r7
  40c7fa:	f108 30ff 	add.w	r0, r8, #4294967295
  40c7fe:	d202      	bcs.n	40c806 <__udivmoddi4+0x132>
  40c800:	42ab      	cmp	r3, r5
  40c802:	f200 80d1 	bhi.w	40c9a8 <__udivmoddi4+0x2d4>
  40c806:	4680      	mov	r8, r0
  40c808:	1aed      	subs	r5, r5, r3
  40c80a:	b2a3      	uxth	r3, r4
  40c80c:	fbb5 f0f2 	udiv	r0, r5, r2
  40c810:	fb02 5510 	mls	r5, r2, r0, r5
  40c814:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  40c818:	fb0c fc00 	mul.w	ip, ip, r0
  40c81c:	45a4      	cmp	ip, r4
  40c81e:	d907      	bls.n	40c830 <__udivmoddi4+0x15c>
  40c820:	19e4      	adds	r4, r4, r7
  40c822:	f100 33ff 	add.w	r3, r0, #4294967295
  40c826:	d202      	bcs.n	40c82e <__udivmoddi4+0x15a>
  40c828:	45a4      	cmp	ip, r4
  40c82a:	f200 80b8 	bhi.w	40c99e <__udivmoddi4+0x2ca>
  40c82e:	4618      	mov	r0, r3
  40c830:	eba4 040c 	sub.w	r4, r4, ip
  40c834:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  40c838:	e79d      	b.n	40c776 <__udivmoddi4+0xa2>
  40c83a:	4631      	mov	r1, r6
  40c83c:	4630      	mov	r0, r6
  40c83e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40c842:	f1ce 0420 	rsb	r4, lr, #32
  40c846:	fa05 f30e 	lsl.w	r3, r5, lr
  40c84a:	fa07 f70e 	lsl.w	r7, r7, lr
  40c84e:	fa20 f804 	lsr.w	r8, r0, r4
  40c852:	0c3a      	lsrs	r2, r7, #16
  40c854:	fa25 f404 	lsr.w	r4, r5, r4
  40c858:	ea48 0803 	orr.w	r8, r8, r3
  40c85c:	fbb4 f1f2 	udiv	r1, r4, r2
  40c860:	ea4f 4518 	mov.w	r5, r8, lsr #16
  40c864:	fb02 4411 	mls	r4, r2, r1, r4
  40c868:	fa1f fc87 	uxth.w	ip, r7
  40c86c:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  40c870:	fb01 f30c 	mul.w	r3, r1, ip
  40c874:	42ab      	cmp	r3, r5
  40c876:	fa00 f40e 	lsl.w	r4, r0, lr
  40c87a:	d909      	bls.n	40c890 <__udivmoddi4+0x1bc>
  40c87c:	19ed      	adds	r5, r5, r7
  40c87e:	f101 30ff 	add.w	r0, r1, #4294967295
  40c882:	f080 808a 	bcs.w	40c99a <__udivmoddi4+0x2c6>
  40c886:	42ab      	cmp	r3, r5
  40c888:	f240 8087 	bls.w	40c99a <__udivmoddi4+0x2c6>
  40c88c:	3902      	subs	r1, #2
  40c88e:	443d      	add	r5, r7
  40c890:	1aeb      	subs	r3, r5, r3
  40c892:	fa1f f588 	uxth.w	r5, r8
  40c896:	fbb3 f0f2 	udiv	r0, r3, r2
  40c89a:	fb02 3310 	mls	r3, r2, r0, r3
  40c89e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  40c8a2:	fb00 f30c 	mul.w	r3, r0, ip
  40c8a6:	42ab      	cmp	r3, r5
  40c8a8:	d907      	bls.n	40c8ba <__udivmoddi4+0x1e6>
  40c8aa:	19ed      	adds	r5, r5, r7
  40c8ac:	f100 38ff 	add.w	r8, r0, #4294967295
  40c8b0:	d26f      	bcs.n	40c992 <__udivmoddi4+0x2be>
  40c8b2:	42ab      	cmp	r3, r5
  40c8b4:	d96d      	bls.n	40c992 <__udivmoddi4+0x2be>
  40c8b6:	3802      	subs	r0, #2
  40c8b8:	443d      	add	r5, r7
  40c8ba:	1aeb      	subs	r3, r5, r3
  40c8bc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  40c8c0:	e78f      	b.n	40c7e2 <__udivmoddi4+0x10e>
  40c8c2:	f1c1 0720 	rsb	r7, r1, #32
  40c8c6:	fa22 f807 	lsr.w	r8, r2, r7
  40c8ca:	408b      	lsls	r3, r1
  40c8cc:	fa05 f401 	lsl.w	r4, r5, r1
  40c8d0:	ea48 0303 	orr.w	r3, r8, r3
  40c8d4:	fa20 fe07 	lsr.w	lr, r0, r7
  40c8d8:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  40c8dc:	40fd      	lsrs	r5, r7
  40c8de:	ea4e 0e04 	orr.w	lr, lr, r4
  40c8e2:	fbb5 f9fc 	udiv	r9, r5, ip
  40c8e6:	ea4f 441e 	mov.w	r4, lr, lsr #16
  40c8ea:	fb0c 5519 	mls	r5, ip, r9, r5
  40c8ee:	fa1f f883 	uxth.w	r8, r3
  40c8f2:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  40c8f6:	fb09 f408 	mul.w	r4, r9, r8
  40c8fa:	42ac      	cmp	r4, r5
  40c8fc:	fa02 f201 	lsl.w	r2, r2, r1
  40c900:	fa00 fa01 	lsl.w	sl, r0, r1
  40c904:	d908      	bls.n	40c918 <__udivmoddi4+0x244>
  40c906:	18ed      	adds	r5, r5, r3
  40c908:	f109 30ff 	add.w	r0, r9, #4294967295
  40c90c:	d243      	bcs.n	40c996 <__udivmoddi4+0x2c2>
  40c90e:	42ac      	cmp	r4, r5
  40c910:	d941      	bls.n	40c996 <__udivmoddi4+0x2c2>
  40c912:	f1a9 0902 	sub.w	r9, r9, #2
  40c916:	441d      	add	r5, r3
  40c918:	1b2d      	subs	r5, r5, r4
  40c91a:	fa1f fe8e 	uxth.w	lr, lr
  40c91e:	fbb5 f0fc 	udiv	r0, r5, ip
  40c922:	fb0c 5510 	mls	r5, ip, r0, r5
  40c926:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  40c92a:	fb00 f808 	mul.w	r8, r0, r8
  40c92e:	45a0      	cmp	r8, r4
  40c930:	d907      	bls.n	40c942 <__udivmoddi4+0x26e>
  40c932:	18e4      	adds	r4, r4, r3
  40c934:	f100 35ff 	add.w	r5, r0, #4294967295
  40c938:	d229      	bcs.n	40c98e <__udivmoddi4+0x2ba>
  40c93a:	45a0      	cmp	r8, r4
  40c93c:	d927      	bls.n	40c98e <__udivmoddi4+0x2ba>
  40c93e:	3802      	subs	r0, #2
  40c940:	441c      	add	r4, r3
  40c942:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  40c946:	eba4 0408 	sub.w	r4, r4, r8
  40c94a:	fba0 8902 	umull	r8, r9, r0, r2
  40c94e:	454c      	cmp	r4, r9
  40c950:	46c6      	mov	lr, r8
  40c952:	464d      	mov	r5, r9
  40c954:	d315      	bcc.n	40c982 <__udivmoddi4+0x2ae>
  40c956:	d012      	beq.n	40c97e <__udivmoddi4+0x2aa>
  40c958:	b156      	cbz	r6, 40c970 <__udivmoddi4+0x29c>
  40c95a:	ebba 030e 	subs.w	r3, sl, lr
  40c95e:	eb64 0405 	sbc.w	r4, r4, r5
  40c962:	fa04 f707 	lsl.w	r7, r4, r7
  40c966:	40cb      	lsrs	r3, r1
  40c968:	431f      	orrs	r7, r3
  40c96a:	40cc      	lsrs	r4, r1
  40c96c:	6037      	str	r7, [r6, #0]
  40c96e:	6074      	str	r4, [r6, #4]
  40c970:	2100      	movs	r1, #0
  40c972:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40c976:	4618      	mov	r0, r3
  40c978:	e6f8      	b.n	40c76c <__udivmoddi4+0x98>
  40c97a:	4690      	mov	r8, r2
  40c97c:	e6e0      	b.n	40c740 <__udivmoddi4+0x6c>
  40c97e:	45c2      	cmp	sl, r8
  40c980:	d2ea      	bcs.n	40c958 <__udivmoddi4+0x284>
  40c982:	ebb8 0e02 	subs.w	lr, r8, r2
  40c986:	eb69 0503 	sbc.w	r5, r9, r3
  40c98a:	3801      	subs	r0, #1
  40c98c:	e7e4      	b.n	40c958 <__udivmoddi4+0x284>
  40c98e:	4628      	mov	r0, r5
  40c990:	e7d7      	b.n	40c942 <__udivmoddi4+0x26e>
  40c992:	4640      	mov	r0, r8
  40c994:	e791      	b.n	40c8ba <__udivmoddi4+0x1e6>
  40c996:	4681      	mov	r9, r0
  40c998:	e7be      	b.n	40c918 <__udivmoddi4+0x244>
  40c99a:	4601      	mov	r1, r0
  40c99c:	e778      	b.n	40c890 <__udivmoddi4+0x1bc>
  40c99e:	3802      	subs	r0, #2
  40c9a0:	443c      	add	r4, r7
  40c9a2:	e745      	b.n	40c830 <__udivmoddi4+0x15c>
  40c9a4:	4608      	mov	r0, r1
  40c9a6:	e708      	b.n	40c7ba <__udivmoddi4+0xe6>
  40c9a8:	f1a8 0802 	sub.w	r8, r8, #2
  40c9ac:	443d      	add	r5, r7
  40c9ae:	e72b      	b.n	40c808 <__udivmoddi4+0x134>

0040c9b0 <__aeabi_idiv0>:
  40c9b0:	4770      	bx	lr
  40c9b2:	bf00      	nop
  40c9b4:	454c4449 	.word	0x454c4449
  40c9b8:	00000000 	.word	0x00000000
  40c9bc:	51726d54 	.word	0x51726d54
  40c9c0:	00000000 	.word	0x00000000
  40c9c4:	20726d54 	.word	0x20726d54
  40c9c8:	00637653 	.word	0x00637653

0040c9cc <__FUNCTION__.11637>:
  40c9cc:	625f6d6e 695f7375 6c74636f 00000000     nm_bus_ioctl....
  40c9dc:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
  40c9ec:	00005d64 61766e49 2064696c 54434f49     d]..Invalid IOCT
  40c9fc:	6f63204c 6e616d6d 000a2164 0000000d     L command!......

0040ca0c <__FUNCTION__.9901>:
  40ca0c:	5f666968 646e6573 00000000              hif_send....

0040ca18 <__FUNCTION__.9911>:
  40ca18:	5f666968 00727369                       hif_isr.

0040ca20 <__FUNCTION__.9917>:
  40ca20:	5f666968 646e6168 695f656c 00007273     hif_handle_isr..

0040ca30 <__FUNCTION__.9932>:
  40ca30:	5f666968 65636572 00657669              hif_receive.

0040ca3c <__FUNCTION__.9947>:
  40ca3c:	5f666968 69676572 72657473 0062635f     hif_register_cb.
  40ca4c:	66696828 49572029 485f4946 5f54534f     (hif) WIFI_HOST_
  40ca5c:	5f564352 4c525443 6220315f 66207375     RCV_CTRL_1 bus f
  40ca6c:	0a6c6961 00000000 66696828 64612029     ail.....(hif) ad
  40ca7c:	73657264 75622073 61662073 000a6c69     dress bus fail..
  40ca8c:	66696828 6f432029 70757272 20646574     (hif) Corrupted 
  40ca9c:	6b636170 53207465 20657a69 7525203d     packet Size = %u
  40caac:	204c3c20 7525203d 2047202c 7525203d      <L = %u, G = %u
  40cabc:	504f202c 25203d20 3e583230 0000000a     , OP = %02X>....
  40cacc:	66696828 6e692029 696c6176 72672064     (hif) invalid gr
  40cadc:	2070756f 000a4449 66696828 6f682029     oup ID..(hif) ho
  40caec:	61207473 64207070 276e6469 65732074     st app didn't se
  40cafc:	58522074 6e6f4420 00000a65 66696828     t RX Done...(hif
  40cb0c:	72572029 20676e6f 657a6953 0000000a     ) Wrong Size....
  40cb1c:	66696828 61462029 2065736c 65746e69     (hif) False inte
  40cb2c:	70757272 6c252074 00000078 66696828     rrupt %lx...(hif
  40cb3c:	61462029 74206c69 6552206f 69206461     ) Fail to Read i
  40cb4c:	7265746e 74707572 67657220 0000000a     nterrupt reg....
  40cb5c:	66696828 41462029 74204c49 6177206f     (hif) FAIL to wa
  40cb6c:	7075656b 65687420 69686320 00000a70     keup the chip...
  40cb7c:	46494828 61462029 74206c69 6168206f     (HIF) Fail to ha
  40cb8c:	656c646e 746e6920 75727265 25207470     ndle interrupt %
  40cb9c:	72742064 67412079 2e6e6961 00000a2e     d try Again.....
  40cbac:	66696820 6365725f 65766965 6e49203a      hif_receive: In
  40cbbc:	696c6176 72612064 656d7567 000a746e     valid argument..
  40cbcc:	20505041 75716552 65747365 69532064     APP Requested Si
  40cbdc:	6920657a 616c2073 72656772 61687420     ze is larger tha
  40cbec:	6874206e 65722065 65766963 75622064     n the recived bu
  40cbfc:	72656666 7a697320 253c2065 253c3e64     ffer size <%d><%
  40cc0c:	000a3e64 20505041 75716552 65747365     d>..APP Requeste
  40cc1c:	64412064 73657264 65622073 646e6f79     d Address beyond
  40cc2c:	65687420 63657220 64657669 66756220      the recived buf
  40cc3c:	20726566 72646461 20737365 20646e61     fer address and 
  40cc4c:	676e656c 000a6874 20705247 6425203f     length..GRp ? %d
  40cc5c:	0000000a 46494828 69614629 6f74206c     ....(HIF)Fail to
  40cc6c:	6b617720 74207075 63206568 0a706968      wakup the chip.
  40cc7c:	00000000                                ....

0040cc80 <__FUNCTION__.9874>:
  40cc80:	5f6d326d 69666977 0062635f              m2m_wifi_cb.

0040cc8c <__FUNCTION__.9898>:
  40cc8c:	5f6d326d 69666977 696e695f 00000074     m2m_wifi_init...

0040cc9c <__FUNCTION__.9926>:
  40cc9c:	5f6d326d 69666977 6e6f635f 7463656e     m2m_wifi_connect
  40ccac:	0063735f 50504128 4e492829 00294f46     _sc.(APP)(INFO).
  40ccbc:	666e6f43 7463696c 49206465 20222050     Conflicted IP " 
  40cccc:	252e7525 75252e75 2075252e 000a2022     %u.%u.%u.%u " ..
  40ccdc:	20514552 20746f4e 69666564 2064656e     REQ Not defined 
  40ccec:	000a6425 2079654b 6e207369 7620746f     %d..Key is not v
  40ccfc:	64696c61 0000000a 61766e49 2064696c     alid....Invalid 
  40cd0c:	0a79654b 00000000 44495353 4e454c20     Key.....SSID LEN
  40cd1c:	564e4920 44494c41 0000000a 49204843      INVALID....CH I
  40cd2c:	4c41564e 000a4449 61766e49 2064696c     NVALID..Invalid 
  40cd3c:	20706557 2079656b 65646e69 64252078     Wep key index %d
  40cd4c:	0000000a 61766e49 2064696c 20706557     ....Invalid Wep 
  40cd5c:	2079656b 676e656c 25206874 00000a64     key length %d...
  40cd6c:	6f636e49 63657272 53502074 656b204b     Incorrect PSK ke
  40cd7c:	656c2079 6874676e 0000000a 65646e75     y length....unde
  40cd8c:	656e6966 65732064 79742063 000a6570     fined sec type..
  40cd9c:	6d726946 65726177 72657620 3a202020     Firmware ver   :
  40cdac:	2e752520 252e7525 00000a75 206e694d      %u.%u.%u...Min 
  40cdbc:	76697264 76207265 3a207265 2e752520     driver ver : %u.
  40cdcc:	252e7525 00000a75 72727543 69726420     %u.%u...Curr dri
  40cddc:	20726576 3a726576 2e752520 252e7525     ver ver: %u.%u.%
  40cdec:	00000a75 6d73694d 68637461 72694620     u...Mismatch Fir
  40cdfc:	7277616d 65562065 6f697372 00000a6e     mawre Version...

0040ce0c <__FUNCTION__.9711>:
  40ce0c:	635f6d6e 656c6b6c 775f7373 00656b61     nm_clkless_wake.

0040ce1c <__FUNCTION__.9805>:
  40ce1c:	70696863 6965645f 0074696e 6c696166     chip_deinit.fail
  40ce2c:	74206465 6564206f 696e692d 6c616974     ed to de-initial
  40ce3c:	0a657a69 00000000 6f727245 68772072     ize.....Error wh
  40ce4c:	20656c69 74697277 20676e69 0a676572     ile writing reg.
  40ce5c:	00000000 6f727245 68772072 20656c69     ....Error while 
  40ce6c:	64616572 20676e69 0a676572 00000000     reading reg.....
  40ce7c:	20737542 6f727265 31282072 57202e29     Bus error (1). W
  40ce8c:	20656b61 66207075 656c6961 00000a64     ake up failed...
  40ce9c:	20737542 6f727265 32282072 57202e29     Bus error (2). W
  40ceac:	20656b61 66207075 656c6961 00000a64     ake up failed...
  40cebc:	636f6c63 7320736b 6c6c6974 46464f20     clocks still OFF
  40cecc:	6157202e 7520656b 61662070 64656c69     . Wake up failed
  40cedc:	0000000a 3a676572 2f207825 20782520     ....reg:%x / %x 
  40ceec:	0000000a                                ....

0040cef0 <__FUNCTION__.9792>:
  40cef0:	645f6d6e 695f7672 0074696e              nm_drv_init.

0040cefc <__FUNCTION__.9799>:
  40cefc:	645f6d6e 645f7672 696e6965 00000074     nm_drv_deinit...
  40cf0c:	696d6e5b 6f747320 203a5d70 70696863     [nmi stop]: chip
  40cf1c:	6965645f 2074696e 6c696166 0000000a     _deinit fail....
  40cf2c:	696d6e5b 6f747320 203a5d70 20495053     [nmi stop]: SPI 
  40cf3c:	73616c66 69642068 6c626173 61662065     flash disable fa
  40cf4c:	000a6c69 696d6e5b 6f747320 203a5d70     il..[nmi stop]: 
  40cf5c:	6c696166 696e6920 75622074 00000a73     fail init bus...
  40cf6c:	6c696166 74206465 6e65206f 656c6261     failed to enable
  40cf7c:	746e6920 75727265 2e737470 00000a2e      interrupts.....
  40cf8c:	696d6e5b 61747320 3a5d7472 69616620     [nmi start]: fai
  40cf9c:	6e69206c 62207469 000a7375 70696843     l init bus..Chip
  40cfac:	20444920 0a786c25 00000000               ID %lx.....

0040cfb8 <__FUNCTION__.9176>:
  40cfb8:	5f697073 00646d63                       spi_cmd.

0040cfc0 <__FUNCTION__.9184>:
  40cfc0:	5f697073 5f646d63 00707372              spi_cmd_rsp.

0040cfcc <__FUNCTION__.9200>:
  40cfcc:	5f697073 61746164 6165725f 00000064     spi_data_read...

0040cfdc <__FUNCTION__.9215>:
  40cfdc:	5f697073 61746164 6972775f 00006574     spi_data_write..

0040cfec <__FUNCTION__.9225>:
  40cfec:	5f697073 74697277 65725f65 00000067     spi_write_reg...

0040cffc <__FUNCTION__.9233>:
  40cffc:	735f6d6e 775f6970 65746972 00000000     nm_spi_write....

0040d00c <__FUNCTION__.9242>:
  40d00c:	5f697073 64616572 6765725f 00000000     spi_read_reg....

0040d01c <__FUNCTION__.9250>:
  40d01c:	735f6d6e 725f6970 00646165              nm_spi_read.

0040d028 <__FUNCTION__.9267>:
  40d028:	735f6d6e 695f6970 0074696e              nm_spi_init.

0040d034 <crc7_syndrome_table>:
  40d034:	1b120900 3f362d24 535a4148 777e656c     ....$-6?HAZSle~w
  40d044:	020b1019 262f343d 4a435851 6e677c75     ....=4/&QXCJu|gn
  40d054:	29203b32 0d041f16 6168737a 454c575e     2; )....zsha^WLE
  40d064:	3039222b 141d060f 78716a63 5c554e47     +"90....cjqxGNU\
  40d074:	7f766d64 5b524940 373e252c 131a0108     dmv.@IR[,%>7....
  40d084:	666f747d 424b5059 2e273c35 0a031811     }tofYPKB5<'.....
  40d094:	4d445f56 69607b72 050c171e 2128333a     V_DMr{`i....:3(!
  40d0a4:	545d464f 7079626b 1c150e07 38312a23     OF]Tkbyp....#*18
  40d0b4:	5a534841 7e776c65 121b0009 363f242d     AHSZelw~....-$?6
  40d0c4:	434a5158 676e757c 0b021910 2f263d34     XQJC|ung....4=&/
  40d0d4:	68617a73 4c455e57 2029323b 040d161f     szahW^EL;2) ....
  40d0e4:	7178636a 555c474e 39302b22 1d140f06     jcxqNG\U"+09....
  40d0f4:	3e372c25 1a130801 767f646d 525b4049     %,7>....md.vI@[R
  40d104:	272e353c 030a1118 6f667d74 4b425950     <5.'....t}foPYBK
  40d114:	0c051e17 28213a33 444d565f 6069727b     ....3:!(_VMD{ri`
  40d124:	151c070e 3138232a 5d544f46 79706b62     ....*#81FOT]bkpy
  40d134:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  40d144:	6e692064 6e726574 72206c61 20646165     d internal read 
  40d154:	746f7270 6c6f636f 74697720 52432068     protocol with CR
  40d164:	6e6f2043 6572202c 69727974 7720676e     C on, retyring w
  40d174:	20687469 20435243 2e66666f 000a2e2e     ith CRC off.....
  40d184:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  40d194:	6e692064 6e726574 72206c61 20646165     d internal read 
  40d1a4:	746f7270 6c6f636f 0a2e2e2e 00000000     protocol........
  40d1b4:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  40d1c4:	6e692064 6e726574 77206c61 65746972     d internal write
  40d1d4:	6f727020 6f636f74 6572206c 2e2e2e67      protocol reg...
  40d1e4:	0000000a 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
  40d1f4:	206c6961 20646d63 64616572 69686320     ail cmd read chi
  40d204:	64692070 0a2e2e2e 00000000 696d6e5b     p id........[nmi
  40d214:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
  40d224:	72202c64 20646165 636f6c62 2528206b     d, read block (%
  40d234:	29783830 0a2e2e2e 00000000 696d6e5b     08x)........[nmi
  40d244:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
  40d254:	65722064 6e6f7073 202c6573 64616572     d response, read
  40d264:	6f6c6220 28206b63 78383025 2e2e2e29      block (%08x)...
  40d274:	0000000a 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
  40d284:	656c6961 6c622064 206b636f 61746164     ailed block data
  40d294:	61657220 2e2e2e64 0000000a 696d6e5b      read.......[nmi
  40d2a4:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
  40d2b4:	77202c64 65746972 6f6c6220 28206b63     d, write block (
  40d2c4:	78383025 2e2e2e29 0000000a 696d6e5b     %08x).......[nmi
  40d2d4:	69707320 203a5d20 6c696146 63206465      spi ]: Failed c
  40d2e4:	7220646d 6f707365 2c65736e 69727720     md response, wri
  40d2f4:	62206574 6b636f6c 30252820 2e297838     te block (%08x).
  40d304:	000a2e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
  40d314:	656c6961 61642064 62206174 6b636f6c     ailed data block
  40d324:	646d6320 69727720 202c6574 20737562      cmd write, bus 
  40d334:	6f727265 2e2e2e72 0000000a 696d6e5b     error.......[nmi
  40d344:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
  40d354:	62206174 6b636f6c 69727720 202c6574     ta block write, 
  40d364:	20737562 6f727265 2e2e2e72 0000000a     bus error.......
  40d374:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  40d384:	61642064 62206174 6b636f6c 63726320     d data block crc
  40d394:	69727720 202c6574 20737562 6f727265      write, bus erro
  40d3a4:	2e2e2e72 0000000a 696d6e5b 69707320     r.......[nmi spi
  40d3b4:	46203a5d 656c6961 6c622064 206b636f     ]: Failed block 
  40d3c4:	61746164 69727720 2e2e6574 00000a2e     data write......
  40d3d4:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  40d3e4:	6d632064 72772064 2c657469 73756220     d cmd write, bus
  40d3f4:	72726520 2e2e726f 00000a2e 696d6e5b      error......[nmi
  40d404:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
  40d414:	65722064 6e6f7073 72206573 2c646165     d response read,
  40d424:	73756220 72726520 2e2e726f 00000a2e      bus error......
  40d434:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  40d444:	61642064 72206174 6f707365 2065736e     d data response 
  40d454:	64616572 7562202c 72652073 2e726f72     read, bus error.
  40d464:	000a2e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
  40d474:	656c6961 61642064 72206174 6f707365     ailed data respo
  40d484:	2065736e 64616572 282e2e2e 78323025     nse read...(%02x
  40d494:	00000a29 696d6e5b 69707320 46203a5d     )...[nmi spi]: F
  40d4a4:	656c6961 61642064 62206174 6b636f6c     ailed data block
  40d4b4:	61657220 62202c64 65207375 726f7272      read, bus error
  40d4c4:	0a2e2e2e 00000000 696d6e5b 69707320     ........[nmi spi
  40d4d4:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
  40d4e4:	6b636f6c 63726320 61657220 62202c64     lock crc read, b
  40d4f4:	65207375 726f7272 0a2e2e2e 00000000     us error........
  40d504:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  40d514:	6d632064 72202c64 20646165 20676572     d cmd, read reg 
  40d524:	38302528 2e2e2978 00000a2e 696d6e5b     (%08x)......[nmi
  40d534:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
  40d544:	65722064 6e6f7073 202c6573 64616572     d response, read
  40d554:	67657220 30252820 2e297838 000a2e2e      reg (%08x).....
  40d564:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  40d574:	61642064 72206174 2e646165 000a2e2e     d data read.....
  40d584:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  40d594:	6d632064 77202c64 65746972 67657220     d cmd, write reg
  40d5a4:	30252820 2e297838 000a2e2e 696d6e5b      (%08x).....[nmi
  40d5b4:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
  40d5c4:	65722064 6e6f7073 202c6573 74697277     d response, writ
  40d5d4:	65722065 25282067 29783830 0a2e2e2e     e reg (%08x)....
  40d5e4:	00000000 52524528 75432952 6e657272     ....(ERRR)Curren
  40d5f4:	253c2074 000a3e64 252f6425 64252f64     t <%d>..%d/%d/%d
  40d604:	25202d20 3a643230 64323025 3230253a      - %02d:%02d:%02
  40d614:	00000064 57202d2d 31434e49 20303035     d...-- WINC1500 
  40d624:	74616577 20726568 65696c63 6520746e     weather client e
  40d634:	706d6178 2d20656c 2d0a0d2d 4153202d     xample --..-- SA
  40d644:	3037454d 4c50582d 2d2d2044 2d2d0a0d     ME70-XPLD --..--
  40d654:	6d6f4320 656c6970 4a203a64 31206e75      Compiled: Jun 1
  40d664:	30322032 31203931 38303a37 2033343a     2 2019 17:08:43 
  40d674:	0a0d2d2d 00000000 6c696146 74206465     --......Failed t
  40d684:	7263206f 65746165 4e455320 20524f53     o create SENSOR 
  40d694:	41544144 73617420 000a0d6b 69666957     DATA task...Wifi
  40d6a4:	00000000 6c696146 74206465 7263206f     ....Failed to cr
  40d6b4:	65746165 66695720 61742069 0a0d6b73     eate Wifi task..
  40d6c4:	00000000 63656661 00000000 6c696146     ....afec....Fail
  40d6d4:	74206465 7263206f 65746165 73657420     ed to create tes
  40d6e4:	656c2074 61742064 0a0d6b73 00000000     t led task......
  40d6f4:	00747562 6f736572 5f65766c 203a6263     but.resolve_cb: 
  40d704:	49207325 64612050 73657264 73692073     %s IP address is
  40d714:	2e642520 252e6425 64252e64 0a0d0a0d      %d.%d.%d.%d....
  40d724:	00000000 6b636f73 6d5f7465 635f6773     ....socket_msg_c
  40d734:	656e6e6f 000a7463 6f6c6176 25203a72     onnect..valor: %
  40d744:	00000a64 656d6974 6d617473 25203a70     d...timestamp: %
  40d754:	00000a64 6f6c6176 64253d72 6d697426     d...valor=%d&tim
  40d764:	61747365 253d706d 00000073 54534f50     estamp=%s...POST
  40d774:	48202f20 2f505454 0d312e31 6e6f430a      / HTTP/1.1..Con
  40d784:	746e6574 7079542d 61203a65 696c7070     tent-Type: appli
  40d794:	69746163 782f6e6f 7777772d 726f662d     cation/x-www-for
  40d7a4:	72752d6d 636e656c 6465646f 6f430a0d     m-urlencoded..Co
  40d7b4:	6e65746e 654c2d74 6874676e 6425203a     ntent-Length: %d
  40d7c4:	0a0d0a0d 00007325 646e6573 00000a20     ....%s..send ...
  40d7d4:	6b636f73 635f7465 63203a62 656e6e6f     socket_cb: conne
  40d7e4:	65207463 726f7272 000a0d21 6b636f73     ct error!...sock
  40d7f4:	635f7465 72203a62 20766365 6f727265     et_cb: recv erro
  40d804:	0a0d2172 00000000 74617473 3a207375     r!......status :
  40d814:	0a642520 00000000 6e69616d 326d203a      %d.....main: m2
  40d824:	69775f6d 695f6966 2074696e 6c6c6163     m_wifi_init call
  40d834:	72726520 2821726f 0d296425 0000000a      error!(%d).....
  40d844:	6f63694e 2073616c 67657453 6e6e616d     Nicolas Stegmann
  40d854:	00000000 6e69616d 6f63203a 63656e6e     ....main: connec
  40d864:	676e6974 206f7420 69466957 20504120     ting to WiFi AP 
  40d874:	2e2e7325 000a0d2e 34333231 38373635     %s......12345678
  40d884:	00000039 74656e49 6f746120 203a206e     9...Inet aton : 
  40d894:	00006425 6b636f73 69207465 2074696e     %d..socket init 
  40d8a4:	0000000a 6e69616d 6166203a 64656c69     ....main: failed
  40d8b4:	206f7420 61657263 54206574 63205043      to create TCP c
  40d8c4:	6e65696c 6f732074 74656b63 72726520     lient socket err
  40d8d4:	0d21726f 0000000a 6b636f73 63207465     or!.....socket c
  40d8e4:	656e6e6f 6e697463 00000a67 2e323731     onnecting...172.
  40d8f4:	312e3032 00322e30 6f727265 00000a72     20.10.2.error...
  40d904:	63617473 766f206b 6c667265 2520776f     stack overflow %
  40d914:	73252078 00000a0d 69666977 3a62635f     x %s....wifi_cb:
  40d924:	4d324d20 4649575f 4f435f49 43454e4e      M2M_WIFI_CONNEC
  40d934:	0d444554 0000000a 69666977 3a62635f     TED.....wifi_cb:
  40d944:	4d324d20 4649575f 49445f49 4e4f4353      M2M_WIFI_DISCON
  40d954:	5443454e 0a0d4445 00000000 69666977     NECTED......wifi
  40d964:	3a62635f 20504920 72646461 20737365     _cb: IP address 
  40d974:	25207369 75252e75 2e75252e 0a0d7525     is %u.%u.%u.%u..
  40d984:	00000000                                ....

0040d988 <_global_impure_ptr>:
  40d988:	20400028 00464e49 00666e69 004e414e     (.@ INF.inf.NAN.
  40d998:	006e616e 33323130 37363534 42413938     nan.0123456789AB
  40d9a8:	46454443 00000000 33323130 37363534     CDEF....01234567
  40d9b8:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  40d9c8:	0000296c 00000030                       l)..0...

0040d9d0 <blanks.7223>:
  40d9d0:	20202020 20202020 20202020 20202020                     

0040d9e0 <zeroes.7224>:
  40d9e0:	30303030 30303030 30303030 30303030     0000000000000000

0040d9f0 <blanks.7217>:
  40d9f0:	20202020 20202020 20202020 20202020                     

0040da00 <zeroes.7218>:
  40da00:	30303030 30303030 30303030 30303030     0000000000000000
  40da10:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
  40da20:	00000043 49534f50 00000058 0000002e     C...POSIX.......

0040da30 <__mprec_bigtens>:
  40da30:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  40da40:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  40da50:	7f73bf3c 75154fdd                       <.s..O.u

0040da58 <__mprec_tens>:
  40da58:	00000000 3ff00000 00000000 40240000     .......?......$@
  40da68:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
  40da78:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
  40da88:	00000000 412e8480 00000000 416312d0     .......A......cA
  40da98:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
  40daa8:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
  40dab8:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
  40dac8:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
  40dad8:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
  40dae8:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
  40daf8:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
  40db08:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
  40db18:	79d99db4 44ea7843                       ...yCx.D

0040db20 <p05.6055>:
  40db20:	00000005 00000019 0000007d              ........}...

0040db2c <_ctype_>:
  40db2c:	20202000 20202020 28282020 20282828     .         ((((( 
  40db3c:	20202020 20202020 20202020 20202020                     
  40db4c:	10108820 10101010 10101010 10101010      ...............
  40db5c:	04040410 04040404 10040404 10101010     ................
  40db6c:	41411010 41414141 01010101 01010101     ..AAAAAA........
  40db7c:	01010101 01010101 01010101 10101010     ................
  40db8c:	42421010 42424242 02020202 02020202     ..BBBBBB........
  40db9c:	02020202 02020202 02020202 10101010     ................
  40dbac:	00000020 00000000 00000000 00000000      ...............
	...

0040dc30 <_init>:
  40dc30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40dc32:	bf00      	nop
  40dc34:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40dc36:	bc08      	pop	{r3}
  40dc38:	469e      	mov	lr, r3
  40dc3a:	4770      	bx	lr

0040dc3c <__init_array_start>:
  40dc3c:	00408d55 	.word	0x00408d55

0040dc40 <__frame_dummy_init_array_entry>:
  40dc40:	00400165                                e.@.

0040dc44 <_fini>:
  40dc44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40dc46:	bf00      	nop
  40dc48:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40dc4a:	bc08      	pop	{r3}
  40dc4c:	469e      	mov	lr, r3
  40dc4e:	4770      	bx	lr

0040dc50 <__fini_array_start>:
  40dc50:	00400141 	.word	0x00400141

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr
	...

2040000c <uxCriticalNesting>:
2040000c:	aaaa aaaa                                   ....

20400010 <egstrNmBusCapabilities>:
20400010:	1000 0000                                   ....

20400014 <clk_status_reg_adr>:
20400014:	000f 0000                                   ....

20400018 <g_interrupt_enabled>:
20400018:	0001 0000                                   ....

2040001c <SystemCoreClock>:
2040001c:	0900 003d                                   ..=.

20400020 <tcp_client_socket>:
20400020:	00ff 0000                                   ....

20400024 <_impure_ptr>:
20400024:	0028 2040                                   (.@ 

20400028 <impure_data>:
20400028:	0000 0000 0314 2040 037c 2040 03e4 2040     ......@ |.@ ..@ 
	...
204000d0:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
204000e0:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400450 <__atexit_recursive_mutex>:
20400450:	cb5c 2040                                   \.@ 

20400454 <__global_locale>:
20400454:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400474:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400494:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204004b4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204004d4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204004f4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400514:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400534:	ba8d 0040 ace9 0040 0000 0000 db2c 0040     ..@...@.....,.@.
20400544:	da2c 0040 d724 0040 d724 0040 d724 0040     ,.@.$.@.$.@.$.@.
20400554:	d724 0040 d724 0040 d724 0040 d724 0040     $.@.$.@.$.@.$.@.
20400564:	d724 0040 d724 0040 ffff ffff ffff ffff     $.@.$.@.........
20400574:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
2040059c:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...

204005c0 <__malloc_av_>:
	...
204005c8:	05c0 2040 05c0 2040 05c8 2040 05c8 2040     ..@ ..@ ..@ ..@ 
204005d8:	05d0 2040 05d0 2040 05d8 2040 05d8 2040     ..@ ..@ ..@ ..@ 
204005e8:	05e0 2040 05e0 2040 05e8 2040 05e8 2040     ..@ ..@ ..@ ..@ 
204005f8:	05f0 2040 05f0 2040 05f8 2040 05f8 2040     ..@ ..@ ..@ ..@ 
20400608:	0600 2040 0600 2040 0608 2040 0608 2040     ..@ ..@ ..@ ..@ 
20400618:	0610 2040 0610 2040 0618 2040 0618 2040     ..@ ..@ ..@ ..@ 
20400628:	0620 2040 0620 2040 0628 2040 0628 2040      .@  .@ (.@ (.@ 
20400638:	0630 2040 0630 2040 0638 2040 0638 2040     0.@ 0.@ 8.@ 8.@ 
20400648:	0640 2040 0640 2040 0648 2040 0648 2040     @.@ @.@ H.@ H.@ 
20400658:	0650 2040 0650 2040 0658 2040 0658 2040     P.@ P.@ X.@ X.@ 
20400668:	0660 2040 0660 2040 0668 2040 0668 2040     `.@ `.@ h.@ h.@ 
20400678:	0670 2040 0670 2040 0678 2040 0678 2040     p.@ p.@ x.@ x.@ 
20400688:	0680 2040 0680 2040 0688 2040 0688 2040     ..@ ..@ ..@ ..@ 
20400698:	0690 2040 0690 2040 0698 2040 0698 2040     ..@ ..@ ..@ ..@ 
204006a8:	06a0 2040 06a0 2040 06a8 2040 06a8 2040     ..@ ..@ ..@ ..@ 
204006b8:	06b0 2040 06b0 2040 06b8 2040 06b8 2040     ..@ ..@ ..@ ..@ 
204006c8:	06c0 2040 06c0 2040 06c8 2040 06c8 2040     ..@ ..@ ..@ ..@ 
204006d8:	06d0 2040 06d0 2040 06d8 2040 06d8 2040     ..@ ..@ ..@ ..@ 
204006e8:	06e0 2040 06e0 2040 06e8 2040 06e8 2040     ..@ ..@ ..@ ..@ 
204006f8:	06f0 2040 06f0 2040 06f8 2040 06f8 2040     ..@ ..@ ..@ ..@ 
20400708:	0700 2040 0700 2040 0708 2040 0708 2040     ..@ ..@ ..@ ..@ 
20400718:	0710 2040 0710 2040 0718 2040 0718 2040     ..@ ..@ ..@ ..@ 
20400728:	0720 2040 0720 2040 0728 2040 0728 2040      .@  .@ (.@ (.@ 
20400738:	0730 2040 0730 2040 0738 2040 0738 2040     0.@ 0.@ 8.@ 8.@ 
20400748:	0740 2040 0740 2040 0748 2040 0748 2040     @.@ @.@ H.@ H.@ 
20400758:	0750 2040 0750 2040 0758 2040 0758 2040     P.@ P.@ X.@ X.@ 
20400768:	0760 2040 0760 2040 0768 2040 0768 2040     `.@ `.@ h.@ h.@ 
20400778:	0770 2040 0770 2040 0778 2040 0778 2040     p.@ p.@ x.@ x.@ 
20400788:	0780 2040 0780 2040 0788 2040 0788 2040     ..@ ..@ ..@ ..@ 
20400798:	0790 2040 0790 2040 0798 2040 0798 2040     ..@ ..@ ..@ ..@ 
204007a8:	07a0 2040 07a0 2040 07a8 2040 07a8 2040     ..@ ..@ ..@ ..@ 
204007b8:	07b0 2040 07b0 2040 07b8 2040 07b8 2040     ..@ ..@ ..@ ..@ 
204007c8:	07c0 2040 07c0 2040 07c8 2040 07c8 2040     ..@ ..@ ..@ ..@ 
204007d8:	07d0 2040 07d0 2040 07d8 2040 07d8 2040     ..@ ..@ ..@ ..@ 
204007e8:	07e0 2040 07e0 2040 07e8 2040 07e8 2040     ..@ ..@ ..@ ..@ 
204007f8:	07f0 2040 07f0 2040 07f8 2040 07f8 2040     ..@ ..@ ..@ ..@ 
20400808:	0800 2040 0800 2040 0808 2040 0808 2040     ..@ ..@ ..@ ..@ 
20400818:	0810 2040 0810 2040 0818 2040 0818 2040     ..@ ..@ ..@ ..@ 
20400828:	0820 2040 0820 2040 0828 2040 0828 2040      .@  .@ (.@ (.@ 
20400838:	0830 2040 0830 2040 0838 2040 0838 2040     0.@ 0.@ 8.@ 8.@ 
20400848:	0840 2040 0840 2040 0848 2040 0848 2040     @.@ @.@ H.@ H.@ 
20400858:	0850 2040 0850 2040 0858 2040 0858 2040     P.@ P.@ X.@ X.@ 
20400868:	0860 2040 0860 2040 0868 2040 0868 2040     `.@ `.@ h.@ h.@ 
20400878:	0870 2040 0870 2040 0878 2040 0878 2040     p.@ p.@ x.@ x.@ 
20400888:	0880 2040 0880 2040 0888 2040 0888 2040     ..@ ..@ ..@ ..@ 
20400898:	0890 2040 0890 2040 0898 2040 0898 2040     ..@ ..@ ..@ ..@ 
204008a8:	08a0 2040 08a0 2040 08a8 2040 08a8 2040     ..@ ..@ ..@ ..@ 
204008b8:	08b0 2040 08b0 2040 08b8 2040 08b8 2040     ..@ ..@ ..@ ..@ 
204008c8:	08c0 2040 08c0 2040 08c8 2040 08c8 2040     ..@ ..@ ..@ ..@ 
204008d8:	08d0 2040 08d0 2040 08d8 2040 08d8 2040     ..@ ..@ ..@ ..@ 
204008e8:	08e0 2040 08e0 2040 08e8 2040 08e8 2040     ..@ ..@ ..@ ..@ 
204008f8:	08f0 2040 08f0 2040 08f8 2040 08f8 2040     ..@ ..@ ..@ ..@ 
20400908:	0900 2040 0900 2040 0908 2040 0908 2040     ..@ ..@ ..@ ..@ 
20400918:	0910 2040 0910 2040 0918 2040 0918 2040     ..@ ..@ ..@ ..@ 
20400928:	0920 2040 0920 2040 0928 2040 0928 2040      .@  .@ (.@ (.@ 
20400938:	0930 2040 0930 2040 0938 2040 0938 2040     0.@ 0.@ 8.@ 8.@ 
20400948:	0940 2040 0940 2040 0948 2040 0948 2040     @.@ @.@ H.@ H.@ 
20400958:	0950 2040 0950 2040 0958 2040 0958 2040     P.@ P.@ X.@ X.@ 
20400968:	0960 2040 0960 2040 0968 2040 0968 2040     `.@ `.@ h.@ h.@ 
20400978:	0970 2040 0970 2040 0978 2040 0978 2040     p.@ p.@ x.@ x.@ 
20400988:	0980 2040 0980 2040 0988 2040 0988 2040     ..@ ..@ ..@ ..@ 
20400998:	0990 2040 0990 2040 0998 2040 0998 2040     ..@ ..@ ..@ ..@ 
204009a8:	09a0 2040 09a0 2040 09a8 2040 09a8 2040     ..@ ..@ ..@ ..@ 
204009b8:	09b0 2040 09b0 2040 09b8 2040 09b8 2040     ..@ ..@ ..@ ..@ 

204009c8 <__malloc_sbrk_base>:
204009c8:	ffff ffff                                   ....

204009cc <__malloc_trim_threshold>:
204009cc:	0000 0002                                   ....
